
s6_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf4  08003cf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cf4  08003cf4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cf4  08003cf4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003d08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003d08  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd50  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de1  00000000  00000000  0002cd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0002eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0ab  00000000  00000000  00030640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8ea  00000000  00000000  0004c6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb309  00000000  00000000  0005afd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001162de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  00116330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c48 	.word	0x08003c48

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003c48 	.word	0x08003c48

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
    uint16_t AD_RES = 0;
 8000222:	1dbb      	adds	r3, r7, #6
 8000224:	2200      	movs	r2, #0
 8000226:	801a      	strh	r2, [r3, #0]

    HAL_Init();
 8000228:	f000 fab0 	bl	800078c <HAL_Init>
    SystemClock_Config();
 800022c:	f000 f82e 	bl	800028c <SystemClock_Config>
    MX_GPIO_Init();
 8000230:	f000 f972 	bl	8000518 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000234:	f000 f888 	bl	8000348 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000238:	f000 f8ee 	bl	8000418 <MX_TIM2_Init>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <main+0x68>)
 800023e:	2100      	movs	r1, #0
 8000240:	0018      	movs	r0, r3
 8000242:	f002 fd8b 	bl	8002d5c <HAL_TIM_PWM_Start>
    // Calibrate The ADC On Power-Up For Better Accuracy
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0x6c>)
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fa73 	bl	8001734 <HAL_ADCEx_Calibration_Start>

    while (1)
    {
       // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x6c>)
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fe45 	bl	8000ee0 <HAL_ADC_Start>
       // Poll ADC1 Perihperal & TimeOut = 1mSec
        HAL_ADC_PollForConversion(&hadc1, 1);
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x6c>)
 8000258:	2101      	movs	r1, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fe8e 	bl	8000f7c <HAL_ADC_PollForConversion>
       // Read The ADC Conversion Result & Map It To PWM DutyCycle
        AD_RES = HAL_ADC_GetValue(&hadc1);
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <main+0x6c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f000 ff1e 	bl	80010a4 <HAL_ADC_GetValue>
 8000268:	0002      	movs	r2, r0
 800026a:	1dbb      	adds	r3, r7, #6
 800026c:	801a      	strh	r2, [r3, #0]


        TIM2->CCR1 = (AD_RES<<4);
 800026e:	1dbb      	adds	r3, r7, #6
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	011a      	lsls	r2, r3, #4
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	635a      	str	r2, [r3, #52]	; 0x34

        HAL_Delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 fb0c 	bl	8000898 <HAL_Delay>
        HAL_ADC_Start(&hadc1);
 8000280:	e7e5      	b.n	800024e <main+0x32>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	2000008c 	.word	0x2000008c
 8000288:	20000028 	.word	0x20000028

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b095      	sub	sp, #84	; 0x54
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2414      	movs	r4, #20
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	233c      	movs	r3, #60	; 0x3c
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f003 fccb 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f003 fcc4 	bl	8003c38 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f001 fd33 	bl	8001d20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2240      	movs	r2, #64	; 0x40
 80002d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2202      	movs	r2, #2
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2208      	movs	r2, #8
 80002ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	0292      	lsls	r2, r2, #10
 80002f4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	0492      	lsls	r2, r2, #18
 80002fc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2280      	movs	r2, #128	; 0x80
 8000302:	0592      	lsls	r2, r2, #22
 8000304:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	187b      	adds	r3, r7, r1
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fd49 	bl	8001da0 <HAL_RCC_OscConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000312:	f000 f917 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2202      	movs	r2, #2
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2102      	movs	r1, #2
 8000332:	0018      	movs	r0, r3
 8000334:	f002 f894 	bl	8002460 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800033c:	f000 f902 	bl	8000544 <Error_Handler>
  }
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b015      	add	sp, #84	; 0x54
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	0018      	movs	r0, r3
 8000352:	230c      	movs	r3, #12
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f003 fc6e 	bl	8003c38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800035c:	4b2b      	ldr	r3, [pc, #172]	; (800040c <MX_ADC1_Init+0xc4>)
 800035e:	4a2c      	ldr	r2, [pc, #176]	; (8000410 <MX_ADC1_Init+0xc8>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000362:	4b2a      	ldr	r3, [pc, #168]	; (800040c <MX_ADC1_Init+0xc4>)
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	05d2      	lsls	r2, r2, #23
 8000368:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800036a:	4b28      	ldr	r3, [pc, #160]	; (800040c <MX_ADC1_Init+0xc4>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000370:	4b26      	ldr	r3, [pc, #152]	; (800040c <MX_ADC1_Init+0xc4>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000376:	4b25      	ldr	r3, [pc, #148]	; (800040c <MX_ADC1_Init+0xc4>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <MX_ADC1_Init+0xc4>)
 800037e:	2204      	movs	r2, #4
 8000380:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <MX_ADC1_Init+0xc4>)
 8000384:	2200      	movs	r2, #0
 8000386:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000388:	4b20      	ldr	r3, [pc, #128]	; (800040c <MX_ADC1_Init+0xc4>)
 800038a:	2200      	movs	r2, #0
 800038c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <MX_ADC1_Init+0xc4>)
 8000390:	2201      	movs	r2, #1
 8000392:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_ADC1_Init+0xc4>)
 8000396:	2201      	movs	r2, #1
 8000398:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039a:	4b1c      	ldr	r3, [pc, #112]	; (800040c <MX_ADC1_Init+0xc4>)
 800039c:	2200      	movs	r2, #0
 800039e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_ADC1_Init+0xc4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <MX_ADC1_Init+0xc4>)
 80003a8:	222c      	movs	r2, #44	; 0x2c
 80003aa:	2100      	movs	r1, #0
 80003ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ae:	4b17      	ldr	r3, [pc, #92]	; (800040c <MX_ADC1_Init+0xc4>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <MX_ADC1_Init+0xc4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_ADC1_Init+0xc4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_ADC1_Init+0xc4>)
 80003c2:	223c      	movs	r2, #60	; 0x3c
 80003c4:	2100      	movs	r1, #0
 80003c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_ADC1_Init+0xc4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_ADC1_Init+0xc4>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fbdd 	bl	8000b90 <HAL_ADC_Init>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80003da:	f000 f8b3 	bl	8000544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <MX_ADC1_Init+0xcc>)
 80003e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f0:	1d3a      	adds	r2, r7, #4
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_ADC1_Init+0xc4>)
 80003f4:	0011      	movs	r1, r2
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fe60 	bl	80010bc <HAL_ADC_ConfigChannel>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000400:	f000 f8a0 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	b004      	add	sp, #16
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000028 	.word	0x20000028
 8000410:	40012400 	.word	0x40012400
 8000414:	1c000080 	.word	0x1c000080

08000418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08e      	sub	sp, #56	; 0x38
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	2328      	movs	r3, #40	; 0x28
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f003 fc05 	bl	8003c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042e:	231c      	movs	r3, #28
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	230c      	movs	r3, #12
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f003 fbfd 	bl	8003c38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043e:	003b      	movs	r3, r7
 8000440:	0018      	movs	r0, r3
 8000442:	231c      	movs	r3, #28
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f003 fbf6 	bl	8003c38 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800044c:	4b30      	ldr	r3, [pc, #192]	; (8000510 <MX_TIM2_Init+0xf8>)
 800044e:	2280      	movs	r2, #128	; 0x80
 8000450:	05d2      	lsls	r2, r2, #23
 8000452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_TIM2_Init+0xf8>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 ;
 8000460:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <MX_TIM2_Init+0xfc>)
 8000464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000466:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <MX_TIM2_Init+0xf8>)
 800046e:	2280      	movs	r2, #128	; 0x80
 8000470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000472:	4b27      	ldr	r3, [pc, #156]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fbb9 	bl	8002bec <HAL_TIM_Base_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800047e:	f000 f861 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000482:	2128      	movs	r1, #40	; 0x28
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	0152      	lsls	r2, r2, #5
 800048a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800048c:	187a      	adds	r2, r7, r1
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f002 fe52 	bl	800313c <HAL_TIM_ConfigClockSource>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800049c:	f000 f852 	bl	8000544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_TIM2_Init+0xf8>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fbfa 	bl	8002c9c <HAL_TIM_PWM_Init>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004ac:	f000 f84a 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b0:	211c      	movs	r1, #28
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004be:	187a      	adds	r2, r7, r1
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_TIM2_Init+0xf8>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 fb1d 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004ce:	f000 f839 	bl	8000544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2260      	movs	r2, #96	; 0x60
 80004d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ea:	0039      	movs	r1, r7
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_TIM2_Init+0xf8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f002 fd23 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80004fa:	f000 f823 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <MX_TIM2_Init+0xf8>)
 8000500:	0018      	movs	r0, r3
 8000502:	f000 f8c1 	bl	8000688 <HAL_TIM_MspPostInit>

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b00e      	add	sp, #56	; 0x38
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	2000008c 	.word	0x2000008c
 8000514:	0000ffff 	.word	0x0000ffff

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_GPIO_Init+0x28>)
 8000520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_GPIO_Init+0x28>)
 8000524:	2101      	movs	r1, #1
 8000526:	430a      	orrs	r2, r1
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <MX_GPIO_Init+0x28>)
 800052c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052e:	2201      	movs	r2, #1
 8000530:	4013      	ands	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x44>)
 8000558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <HAL_MspInit+0x44>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	641a      	str	r2, [r3, #64]	; 0x40
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x44>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_MspInit+0x44>)
 8000570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_MspInit+0x44>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	0549      	lsls	r1, r1, #21
 8000578:	430a      	orrs	r2, r1
 800057a:	63da      	str	r2, [r3, #60]	; 0x3c
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_MspInit+0x44>)
 800057e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	055b      	lsls	r3, r3, #21
 8000584:	4013      	ands	r3, r2
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b09d      	sub	sp, #116	; 0x74
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	235c      	movs	r3, #92	; 0x5c
 80005a2:	18fb      	adds	r3, r7, r3
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f003 fb44 	bl	8003c38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b0:	2410      	movs	r4, #16
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	0018      	movs	r0, r3
 80005b6:	234c      	movs	r3, #76	; 0x4c
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f003 fb3c 	bl	8003c38 <memset>
  if(hadc->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <HAL_ADC_MspInit+0xb0>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d139      	bne.n	800063e <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	01d2      	lsls	r2, r2, #7
 80005d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 f8ca 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80005e4:	f7ff ffae 	bl	8000544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_ADC_MspInit+0xb4>)
 80005ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0xb4>)
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0349      	lsls	r1, r1, #13
 80005f2:	430a      	orrs	r2, r1
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_MspInit+0xb4>)
 80005f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	035b      	lsls	r3, r3, #13
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_ADC_MspInit+0xb4>)
 8000606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_ADC_MspInit+0xb4>)
 800060a:	2101      	movs	r1, #1
 800060c:	430a      	orrs	r2, r1
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_ADC_MspInit+0xb4>)
 8000612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000614:	2201      	movs	r2, #1
 8000616:	4013      	ands	r3, r2
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800061c:	215c      	movs	r1, #92	; 0x5c
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2203      	movs	r2, #3
 8000628:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	187a      	adds	r2, r7, r1
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fa05 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b01d      	add	sp, #116	; 0x74
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40012400 	.word	0x40012400
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	429a      	cmp	r2, r3
 8000662:	d10b      	bne.n	800067c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 8000666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 800066a:	2101      	movs	r1, #1
 800066c:	430a      	orrs	r2, r1
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_TIM_Base_MspInit+0x34>)
 8000672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000674:	2201      	movs	r2, #1
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b004      	add	sp, #16
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	240c      	movs	r4, #12
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	2314      	movs	r3, #20
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 facc 	bl	8003c38 <memset>
  if(htim->Instance==TIM2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d122      	bne.n	80006f2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <HAL_TIM_MspPostInit+0x74>)
 80006ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_TIM_MspPostInit+0x74>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	430a      	orrs	r2, r1
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_TIM_MspPostInit+0x74>)
 80006ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006bc:	2201      	movs	r2, #1
 80006be:	4013      	ands	r3, r2
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2202      	movs	r2, #2
 80006d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	187a      	adds	r2, r7, r1
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 f9ab 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b009      	add	sp, #36	; 0x24
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f89c 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800073c:	f7ff fff7 	bl	800072e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f003 fa43 	bl	8003bf0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800076a:	f7ff fd57 	bl	800021c <main>

0800076e <LoopForever>:

LoopForever:
  b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800077c:	08003cfc 	.word	0x08003cfc
  ldr r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000784:	200000dc 	.word	0x200000dc

08000788 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_COMP_IRQHandler>
	...

0800078c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_Init+0x3c>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_Init+0x3c>)
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	0049      	lsls	r1, r1, #1
 80007a2:	430a      	orrs	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a6:	2003      	movs	r0, #3
 80007a8:	f000 f810 	bl	80007cc <HAL_InitTick>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d003      	beq.n	80007b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e001      	b.n	80007bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff feca 	bl	8000550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <HAL_InitTick+0x88>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d02b      	beq.n	800083c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_InitTick+0x8c>)
 80007e6:	681c      	ldr	r4, [r3, #0]
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <HAL_InitTick+0x88>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	0019      	movs	r1, r3
 80007ee:	23fa      	movs	r3, #250	; 0xfa
 80007f0:	0098      	lsls	r0, r3, #2
 80007f2:	f7ff fc87 	bl	8000104 <__udivsi3>
 80007f6:	0003      	movs	r3, r0
 80007f8:	0019      	movs	r1, r3
 80007fa:	0020      	movs	r0, r4
 80007fc:	f7ff fc82 	bl	8000104 <__udivsi3>
 8000800:	0003      	movs	r3, r0
 8000802:	0018      	movs	r0, r3
 8000804:	f001 f913 	bl	8001a2e <HAL_SYSTICK_Config>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d112      	bne.n	8000832 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d80a      	bhi.n	8000828 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	2301      	movs	r3, #1
 8000816:	425b      	negs	r3, r3
 8000818:	2200      	movs	r2, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f8f2 	bl	8001a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_InitTick+0x90>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e00d      	b.n	8000844 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000828:	230f      	movs	r3, #15
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e008      	b.n	8000844 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000832:	230f      	movs	r3, #15
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e003      	b.n	8000844 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800083c:	230f      	movs	r3, #15
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000844:	230f      	movs	r3, #15
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	781b      	ldrb	r3, [r3, #0]
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b005      	add	sp, #20
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000008 	.word	0x20000008
 8000858:	20000000 	.word	0x20000000
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	18d2      	adds	r2, r2, r3
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_IncTick+0x20>)
 8000872:	601a      	str	r2, [r3, #0]
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000008 	.word	0x20000008
 8000880:	200000d8 	.word	0x200000d8

08000884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_GetTick+0x10>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	200000d8 	.word	0x200000d8

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff fff0 	bl	8000884 <HAL_GetTick>
 80008a4:	0003      	movs	r3, r0
 80008a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <HAL_Delay+0x44>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	001a      	movs	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	189b      	adds	r3, r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	f7ff ffe0 	bl	8000884 <HAL_GetTick>
 80008c4:	0002      	movs	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008

080008e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80008f0:	401a      	ands	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	fe3fffff 	.word	0xfe3fffff

08000908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	23e0      	movs	r3, #224	; 0xe0
 8000916:	045b      	lsls	r3, r3, #17
 8000918:	4013      	ands	r3, r2
}
 800091a:	0018      	movs	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}

08000922 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	2104      	movs	r1, #4
 8000936:	400a      	ands	r2, r1
 8000938:	2107      	movs	r1, #7
 800093a:	4091      	lsls	r1, r2
 800093c:	000a      	movs	r2, r1
 800093e:	43d2      	mvns	r2, r2
 8000940:	401a      	ands	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	2104      	movs	r1, #4
 8000946:	400b      	ands	r3, r1
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	4099      	lsls	r1, r3
 800094c:	000b      	movs	r3, r1
 800094e:	431a      	orrs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}

0800095c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	2104      	movs	r1, #4
 800096e:	400a      	ands	r2, r1
 8000970:	2107      	movs	r1, #7
 8000972:	4091      	lsls	r1, r2
 8000974:	000a      	movs	r2, r1
 8000976:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2104      	movs	r1, #4
 800097c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800097e:	40da      	lsrs	r2, r3
 8000980:	0013      	movs	r3, r2
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}

0800098a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	23c0      	movs	r3, #192	; 0xc0
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4013      	ands	r3, r2
 800099c:	d101      	bne.n	80009a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	211f      	movs	r1, #31
 80009c0:	400a      	ands	r2, r1
 80009c2:	210f      	movs	r1, #15
 80009c4:	4091      	lsls	r1, r2
 80009c6:	000a      	movs	r2, r1
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	0e9b      	lsrs	r3, r3, #26
 80009d0:	210f      	movs	r1, #15
 80009d2:	4019      	ands	r1, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	201f      	movs	r0, #31
 80009d8:	4003      	ands	r3, r0
 80009da:	4099      	lsls	r1, r3
 80009dc:	000b      	movs	r3, r1
 80009de:	431a      	orrs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b004      	add	sp, #16
 80009ea:	bd80      	pop	{r7, pc}

080009ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	035b      	lsls	r3, r3, #13
 80009fe:	0b5b      	lsrs	r3, r3, #13
 8000a00:	431a      	orrs	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	0352      	lsls	r2, r2, #13
 8000a20:	0b52      	lsrs	r2, r2, #13
 8000a22:	43d2      	mvns	r2, r2
 8000a24:	401a      	ands	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	0212      	lsls	r2, r2, #8
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	400b      	ands	r3, r1
 8000a54:	4904      	ldr	r1, [pc, #16]	; (8000a68 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a56:	400b      	ands	r3, r1
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	07ffff00 	.word	0x07ffff00

08000a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0552      	lsls	r2, r2, #21
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	6fffffe8 	.word	0x6fffffe8

08000a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	055b      	lsls	r3, r3, #21
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	055b      	lsls	r3, r3, #21
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d101      	bne.n	8000ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <LL_ADC_Enable+0x20>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	2201      	movs	r2, #1
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	7fffffe8 	.word	0x7fffffe8

08000ae0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <LL_ADC_Disable+0x20>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	2202      	movs	r2, #2
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	7fffffe8 	.word	0x7fffffe8

08000b04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	2201      	movs	r2, #1
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d101      	bne.n	8000b1c <LL_ADC_IsEnabled+0x18>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <LL_ADC_IsEnabled+0x1a>
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2202      	movs	r2, #2
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d101      	bne.n	8000b3e <LL_ADC_IsDisableOngoing+0x18>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <LL_ADC_IsDisableOngoing+0x1a>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <LL_ADC_REG_StartConversion+0x20>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	2204      	movs	r2, #4
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	7fffffe8 	.word	0x7fffffe8

08000b6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2204      	movs	r2, #4
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d101      	bne.n	8000b84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	231f      	movs	r3, #31
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e17f      	b.n	8000eb6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10a      	bne.n	8000bd4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff fce9 	bl	8000598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2254      	movs	r2, #84	; 0x54
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff5b 	bl	8000a94 <LL_ADC_IsInternalRegulatorEnabled>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d115      	bne.n	8000c0e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff ff40 	bl	8000a6c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bec:	4bb4      	ldr	r3, [pc, #720]	; (8000ec0 <HAL_ADC_Init+0x330>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	49b4      	ldr	r1, [pc, #720]	; (8000ec4 <HAL_ADC_Init+0x334>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fa86 	bl	8000104 <__udivsi3>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c00:	e002      	b.n	8000c08 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f9      	bne.n	8000c02 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff ff3e 	bl	8000a94 <LL_ADC_IsInternalRegulatorEnabled>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d10f      	bne.n	8000c3c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c20:	2210      	movs	r2, #16
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c34:	231f      	movs	r3, #31
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ff93 	bl	8000b6c <LL_ADC_REG_IsConversionOngoing>
 8000c46:	0003      	movs	r3, r0
 8000c48:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	2210      	movs	r2, #16
 8000c50:	4013      	ands	r3, r2
 8000c52:	d000      	beq.n	8000c56 <HAL_ADC_Init+0xc6>
 8000c54:	e122      	b.n	8000e9c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d000      	beq.n	8000c5e <HAL_ADC_Init+0xce>
 8000c5c:	e11e      	b.n	8000e9c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	4a99      	ldr	r2, [pc, #612]	; (8000ec8 <HAL_ADC_Init+0x338>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	2202      	movs	r2, #2
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff ff46 	bl	8000b04 <LL_ADC_IsEnabled>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d000      	beq.n	8000c7e <HAL_ADC_Init+0xee>
 8000c7c:	e0ad      	b.n	8000dda <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7e1b      	ldrb	r3, [r3, #24]
 8000c86:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c88:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7e5b      	ldrb	r3, [r3, #25]
 8000c8e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000c90:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7e9b      	ldrb	r3, [r3, #26]
 8000c96:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000c98:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <HAL_ADC_Init+0x118>
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	015b      	lsls	r3, r3, #5
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_Init+0x11a>
 8000ca8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000caa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000cb0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da04      	bge.n	8000cc4 <HAL_ADC_Init+0x134>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	085b      	lsrs	r3, r3, #1
 8000cc2:	e001      	b.n	8000cc8 <HAL_ADC_Init+0x138>
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000cc8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	212c      	movs	r1, #44	; 0x2c
 8000cce:	5c5b      	ldrb	r3, [r3, r1]
 8000cd0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000cd2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2220      	movs	r2, #32
 8000cde:	5c9b      	ldrb	r3, [r3, r2]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d115      	bne.n	8000d10 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7e9b      	ldrb	r3, [r3, #26]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d105      	bne.n	8000cf8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	0252      	lsls	r2, r2, #9
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	e00b      	b.n	8000d10 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	2220      	movs	r2, #32
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d08:	2201      	movs	r2, #1
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d1c:	23e0      	movs	r3, #224	; 0xe0
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d26:	4313      	orrs	r3, r2
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	4a65      	ldr	r2, [pc, #404]	; (8000ecc <HAL_ADC_Init+0x33c>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	0019      	movs	r1, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	0f9b      	lsrs	r3, r3, #30
 8000d4a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d50:	4313      	orrs	r3, r2
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	223c      	movs	r2, #60	; 0x3c
 8000d5c:	5c9b      	ldrb	r3, [r3, r2]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d111      	bne.n	8000d86 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	0f9b      	lsrs	r3, r3, #30
 8000d68:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d6e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000d74:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000d7a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	2201      	movs	r2, #1
 8000d82:	4313      	orrs	r3, r2
 8000d84:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a50      	ldr	r2, [pc, #320]	; (8000ed0 <HAL_ADC_Init+0x340>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	0019      	movs	r1, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	23c0      	movs	r3, #192	; 0xc0
 8000da2:	061b      	lsls	r3, r3, #24
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d018      	beq.n	8000dda <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d012      	beq.n	8000dda <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	061b      	lsls	r3, r3, #24
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d00c      	beq.n	8000dda <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000dc0:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <HAL_ADC_Init+0x344>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a44      	ldr	r2, [pc, #272]	; (8000ed8 <HAL_ADC_Init+0x348>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	23f0      	movs	r3, #240	; 0xf0
 8000dd0:	039b      	lsls	r3, r3, #14
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <HAL_ADC_Init+0x344>)
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f7ff fd9c 	bl	8000922 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6818      	ldr	r0, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	493a      	ldr	r1, [pc, #232]	; (8000edc <HAL_ADC_Init+0x34c>)
 8000df4:	001a      	movs	r2, r3
 8000df6:	f7ff fd94 	bl	8000922 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d109      	bne.n	8000e16 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4249      	negs	r1, r1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
 8000e14:	e018      	b.n	8000e48 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691a      	ldr	r2, [r3, #16]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	039b      	lsls	r3, r3, #14
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d112      	bne.n	8000e48 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	221c      	movs	r2, #28
 8000e32:	4013      	ands	r3, r2
 8000e34:	2210      	movs	r2, #16
 8000e36:	4252      	negs	r2, r2
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fd84 	bl	800095c <LL_ADC_GetSamplingTimeCommonChannels>
 8000e54:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d10b      	bne.n	8000e76 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	2203      	movs	r2, #3
 8000e6a:	4393      	bics	r3, r2
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e74:	e01c      	b.n	8000eb0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	2212      	movs	r2, #18
 8000e7c:	4393      	bics	r3, r2
 8000e7e:	2210      	movs	r2, #16
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e92:	231f      	movs	r3, #31
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e9a:	e009      	b.n	8000eb0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ea8:	231f      	movs	r3, #31
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000eb0:	231f      	movs	r3, #31
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	781b      	ldrb	r3, [r3, #0]
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b008      	add	sp, #32
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	00030d40 	.word	0x00030d40
 8000ec8:	fffffefd 	.word	0xfffffefd
 8000ecc:	fffe0201 	.word	0xfffe0201
 8000ed0:	1ffffc02 	.word	0x1ffffc02
 8000ed4:	40012708 	.word	0x40012708
 8000ed8:	ffc3ffff 	.word	0xffc3ffff
 8000edc:	07ffff04 	.word	0x07ffff04

08000ee0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff fe3d 	bl	8000b6c <LL_ADC_REG_IsConversionOngoing>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d135      	bne.n	8000f62 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2254      	movs	r2, #84	; 0x54
 8000efa:	5c9b      	ldrb	r3, [r3, r2]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_ADC_Start+0x24>
 8000f00:	2302      	movs	r3, #2
 8000f02:	e035      	b.n	8000f70 <HAL_ADC_Start+0x90>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2254      	movs	r2, #84	; 0x54
 8000f08:	2101      	movs	r1, #1
 8000f0a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f0c:	250f      	movs	r5, #15
 8000f0e:	197c      	adds	r4, r7, r5
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 faaa 	bl	800146c <ADC_Enable>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f1c:	197b      	adds	r3, r7, r5
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d119      	bne.n	8000f58 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_ADC_Start+0x98>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	221c      	movs	r2, #28
 8000f42:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2254      	movs	r2, #84	; 0x54
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff fdf9 	bl	8000b48 <LL_ADC_REG_StartConversion>
 8000f56:	e008      	b.n	8000f6a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2254      	movs	r2, #84	; 0x54
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	5499      	strb	r1, [r3, r2]
 8000f60:	e003      	b.n	8000f6a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	2202      	movs	r2, #2
 8000f68:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b004      	add	sp, #16
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	fffff0fe 	.word	0xfffff0fe

08000f7c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d102      	bne.n	8000f94 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e00f      	b.n	8000fb4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e072      	b.n	8001096 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff fc66 	bl	8000884 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000fbc:	e01f      	b.n	8000ffe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	d01c      	beq.n	8000ffe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000fc4:	f7ff fc5e 	bl	8000884 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d302      	bcc.n	8000fda <HAL_ADC_PollForConversion+0x5e>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d111      	bne.n	8000ffe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d10b      	bne.n	8000ffe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	2204      	movs	r2, #4
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2254      	movs	r2, #84	; 0x54
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e04b      	b.n	8001096 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4013      	ands	r3, r2
 8001008:	d0d9      	beq.n	8000fbe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff fcb4 	bl	800098a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d02e      	beq.n	8001084 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7e9b      	ldrb	r3, [r3, #26]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d12a      	bne.n	8001084 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2208      	movs	r2, #8
 8001036:	4013      	ands	r3, r2
 8001038:	2b08      	cmp	r3, #8
 800103a:	d123      	bne.n	8001084 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fd93 	bl	8000b6c <LL_ADC_REG_IsConversionOngoing>
 8001046:	1e03      	subs	r3, r0, #0
 8001048:	d110      	bne.n	800106c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	210c      	movs	r1, #12
 8001056:	438a      	bics	r2, r1
 8001058:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_ADC_PollForConversion+0x124>)
 8001060:	4013      	ands	r3, r2
 8001062:	2201      	movs	r2, #1
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	659a      	str	r2, [r3, #88]	; 0x58
 800106a:	e00b      	b.n	8001084 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	2220      	movs	r2, #32
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	2201      	movs	r2, #1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e1b      	ldrb	r3, [r3, #24]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	220c      	movs	r2, #12
 8001092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	fffffefe 	.word	0xfffffefe

080010a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b002      	add	sp, #8
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c6:	2317      	movs	r3, #23
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2254      	movs	r2, #84	; 0x54
 80010d6:	5c9b      	ldrb	r3, [r3, r2]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x24>
 80010dc:	2302      	movs	r3, #2
 80010de:	e1c0      	b.n	8001462 <HAL_ADC_ConfigChannel+0x3a6>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2254      	movs	r2, #84	; 0x54
 80010e4:	2101      	movs	r1, #1
 80010e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fd3d 	bl	8000b6c <LL_ADC_REG_IsConversionOngoing>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d000      	beq.n	80010f8 <HAL_ADC_ConfigChannel+0x3c>
 80010f6:	e1a3      	b.n	8001440 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d100      	bne.n	8001102 <HAL_ADC_ConfigChannel+0x46>
 8001100:	e143      	b.n	800138a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	061b      	lsls	r3, r3, #24
 800110a:	429a      	cmp	r2, r3
 800110c:	d004      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001112:	4ac1      	ldr	r2, [pc, #772]	; (8001418 <HAL_ADC_ConfigChannel+0x35c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d108      	bne.n	800112a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0019      	movs	r1, r3
 8001122:	0010      	movs	r0, r2
 8001124:	f7ff fc62 	bl	80009ec <LL_ADC_REG_SetSequencerChAdd>
 8001128:	e0c9      	b.n	80012be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	211f      	movs	r1, #31
 8001134:	400b      	ands	r3, r1
 8001136:	210f      	movs	r1, #15
 8001138:	4099      	lsls	r1, r3
 800113a:	000b      	movs	r3, r1
 800113c:	43db      	mvns	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	0019      	movs	r1, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	035b      	lsls	r3, r3, #13
 8001148:	0b5b      	lsrs	r3, r3, #13
 800114a:	d105      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x9c>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0e9b      	lsrs	r3, r3, #26
 8001152:	221f      	movs	r2, #31
 8001154:	4013      	ands	r3, r2
 8001156:	e098      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2201      	movs	r2, #1
 800115e:	4013      	ands	r3, r2
 8001160:	d000      	beq.n	8001164 <HAL_ADC_ConfigChannel+0xa8>
 8001162:	e091      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1cc>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d000      	beq.n	8001170 <HAL_ADC_ConfigChannel+0xb4>
 800116e:	e089      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1c8>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2204      	movs	r2, #4
 8001176:	4013      	ands	r3, r2
 8001178:	d000      	beq.n	800117c <HAL_ADC_ConfigChannel+0xc0>
 800117a:	e081      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1c4>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2208      	movs	r2, #8
 8001182:	4013      	ands	r3, r2
 8001184:	d000      	beq.n	8001188 <HAL_ADC_ConfigChannel+0xcc>
 8001186:	e079      	b.n	800127c <HAL_ADC_ConfigChannel+0x1c0>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2210      	movs	r2, #16
 800118e:	4013      	ands	r3, r2
 8001190:	d000      	beq.n	8001194 <HAL_ADC_ConfigChannel+0xd8>
 8001192:	e071      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1bc>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2220      	movs	r2, #32
 800119a:	4013      	ands	r3, r2
 800119c:	d000      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0xe4>
 800119e:	e069      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1b8>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2240      	movs	r2, #64	; 0x40
 80011a6:	4013      	ands	r3, r2
 80011a8:	d000      	beq.n	80011ac <HAL_ADC_ConfigChannel+0xf0>
 80011aa:	e061      	b.n	8001270 <HAL_ADC_ConfigChannel+0x1b4>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	4013      	ands	r3, r2
 80011b4:	d000      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0xfc>
 80011b6:	e059      	b.n	800126c <HAL_ADC_ConfigChannel+0x1b0>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	d151      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1ac>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d149      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1a8>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	d141      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1a4>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	4013      	ands	r3, r2
 80011e6:	d139      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1a0>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	015b      	lsls	r3, r3, #5
 80011f0:	4013      	ands	r3, r2
 80011f2:	d131      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x19c>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	019b      	lsls	r3, r3, #6
 80011fc:	4013      	ands	r3, r2
 80011fe:	d129      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x198>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	01db      	lsls	r3, r3, #7
 8001208:	4013      	ands	r3, r2
 800120a:	d121      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x194>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4013      	ands	r3, r2
 8001216:	d119      	bne.n	800124c <HAL_ADC_ConfigChannel+0x190>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	4013      	ands	r3, r2
 8001222:	d111      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x18c>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	d109      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x188>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	02db      	lsls	r3, r3, #11
 8001238:	4013      	ands	r3, r2
 800123a:	d001      	beq.n	8001240 <HAL_ADC_ConfigChannel+0x184>
 800123c:	2312      	movs	r3, #18
 800123e:	e024      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001240:	2300      	movs	r3, #0
 8001242:	e022      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	2311      	movs	r3, #17
 8001246:	e020      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2310      	movs	r3, #16
 800124a:	e01e      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	230f      	movs	r3, #15
 800124e:	e01c      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	230e      	movs	r3, #14
 8001252:	e01a      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	230d      	movs	r3, #13
 8001256:	e018      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	230c      	movs	r3, #12
 800125a:	e016      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	230b      	movs	r3, #11
 800125e:	e014      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001260:	230a      	movs	r3, #10
 8001262:	e012      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001264:	2309      	movs	r3, #9
 8001266:	e010      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001268:	2308      	movs	r3, #8
 800126a:	e00e      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 800126c:	2307      	movs	r3, #7
 800126e:	e00c      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001270:	2306      	movs	r3, #6
 8001272:	e00a      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001274:	2305      	movs	r3, #5
 8001276:	e008      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001278:	2304      	movs	r3, #4
 800127a:	e006      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2303      	movs	r3, #3
 800127e:	e004      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	2300      	movs	r3, #0
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	6852      	ldr	r2, [r2, #4]
 800128e:	201f      	movs	r0, #31
 8001290:	4002      	ands	r2, r0
 8001292:	4093      	lsls	r3, r2
 8001294:	000a      	movs	r2, r1
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d808      	bhi.n	80012be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	001a      	movs	r2, r3
 80012ba:	f7ff fb77 	bl	80009ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	001a      	movs	r2, r3
 80012cc:	f7ff fbb2 	bl	8000a34 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db00      	blt.n	80012da <HAL_ADC_ConfigChannel+0x21e>
 80012d8:	e0bc      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012da:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff fb13 	bl	8000908 <LL_ADC_GetCommonPathInternalCh>
 80012e2:	0003      	movs	r3, r0
 80012e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_ADC_ConfigChannel+0x364>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d122      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	041b      	lsls	r3, r3, #16
 80012f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f8:	d11d      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	0412      	lsls	r2, r2, #16
 8001300:	4313      	orrs	r3, r2
 8001302:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 8001304:	0019      	movs	r1, r3
 8001306:	0010      	movs	r0, r2
 8001308:	f7ff faea 	bl	80008e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_ADC_ConfigChannel+0x368>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4945      	ldr	r1, [pc, #276]	; (8001428 <HAL_ADC_ConfigChannel+0x36c>)
 8001312:	0018      	movs	r0, r3
 8001314:	f7fe fef6 	bl	8000104 <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	0013      	movs	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	189b      	adds	r3, r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001326:	e002      	b.n	800132e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3b01      	subs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f9      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001334:	e08e      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_ADC_ConfigChannel+0x370>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10e      	bne.n	800135e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	045b      	lsls	r3, r3, #17
 8001346:	4013      	ands	r3, r2
 8001348:	d109      	bne.n	800135e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	0452      	lsls	r2, r2, #17
 8001350:	4313      	orrs	r3, r2
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 8001354:	0019      	movs	r1, r3
 8001356:	0010      	movs	r0, r2
 8001358:	f7ff fac2 	bl	80008e0 <LL_ADC_SetCommonPathInternalCh>
 800135c:	e07a      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a33      	ldr	r2, [pc, #204]	; (8001430 <HAL_ADC_ConfigChannel+0x374>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d000      	beq.n	800136a <HAL_ADC_ConfigChannel+0x2ae>
 8001368:	e074      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	03db      	lsls	r3, r3, #15
 8001370:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001372:	d000      	beq.n	8001376 <HAL_ADC_ConfigChannel+0x2ba>
 8001374:	e06e      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	03d2      	lsls	r2, r2, #15
 800137c:	4313      	orrs	r3, r2
 800137e:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 8001380:	0019      	movs	r1, r3
 8001382:	0010      	movs	r0, r2
 8001384:	f7ff faac 	bl	80008e0 <LL_ADC_SetCommonPathInternalCh>
 8001388:	e064      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	061b      	lsls	r3, r3, #24
 8001392:	429a      	cmp	r2, r3
 8001394:	d004      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <HAL_ADC_ConfigChannel+0x35c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d107      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0019      	movs	r1, r3
 80013aa:	0010      	movs	r0, r2
 80013ac:	f7ff fb2f 	bl	8000a0e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da4d      	bge.n	8001454 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff faa4 	bl	8000908 <LL_ADC_GetCommonPathInternalCh>
 80013c0:	0003      	movs	r3, r0
 80013c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <HAL_ADC_ConfigChannel+0x364>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d108      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <HAL_ADC_ConfigChannel+0x378>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f7ff fa81 	bl	80008e0 <LL_ADC_SetCommonPathInternalCh>
 80013de:	e039      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_ADC_ConfigChannel+0x370>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d108      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_ADC_ConfigChannel+0x37c>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 80013f2:	0019      	movs	r1, r3
 80013f4:	0010      	movs	r0, r2
 80013f6:	f7ff fa73 	bl	80008e0 <LL_ADC_SetCommonPathInternalCh>
 80013fa:	e02b      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_ADC_ConfigChannel+0x374>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d126      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_ADC_ConfigChannel+0x380>)
 800140a:	4013      	ands	r3, r2
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_ADC_ConfigChannel+0x360>)
 800140e:	0019      	movs	r1, r3
 8001410:	0010      	movs	r0, r2
 8001412:	f7ff fa65 	bl	80008e0 <LL_ADC_SetCommonPathInternalCh>
 8001416:	e01d      	b.n	8001454 <HAL_ADC_ConfigChannel+0x398>
 8001418:	80000004 	.word	0x80000004
 800141c:	40012708 	.word	0x40012708
 8001420:	b0001000 	.word	0xb0001000
 8001424:	20000000 	.word	0x20000000
 8001428:	00030d40 	.word	0x00030d40
 800142c:	b8004000 	.word	0xb8004000
 8001430:	b4002000 	.word	0xb4002000
 8001434:	ff7fffff 	.word	0xff7fffff
 8001438:	feffffff 	.word	0xfeffffff
 800143c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	2220      	movs	r2, #32
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800144c:	2317      	movs	r3, #23
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2254      	movs	r2, #84	; 0x54
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800145c:	2317      	movs	r3, #23
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b006      	add	sp, #24
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)

0800146c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fb41 	bl	8000b04 <LL_ADC_IsEnabled>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d000      	beq.n	8001488 <ADC_Enable+0x1c>
 8001486:	e069      	b.n	800155c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4a36      	ldr	r2, [pc, #216]	; (8001568 <ADC_Enable+0xfc>)
 8001490:	4013      	ands	r3, r2
 8001492:	d00d      	beq.n	80014b0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	2210      	movs	r2, #16
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	2201      	movs	r2, #1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e056      	b.n	800155e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fb01 	bl	8000abc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <ADC_Enable+0x100>)
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fa23 	bl	8000908 <LL_ADC_GetCommonPathInternalCh>
 80014c2:	0002      	movs	r2, r0
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	4013      	ands	r3, r2
 80014ca:	d00f      	beq.n	80014ec <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <ADC_Enable+0x104>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4928      	ldr	r1, [pc, #160]	; (8001574 <ADC_Enable+0x108>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7fe fe16 	bl	8000104 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80014dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014de:	e002      	b.n	80014e6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f9      	bne.n	80014e0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e5b      	ldrb	r3, [r3, #25]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d033      	beq.n	800155c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80014f4:	f7ff f9c6 	bl	8000884 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80014fc:	e027      	b.n	800154e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff fafe 	bl	8000b04 <LL_ADC_IsEnabled>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d104      	bne.n	8001516 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fad3 	bl	8000abc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001516:	f7ff f9b5 	bl	8000884 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d914      	bls.n	800154e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	2b01      	cmp	r3, #1
 8001530:	d00d      	beq.n	800154e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	2210      	movs	r2, #16
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2201      	movs	r2, #1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e007      	b.n	800155e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	4013      	ands	r3, r2
 8001558:	2b01      	cmp	r3, #1
 800155a:	d1d0      	bne.n	80014fe <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b004      	add	sp, #16
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	80000017 	.word	0x80000017
 800156c:	40012708 	.word	0x40012708
 8001570:	20000000 	.word	0x20000000
 8001574:	00030d40 	.word	0x00030d40

08001578 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff face 	bl	8000b26 <LL_ADC_IsDisableOngoing>
 800158a:	0003      	movs	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff fab6 	bl	8000b04 <LL_ADC_IsEnabled>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d046      	beq.n	800162a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d143      	bne.n	800162a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2205      	movs	r2, #5
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d10d      	bne.n	80015cc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fa93 	bl	8000ae0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2203      	movs	r2, #3
 80015c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015c2:	f7ff f95f 	bl	8000884 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80015ca:	e028      	b.n	800161e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	2210      	movs	r2, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2201      	movs	r2, #1
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e021      	b.n	800162c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015e8:	f7ff f94c 	bl	8000884 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d913      	bls.n	800161e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	d00d      	beq.n	800161e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	2210      	movs	r2, #16
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	2201      	movs	r2, #1
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e006      	b.n	800162c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2201      	movs	r2, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d1de      	bne.n	80015e8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_ADC_SetCalibrationFactor>:
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	22b4      	movs	r2, #180	; 0xb4
 8001642:	589b      	ldr	r3, [r3, r2]
 8001644:	227f      	movs	r2, #127	; 0x7f
 8001646:	4393      	bics	r3, r2
 8001648:	001a      	movs	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	21b4      	movs	r1, #180	; 0xb4
 8001652:	505a      	str	r2, [r3, r1]
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}

0800165c <LL_ADC_GetCalibrationFactor>:
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	22b4      	movs	r2, #180	; 0xb4
 8001668:	589b      	ldr	r3, [r3, r2]
 800166a:	227f      	movs	r2, #127	; 0x7f
 800166c:	4013      	ands	r3, r2
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <LL_ADC_Enable>:
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <LL_ADC_Enable+0x20>)
 8001686:	4013      	ands	r3, r2
 8001688:	2201      	movs	r2, #1
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	609a      	str	r2, [r3, #8]
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}
 8001698:	7fffffe8 	.word	0x7fffffe8

0800169c <LL_ADC_Disable>:
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <LL_ADC_Disable+0x20>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	2202      	movs	r2, #2
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	7fffffe8 	.word	0x7fffffe8

080016c0 <LL_ADC_IsEnabled>:
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <LL_ADC_IsEnabled+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_ADC_IsEnabled+0x1a>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <LL_ADC_StartCalibration>:
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a05      	ldr	r2, [pc, #20]	; (8001708 <LL_ADC_StartCalibration+0x24>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	0612      	lsls	r2, r2, #24
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	7fffffe8 	.word	0x7fffffe8

0800170c <LL_ADC_IsCalibrationOnGoing>:
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	0fdb      	lsrs	r3, r3, #31
 800171a:	07da      	lsls	r2, r3, #31
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	061b      	lsls	r3, r3, #24
 8001720:	429a      	cmp	r2, r3
 8001722:	d101      	bne.n	8001728 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001728:	2300      	movs	r3, #0
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2254      	movs	r2, #84	; 0x54
 8001748:	5c9b      	ldrb	r3, [r3, r2]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADCEx_Calibration_Start+0x1e>
 800174e:	2302      	movs	r3, #2
 8001750:	e0ba      	b.n	80018c8 <HAL_ADCEx_Calibration_Start+0x194>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2254      	movs	r2, #84	; 0x54
 8001756:	2101      	movs	r1, #1
 8001758:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800175a:	2317      	movs	r3, #23
 800175c:	18fc      	adds	r4, r7, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff ff09 	bl	8001578 <ADC_Disable>
 8001766:	0003      	movs	r3, r0
 8001768:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff ffa6 	bl	80016c0 <LL_ADC_IsEnabled>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d000      	beq.n	800177a <HAL_ADCEx_Calibration_Start+0x46>
 8001778:	e099      	b.n	80018ae <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <HAL_ADCEx_Calibration_Start+0x19c>)
 8001780:	4013      	ands	r3, r2
 8001782:	2202      	movs	r2, #2
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_ADCEx_Calibration_Start+0x1a4>)
 80017a2:	400a      	ands	r2, r1
 80017a4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e02d      	b.n	8001808 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff97 	bl	80016e4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80017b6:	e014      	b.n	80017e2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_ADCEx_Calibration_Start+0x1a8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d90d      	bls.n	80017e2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	2212      	movs	r2, #18
 80017cc:	4393      	bics	r3, r2
 80017ce:	2210      	movs	r2, #16
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2254      	movs	r2, #84	; 0x54
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e072      	b.n	80018c8 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff ff90 	bl	800170c <LL_ADC_IsCalibrationOnGoing>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d1e3      	bne.n	80017b8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ff31 	bl	800165c <LL_ADC_GetCalibrationFactor>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b07      	cmp	r3, #7
 800180c:	d9ce      	bls.n	80017ac <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800180e:	69f9      	ldr	r1, [r7, #28]
 8001810:	69b8      	ldr	r0, [r7, #24]
 8001812:	f7fe fc77 	bl	8000104 <__udivsi3>
 8001816:	0003      	movs	r3, r0
 8001818:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0018      	movs	r0, r3
 8001820:	f7ff ff2a 	bl	8001678 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ff01 	bl	8001634 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff ff30 	bl	800169c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800183c:	f7ff f822 	bl	8000884 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001844:	e01b      	b.n	800187e <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001846:	f7ff f81d 	bl	8000884 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d914      	bls.n	800187e <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <LL_ADC_IsEnabled>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d00d      	beq.n	800187e <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	2210      	movs	r2, #16
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2201      	movs	r2, #1
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e024      	b.n	80018c8 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0018      	movs	r0, r3
 8001884:	f7ff ff1c 	bl	80016c0 <LL_ADC_IsEnabled>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d1dc      	bne.n	8001846 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68d9      	ldr	r1, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	2203      	movs	r2, #3
 80018a2:	4393      	bics	r3, r2
 80018a4:	2201      	movs	r2, #1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58
 80018ac:	e005      	b.n	80018ba <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	2210      	movs	r2, #16
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2254      	movs	r2, #84	; 0x54
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018c2:	2317      	movs	r3, #23
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	781b      	ldrb	r3, [r3, #0]
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b009      	add	sp, #36	; 0x24
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	fffffefd 	.word	0xfffffefd
 80018d4:	00008003 	.word	0x00008003
 80018d8:	ffff7ffc 	.word	0xffff7ffc
 80018dc:	0002f1ff 	.word	0x0002f1ff

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b7f      	cmp	r3, #127	; 0x7f
 80018f4:	d828      	bhi.n	8001948 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f6:	4a2f      	ldr	r2, [pc, #188]	; (80019b4 <__NVIC_SetPriority+0xd4>)
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	33c0      	adds	r3, #192	; 0xc0
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	589b      	ldr	r3, [r3, r2]
 8001906:	1dfa      	adds	r2, r7, #7
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	0011      	movs	r1, r2
 800190c:	2203      	movs	r2, #3
 800190e:	400a      	ands	r2, r1
 8001910:	00d2      	lsls	r2, r2, #3
 8001912:	21ff      	movs	r1, #255	; 0xff
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	43d2      	mvns	r2, r2
 800191a:	401a      	ands	r2, r3
 800191c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	22ff      	movs	r2, #255	; 0xff
 8001924:	401a      	ands	r2, r3
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	0018      	movs	r0, r3
 800192c:	2303      	movs	r3, #3
 800192e:	4003      	ands	r3, r0
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001934:	481f      	ldr	r0, [pc, #124]	; (80019b4 <__NVIC_SetPriority+0xd4>)
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25b      	sxtb	r3, r3
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	430a      	orrs	r2, r1
 8001940:	33c0      	adds	r3, #192	; 0xc0
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001946:	e031      	b.n	80019ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <__NVIC_SetPriority+0xd8>)
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	0019      	movs	r1, r3
 8001950:	230f      	movs	r3, #15
 8001952:	400b      	ands	r3, r1
 8001954:	3b08      	subs	r3, #8
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3306      	adds	r3, #6
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	18d3      	adds	r3, r2, r3
 800195e:	3304      	adds	r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1dfa      	adds	r2, r7, #7
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	0011      	movs	r1, r2
 8001968:	2203      	movs	r2, #3
 800196a:	400a      	ands	r2, r1
 800196c:	00d2      	lsls	r2, r2, #3
 800196e:	21ff      	movs	r1, #255	; 0xff
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	43d2      	mvns	r2, r2
 8001976:	401a      	ands	r2, r3
 8001978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	22ff      	movs	r2, #255	; 0xff
 8001980:	401a      	ands	r2, r3
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	0018      	movs	r0, r3
 8001988:	2303      	movs	r3, #3
 800198a:	4003      	ands	r3, r0
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <__NVIC_SetPriority+0xd8>)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	001c      	movs	r4, r3
 8001998:	230f      	movs	r3, #15
 800199a:	4023      	ands	r3, r4
 800199c:	3b08      	subs	r3, #8
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	430a      	orrs	r2, r1
 80019a2:	3306      	adds	r3, #6
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	18c3      	adds	r3, r0, r3
 80019a8:	3304      	adds	r3, #4
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b003      	add	sp, #12
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	045b      	lsls	r3, r3, #17
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d301      	bcc.n	80019d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d0:	2301      	movs	r3, #1
 80019d2:	e010      	b.n	80019f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <SysTick_Config+0x44>)
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	3a01      	subs	r2, #1
 80019da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019dc:	2301      	movs	r3, #1
 80019de:	425b      	negs	r3, r3
 80019e0:	2103      	movs	r1, #3
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff ff7c 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x44>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x44>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	210f      	movs	r1, #15
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	1c02      	adds	r2, r0, #0
 8001a14:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	0011      	movs	r1, r2
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ffbf 	bl	80019bc <SysTick_Config>
 8001a3e:	0003      	movs	r3, r0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	e14d      	b.n	8001cf4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4091      	lsls	r1, r2
 8001a62:	000a      	movs	r2, r1
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d100      	bne.n	8001a70 <HAL_GPIO_Init+0x28>
 8001a6e:	e13e      	b.n	8001cee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d005      	beq.n	8001a88 <HAL_GPIO_Init+0x40>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d130      	bne.n	8001aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001abe:	2201      	movs	r2, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d017      	beq.n	8001b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	409a      	lsls	r2, r3
 8001b18:	0013      	movs	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d123      	bne.n	8001b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	58d3      	ldr	r3, [r2, r3]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2107      	movs	r1, #7
 8001b5e:	400b      	ands	r3, r1
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	6939      	ldr	r1, [r7, #16]
 8001b78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <HAL_GPIO_Init+0x174>
 8001bba:	e098      	b.n	8001cee <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bbc:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	589b      	ldr	r3, [r3, r2]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4013      	ands	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	23a0      	movs	r3, #160	; 0xa0
 8001be4:	05db      	lsls	r3, r3, #23
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x1d6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a48      	ldr	r2, [pc, #288]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x1d2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a47      	ldr	r2, [pc, #284]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x1ce>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a46      	ldr	r2, [pc, #280]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x1ca>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x1c6>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	2103      	movs	r1, #3
 8001c24:	400a      	ands	r2, r1
 8001c26:	00d2      	lsls	r2, r2, #3
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c30:	4936      	ldr	r1, [pc, #216]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3318      	adds	r3, #24
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43da      	mvns	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	035b      	lsls	r3, r3, #13
 8001c56:	4013      	ands	r3, r2
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	039b      	lsls	r3, r3, #14
 8001c80:	4013      	ands	r3, r2
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c94:	2384      	movs	r3, #132	; 0x84
 8001c96:	58d3      	ldr	r3, [r2, r3]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	029b      	lsls	r3, r3, #10
 8001cac:	4013      	ands	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cb8:	4914      	ldr	r1, [pc, #80]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001cba:	2284      	movs	r2, #132	; 0x84
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	58d3      	ldr	r3, [r2, r3]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce6:	4909      	ldr	r1, [pc, #36]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	40da      	lsrs	r2, r3
 8001cfc:	1e13      	subs	r3, r2, #0
 8001cfe:	d000      	beq.n	8001d02 <HAL_GPIO_Init+0x2ba>
 8001d00:	e6aa      	b.n	8001a58 <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b006      	add	sp, #24
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	50000400 	.word	0x50000400
 8001d14:	50000800 	.word	0x50000800
 8001d18:	50000c00 	.word	0x50000c00
 8001d1c:	50001000 	.word	0x50001000

08001d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d11f      	bne.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	0013      	movs	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	189b      	adds	r3, r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4912      	ldr	r1, [pc, #72]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe f9d6 	bl	8000104 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d5e:	e008      	b.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e001      	b.n	8001d72 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e009      	b.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d0ed      	beq.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40007000 	.word	0x40007000
 8001d94:	fffff9ff 	.word	0xfffff9ff
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	000f4240 	.word	0x000f4240

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f000 fb50 	bl	8002454 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x20>
 8001dbe:	e07c      	b.n	8001eba <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc0:	4bc3      	ldr	r3, [pc, #780]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2238      	movs	r2, #56	; 0x38
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dca:	4bc1      	ldr	r3, [pc, #772]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0x40>
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d002      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d10b      	bne.n	8001dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	4bba      	ldr	r3, [pc, #744]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	4013      	ands	r3, r2
 8001df0:	d062      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x118>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d15e      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e32a      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	025b      	lsls	r3, r3, #9
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_OscConfig+0x7a>
 8001e0a:	4bb1      	ldr	r3, [pc, #708]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4bb0      	ldr	r3, [pc, #704]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0249      	lsls	r1, r1, #9
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e020      	b.n	8001e5c <HAL_RCC_OscConfig+0xbc>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	23a0      	movs	r3, #160	; 0xa0
 8001e20:	02db      	lsls	r3, r3, #11
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d10e      	bne.n	8001e44 <HAL_RCC_OscConfig+0xa4>
 8001e26:	4baa      	ldr	r3, [pc, #680]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4ba9      	ldr	r3, [pc, #676]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	02c9      	lsls	r1, r1, #11
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4ba6      	ldr	r3, [pc, #664]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4ba5      	ldr	r3, [pc, #660]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0249      	lsls	r1, r1, #9
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xbc>
 8001e44:	4ba2      	ldr	r3, [pc, #648]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	49a2      	ldr	r1, [pc, #648]	; (80020d4 <HAL_RCC_OscConfig+0x334>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	4b9f      	ldr	r3, [pc, #636]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b9e      	ldr	r3, [pc, #632]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e56:	49a0      	ldr	r1, [pc, #640]	; (80020d8 <HAL_RCC_OscConfig+0x338>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d014      	beq.n	8001e8e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fd0e 	bl	8000884 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fd09 	bl	8000884 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	; 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e2e9      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e80:	4b93      	ldr	r3, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0xce>
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fcf9 	bl	8000884 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe fcf4 	bl	8000884 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e2d4      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	029b      	lsls	r3, r3, #10
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0xf8>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x126>
 8001ec4:	e099      	b.n	8001ffa <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2238      	movs	r2, #56	; 0x38
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed0:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x146>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d135      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	4b78      	ldr	r3, [pc, #480]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x164>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e2a7      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a74      	ldr	r2, [pc, #464]	; (80020dc <HAL_RCC_OscConfig+0x33c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	021a      	lsls	r2, r3, #8
 8001f14:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d112      	bne.n	8001f46 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f20:	4b6b      	ldr	r3, [pc, #428]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x340>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f34:	4b66      	ldr	r3, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0adb      	lsrs	r3, r3, #11
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	4a69      	ldr	r2, [pc, #420]	; (80020e4 <HAL_RCC_OscConfig+0x344>)
 8001f40:	40da      	lsrs	r2, r3
 8001f42:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_RCC_OscConfig+0x348>)
 8001f44:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f46:	4b69      	ldr	r3, [pc, #420]	; (80020ec <HAL_RCC_OscConfig+0x34c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7fe fc3e 	bl	80007cc <HAL_InitTick>
 8001f50:	1e03      	subs	r3, r0, #0
 8001f52:	d051      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e27d      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d030      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f60:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5e      	ldr	r2, [pc, #376]	; (80020e0 <HAL_RCC_OscConfig+0x340>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0049      	lsls	r1, r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe fc7f 	bl	8000884 <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7fe fc7a 	bl	8000884 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e25a      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_RCC_OscConfig+0x33c>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	021a      	lsls	r2, r3, #8
 8001fba:	4b45      	ldr	r3, [pc, #276]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	e01b      	b.n	8001ffa <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001fc8:	4949      	ldr	r1, [pc, #292]	; (80020f0 <HAL_RCC_OscConfig+0x350>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7fe fc59 	bl	8000884 <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fc54 	bl	8000884 <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e234      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x238>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2208      	movs	r2, #8
 8002000:	4013      	ands	r3, r2
 8002002:	d047      	beq.n	8002094 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2238      	movs	r2, #56	; 0x38
 800200a:	4013      	ands	r3, r2
 800200c:	2b18      	cmp	r3, #24
 800200e:	d10a      	bne.n	8002026 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d03c      	beq.n	8002094 <HAL_RCC_OscConfig+0x2f4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d138      	bne.n	8002094 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e216      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d019      	beq.n	8002062 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002034:	2101      	movs	r1, #1
 8002036:	430a      	orrs	r2, r1
 8002038:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe fc23 	bl	8000884 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fc1e 	bl	8000884 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1fe      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d0f1      	beq.n	8002044 <HAL_RCC_OscConfig+0x2a4>
 8002060:	e018      	b.n	8002094 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 8002068:	2101      	movs	r1, #1
 800206a:	438a      	bics	r2, r1
 800206c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7fe fc09 	bl	8000884 <HAL_GetTick>
 8002072:	0003      	movs	r3, r0
 8002074:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe fc04 	bl	8000884 <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1e4      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 800208c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d1f1      	bne.n	8002078 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2204      	movs	r2, #4
 800209a:	4013      	ands	r3, r2
 800209c:	d100      	bne.n	80020a0 <HAL_RCC_OscConfig+0x300>
 800209e:	e0c7      	b.n	8002230 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a0:	231f      	movs	r3, #31
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2238      	movs	r2, #56	; 0x38
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d11f      	bne.n	80020f4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x330>)
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2202      	movs	r2, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d100      	bne.n	80020c0 <HAL_RCC_OscConfig+0x320>
 80020be:	e0b7      	b.n	8002230 <HAL_RCC_OscConfig+0x490>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d000      	beq.n	80020ca <HAL_RCC_OscConfig+0x32a>
 80020c8:	e0b2      	b.n	8002230 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1c2      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40021000 	.word	0x40021000
 80020d4:	fffeffff 	.word	0xfffeffff
 80020d8:	fffbffff 	.word	0xfffbffff
 80020dc:	ffff80ff 	.word	0xffff80ff
 80020e0:	ffffc7ff 	.word	0xffffc7ff
 80020e4:	00f42400 	.word	0x00f42400
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004
 80020f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020f4:	4bb5      	ldr	r3, [pc, #724]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80020f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x364>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x366>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d011      	beq.n	800212e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4bb0      	ldr	r3, [pc, #704]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800210c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800210e:	4baf      	ldr	r3, [pc, #700]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0549      	lsls	r1, r1, #21
 8002114:	430a      	orrs	r2, r1
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c
 8002118:	4bac      	ldr	r3, [pc, #688]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800211a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	055b      	lsls	r3, r3, #21
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002126:	231f      	movs	r3, #31
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212e:	4ba8      	ldr	r3, [pc, #672]	; (80023d0 <HAL_RCC_OscConfig+0x630>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d11a      	bne.n	8002170 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800213a:	4ba5      	ldr	r3, [pc, #660]	; (80023d0 <HAL_RCC_OscConfig+0x630>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4ba4      	ldr	r3, [pc, #656]	; (80023d0 <HAL_RCC_OscConfig+0x630>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0049      	lsls	r1, r1, #1
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002148:	f7fe fb9c 	bl	8000884 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe fb97 	bl	8000884 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e177      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002164:	4b9a      	ldr	r3, [pc, #616]	; (80023d0 <HAL_RCC_OscConfig+0x630>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x3e6>
 8002178:	4b94      	ldr	r3, [pc, #592]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800217a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800217c:	4b93      	ldr	r3, [pc, #588]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800217e:	2101      	movs	r1, #1
 8002180:	430a      	orrs	r2, r1
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x420>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x408>
 800218e:	4b8f      	ldr	r3, [pc, #572]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002190:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002192:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002194:	2104      	movs	r1, #4
 8002196:	430a      	orrs	r2, r1
 8002198:	65da      	str	r2, [r3, #92]	; 0x5c
 800219a:	4b8c      	ldr	r3, [pc, #560]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800219c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800219e:	4b8b      	ldr	r3, [pc, #556]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x420>
 80021a8:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80021aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ac:	4b87      	ldr	r3, [pc, #540]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	438a      	bics	r2, r1
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021b4:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80021b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021b8:	4b84      	ldr	r3, [pc, #528]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80021ba:	2104      	movs	r1, #4
 80021bc:	438a      	bics	r2, r1
 80021be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d014      	beq.n	80021f2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fb5c 	bl	8000884 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe fb57 	bl	8000884 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a7d      	ldr	r2, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0x634>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e136      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e6:	4b79      	ldr	r3, [pc, #484]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2202      	movs	r2, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x432>
 80021f0:	e013      	b.n	800221a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7fe fb47 	bl	8000884 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021fa:	e009      	b.n	8002210 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe fb42 	bl	8000884 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	4a73      	ldr	r2, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x634>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e121      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002210:	4b6e      	ldr	r3, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800221a:	231f      	movs	r3, #31
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b69      	ldr	r3, [pc, #420]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002228:	4b68      	ldr	r3, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800222a:	496b      	ldr	r1, [pc, #428]	; (80023d8 <HAL_RCC_OscConfig+0x638>)
 800222c:	400a      	ands	r2, r1
 800222e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	4013      	ands	r3, r2
 8002238:	d039      	beq.n	80022ae <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01b      	beq.n	800227a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b61      	ldr	r3, [pc, #388]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	03c9      	lsls	r1, r1, #15
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7fe fb18 	bl	8000884 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225a:	f7fe fb13 	bl	8000884 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e0f3      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800226c:	4b57      	ldr	r3, [pc, #348]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	4013      	ands	r3, r2
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x4ba>
 8002278:	e019      	b.n	80022ae <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800227a:	4b54      	ldr	r3, [pc, #336]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002280:	4956      	ldr	r1, [pc, #344]	; (80023dc <HAL_RCC_OscConfig+0x63c>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe fafd 	bl	8000884 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002290:	f7fe faf8 	bl	8000884 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0d8      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80022a2:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d100      	bne.n	80022b8 <HAL_RCC_OscConfig+0x518>
 80022b6:	e0cc      	b.n	8002452 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2238      	movs	r2, #56	; 0x38
 80022be:	4013      	ands	r3, r2
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x526>
 80022c4:	e07b      	b.n	80023be <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d156      	bne.n	800237c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80022d4:	4942      	ldr	r1, [pc, #264]	; (80023e0 <HAL_RCC_OscConfig+0x640>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe fad3 	bl	8000884 <HAL_GetTick>
 80022de:	0003      	movs	r3, r0
 80022e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe face 	bl	8000884 <HAL_GetTick>
 80022e8:	0002      	movs	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0ae      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f6:	4b35      	ldr	r3, [pc, #212]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	049b      	lsls	r3, r3, #18
 80022fe:	4013      	ands	r3, r2
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4a37      	ldr	r2, [pc, #220]	; (80023e4 <HAL_RCC_OscConfig+0x644>)
 8002308:	4013      	ands	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	431a      	orrs	r2, r3
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0449      	lsls	r1, r1, #17
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0549      	lsls	r1, r1, #21
 800234e:	430a      	orrs	r2, r1
 8002350:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fa97 	bl	8000884 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fa92 	bl	8000884 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e072      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	049b      	lsls	r3, r3, #18
 8002376:	4013      	ands	r3, r2
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x5bc>
 800237a:	e06a      	b.n	8002452 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 8002382:	4917      	ldr	r1, [pc, #92]	; (80023e0 <HAL_RCC_OscConfig+0x640>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fa7c 	bl	8000884 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fa77 	bl	8000884 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e057      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	049b      	lsls	r3, r3, #18
 80023ac:	4013      	ands	r3, r2
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_OscConfig+0x62c>)
 80023b6:	490c      	ldr	r1, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x648>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]
 80023bc:	e049      	b.n	8002452 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d112      	bne.n	80023ec <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e044      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
 80023d4:	00001388 	.word	0x00001388
 80023d8:	efffffff 	.word	0xefffffff
 80023dc:	ffbfffff 	.word	0xffbfffff
 80023e0:	feffffff 	.word	0xfeffffff
 80023e4:	11c1808c 	.word	0x11c1808c
 80023e8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x6bc>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2203      	movs	r2, #3
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d126      	bne.n	800244e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2270      	movs	r2, #112	; 0x70
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d11f      	bne.n	800244e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	23fe      	movs	r3, #254	; 0xfe
 8002412:	01db      	lsls	r3, r3, #7
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d116      	bne.n	800244e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	23f8      	movs	r3, #248	; 0xf8
 8002424:	039b      	lsls	r3, r3, #14
 8002426:	401a      	ands	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d10e      	bne.n	800244e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	23e0      	movs	r3, #224	; 0xe0
 8002434:	051b      	lsls	r3, r3, #20
 8002436:	401a      	ands	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	0f5b      	lsrs	r3, r3, #29
 8002444:	075a      	lsls	r2, r3, #29
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b008      	add	sp, #32
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0e9      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2207      	movs	r2, #7
 800247a:	4013      	ands	r3, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d91e      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2207      	movs	r2, #7
 8002488:	4393      	bics	r3, r2
 800248a:	0019      	movs	r1, r3
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002494:	f7fe f9f6 	bl	8000884 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800249c:	e009      	b.n	80024b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249e:	f7fe f9f1 	bl	8000884 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	4a6a      	ldr	r2, [pc, #424]	; (8002654 <HAL_RCC_ClockConfig+0x1f4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0ca      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2207      	movs	r2, #7
 80024b8:	4013      	ands	r3, r2
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d015      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2204      	movs	r2, #4
 80024d0:	4013      	ands	r3, r2
 80024d2:	d006      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024d4:	4b60      	ldr	r3, [pc, #384]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 80024da:	21e0      	movs	r1, #224	; 0xe0
 80024dc:	01c9      	lsls	r1, r1, #7
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4a5d      	ldr	r2, [pc, #372]	; (800265c <HAL_RCC_ClockConfig+0x1fc>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	d057      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	d12b      	bne.n	800256c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e097      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	049b      	lsls	r3, r3, #18
 8002528:	4013      	ands	r3, r2
 800252a:	d11f      	bne.n	800256c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e08b      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4013      	ands	r3, r2
 8002542:	d113      	bne.n	800256c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e07f      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d106      	bne.n	800255e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002550:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 8002552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d108      	bne.n	800256c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e074      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e06d      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2207      	movs	r2, #7
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 800257c:	430a      	orrs	r2, r1
 800257e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe f980 	bl	8000884 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002588:	e009      	b.n	800259e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258a:	f7fe f97b 	bl	8000884 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_RCC_ClockConfig+0x1f4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e054      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2238      	movs	r2, #56	; 0x38
 80025a4:	401a      	ands	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1ec      	bne.n	800258a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2207      	movs	r2, #7
 80025b6:	4013      	ands	r3, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d21e      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4393      	bics	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d0:	f7fe f958 	bl	8000884 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025d8:	e009      	b.n	80025ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7fe f953 	bl	8000884 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_RCC_ClockConfig+0x1f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e02c      	b.n	8002648 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2207      	movs	r2, #7
 80025f4:	4013      	ands	r3, r2
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1ee      	bne.n	80025da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_RCC_ClockConfig+0x200>)
 800260c:	4013      	ands	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800261a:	f000 f829 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800261e:	0001      	movs	r1, r0
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCC_ClockConfig+0x1f8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	220f      	movs	r2, #15
 8002628:	401a      	ands	r2, r3
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_RCC_ClockConfig+0x204>)
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	58d3      	ldr	r3, [r2, r3]
 8002630:	221f      	movs	r2, #31
 8002632:	4013      	ands	r3, r2
 8002634:	000a      	movs	r2, r1
 8002636:	40da      	lsrs	r2, r3
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x208>)
 800263a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x20c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0018      	movs	r0, r3
 8002642:	f7fe f8c3 	bl	80007cc <HAL_InitTick>
 8002646:	0003      	movs	r3, r0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b004      	add	sp, #16
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40022000 	.word	0x40022000
 8002654:	00001388 	.word	0x00001388
 8002658:	40021000 	.word	0x40021000
 800265c:	fffff0ff 	.word	0xfffff0ff
 8002660:	ffff8fff 	.word	0xffff8fff
 8002664:	08003c60 	.word	0x08003c60
 8002668:	20000000 	.word	0x20000000
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002676:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2238      	movs	r2, #56	; 0x38
 800267c:	4013      	ands	r3, r2
 800267e:	d10f      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0adb      	lsrs	r3, r3, #11
 8002686:	2207      	movs	r2, #7
 8002688:	4013      	ands	r3, r2
 800268a:	2201      	movs	r2, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	4835      	ldr	r0, [pc, #212]	; (800276c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002696:	f7fd fd35 	bl	8000104 <__udivsi3>
 800269a:	0003      	movs	r3, r0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e05d      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2238      	movs	r2, #56	; 0x38
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026ac:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_GetSysClockFreq+0x100>)
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	e054      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2238      	movs	r2, #56	; 0x38
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d138      	bne.n	8002730 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2203      	movs	r2, #3
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	2207      	movs	r2, #7
 80026d0:	4013      	ands	r3, r2
 80026d2:	3301      	adds	r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d10d      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	4824      	ldr	r0, [pc, #144]	; (8002770 <HAL_RCC_GetSysClockFreq+0x100>)
 80026e0:	f7fd fd10 	bl	8000104 <__udivsi3>
 80026e4:	0003      	movs	r3, r0
 80026e6:	0019      	movs	r1, r3
 80026e8:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	227f      	movs	r2, #127	; 0x7f
 80026f0:	4013      	ands	r3, r2
 80026f2:	434b      	muls	r3, r1
 80026f4:	617b      	str	r3, [r7, #20]
        break;
 80026f6:	e00d      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	481c      	ldr	r0, [pc, #112]	; (800276c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026fc:	f7fd fd02 	bl	8000104 <__udivsi3>
 8002700:	0003      	movs	r3, r0
 8002702:	0019      	movs	r1, r3
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	227f      	movs	r2, #127	; 0x7f
 800270c:	4013      	ands	r3, r2
 800270e:	434b      	muls	r3, r1
 8002710:	617b      	str	r3, [r7, #20]
        break;
 8002712:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0f5b      	lsrs	r3, r3, #29
 800271a:	2207      	movs	r2, #7
 800271c:	4013      	ands	r3, r2
 800271e:	3301      	adds	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	6978      	ldr	r0, [r7, #20]
 8002726:	f7fd fced 	bl	8000104 <__udivsi3>
 800272a:	0003      	movs	r3, r0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e015      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002730:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2238      	movs	r2, #56	; 0x38
 8002736:	4013      	ands	r3, r2
 8002738:	2b20      	cmp	r3, #32
 800273a:	d103      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e00b      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2238      	movs	r2, #56	; 0x38
 800274a:	4013      	ands	r3, r2
 800274c:	2b18      	cmp	r3, #24
 800274e:	d103      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002750:	23fa      	movs	r3, #250	; 0xfa
 8002752:	01db      	lsls	r3, r3, #7
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e001      	b.n	800275c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800275c:	693b      	ldr	r3, [r7, #16]
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b006      	add	sp, #24
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	40021000 	.word	0x40021000
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200

08002774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800277c:	2313      	movs	r3, #19
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002784:	2312      	movs	r3, #18
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	029b      	lsls	r3, r3, #10
 8002794:	4013      	ands	r3, r2
 8002796:	d100      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002798:	e0ad      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2011      	movs	r0, #17
 800279c:	183b      	adds	r3, r7, r0
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	055b      	lsls	r3, r3, #21
 80027aa:	4013      	ands	r3, r2
 80027ac:	d110      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b2:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0549      	lsls	r1, r1, #21
 80027b8:	430a      	orrs	r2, r1
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	183b      	adds	r3, r7, r0
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d0:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027d6:	2180      	movs	r1, #128	; 0x80
 80027d8:	0049      	lsls	r1, r1, #1
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027de:	f7fe f851 	bl	8000884 <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e6:	e00b      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7fe f84c 	bl	8000884 <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d904      	bls.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027f6:	2313      	movs	r3, #19
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2203      	movs	r2, #3
 80027fc:	701a      	strb	r2, [r3, #0]
        break;
 80027fe:	e005      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4013      	ands	r3, r2
 800280a:	d0ed      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800280c:	2313      	movs	r3, #19
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d15e      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002818:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800281a:	23c0      	movs	r3, #192	; 0xc0
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4013      	ands	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d019      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	429a      	cmp	r2, r3
 8002830:	d014      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800283e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	0249      	lsls	r1, r1, #9
 8002846:	430a      	orrs	r2, r1
 8002848:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284a:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800284c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002850:	491e      	ldr	r1, [pc, #120]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002852:	400a      	ands	r2, r1
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	d016      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe f80e 	bl	8000884 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286c:	e00c      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe f809 	bl	8000884 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d904      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800287e:	2313      	movs	r3, #19
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]
            break;
 8002886:	e004      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d0ed      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002892:	2313      	movs	r3, #19
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80028b0:	e016      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b2:	2312      	movs	r3, #18
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2213      	movs	r2, #19
 80028b8:	18ba      	adds	r2, r7, r2
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e00f      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	fffffcff 	.word	0xfffffcff
 80028cc:	fffeffff 	.word	0xfffeffff
 80028d0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	2312      	movs	r3, #18
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2213      	movs	r2, #19
 80028da:	18ba      	adds	r2, r7, r2
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028e0:	2311      	movs	r3, #17
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4bb6      	ldr	r3, [pc, #728]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ee:	4bb5      	ldr	r3, [pc, #724]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028f0:	49b5      	ldr	r1, [pc, #724]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002900:	4bb0      	ldr	r3, [pc, #704]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	2203      	movs	r2, #3
 8002906:	4393      	bics	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4bad      	ldr	r3, [pc, #692]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002910:	430a      	orrs	r2, r1
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291e:	4ba9      	ldr	r3, [pc, #676]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	220c      	movs	r2, #12
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4ba5      	ldr	r3, [pc, #660]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800292e:	430a      	orrs	r2, r1
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2204      	movs	r2, #4
 8002938:	4013      	ands	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800293c:	4ba1      	ldr	r3, [pc, #644]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	2230      	movs	r2, #48	; 0x30
 8002942:	4393      	bics	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800294c:	430a      	orrs	r2, r1
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2210      	movs	r2, #16
 8002956:	4013      	ands	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800295a:	4b9a      	ldr	r3, [pc, #616]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	4a9b      	ldr	r2, [pc, #620]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	4b96      	ldr	r3, [pc, #600]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296a:	430a      	orrs	r2, r1
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	015b      	lsls	r3, r3, #5
 8002976:	4013      	ands	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800297a:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	4a94      	ldr	r2, [pc, #592]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800298a:	430a      	orrs	r2, r1
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800299a:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	4a8d      	ldr	r2, [pc, #564]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a8:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029aa:	430a      	orrs	r2, r1
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	4a86      	ldr	r2, [pc, #536]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	4b7e      	ldr	r3, [pc, #504]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029ca:	430a      	orrs	r2, r1
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2220      	movs	r2, #32
 80029d4:	4013      	ands	r3, r2
 80029d6:	d009      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d8:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	4a7f      	ldr	r2, [pc, #508]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2240      	movs	r2, #64	; 0x40
 80029f2:	4013      	ands	r3, r2
 80029f4:	d009      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f6:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	4a79      	ldr	r2, [pc, #484]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	4013      	ands	r3, r2
 8002a14:	d015      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a16:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	0899      	lsrs	r1, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	05db      	lsls	r3, r3, #23
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d106      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a34:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	0249      	lsls	r1, r1, #9
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	031b      	lsls	r3, r3, #12
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	039b      	lsls	r3, r3, #14
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d016      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a6e:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	4a5c      	ldr	r2, [pc, #368]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7c:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	03db      	lsls	r3, r3, #15
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0449      	lsls	r1, r1, #17
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	03db      	lsls	r3, r3, #15
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d016      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002aa8:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	4a4e      	ldr	r2, [pc, #312]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	045b      	lsls	r3, r3, #17
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	0449      	lsls	r1, r1, #17
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d014      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4393      	bics	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0249      	lsls	r1, r1, #9
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	019b      	lsls	r3, r3, #6
 8002b14:	4013      	ands	r3, r2
 8002b16:	d014      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b18:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	220c      	movs	r2, #12
 8002b1e:	4393      	bics	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d106      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	0249      	lsls	r1, r1, #9
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	045b      	lsls	r3, r3, #17
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d016      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	019b      	lsls	r3, r3, #6
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0449      	lsls	r1, r1, #17
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	049b      	lsls	r3, r3, #18
 8002b84:	4013      	ands	r3, r2
 8002b86:	d016      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bae:	2180      	movs	r1, #128	; 0x80
 8002bb0:	0449      	lsls	r1, r1, #17
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bb6:	2312      	movs	r3, #18
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	781b      	ldrb	r3, [r3, #0]
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b006      	add	sp, #24
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	efffffff 	.word	0xefffffff
 8002bcc:	fffff3ff 	.word	0xfffff3ff
 8002bd0:	fffffcff 	.word	0xfffffcff
 8002bd4:	fff3ffff 	.word	0xfff3ffff
 8002bd8:	ffcfffff 	.word	0xffcfffff
 8002bdc:	ffffcfff 	.word	0xffffcfff
 8002be0:	ffff3fff 	.word	0xffff3fff
 8002be4:	ffbfffff 	.word	0xffbfffff
 8002be8:	feffffff 	.word	0xfeffffff

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e04a      	b.n	8002c94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	223d      	movs	r2, #61	; 0x3d
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fd fd1b 	bl	8000650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	223d      	movs	r2, #61	; 0x3d
 8002c1e:	2102      	movs	r1, #2
 8002c20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	0010      	movs	r0, r2
 8002c2e:	f000 fb5b 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2248      	movs	r2, #72	; 0x48
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223e      	movs	r2, #62	; 0x3e
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223f      	movs	r2, #63	; 0x3f
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2241      	movs	r2, #65	; 0x41
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2242      	movs	r2, #66	; 0x42
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2243      	movs	r2, #67	; 0x43
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2244      	movs	r2, #68	; 0x44
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2245      	movs	r2, #69	; 0x45
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2246      	movs	r2, #70	; 0x46
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2247      	movs	r2, #71	; 0x47
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223d      	movs	r2, #61	; 0x3d
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e04a      	b.n	8002d44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	223d      	movs	r2, #61	; 0x3d
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223c      	movs	r2, #60	; 0x3c
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f841 	bl	8002d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	223d      	movs	r2, #61	; 0x3d
 8002cce:	2102      	movs	r1, #2
 8002cd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	0019      	movs	r1, r3
 8002cdc:	0010      	movs	r0, r2
 8002cde:	f000 fb03 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2248      	movs	r2, #72	; 0x48
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223e      	movs	r2, #62	; 0x3e
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	223f      	movs	r2, #63	; 0x3f
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2241      	movs	r2, #65	; 0x41
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2242      	movs	r2, #66	; 0x42
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2243      	movs	r2, #67	; 0x43
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2244      	movs	r2, #68	; 0x44
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2245      	movs	r2, #69	; 0x45
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2246      	movs	r2, #70	; 0x46
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2247      	movs	r2, #71	; 0x47
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	223d      	movs	r2, #61	; 0x3d
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <HAL_TIM_PWM_Start+0x22>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	223e      	movs	r2, #62	; 0x3e
 8002d70:	5c9b      	ldrb	r3, [r3, r2]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	1e5a      	subs	r2, r3, #1
 8002d78:	4193      	sbcs	r3, r2
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e037      	b.n	8002dee <HAL_TIM_PWM_Start+0x92>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d108      	bne.n	8002d96 <HAL_TIM_PWM_Start+0x3a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	223f      	movs	r2, #63	; 0x3f
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	1e5a      	subs	r2, r3, #1
 8002d90:	4193      	sbcs	r3, r2
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	e02b      	b.n	8002dee <HAL_TIM_PWM_Start+0x92>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d108      	bne.n	8002dae <HAL_TIM_PWM_Start+0x52>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	5c9b      	ldrb	r3, [r3, r2]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	4193      	sbcs	r3, r2
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e01f      	b.n	8002dee <HAL_TIM_PWM_Start+0x92>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d108      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0x6a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2241      	movs	r2, #65	; 0x41
 8002db8:	5c9b      	ldrb	r3, [r3, r2]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	4193      	sbcs	r3, r2
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	e013      	b.n	8002dee <HAL_TIM_PWM_Start+0x92>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d108      	bne.n	8002dde <HAL_TIM_PWM_Start+0x82>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2242      	movs	r2, #66	; 0x42
 8002dd0:	5c9b      	ldrb	r3, [r3, r2]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	1e5a      	subs	r2, r3, #1
 8002dd8:	4193      	sbcs	r3, r2
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e007      	b.n	8002dee <HAL_TIM_PWM_Start+0x92>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2243      	movs	r2, #67	; 0x43
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	4193      	sbcs	r3, r2
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e090      	b.n	8002f18 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_PWM_Start+0xaa>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223e      	movs	r2, #62	; 0x3e
 8002e00:	2102      	movs	r1, #2
 8002e02:	5499      	strb	r1, [r3, r2]
 8002e04:	e023      	b.n	8002e4e <HAL_TIM_PWM_Start+0xf2>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_PWM_Start+0xba>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	223f      	movs	r2, #63	; 0x3f
 8002e10:	2102      	movs	r1, #2
 8002e12:	5499      	strb	r1, [r3, r2]
 8002e14:	e01b      	b.n	8002e4e <HAL_TIM_PWM_Start+0xf2>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_PWM_Start+0xca>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	2102      	movs	r1, #2
 8002e22:	5499      	strb	r1, [r3, r2]
 8002e24:	e013      	b.n	8002e4e <HAL_TIM_PWM_Start+0xf2>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0xda>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2241      	movs	r2, #65	; 0x41
 8002e30:	2102      	movs	r1, #2
 8002e32:	5499      	strb	r1, [r3, r2]
 8002e34:	e00b      	b.n	8002e4e <HAL_TIM_PWM_Start+0xf2>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0xea>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2242      	movs	r2, #66	; 0x42
 8002e40:	2102      	movs	r1, #2
 8002e42:	5499      	strb	r1, [r3, r2]
 8002e44:	e003      	b.n	8002e4e <HAL_TIM_PWM_Start+0xf2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2243      	movs	r2, #67	; 0x43
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6839      	ldr	r1, [r7, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 fe30 	bl	8003abc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <HAL_TIM_PWM_Start+0x1c4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00e      	beq.n	8002e84 <HAL_TIM_PWM_Start+0x128>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_TIM_PWM_Start+0x1c8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_TIM_PWM_Start+0x128>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <HAL_TIM_PWM_Start+0x1cc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_TIM_PWM_Start+0x128>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_TIM_PWM_Start+0x1d0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_TIM_PWM_Start+0x12c>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_TIM_PWM_Start+0x12e>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	0209      	lsls	r1, r1, #8
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_TIM_PWM_Start+0x1c4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d014      	beq.n	8002ed4 <HAL_TIM_PWM_Start+0x178>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_TIM_PWM_Start+0x178>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_TIM_PWM_Start+0x1d4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d009      	beq.n	8002ed4 <HAL_TIM_PWM_Start+0x178>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_TIM_PWM_Start+0x1d8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_PWM_Start+0x178>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <HAL_TIM_PWM_Start+0x1c8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d116      	bne.n	8002f02 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_TIM_PWM_Start+0x1dc>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d016      	beq.n	8002f14 <HAL_TIM_PWM_Start+0x1b8>
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	025b      	lsls	r3, r3, #9
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d011      	beq.n	8002f14 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2101      	movs	r1, #1
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f00:	e008      	b.n	8002f14 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e000      	b.n	8002f16 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f14:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40014800 	.word	0x40014800
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	00010007 	.word	0x00010007

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	223c      	movs	r2, #60	; 0x3c
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0e5      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	223c      	movs	r2, #60	; 0x3c
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b14      	cmp	r3, #20
 8002f6a:	d900      	bls.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f6c:	e0d1      	b.n	8003112 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	009a      	lsls	r2, r3, #2
 8002f72:	4b70      	ldr	r3, [pc, #448]	; (8003134 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fa3a 	bl	80033fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2108      	movs	r1, #8
 8002f94:	430a      	orrs	r2, r1
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
      break;
 8002fba:	e0af      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 faa3 	bl	8003510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	0109      	lsls	r1, r1, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4954      	ldr	r1, [pc, #336]	; (8003138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]
      break;
 8003000:	e08c      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	0011      	movs	r1, r2
 800300a:	0018      	movs	r0, r3
 800300c:	f000 fb04 	bl	8003618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2108      	movs	r1, #8
 800301c:	430a      	orrs	r2, r1
 800301e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2104      	movs	r1, #4
 800302c:	438a      	bics	r2, r1
 800302e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	69d9      	ldr	r1, [r3, #28]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	61da      	str	r2, [r3, #28]
      break;
 8003042:	e06b      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f000 fb6b 	bl	8003728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	0109      	lsls	r1, r1, #4
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4932      	ldr	r1, [pc, #200]	; (8003138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003070:	400a      	ands	r2, r1
 8003072:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69d9      	ldr	r1, [r3, #28]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
      break;
 8003088:	e048      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	0011      	movs	r1, r2
 8003092:	0018      	movs	r0, r3
 8003094:	f000 fbb2 	bl	80037fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2108      	movs	r1, #8
 80030a4:	430a      	orrs	r2, r1
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2104      	movs	r1, #4
 80030b4:	438a      	bics	r2, r1
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030ca:	e027      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f000 fbf1 	bl	80038bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2180      	movs	r1, #128	; 0x80
 80030e6:	0109      	lsls	r1, r1, #4
 80030e8:	430a      	orrs	r2, r1
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4910      	ldr	r1, [pc, #64]	; (8003138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	021a      	lsls	r2, r3, #8
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003110:	e004      	b.n	800311c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003112:	2317      	movs	r3, #23
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
      break;
 800311a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	223c      	movs	r2, #60	; 0x3c
 8003120:	2100      	movs	r1, #0
 8003122:	5499      	strb	r1, [r3, r2]

  return status;
 8003124:	2317      	movs	r3, #23
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	781b      	ldrb	r3, [r3, #0]
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b006      	add	sp, #24
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	08003ca0 	.word	0x08003ca0
 8003138:	fffffbff 	.word	0xfffffbff

0800313c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223c      	movs	r2, #60	; 0x3c
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x20>
 8003158:	2302      	movs	r3, #2
 800315a:	e0bc      	b.n	80032d6 <HAL_TIM_ConfigClockSource+0x19a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223c      	movs	r2, #60	; 0x3c
 8003160:	2101      	movs	r1, #1
 8003162:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	223d      	movs	r2, #61	; 0x3d
 8003168:	2102      	movs	r1, #2
 800316a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4a5a      	ldr	r2, [pc, #360]	; (80032e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003178:	4013      	ands	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a59      	ldr	r2, [pc, #356]	; (80032e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	0192      	lsls	r2, r2, #6
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xde>
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	0192      	lsls	r2, r2, #6
 800319c:	4293      	cmp	r3, r2
 800319e:	d900      	bls.n	80031a2 <HAL_TIM_ConfigClockSource+0x66>
 80031a0:	e088      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	0152      	lsls	r2, r2, #5
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d100      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x70>
 80031aa:	e088      	b.n	80032be <HAL_TIM_ConfigClockSource+0x182>
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0152      	lsls	r2, r2, #5
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d900      	bls.n	80031b6 <HAL_TIM_ConfigClockSource+0x7a>
 80031b4:	e07e      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031b6:	2b70      	cmp	r3, #112	; 0x70
 80031b8:	d018      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0xb0>
 80031ba:	d900      	bls.n	80031be <HAL_TIM_ConfigClockSource+0x82>
 80031bc:	e07a      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031be:	2b60      	cmp	r3, #96	; 0x60
 80031c0:	d04f      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x126>
 80031c2:	d900      	bls.n	80031c6 <HAL_TIM_ConfigClockSource+0x8a>
 80031c4:	e076      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031c6:	2b50      	cmp	r3, #80	; 0x50
 80031c8:	d03b      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x106>
 80031ca:	d900      	bls.n	80031ce <HAL_TIM_ConfigClockSource+0x92>
 80031cc:	e072      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d057      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x146>
 80031d2:	d900      	bls.n	80031d6 <HAL_TIM_ConfigClockSource+0x9a>
 80031d4:	e06e      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031d6:	2b30      	cmp	r3, #48	; 0x30
 80031d8:	d063      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031da:	d86b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d060      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031e0:	d868      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d05d      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d05b      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031ea:	e063      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 fc3e 	bl	8003a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2277      	movs	r2, #119	; 0x77
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e052      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 fc27 	bl	8003a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	01c9      	lsls	r1, r1, #7
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e03e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	001a      	movs	r2, r3
 8003250:	f000 fb98 	bl	8003984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	; 0x50
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fbf2 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 8003260:	e02e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	001a      	movs	r2, r3
 8003270:	f000 fbb6 	bl	80039e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	; 0x60
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fbe2 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 8003280:	e01e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	001a      	movs	r2, r3
 8003290:	f000 fb78 	bl	8003984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fbd2 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 80032a0:	e00e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f000 fbc9 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 80032b2:	e005      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032b4:	230f      	movs	r3, #15
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
      break;
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	223d      	movs	r2, #61	; 0x3d
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	223c      	movs	r2, #60	; 0x3c
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]

  return status;
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	ffceff88 	.word	0xffceff88
 80032e4:	ffff00ff 	.word	0xffff00ff

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a38      	ldr	r2, [pc, #224]	; (80033dc <TIM_Base_SetConfig+0xf4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00c      	beq.n	800331a <TIM_Base_SetConfig+0x32>
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	429a      	cmp	r2, r3
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0x32>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <TIM_Base_SetConfig+0xf8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0x32>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a33      	ldr	r2, [pc, #204]	; (80033e4 <TIM_Base_SetConfig+0xfc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2270      	movs	r2, #112	; 0x70
 800331e:	4393      	bics	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <TIM_Base_SetConfig+0xf4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d01c      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	05db      	lsls	r3, r3, #23
 800333a:	429a      	cmp	r2, r3
 800333c:	d017      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <TIM_Base_SetConfig+0xf8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <TIM_Base_SetConfig+0xfc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00f      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <TIM_Base_SetConfig+0x100>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00b      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <TIM_Base_SetConfig+0x104>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <TIM_Base_SetConfig+0x108>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <TIM_Base_SetConfig+0x86>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <TIM_Base_SetConfig+0x10c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d108      	bne.n	8003380 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <TIM_Base_SetConfig+0x110>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	4393      	bics	r3, r2
 8003386:	001a      	movs	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <TIM_Base_SetConfig+0xf4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00b      	beq.n	80033c6 <TIM_Base_SetConfig+0xde>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <TIM_Base_SetConfig+0x104>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <TIM_Base_SetConfig+0xde>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <TIM_Base_SetConfig+0x108>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_Base_SetConfig+0xde>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <TIM_Base_SetConfig+0x10c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d103      	bne.n	80033ce <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	615a      	str	r2, [r3, #20]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b004      	add	sp, #16
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800
 80033e8:	40002000 	.word	0x40002000
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800
 80033f8:	fffffcff 	.word	0xfffffcff

080033fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	2201      	movs	r2, #1
 800340c:	4393      	bics	r3, r2
 800340e:	001a      	movs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <TIM_OC1_SetConfig+0xf8>)
 800342a:	4013      	ands	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2203      	movs	r2, #3
 8003432:	4393      	bics	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2202      	movs	r2, #2
 8003444:	4393      	bics	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <TIM_OC1_SetConfig+0xfc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_OC1_SetConfig+0x76>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <TIM_OC1_SetConfig+0x100>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_OC1_SetConfig+0x76>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a26      	ldr	r2, [pc, #152]	; (8003500 <TIM_OC1_SetConfig+0x104>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_OC1_SetConfig+0x76>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a25      	ldr	r2, [pc, #148]	; (8003504 <TIM_OC1_SetConfig+0x108>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10c      	bne.n	800348c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2208      	movs	r2, #8
 8003476:	4393      	bics	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2204      	movs	r2, #4
 8003488:	4393      	bics	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <TIM_OC1_SetConfig+0xfc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_OC1_SetConfig+0xb0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a19      	ldr	r2, [pc, #100]	; (80034fc <TIM_OC1_SetConfig+0x100>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_OC1_SetConfig+0xb0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <TIM_OC1_SetConfig+0x104>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_OC1_SetConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a17      	ldr	r2, [pc, #92]	; (8003504 <TIM_OC1_SetConfig+0x108>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4a16      	ldr	r2, [pc, #88]	; (8003508 <TIM_OC1_SetConfig+0x10c>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <TIM_OC1_SetConfig+0x110>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b006      	add	sp, #24
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	fffeff8f 	.word	0xfffeff8f
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	40014800 	.word	0x40014800
 8003508:	fffffeff 	.word	0xfffffeff
 800350c:	fffffdff 	.word	0xfffffdff

08003510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	2210      	movs	r2, #16
 8003520:	4393      	bics	r3, r2
 8003522:	001a      	movs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <TIM_OC2_SetConfig+0xe8>)
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <TIM_OC2_SetConfig+0xec>)
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2220      	movs	r2, #32
 800355a:	4393      	bics	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <TIM_OC2_SetConfig+0xf0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2280      	movs	r2, #128	; 0x80
 8003576:	4393      	bics	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	4393      	bics	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <TIM_OC2_SetConfig+0xf0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_OC2_SetConfig+0x9e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <TIM_OC2_SetConfig+0xf4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_OC2_SetConfig+0x9e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <TIM_OC2_SetConfig+0xf8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_OC2_SetConfig+0x9e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a18      	ldr	r2, [pc, #96]	; (800360c <TIM_OC2_SetConfig+0xfc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d113      	bne.n	80035d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <TIM_OC2_SetConfig+0x100>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4a16      	ldr	r2, [pc, #88]	; (8003614 <TIM_OC2_SetConfig+0x104>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b006      	add	sp, #24
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	feff8fff 	.word	0xfeff8fff
 80035fc:	fffffcff 	.word	0xfffffcff
 8003600:	40012c00 	.word	0x40012c00
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800
 8003610:	fffffbff 	.word	0xfffffbff
 8003614:	fffff7ff 	.word	0xfffff7ff

08003618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a35      	ldr	r2, [pc, #212]	; (80036fc <TIM_OC3_SetConfig+0xe4>)
 8003628:	401a      	ands	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <TIM_OC3_SetConfig+0xe8>)
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2203      	movs	r2, #3
 800364c:	4393      	bics	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <TIM_OC3_SetConfig+0xec>)
 800365e:	4013      	ands	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a25      	ldr	r2, [pc, #148]	; (8003708 <TIM_OC3_SetConfig+0xf0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10d      	bne.n	8003692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	4a24      	ldr	r2, [pc, #144]	; (800370c <TIM_OC3_SetConfig+0xf4>)
 800367a:	4013      	ands	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <TIM_OC3_SetConfig+0xf8>)
 800368e:	4013      	ands	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <TIM_OC3_SetConfig+0xf0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00b      	beq.n	80036b2 <TIM_OC3_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <TIM_OC3_SetConfig+0xfc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <TIM_OC3_SetConfig+0x9a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <TIM_OC3_SetConfig+0x100>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_OC3_SetConfig+0x9a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <TIM_OC3_SetConfig+0x104>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <TIM_OC3_SetConfig+0x108>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <TIM_OC3_SetConfig+0x10c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b006      	add	sp, #24
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	fffffeff 	.word	0xfffffeff
 8003700:	fffeff8f 	.word	0xfffeff8f
 8003704:	fffffdff 	.word	0xfffffdff
 8003708:	40012c00 	.word	0x40012c00
 800370c:	fffff7ff 	.word	0xfffff7ff
 8003710:	fffffbff 	.word	0xfffffbff
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	ffffefff 	.word	0xffffefff
 8003724:	ffffdfff 	.word	0xffffdfff

08003728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <TIM_OC4_SetConfig+0xb0>)
 8003738:	401a      	ands	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a22      	ldr	r2, [pc, #136]	; (80037dc <TIM_OC4_SetConfig+0xb4>)
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <TIM_OC4_SetConfig+0xb8>)
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <TIM_OC4_SetConfig+0xbc>)
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	031b      	lsls	r3, r3, #12
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <TIM_OC4_SetConfig+0xc0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00b      	beq.n	80037a0 <TIM_OC4_SetConfig+0x78>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <TIM_OC4_SetConfig+0xc4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_OC4_SetConfig+0x78>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <TIM_OC4_SetConfig+0xc8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_OC4_SetConfig+0x78>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <TIM_OC4_SetConfig+0xcc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d109      	bne.n	80037b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <TIM_OC4_SetConfig+0xd0>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	019b      	lsls	r3, r3, #6
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b006      	add	sp, #24
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	ffffefff 	.word	0xffffefff
 80037dc:	feff8fff 	.word	0xfeff8fff
 80037e0:	fffffcff 	.word	0xfffffcff
 80037e4:	ffffdfff 	.word	0xffffdfff
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800
 80037f8:	ffffbfff 	.word	0xffffbfff

080037fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <TIM_OC5_SetConfig+0xa4>)
 800380c:	401a      	ands	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <TIM_OC5_SetConfig+0xa8>)
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <TIM_OC5_SetConfig+0xac>)
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <TIM_OC5_SetConfig+0xb0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00b      	beq.n	800386a <TIM_OC5_SetConfig+0x6e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a16      	ldr	r2, [pc, #88]	; (80038b0 <TIM_OC5_SetConfig+0xb4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <TIM_OC5_SetConfig+0x6e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <TIM_OC5_SetConfig+0xb8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_OC5_SetConfig+0x6e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <TIM_OC5_SetConfig+0xbc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d109      	bne.n	800387e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <TIM_OC5_SetConfig+0xa4>)
 800386e:	4013      	ands	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b006      	add	sp, #24
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	fffeffff 	.word	0xfffeffff
 80038a4:	fffeff8f 	.word	0xfffeff8f
 80038a8:	fffdffff 	.word	0xfffdffff
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40014000 	.word	0x40014000
 80038b4:	40014400 	.word	0x40014400
 80038b8:	40014800 	.word	0x40014800

080038bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a26      	ldr	r2, [pc, #152]	; (8003964 <TIM_OC6_SetConfig+0xa8>)
 80038cc:	401a      	ands	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a20      	ldr	r2, [pc, #128]	; (8003968 <TIM_OC6_SetConfig+0xac>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <TIM_OC6_SetConfig+0xb0>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	051b      	lsls	r3, r3, #20
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <TIM_OC6_SetConfig+0xb4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00b      	beq.n	800392c <TIM_OC6_SetConfig+0x70>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <TIM_OC6_SetConfig+0xb8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_OC6_SetConfig+0x70>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <TIM_OC6_SetConfig+0xbc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_OC6_SetConfig+0x70>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a15      	ldr	r2, [pc, #84]	; (800397c <TIM_OC6_SetConfig+0xc0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d109      	bne.n	8003940 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <TIM_OC6_SetConfig+0xc4>)
 8003930:	4013      	ands	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b006      	add	sp, #24
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	ffefffff 	.word	0xffefffff
 8003968:	feff8fff 	.word	0xfeff8fff
 800396c:	ffdfffff 	.word	0xffdfffff
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40014000 	.word	0x40014000
 8003978:	40014400 	.word	0x40014400
 800397c:	40014800 	.word	0x40014800
 8003980:	fffbffff 	.word	0xfffbffff

08003984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	2201      	movs	r2, #1
 800399c:	4393      	bics	r3, r2
 800399e:	001a      	movs	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	22f0      	movs	r2, #240	; 0xf0
 80039ae:	4393      	bics	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	220a      	movs	r2, #10
 80039c0:	4393      	bics	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b006      	add	sp, #24
 80039de:	bd80      	pop	{r7, pc}

080039e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	2210      	movs	r2, #16
 80039f2:	4393      	bics	r3, r2
 80039f4:	001a      	movs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <TIM_TI2_ConfigInputStage+0x60>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	031b      	lsls	r3, r3, #12
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	22a0      	movs	r2, #160	; 0xa0
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	ffff0fff 	.word	0xffff0fff

08003a44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <TIM_ITRx_SetConfig+0x34>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	2207      	movs	r2, #7
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	ffcfff8f 	.word	0xffcfff8f

08003a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <TIM_ETR_SetConfig+0x3c>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	021a      	lsls	r2, r3, #8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b006      	add	sp, #24
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	ffff00ff 	.word	0xffff00ff

08003abc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	221f      	movs	r2, #31
 8003acc:	4013      	ands	r3, r2
 8003ace:	2201      	movs	r2, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	43d2      	mvns	r2, r2
 8003ade:	401a      	ands	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	211f      	movs	r1, #31
 8003aec:	400b      	ands	r3, r1
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4099      	lsls	r1, r3
 8003af2:	000b      	movs	r3, r1
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b006      	add	sp, #24
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223c      	movs	r2, #60	; 0x3c
 8003b12:	5c9b      	ldrb	r3, [r3, r2]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e05a      	b.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	223c      	movs	r2, #60	; 0x3c
 8003b20:	2101      	movs	r1, #1
 8003b22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	223d      	movs	r2, #61	; 0x3d
 8003b28:	2102      	movs	r1, #2
 8003b2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2270      	movs	r2, #112	; 0x70
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d014      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	05db      	lsls	r3, r3, #23
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a12      	ldr	r2, [pc, #72]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2280      	movs	r2, #128	; 0x80
 8003baa:	4393      	bics	r3, r2
 8003bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	223d      	movs	r2, #61	; 0x3d
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	223c      	movs	r2, #60	; 0x3c
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	ff0fffff 	.word	0xff0fffff
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40014000 	.word	0x40014000

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	; (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	; (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	2600      	movs	r6, #0
 8003c02:	f000 f821 	bl	8003c48 <_init>
 8003c06:	4d0a      	ldr	r5, [pc, #40]	; (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	00b3      	lsls	r3, r6, #2
 8003c16:	58eb      	ldr	r3, [r5, r3]
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	00b3      	lsls	r3, r6, #2
 8003c20:	58eb      	ldr	r3, [r5, r3]
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08003cf4 	.word	0x08003cf4
 8003c2c:	08003cf4 	.word	0x08003cf4
 8003c30:	08003cf4 	.word	0x08003cf4
 8003c34:	08003cf8 	.word	0x08003cf8

08003c38 <memset>:
 8003c38:	0003      	movs	r3, r0
 8003c3a:	1882      	adds	r2, r0, r2
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	7019      	strb	r1, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
