
s6_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e0c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f5c  08003f5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f5c  08003f5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f5c  08003f5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003f70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003f70  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d56b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efb  00000000  00000000  0002d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0002f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0ab  00000000  00000000  00030f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e90c  00000000  00000000  0004d043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb31e  00000000  00000000  0005b94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00116c6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003254  00000000  00000000  00116cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003eb0 	.word	0x08003eb0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003eb0 	.word	0x08003eb0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000220:	f000 fad4 	bl	80007cc <HAL_Init>
    SystemClock_Config();
 8000224:	f000 f838 	bl	8000298 <SystemClock_Config>
    MX_GPIO_Init();
 8000228:	f000 f980 	bl	800052c <MX_GPIO_Init>
    MX_ADC1_Init();
 800022c:	f000 f892 	bl	8000354 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000230:	f000 f8fc 	bl	800042c <MX_TIM2_Init>


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <main+0x48>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f002 fec3 	bl	8002fc4 <HAL_TIM_PWM_Start>
    // Calibrate The ADC On Power-Up For Better Accuracy
    HAL_ADCEx_Calibration_Start(&hadc1);
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0x4c>)
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fb61 	bl	8001908 <HAL_ADCEx_Calibration_Start>


    while (1)
    {
    	// Start ADC Conversion
    	 HAL_ADC_Start_IT(&hadc1);
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <main+0x4c>)
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fe75 	bl	8000f38 <HAL_ADC_Start_IT>
        // Update The PWM Duty Cycle With Latest ADC Conversion Result
        TIM2->CCR1 = (AD_RES<<4);
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <main+0x50>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	011a      	lsls	r2, r3, #4
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fb3c 	bl	80008d8 <HAL_Delay>
    	 HAL_ADC_Start_IT(&hadc1);
 8000260:	e7f1      	b.n	8000246 <main+0x2a>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	20000090 	.word	0x20000090
 8000268:	2000002c 	.word	0x2000002c
 800026c:	20000028 	.word	0x20000028

08000270 <HAL_ADC_ConvCpltCallback>:
    }
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

 // Read & Update The ADC Result
    AD_RES = HAL_ADC_GetValue(&hadc1);
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_ADC_ConvCpltCallback+0x20>)
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fed4 	bl	8001028 <HAL_ADC_GetValue>
 8000280:	0003      	movs	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_ADC_ConvCpltCallback+0x24>)
 8000286:	801a      	strh	r2, [r3, #0]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000002c 	.word	0x2000002c
 8000294:	20000028 	.word	0x20000028

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b095      	sub	sp, #84	; 0x54
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2414      	movs	r4, #20
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	233c      	movs	r3, #60	; 0x3c
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f003 fdf9 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f003 fdf2 	bl	8003ea0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 fe61 	bl	8001f88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2202      	movs	r2, #2
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	0052      	lsls	r2, r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2240      	movs	r2, #64	; 0x40
 80002e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2202      	movs	r2, #2
 80002ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2208      	movs	r2, #8
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	0292      	lsls	r2, r2, #10
 8000300:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	0492      	lsls	r2, r2, #18
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0592      	lsls	r2, r2, #22
 8000310:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	187b      	adds	r3, r7, r1
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fe77 	bl	8002008 <HAL_RCC_OscConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031e:	f000 f91b 	bl	8000558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2207      	movs	r2, #7
 8000326:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2202      	movs	r2, #2
 800032c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2102      	movs	r1, #2
 800033e:	0018      	movs	r0, r3
 8000340:	f002 f9c2 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000348:	f000 f906 	bl	8000558 <Error_Handler>
  }
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b015      	add	sp, #84	; 0x54
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	230c      	movs	r3, #12
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f003 fd9c 	bl	8003ea0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <MX_ADC1_Init+0xcc>)
 800036a:	4a2e      	ldr	r2, [pc, #184]	; (8000424 <MX_ADC1_Init+0xd0>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	05d2      	lsls	r2, r2, #23
 8000374:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_ADC1_Init+0xcc>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_ADC1_Init+0xcc>)
 800038a:	2204      	movs	r2, #4
 800038c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000390:	2200      	movs	r2, #0
 8000392:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000396:	2200      	movs	r2, #0
 8000398:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_ADC1_Init+0xcc>)
 800039c:	2200      	movs	r2, #0
 800039e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003a8:	2220      	movs	r2, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003bc:	222c      	movs	r2, #44	; 0x2c
 80003be:	2100      	movs	r1, #0
 80003c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003d6:	223c      	movs	r2, #60	; 0x3c
 80003d8:	2100      	movs	r1, #0
 80003da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003de:	2200      	movs	r2, #0
 80003e0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fbff 	bl	8000be8 <HAL_ADC_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003ee:	f000 f8b3 	bl	8000558 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <MX_ADC1_Init+0xd4>)
 80003f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	1d3a      	adds	r2, r7, #4
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000408:	0011      	movs	r1, r2
 800040a:	0018      	movs	r0, r3
 800040c:	f000 ff40 	bl	8001290 <HAL_ADC_ConfigChannel>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000414:	f000 f8a0 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b004      	add	sp, #16
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000002c 	.word	0x2000002c
 8000424:	40012400 	.word	0x40012400
 8000428:	1c000080 	.word	0x1c000080

0800042c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08e      	sub	sp, #56	; 0x38
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000432:	2328      	movs	r3, #40	; 0x28
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	0018      	movs	r0, r3
 8000438:	2310      	movs	r3, #16
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f003 fd2f 	bl	8003ea0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000442:	231c      	movs	r3, #28
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	230c      	movs	r3, #12
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f003 fd27 	bl	8003ea0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000452:	003b      	movs	r3, r7
 8000454:	0018      	movs	r0, r3
 8000456:	231c      	movs	r3, #28
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f003 fd20 	bl	8003ea0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000460:	4b30      	ldr	r3, [pc, #192]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	05d2      	lsls	r2, r2, #23
 8000466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000468:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <MX_TIM2_Init+0xf8>)
 800046a:	2201      	movs	r2, #1
 800046c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000476:	4a2c      	ldr	r2, [pc, #176]	; (8000528 <MX_TIM2_Init+0xfc>)
 8000478:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <MX_TIM2_Init+0xf8>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000486:	4b27      	ldr	r3, [pc, #156]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000488:	0018      	movs	r0, r3
 800048a:	f002 fce3 	bl	8002e54 <HAL_TIM_Base_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000492:	f000 f861 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000496:	2128      	movs	r1, #40	; 0x28
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0152      	lsls	r2, r2, #5
 800049e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a0:	187a      	adds	r2, r7, r1
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <MX_TIM2_Init+0xf8>)
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 ff7c 	bl	80033a4 <HAL_TIM_ConfigClockSource>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004b0:	f000 f852 	bl	8000558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_TIM2_Init+0xf8>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 fd24 	bl	8002f04 <HAL_TIM_PWM_Init>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004c0:	f000 f84a 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c4:	211c      	movs	r1, #28
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d2:	187a      	adds	r2, r7, r1
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_TIM2_Init+0xf8>)
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f003 fc47 	bl	8003d6c <HAL_TIMEx_MasterConfigSynchronization>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004e2:	f000 f839 	bl	8000558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2260      	movs	r2, #96	; 0x60
 80004ea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004ec:	003b      	movs	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f8:	003b      	movs	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fe:	0039      	movs	r1, r7
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000502:	2200      	movs	r2, #0
 8000504:	0018      	movs	r0, r3
 8000506:	f002 fe4d 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800050e:	f000 f823 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <MX_TIM2_Init+0xf8>)
 8000514:	0018      	movs	r0, r3
 8000516:	f000 f8c9 	bl	80006ac <HAL_TIM_MspPostInit>

}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b00e      	add	sp, #56	; 0x38
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000090 	.word	0x20000090
 8000528:	0000ffff 	.word	0x0000ffff

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_GPIO_Init+0x28>)
 8000534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <MX_GPIO_Init+0x28>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <MX_GPIO_Init+0x28>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x44>)
 800056c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_MspInit+0x44>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	641a      	str	r2, [r3, #64]	; 0x40
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x44>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_MspInit+0x44>)
 8000584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <HAL_MspInit+0x44>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0549      	lsls	r1, r1, #21
 800058c:	430a      	orrs	r2, r1
 800058e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_MspInit+0x44>)
 8000592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	055b      	lsls	r3, r3, #21
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b09d      	sub	sp, #116	; 0x74
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	235c      	movs	r3, #92	; 0x5c
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	0018      	movs	r0, r3
 80005ba:	2314      	movs	r3, #20
 80005bc:	001a      	movs	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f003 fc6e 	bl	8003ea0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c4:	2410      	movs	r4, #16
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	234c      	movs	r3, #76	; 0x4c
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f003 fc66 	bl	8003ea0 <memset>
  if(hadc->Instance==ADC1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a24      	ldr	r2, [pc, #144]	; (800066c <HAL_ADC_MspInit+0xc0>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d141      	bne.n	8000662 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	01d2      	lsls	r2, r2, #7
 80005e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2200      	movs	r2, #0
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 f9f4 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80005f8:	f7ff ffae 	bl	8000558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <HAL_ADC_MspInit+0xc4>)
 80005fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_ADC_MspInit+0xc4>)
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	0349      	lsls	r1, r1, #13
 8000606:	430a      	orrs	r2, r1
 8000608:	641a      	str	r2, [r3, #64]	; 0x40
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <HAL_ADC_MspInit+0xc4>)
 800060c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	035b      	lsls	r3, r3, #13
 8000612:	4013      	ands	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_ADC_MspInit+0xc4>)
 800061a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_ADC_MspInit+0xc4>)
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_ADC_MspInit+0xc4>)
 8000626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000628:	2201      	movs	r2, #1
 800062a:	4013      	ands	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000630:	215c      	movs	r1, #92	; 0x5c
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2203      	movs	r2, #3
 800063c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	187a      	adds	r2, r7, r1
 8000646:	23a0      	movs	r3, #160	; 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fb2f 	bl	8001cb0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	200c      	movs	r0, #12
 8000658:	f001 faf8 	bl	8001c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800065c:	200c      	movs	r0, #12
 800065e:	f001 fb0a 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b01d      	add	sp, #116	; 0x74
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40012400 	.word	0x40012400
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	429a      	cmp	r2, r3
 8000686:	d10b      	bne.n	80006a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_TIM_Base_MspInit+0x34>)
 800068a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_TIM_Base_MspInit+0x34>)
 800068e:	2101      	movs	r1, #1
 8000690:	430a      	orrs	r2, r1
 8000692:	63da      	str	r2, [r3, #60]	; 0x3c
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <HAL_TIM_Base_MspInit+0x34>)
 8000696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000698:	2201      	movs	r2, #1
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b004      	add	sp, #16
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	240c      	movs	r4, #12
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	0018      	movs	r0, r3
 80006ba:	2314      	movs	r3, #20
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f003 fbee 	bl	8003ea0 <memset>
  if(htim->Instance==TIM2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d122      	bne.n	8000716 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_TIM_MspPostInit+0x74>)
 80006d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_TIM_MspPostInit+0x74>)
 80006d6:	2101      	movs	r1, #1
 80006d8:	430a      	orrs	r2, r1
 80006da:	635a      	str	r2, [r3, #52]	; 0x34
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_TIM_MspPostInit+0x74>)
 80006de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e0:	2201      	movs	r2, #1
 80006e2:	4013      	ands	r3, r2
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e8:	0021      	movs	r1, r4
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2202      	movs	r2, #2
 80006f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	187a      	adds	r2, r7, r1
 800070a:	23a0      	movs	r3, #160	; 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f001 facd 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b009      	add	sp, #36	; 0x24
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f8aa 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <ADC1_COMP_IRQHandler+0x14>)
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fc70 	bl	8001040 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	2000002c 	.word	0x2000002c

0800076c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800077c:	f7ff fff6 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f003 fb57 	bl	8003e58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007aa:	f7ff fd37 	bl	800021c <main>

080007ae <LoopForever>:

LoopForever:
  b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007bc:	08003f64 	.word	0x08003f64
  ldr r2, =_sbss
 80007c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c4:	200000e0 	.word	0x200000e0

080007c8 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <CEC_IRQHandler>
	...

080007cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <HAL_Init+0x3c>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_Init+0x3c>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	0049      	lsls	r1, r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e6:	2003      	movs	r0, #3
 80007e8:	f000 f810 	bl	800080c <HAL_InitTick>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d003      	beq.n	80007f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e001      	b.n	80007fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff feb4 	bl	8000564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40022000 	.word	0x40022000

0800080c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_InitTick+0x88>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d02b      	beq.n	800087c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_InitTick+0x8c>)
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_InitTick+0x88>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	f7ff fc67 	bl	8000104 <__udivsi3>
 8000836:	0003      	movs	r3, r0
 8000838:	0019      	movs	r1, r3
 800083a:	0020      	movs	r0, r4
 800083c:	f7ff fc62 	bl	8000104 <__udivsi3>
 8000840:	0003      	movs	r3, r0
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fa27 	bl	8001c96 <HAL_SYSTICK_Config>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d112      	bne.n	8000872 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b03      	cmp	r3, #3
 8000850:	d80a      	bhi.n	8000868 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2301      	movs	r3, #1
 8000856:	425b      	negs	r3, r3
 8000858:	2200      	movs	r2, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f001 f9f6 	bl	8001c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_InitTick+0x90>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e00d      	b.n	8000884 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e008      	b.n	8000884 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e003      	b.n	8000884 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800087c:	230f      	movs	r3, #15
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000884:	230f      	movs	r3, #15
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	781b      	ldrb	r3, [r3, #0]
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b005      	add	sp, #20
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000008 	.word	0x20000008
 8000898:	20000000 	.word	0x20000000
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	001a      	movs	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	18d2      	adds	r2, r2, r3
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200000dc 	.word	0x200000dc

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	200000dc 	.word	0x200000dc

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	0003      	movs	r3, r0
 80008e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	001a      	movs	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	0002      	movs	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000008 	.word	0x20000008

08000920 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000930:	401a      	ands	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	431a      	orrs	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	fe3fffff 	.word	0xfe3fffff

08000948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	23e0      	movs	r3, #224	; 0xe0
 8000956:	045b      	lsls	r3, r3, #17
 8000958:	4013      	ands	r3, r2
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	2104      	movs	r1, #4
 8000976:	400a      	ands	r2, r1
 8000978:	2107      	movs	r1, #7
 800097a:	4091      	lsls	r1, r2
 800097c:	000a      	movs	r2, r1
 800097e:	43d2      	mvns	r2, r2
 8000980:	401a      	ands	r2, r3
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2104      	movs	r1, #4
 8000986:	400b      	ands	r3, r1
 8000988:	6879      	ldr	r1, [r7, #4]
 800098a:	4099      	lsls	r1, r3
 800098c:	000b      	movs	r3, r1
 800098e:	431a      	orrs	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b004      	add	sp, #16
 800099a:	bd80      	pop	{r7, pc}

0800099c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	2104      	movs	r1, #4
 80009ae:	400a      	ands	r2, r1
 80009b0:	2107      	movs	r1, #7
 80009b2:	4091      	lsls	r1, r2
 80009b4:	000a      	movs	r2, r1
 80009b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	2104      	movs	r1, #4
 80009bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009be:	40da      	lsrs	r2, r3
 80009c0:	0013      	movs	r3, r2
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	4013      	ands	r3, r2
 80009dc:	d101      	bne.n	80009e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}

080009ec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	211f      	movs	r1, #31
 8000a00:	400a      	ands	r2, r1
 8000a02:	210f      	movs	r1, #15
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	0e9b      	lsrs	r3, r3, #26
 8000a10:	210f      	movs	r1, #15
 8000a12:	4019      	ands	r1, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	201f      	movs	r0, #31
 8000a18:	4003      	ands	r3, r0
 8000a1a:	4099      	lsls	r1, r3
 8000a1c:	000b      	movs	r3, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b004      	add	sp, #16
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	035b      	lsls	r3, r3, #13
 8000a3e:	0b5b      	lsrs	r3, r3, #13
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	0352      	lsls	r2, r2, #13
 8000a60:	0b52      	lsrs	r2, r2, #13
 8000a62:	43d2      	mvns	r2, r2
 8000a64:	401a      	ands	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4013      	ands	r3, r2
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	0212      	lsls	r2, r2, #8
 8000aa0:	43d2      	mvns	r2, r2
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
 8000aac:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000aae:	400b      	ands	r3, r1
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b004      	add	sp, #16
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	07ffff00 	.word	0x07ffff00

08000ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	0552      	lsls	r2, r2, #21
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	6fffffe8 	.word	0x6fffffe8

08000aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	055b      	lsls	r3, r3, #21
 8000afc:	401a      	ands	r2, r3
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	055b      	lsls	r3, r3, #21
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d101      	bne.n	8000b0a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <LL_ADC_Enable+0x20>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	2201      	movs	r2, #1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	7fffffe8 	.word	0x7fffffe8

08000b38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <LL_ADC_Disable+0x20>)
 8000b46:	4013      	ands	r3, r2
 8000b48:	2202      	movs	r2, #2
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	7fffffe8 	.word	0x7fffffe8

08000b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <LL_ADC_IsEnabled+0x18>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <LL_ADC_IsEnabled+0x1a>
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d101      	bne.n	8000b96 <LL_ADC_IsDisableOngoing+0x18>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <LL_ADC_IsDisableOngoing+0x1a>
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <LL_ADC_REG_StartConversion+0x20>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	7fffffe8 	.word	0x7fffffe8

08000bc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d101      	bne.n	8000bdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf0:	231f      	movs	r3, #31
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e17f      	b.n	8000f0e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10a      	bne.n	8000c2c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fcc7 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2254      	movs	r2, #84	; 0x54
 8000c28:	2100      	movs	r1, #0
 8000c2a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff5b 	bl	8000aec <LL_ADC_IsInternalRegulatorEnabled>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d115      	bne.n	8000c66 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff ff40 	bl	8000ac4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c44:	4bb4      	ldr	r3, [pc, #720]	; (8000f18 <HAL_ADC_Init+0x330>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	49b4      	ldr	r1, [pc, #720]	; (8000f1c <HAL_ADC_Init+0x334>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fa5a 	bl	8000104 <__udivsi3>
 8000c50:	0003      	movs	r3, r0
 8000c52:	3301      	adds	r3, #1
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c58:	e002      	b.n	8000c60 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f9      	bne.n	8000c5a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff ff3e 	bl	8000aec <LL_ADC_IsInternalRegulatorEnabled>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d10f      	bne.n	8000c94 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	2210      	movs	r2, #16
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c84:	2201      	movs	r2, #1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c8c:	231f      	movs	r3, #31
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff93 	bl	8000bc4 <LL_ADC_REG_IsConversionOngoing>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	2210      	movs	r2, #16
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d000      	beq.n	8000cae <HAL_ADC_Init+0xc6>
 8000cac:	e122      	b.n	8000ef4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d000      	beq.n	8000cb6 <HAL_ADC_Init+0xce>
 8000cb4:	e11e      	b.n	8000ef4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	4a99      	ldr	r2, [pc, #612]	; (8000f20 <HAL_ADC_Init+0x338>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff ff46 	bl	8000b5c <LL_ADC_IsEnabled>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d000      	beq.n	8000cd6 <HAL_ADC_Init+0xee>
 8000cd4:	e0ad      	b.n	8000e32 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7e1b      	ldrb	r3, [r3, #24]
 8000cde:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000ce0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	7e5b      	ldrb	r3, [r3, #25]
 8000ce6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000ce8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7e9b      	ldrb	r3, [r3, #26]
 8000cee:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000cf0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <HAL_ADC_Init+0x118>
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	015b      	lsls	r3, r3, #5
 8000cfe:	e000      	b.n	8000d02 <HAL_ADC_Init+0x11a>
 8000d00:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d02:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d08:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da04      	bge.n	8000d1c <HAL_ADC_Init+0x134>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	e001      	b.n	8000d20 <HAL_ADC_Init+0x138>
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000d20:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	212c      	movs	r1, #44	; 0x2c
 8000d26:	5c5b      	ldrb	r3, [r3, r1]
 8000d28:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d2a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2220      	movs	r2, #32
 8000d36:	5c9b      	ldrb	r3, [r3, r2]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d115      	bne.n	8000d68 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7e9b      	ldrb	r3, [r3, #26]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d105      	bne.n	8000d50 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0252      	lsls	r2, r2, #9
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e00b      	b.n	8000d68 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d54:	2220      	movs	r2, #32
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d60:	2201      	movs	r2, #1
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00a      	beq.n	8000d86 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d74:	23e0      	movs	r3, #224	; 0xe0
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	4a65      	ldr	r2, [pc, #404]	; (8000f24 <HAL_ADC_Init+0x33c>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	0019      	movs	r1, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	0f9b      	lsrs	r3, r3, #30
 8000da2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000da8:	4313      	orrs	r3, r2
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	223c      	movs	r2, #60	; 0x3c
 8000db4:	5c9b      	ldrb	r3, [r3, r2]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d111      	bne.n	8000dde <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	0f9b      	lsrs	r3, r3, #30
 8000dc0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dc6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000dcc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000dd2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <HAL_ADC_Init+0x340>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	0019      	movs	r1, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	23c0      	movs	r3, #192	; 0xc0
 8000dfa:	061b      	lsls	r3, r3, #24
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d018      	beq.n	8000e32 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d012      	beq.n	8000e32 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	061b      	lsls	r3, r3, #24
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d00c      	beq.n	8000e32 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e18:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <HAL_ADC_Init+0x344>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a44      	ldr	r2, [pc, #272]	; (8000f30 <HAL_ADC_Init+0x348>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	23f0      	movs	r3, #240	; 0xf0
 8000e28:	039b      	lsls	r3, r3, #14
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <HAL_ADC_Init+0x344>)
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f7ff fd90 	bl	8000962 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e4a:	493a      	ldr	r1, [pc, #232]	; (8000f34 <HAL_ADC_Init+0x34c>)
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	f7ff fd88 	bl	8000962 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2110      	movs	r1, #16
 8000e66:	4249      	negs	r1, r1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8000e6c:	e018      	b.n	8000ea0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691a      	ldr	r2, [r3, #16]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	039b      	lsls	r3, r3, #14
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d112      	bne.n	8000ea0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	221c      	movs	r2, #28
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	4252      	negs	r2, r2
 8000e90:	409a      	lsls	r2, r3
 8000e92:	0011      	movs	r1, r2
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff fd78 	bl	800099c <LL_ADC_GetSamplingTimeCommonChannels>
 8000eac:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d10b      	bne.n	8000ece <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4393      	bics	r3, r2
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ecc:	e01c      	b.n	8000f08 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	2212      	movs	r2, #18
 8000ed4:	4393      	bics	r3, r2
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000eea:	231f      	movs	r3, #31
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ef2:	e009      	b.n	8000f08 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	2210      	movs	r2, #16
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f00:	231f      	movs	r3, #31
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f08:	231f      	movs	r3, #31
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b008      	add	sp, #32
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	00030d40 	.word	0x00030d40
 8000f20:	fffffefd 	.word	0xfffffefd
 8000f24:	fffe0201 	.word	0xfffe0201
 8000f28:	1ffffc02 	.word	0x1ffffc02
 8000f2c:	40012708 	.word	0x40012708
 8000f30:	ffc3ffff 	.word	0xffc3ffff
 8000f34:	07ffff04 	.word	0x07ffff04

08000f38 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fe3d 	bl	8000bc4 <LL_ADC_REG_IsConversionOngoing>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d15f      	bne.n	800100e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2254      	movs	r2, #84	; 0x54
 8000f52:	5c9b      	ldrb	r3, [r3, r2]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_Start_IT+0x24>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e05f      	b.n	800101c <HAL_ADC_Start_IT+0xe4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2254      	movs	r2, #84	; 0x54
 8000f60:	2101      	movs	r1, #1
 8000f62:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f64:	250f      	movs	r5, #15
 8000f66:	197c      	adds	r4, r7, r5
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f000 fb68 	bl	8001640 <ADC_Enable>
 8000f70:	0003      	movs	r3, r0
 8000f72:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d143      	bne.n	8001004 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_ADC_Start_IT+0xec>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	0052      	lsls	r2, r2, #1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	221c      	movs	r2, #28
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2254      	movs	r2, #84	; 0x54
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	211c      	movs	r1, #28
 8000fb0:	438a      	bics	r2, r1
 8000fb2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d108      	bne.n	8000fce <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	605a      	str	r2, [r3, #4]
          break;
 8000fcc:	e008      	b.n	8000fe0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2104      	movs	r1, #4
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]
          break;
 8000fde:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fdcf 	bl	8000ba0 <LL_ADC_REG_StartConversion>
 8001002:	e008      	b.n	8001016 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2254      	movs	r2, #84	; 0x54
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]
 800100c:	e003      	b.n	8001016 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800100e:	230f      	movs	r3, #15
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	2202      	movs	r2, #2
 8001014:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001016:	230f      	movs	r3, #15
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bdb0      	pop	{r4, r5, r7, pc}
 8001024:	fffff0fe 	.word	0xfffff0fe

08001028 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d017      	beq.n	8001094 <HAL_ADC_IRQHandler+0x54>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2202      	movs	r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	d013      	beq.n	8001094 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	2210      	movs	r2, #16
 8001072:	4013      	ands	r3, r2
 8001074:	d106      	bne.n	8001084 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	0018      	movs	r0, r3
 8001088:	f000 fd24 	bl	8001ad4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2202      	movs	r2, #2
 8001092:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2204      	movs	r2, #4
 8001098:	4013      	ands	r3, r2
 800109a:	d003      	beq.n	80010a4 <HAL_ADC_IRQHandler+0x64>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
 80010a2:	d107      	bne.n	80010b4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2208      	movs	r2, #8
 80010a8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80010aa:	d04d      	beq.n	8001148 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2208      	movs	r2, #8
 80010b0:	4013      	ands	r3, r2
 80010b2:	d049      	beq.n	8001148 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	2210      	movs	r2, #16
 80010ba:	4013      	ands	r3, r2
 80010bc:	d106      	bne.n	80010cc <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fc7a 	bl	80009ca <LL_ADC_REG_IsTriggerSourceSWStart>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d02e      	beq.n	8001138 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7e9b      	ldrb	r3, [r3, #26]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d12a      	bne.n	8001138 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2208      	movs	r2, #8
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d123      	bne.n	8001138 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff fd65 	bl	8000bc4 <LL_ADC_REG_IsConversionOngoing>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d110      	bne.n	8001120 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	210c      	movs	r1, #12
 800110a:	438a      	bics	r2, r1
 800110c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	4a56      	ldr	r2, [pc, #344]	; (800126c <HAL_ADC_IRQHandler+0x22c>)
 8001114:	4013      	ands	r3, r2
 8001116:	2201      	movs	r2, #1
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	659a      	str	r2, [r3, #88]	; 0x58
 800111e:	e00b      	b.n	8001138 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	2220      	movs	r2, #32
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001130:	2201      	movs	r2, #1
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff f898 	bl	8000270 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	220c      	movs	r2, #12
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	4013      	ands	r3, r2
 800114e:	d012      	beq.n	8001176 <HAL_ADC_IRQHandler+0x136>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	4013      	ands	r3, r2
 8001156:	d00e      	beq.n	8001176 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	0252      	lsls	r2, r2, #9
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0018      	movs	r0, r3
 800116a:	f000 f881 	bl	8001270 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d014      	beq.n	80011aa <HAL_ADC_IRQHandler+0x16a>
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4013      	ands	r3, r2
 8001188:	d00f      	beq.n	80011aa <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0292      	lsls	r2, r2, #10
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fc8a 	bl	8001ab4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	0052      	lsls	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d014      	beq.n	80011de <HAL_ADC_IRQHandler+0x19e>
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d00f      	beq.n	80011de <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	02d2      	lsls	r2, r2, #11
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 fc78 	bl	8001ac4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	2210      	movs	r2, #16
 80011e2:	4013      	ands	r3, r2
 80011e4:	d02b      	beq.n	800123e <HAL_ADC_IRQHandler+0x1fe>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2210      	movs	r2, #16
 80011ea:	4013      	ands	r3, r2
 80011ec:	d027      	beq.n	800123e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e008      	b.n	800120e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff fc36 	bl	8000a72 <LL_ADC_REG_GetDMATransfer>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800120a:	2301      	movs	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d110      	bne.n	8001236 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	00d2      	lsls	r2, r2, #3
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2202      	movs	r2, #2
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0018      	movs	r0, r3
 8001232:	f000 f825 	bl	8001280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2210      	movs	r2, #16
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	019b      	lsls	r3, r3, #6
 8001244:	4013      	ands	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_ADC_IRQHandler+0x224>
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	4013      	ands	r3, r2
 8001250:	d008      	beq.n	8001264 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	0018      	movs	r0, r3
 8001256:	f000 fc45 	bl	8001ae4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	0192      	lsls	r2, r2, #6
 8001262:	601a      	str	r2, [r3, #0]
  }
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b006      	add	sp, #24
 800126a:	bd80      	pop	{r7, pc}
 800126c:	fffffefe 	.word	0xfffffefe

08001270 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800129a:	2317      	movs	r3, #23
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2254      	movs	r2, #84	; 0x54
 80012aa:	5c9b      	ldrb	r3, [r3, r2]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x24>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e1c0      	b.n	8001636 <HAL_ADC_ConfigChannel+0x3a6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2254      	movs	r2, #84	; 0x54
 80012b8:	2101      	movs	r1, #1
 80012ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fc7f 	bl	8000bc4 <LL_ADC_REG_IsConversionOngoing>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d000      	beq.n	80012cc <HAL_ADC_ConfigChannel+0x3c>
 80012ca:	e1a3      	b.n	8001614 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d100      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x46>
 80012d4:	e143      	b.n	800155e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	061b      	lsls	r3, r3, #24
 80012de:	429a      	cmp	r2, r3
 80012e0:	d004      	beq.n	80012ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012e6:	4ac1      	ldr	r2, [pc, #772]	; (80015ec <HAL_ADC_ConfigChannel+0x35c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d108      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0019      	movs	r1, r3
 80012f6:	0010      	movs	r0, r2
 80012f8:	f7ff fb98 	bl	8000a2c <LL_ADC_REG_SetSequencerChAdd>
 80012fc:	e0c9      	b.n	8001492 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	211f      	movs	r1, #31
 8001308:	400b      	ands	r3, r1
 800130a:	210f      	movs	r1, #15
 800130c:	4099      	lsls	r1, r3
 800130e:	000b      	movs	r3, r1
 8001310:	43db      	mvns	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	035b      	lsls	r3, r3, #13
 800131c:	0b5b      	lsrs	r3, r3, #13
 800131e:	d105      	bne.n	800132c <HAL_ADC_ConfigChannel+0x9c>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0e9b      	lsrs	r3, r3, #26
 8001326:	221f      	movs	r2, #31
 8001328:	4013      	ands	r3, r2
 800132a:	e098      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	d000      	beq.n	8001338 <HAL_ADC_ConfigChannel+0xa8>
 8001336:	e091      	b.n	800145c <HAL_ADC_ConfigChannel+0x1cc>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2202      	movs	r2, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d000      	beq.n	8001344 <HAL_ADC_ConfigChannel+0xb4>
 8001342:	e089      	b.n	8001458 <HAL_ADC_ConfigChannel+0x1c8>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2204      	movs	r2, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d000      	beq.n	8001350 <HAL_ADC_ConfigChannel+0xc0>
 800134e:	e081      	b.n	8001454 <HAL_ADC_ConfigChannel+0x1c4>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2208      	movs	r2, #8
 8001356:	4013      	ands	r3, r2
 8001358:	d000      	beq.n	800135c <HAL_ADC_ConfigChannel+0xcc>
 800135a:	e079      	b.n	8001450 <HAL_ADC_ConfigChannel+0x1c0>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2210      	movs	r2, #16
 8001362:	4013      	ands	r3, r2
 8001364:	d000      	beq.n	8001368 <HAL_ADC_ConfigChannel+0xd8>
 8001366:	e071      	b.n	800144c <HAL_ADC_ConfigChannel+0x1bc>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2220      	movs	r2, #32
 800136e:	4013      	ands	r3, r2
 8001370:	d000      	beq.n	8001374 <HAL_ADC_ConfigChannel+0xe4>
 8001372:	e069      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1b8>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2240      	movs	r2, #64	; 0x40
 800137a:	4013      	ands	r3, r2
 800137c:	d000      	beq.n	8001380 <HAL_ADC_ConfigChannel+0xf0>
 800137e:	e061      	b.n	8001444 <HAL_ADC_ConfigChannel+0x1b4>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	4013      	ands	r3, r2
 8001388:	d000      	beq.n	800138c <HAL_ADC_ConfigChannel+0xfc>
 800138a:	e059      	b.n	8001440 <HAL_ADC_ConfigChannel+0x1b0>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4013      	ands	r3, r2
 8001396:	d151      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1ac>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d149      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x1a8>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4013      	ands	r3, r2
 80013ae:	d141      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1a4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4013      	ands	r3, r2
 80013ba:	d139      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1a0>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	4013      	ands	r3, r2
 80013c6:	d131      	bne.n	800142c <HAL_ADC_ConfigChannel+0x19c>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	019b      	lsls	r3, r3, #6
 80013d0:	4013      	ands	r3, r2
 80013d2:	d129      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x198>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	01db      	lsls	r3, r3, #7
 80013dc:	4013      	ands	r3, r2
 80013de:	d121      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x194>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	4013      	ands	r3, r2
 80013ea:	d119      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x190>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	4013      	ands	r3, r2
 80013f6:	d111      	bne.n	800141c <HAL_ADC_ConfigChannel+0x18c>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	029b      	lsls	r3, r3, #10
 8001400:	4013      	ands	r3, r2
 8001402:	d109      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x188>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	02db      	lsls	r3, r3, #11
 800140c:	4013      	ands	r3, r2
 800140e:	d001      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x184>
 8001410:	2312      	movs	r3, #18
 8001412:	e024      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001414:	2300      	movs	r3, #0
 8001416:	e022      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001418:	2311      	movs	r3, #17
 800141a:	e020      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 800141c:	2310      	movs	r3, #16
 800141e:	e01e      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001420:	230f      	movs	r3, #15
 8001422:	e01c      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001424:	230e      	movs	r3, #14
 8001426:	e01a      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001428:	230d      	movs	r3, #13
 800142a:	e018      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 800142c:	230c      	movs	r3, #12
 800142e:	e016      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001430:	230b      	movs	r3, #11
 8001432:	e014      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001434:	230a      	movs	r3, #10
 8001436:	e012      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001438:	2309      	movs	r3, #9
 800143a:	e010      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 800143c:	2308      	movs	r3, #8
 800143e:	e00e      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001440:	2307      	movs	r3, #7
 8001442:	e00c      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001444:	2306      	movs	r3, #6
 8001446:	e00a      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001448:	2305      	movs	r3, #5
 800144a:	e008      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 800144c:	2304      	movs	r3, #4
 800144e:	e006      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001450:	2303      	movs	r3, #3
 8001452:	e004      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001454:	2302      	movs	r3, #2
 8001456:	e002      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_ADC_ConfigChannel+0x1ce>
 800145c:	2300      	movs	r3, #0
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	6852      	ldr	r2, [r2, #4]
 8001462:	201f      	movs	r0, #31
 8001464:	4002      	ands	r2, r0
 8001466:	4093      	lsls	r3, r2
 8001468:	000a      	movs	r2, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	d808      	bhi.n	8001492 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	001a      	movs	r2, r3
 800148e:	f7ff faad 	bl	80009ec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6819      	ldr	r1, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	001a      	movs	r2, r3
 80014a0:	f7ff faf4 	bl	8000a8c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db00      	blt.n	80014ae <HAL_ADC_ConfigChannel+0x21e>
 80014ac:	e0bc      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014ae:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fa49 	bl	8000948 <LL_ADC_GetCommonPathInternalCh>
 80014b6:	0003      	movs	r3, r0
 80014b8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_ADC_ConfigChannel+0x364>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d122      	bne.n	800150a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	041b      	lsls	r3, r3, #16
 80014ca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014cc:	d11d      	bne.n	800150a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	0412      	lsls	r2, r2, #16
 80014d4:	4313      	orrs	r3, r2
 80014d6:	4a46      	ldr	r2, [pc, #280]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 80014d8:	0019      	movs	r1, r3
 80014da:	0010      	movs	r0, r2
 80014dc:	f7ff fa20 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014e0:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <HAL_ADC_ConfigChannel+0x368>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4945      	ldr	r1, [pc, #276]	; (80015fc <HAL_ADC_ConfigChannel+0x36c>)
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7fe fe0c 	bl	8000104 <__udivsi3>
 80014ec:	0003      	movs	r3, r0
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	0013      	movs	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	189b      	adds	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014fa:	e002      	b.n	8001502 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f9      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001508:	e08e      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a3c      	ldr	r2, [pc, #240]	; (8001600 <HAL_ADC_ConfigChannel+0x370>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d10e      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	045b      	lsls	r3, r3, #17
 800151a:	4013      	ands	r3, r2
 800151c:	d109      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0452      	lsls	r2, r2, #17
 8001524:	4313      	orrs	r3, r2
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 8001528:	0019      	movs	r1, r3
 800152a:	0010      	movs	r0, r2
 800152c:	f7ff f9f8 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 8001530:	e07a      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a33      	ldr	r2, [pc, #204]	; (8001604 <HAL_ADC_ConfigChannel+0x374>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d000      	beq.n	800153e <HAL_ADC_ConfigChannel+0x2ae>
 800153c:	e074      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	03db      	lsls	r3, r3, #15
 8001544:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001546:	d000      	beq.n	800154a <HAL_ADC_ConfigChannel+0x2ba>
 8001548:	e06e      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	03d2      	lsls	r2, r2, #15
 8001550:	4313      	orrs	r3, r2
 8001552:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 8001554:	0019      	movs	r1, r3
 8001556:	0010      	movs	r0, r2
 8001558:	f7ff f9e2 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 800155c:	e064      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	429a      	cmp	r2, r3
 8001568:	d004      	beq.n	8001574 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_ADC_ConfigChannel+0x35c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d107      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0019      	movs	r1, r3
 800157e:	0010      	movs	r0, r2
 8001580:	f7ff fa65 	bl	8000a4e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	da4d      	bge.n	8001628 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff f9da 	bl	8000948 <LL_ADC_GetCommonPathInternalCh>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <HAL_ADC_ConfigChannel+0x364>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d108      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_ADC_ConfigChannel+0x378>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 80015aa:	0019      	movs	r1, r3
 80015ac:	0010      	movs	r0, r2
 80015ae:	f7ff f9b7 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 80015b2:	e039      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_ADC_ConfigChannel+0x370>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d108      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_ADC_ConfigChannel+0x37c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 80015c6:	0019      	movs	r1, r3
 80015c8:	0010      	movs	r0, r2
 80015ca:	f7ff f9a9 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 80015ce:	e02b      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <HAL_ADC_ConfigChannel+0x374>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d126      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_ADC_ConfigChannel+0x380>)
 80015de:	4013      	ands	r3, r2
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_ADC_ConfigChannel+0x360>)
 80015e2:	0019      	movs	r1, r3
 80015e4:	0010      	movs	r0, r2
 80015e6:	f7ff f99b 	bl	8000920 <LL_ADC_SetCommonPathInternalCh>
 80015ea:	e01d      	b.n	8001628 <HAL_ADC_ConfigChannel+0x398>
 80015ec:	80000004 	.word	0x80000004
 80015f0:	40012708 	.word	0x40012708
 80015f4:	b0001000 	.word	0xb0001000
 80015f8:	20000000 	.word	0x20000000
 80015fc:	00030d40 	.word	0x00030d40
 8001600:	b8004000 	.word	0xb8004000
 8001604:	b4002000 	.word	0xb4002000
 8001608:	ff7fffff 	.word	0xff7fffff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	2220      	movs	r2, #32
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001620:	2317      	movs	r3, #23
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2254      	movs	r2, #84	; 0x54
 800162c:	2100      	movs	r1, #0
 800162e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001630:	2317      	movs	r3, #23
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b006      	add	sp, #24
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)

08001640 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fa83 	bl	8000b5c <LL_ADC_IsEnabled>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d000      	beq.n	800165c <ADC_Enable+0x1c>
 800165a:	e069      	b.n	8001730 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4a36      	ldr	r2, [pc, #216]	; (800173c <ADC_Enable+0xfc>)
 8001664:	4013      	ands	r3, r2
 8001666:	d00d      	beq.n	8001684 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	2210      	movs	r2, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2201      	movs	r2, #1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e056      	b.n	8001732 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fa43 	bl	8000b14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <ADC_Enable+0x100>)
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff f959 	bl	8000948 <LL_ADC_GetCommonPathInternalCh>
 8001696:	0002      	movs	r2, r0
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	4013      	ands	r3, r2
 800169e:	d00f      	beq.n	80016c0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <ADC_Enable+0x104>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4928      	ldr	r1, [pc, #160]	; (8001748 <ADC_Enable+0x108>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7fe fd2c 	bl	8000104 <__udivsi3>
 80016ac:	0003      	movs	r3, r0
 80016ae:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80016b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016b2:	e002      	b.n	80016ba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e5b      	ldrb	r3, [r3, #25]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d033      	beq.n	8001730 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f8fc 	bl	80008c4 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016d0:	e027      	b.n	8001722 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff fa40 	bl	8000b5c <LL_ADC_IsEnabled>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d104      	bne.n	80016ea <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fa15 	bl	8000b14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016ea:	f7ff f8eb 	bl	80008c4 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d914      	bls.n	8001722 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2201      	movs	r2, #1
 8001700:	4013      	ands	r3, r2
 8001702:	2b01      	cmp	r3, #1
 8001704:	d00d      	beq.n	8001722 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	2210      	movs	r2, #16
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2201      	movs	r2, #1
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e007      	b.n	8001732 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1d0      	bne.n	80016d2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	80000017 	.word	0x80000017
 8001740:	40012708 	.word	0x40012708
 8001744:	20000000 	.word	0x20000000
 8001748:	00030d40 	.word	0x00030d40

0800174c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fa10 	bl	8000b7e <LL_ADC_IsDisableOngoing>
 800175e:	0003      	movs	r3, r0
 8001760:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff f9f8 	bl	8000b5c <LL_ADC_IsEnabled>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d046      	beq.n	80017fe <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d143      	bne.n	80017fe <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2205      	movs	r2, #5
 800177e:	4013      	ands	r3, r2
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10d      	bne.n	80017a0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff f9d5 	bl	8000b38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2203      	movs	r2, #3
 8001794:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001796:	f7ff f895 	bl	80008c4 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800179e:	e028      	b.n	80017f2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	2210      	movs	r2, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	2201      	movs	r2, #1
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e021      	b.n	8001800 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017bc:	f7ff f882 	bl	80008c4 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d913      	bls.n	80017f2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4013      	ands	r3, r2
 80017d4:	d00d      	beq.n	80017f2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	2210      	movs	r2, #16
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	2201      	movs	r2, #1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e006      	b.n	8001800 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1de      	bne.n	80017bc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b004      	add	sp, #16
 8001806:	bd80      	pop	{r7, pc}

08001808 <LL_ADC_SetCalibrationFactor>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	22b4      	movs	r2, #180	; 0xb4
 8001816:	589b      	ldr	r3, [r3, r2]
 8001818:	227f      	movs	r2, #127	; 0x7f
 800181a:	4393      	bics	r3, r2
 800181c:	001a      	movs	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	21b4      	movs	r1, #180	; 0xb4
 8001826:	505a      	str	r2, [r3, r1]
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}

08001830 <LL_ADC_GetCalibrationFactor>:
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	22b4      	movs	r2, #180	; 0xb4
 800183c:	589b      	ldr	r3, [r3, r2]
 800183e:	227f      	movs	r2, #127	; 0x7f
 8001840:	4013      	ands	r3, r2
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <LL_ADC_Enable>:
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <LL_ADC_Enable+0x20>)
 800185a:	4013      	ands	r3, r2
 800185c:	2201      	movs	r2, #1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	7fffffe8 	.word	0x7fffffe8

08001870 <LL_ADC_Disable>:
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <LL_ADC_Disable+0x20>)
 800187e:	4013      	ands	r3, r2
 8001880:	2202      	movs	r2, #2
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}
 8001890:	7fffffe8 	.word	0x7fffffe8

08001894 <LL_ADC_IsEnabled>:
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <LL_ADC_IsEnabled+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_IsEnabled+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <LL_ADC_StartCalibration>:
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <LL_ADC_StartCalibration+0x24>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0612      	lsls	r2, r2, #24
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	609a      	str	r2, [r3, #8]
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	7fffffe8 	.word	0x7fffffe8

080018e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	0fdb      	lsrs	r3, r3, #31
 80018ee:	07da      	lsls	r2, r3, #31
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d101      	bne.n	80018fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_ADC_IsCalibrationOnGoing+0x1e>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2254      	movs	r2, #84	; 0x54
 800191c:	5c9b      	ldrb	r3, [r3, r2]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_ADCEx_Calibration_Start+0x1e>
 8001922:	2302      	movs	r3, #2
 8001924:	e0ba      	b.n	8001a9c <HAL_ADCEx_Calibration_Start+0x194>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2254      	movs	r2, #84	; 0x54
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800192e:	2317      	movs	r3, #23
 8001930:	18fc      	adds	r4, r7, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff ff09 	bl	800174c <ADC_Disable>
 800193a:	0003      	movs	r3, r0
 800193c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff ffa6 	bl	8001894 <LL_ADC_IsEnabled>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d000      	beq.n	800194e <HAL_ADCEx_Calibration_Start+0x46>
 800194c:	e099      	b.n	8001a82 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <HAL_ADCEx_Calibration_Start+0x19c>)
 8001954:	4013      	ands	r3, r2
 8001956:	2202      	movs	r2, #2
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	494d      	ldr	r1, [pc, #308]	; (8001aac <HAL_ADCEx_Calibration_Start+0x1a4>)
 8001976:	400a      	ands	r2, r1
 8001978:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e02d      	b.n	80019dc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff ff97 	bl	80018b8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800198a:	e014      	b.n	80019b6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3301      	adds	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	4a46      	ldr	r2, [pc, #280]	; (8001ab0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d90d      	bls.n	80019b6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	2212      	movs	r2, #18
 80019a0:	4393      	bics	r3, r2
 80019a2:	2210      	movs	r2, #16
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2254      	movs	r2, #84	; 0x54
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e072      	b.n	8001a9c <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff ff90 	bl	80018e0 <LL_ADC_IsCalibrationOnGoing>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d1e3      	bne.n	800198c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <LL_ADC_GetCalibrationFactor>
 80019ce:	0002      	movs	r2, r0
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b07      	cmp	r3, #7
 80019e0:	d9ce      	bls.n	8001980 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80019e2:	69f9      	ldr	r1, [r7, #28]
 80019e4:	69b8      	ldr	r0, [r7, #24]
 80019e6:	f7fe fb8d 	bl	8000104 <__udivsi3>
 80019ea:	0003      	movs	r3, r0
 80019ec:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff ff2a 	bl	800184c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff ff01 	bl	8001808 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff ff30 	bl	8001870 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a10:	f7fe ff58 	bl	80008c4 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a18:	e01b      	b.n	8001a52 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a1a:	f7fe ff53 	bl	80008c4 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d914      	bls.n	8001a52 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <LL_ADC_IsEnabled>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d00d      	beq.n	8001a52 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2201      	movs	r2, #1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e024      	b.n	8001a9c <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff1c 	bl	8001894 <LL_ADC_IsEnabled>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d1dc      	bne.n	8001a1a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68d9      	ldr	r1, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	2203      	movs	r2, #3
 8001a76:	4393      	bics	r3, r2
 8001a78:	2201      	movs	r2, #1
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a80:	e005      	b.n	8001a8e <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	2210      	movs	r2, #16
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2254      	movs	r2, #84	; 0x54
 8001a92:	2100      	movs	r1, #0
 8001a94:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	781b      	ldrb	r3, [r3, #0]
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b009      	add	sp, #36	; 0x24
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	fffffefd 	.word	0xfffffefd
 8001aa8:	00008003 	.word	0x00008003
 8001aac:	ffff7ffc 	.word	0xffff7ffc
 8001ab0:	0002f1ff 	.word	0x0002f1ff

08001ab4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	0002      	movs	r2, r0
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b7f      	cmp	r3, #127	; 0x7f
 8001b06:	d809      	bhi.n	8001b1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	231f      	movs	r3, #31
 8001b10:	401a      	ands	r2, r3
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_EnableIRQ+0x30>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	4091      	lsls	r1, r2
 8001b18:	000a      	movs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3c:	d828      	bhi.n	8001b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3e:	4a2f      	ldr	r2, [pc, #188]	; (8001bfc <__NVIC_SetPriority+0xd4>)
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	33c0      	adds	r3, #192	; 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	589b      	ldr	r3, [r3, r2]
 8001b4e:	1dfa      	adds	r2, r7, #7
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	0011      	movs	r1, r2
 8001b54:	2203      	movs	r2, #3
 8001b56:	400a      	ands	r2, r1
 8001b58:	00d2      	lsls	r2, r2, #3
 8001b5a:	21ff      	movs	r1, #255	; 0xff
 8001b5c:	4091      	lsls	r1, r2
 8001b5e:	000a      	movs	r2, r1
 8001b60:	43d2      	mvns	r2, r2
 8001b62:	401a      	ands	r2, r3
 8001b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	0018      	movs	r0, r3
 8001b74:	2303      	movs	r3, #3
 8001b76:	4003      	ands	r3, r0
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7c:	481f      	ldr	r0, [pc, #124]	; (8001bfc <__NVIC_SetPriority+0xd4>)
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	430a      	orrs	r2, r1
 8001b88:	33c0      	adds	r3, #192	; 0xc0
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b8e:	e031      	b.n	8001bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <__NVIC_SetPriority+0xd8>)
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	0019      	movs	r1, r3
 8001b98:	230f      	movs	r3, #15
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3306      	adds	r3, #6
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	18d3      	adds	r3, r2, r3
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	1dfa      	adds	r2, r7, #7
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	0011      	movs	r1, r2
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	00d2      	lsls	r2, r2, #3
 8001bb6:	21ff      	movs	r1, #255	; 0xff
 8001bb8:	4091      	lsls	r1, r2
 8001bba:	000a      	movs	r2, r1
 8001bbc:	43d2      	mvns	r2, r2
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	22ff      	movs	r2, #255	; 0xff
 8001bc8:	401a      	ands	r2, r3
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0018      	movs	r0, r3
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	4003      	ands	r3, r0
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <__NVIC_SetPriority+0xd8>)
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	001c      	movs	r4, r3
 8001be0:	230f      	movs	r3, #15
 8001be2:	4023      	ands	r3, r4
 8001be4:	3b08      	subs	r3, #8
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	430a      	orrs	r2, r1
 8001bea:	3306      	adds	r3, #6
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	18c3      	adds	r3, r0, r3
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b003      	add	sp, #12
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	045b      	lsls	r3, r3, #17
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d301      	bcc.n	8001c1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e010      	b.n	8001c3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <SysTick_Config+0x44>)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	3a01      	subs	r2, #1
 8001c22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c24:	2301      	movs	r3, #1
 8001c26:	425b      	negs	r3, r3
 8001c28:	2103      	movs	r1, #3
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff ff7c 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x44>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x44>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	210f      	movs	r1, #15
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	1c02      	adds	r2, r0, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	0011      	movs	r1, r2
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ff33 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff ffaf 	bl	8001c04 <SysTick_Config>
 8001ca6:	0003      	movs	r3, r0
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e14d      	b.n	8001f5c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4091      	lsls	r1, r2
 8001cca:	000a      	movs	r2, r1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d100      	bne.n	8001cd8 <HAL_GPIO_Init+0x28>
 8001cd6:	e13e      	b.n	8001f56 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d005      	beq.n	8001cf0 <HAL_GPIO_Init+0x40>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d130      	bne.n	8001d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	0013      	movs	r3, r2
 8001d00:	43da      	mvns	r2, r3
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	409a      	lsls	r2, r3
 8001d12:	0013      	movs	r3, r2
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d26:	2201      	movs	r2, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d017      	beq.n	8001d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d123      	bne.n	8001de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	58d3      	ldr	r3, [r2, r3]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2207      	movs	r2, #7
 8001dac:	4013      	ands	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	43da      	mvns	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2107      	movs	r1, #7
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	6939      	ldr	r1, [r7, #16]
 8001de0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	401a      	ands	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	23c0      	movs	r3, #192	; 0xc0
 8001e1c:	029b      	lsls	r3, r3, #10
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d100      	bne.n	8001e24 <HAL_GPIO_Init+0x174>
 8001e22:	e098      	b.n	8001f56 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e24:	4a53      	ldr	r2, [pc, #332]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	589b      	ldr	r3, [r3, r2]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2203      	movs	r2, #3
 8001e36:	4013      	ands	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	0013      	movs	r3, r2
 8001e40:	43da      	mvns	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	23a0      	movs	r3, #160	; 0xa0
 8001e4c:	05db      	lsls	r3, r3, #23
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x1d6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_GPIO_Init+0x2c8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x1d2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a47      	ldr	r2, [pc, #284]	; (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x1ce>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x1ca>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a45      	ldr	r2, [pc, #276]	; (8001f84 <HAL_GPIO_Init+0x2d4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x1c6>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e008      	b.n	8001e88 <HAL_GPIO_Init+0x1d8>
 8001e76:	2305      	movs	r3, #5
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x1d8>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e004      	b.n	8001e88 <HAL_GPIO_Init+0x1d8>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_Init+0x1d8>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_GPIO_Init+0x1d8>
 8001e86:	2300      	movs	r3, #0
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	00d2      	lsls	r2, r2, #3
 8001e90:	4093      	lsls	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e98:	4936      	ldr	r1, [pc, #216]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	035b      	lsls	r3, r3, #13
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	039b      	lsls	r3, r3, #14
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001efc:	2384      	movs	r3, #132	; 0x84
 8001efe:	58d3      	ldr	r3, [r2, r3]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f20:	4914      	ldr	r1, [pc, #80]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001f22:	2284      	movs	r2, #132	; 0x84
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	58d3      	ldr	r3, [r2, r3]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43da      	mvns	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	025b      	lsls	r3, r3, #9
 8001f42:	4013      	ands	r3, r2
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4e:	4909      	ldr	r1, [pc, #36]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	1e13      	subs	r3, r2, #0
 8001f66:	d000      	beq.n	8001f6a <HAL_GPIO_Init+0x2ba>
 8001f68:	e6aa      	b.n	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b006      	add	sp, #24
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021800 	.word	0x40021800
 8001f78:	50000400 	.word	0x50000400
 8001f7c:	50000800 	.word	0x50000800
 8001f80:	50000c00 	.word	0x50000c00
 8001f84:	50001000 	.word	0x50001000

08001f88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d11f      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	189b      	adds	r3, r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4912      	ldr	r1, [pc, #72]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7fe f8a2 	bl	8000104 <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fc6:	e008      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e001      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e009      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d0ed      	beq.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	fffff9ff 	.word	0xfffff9ff
 8002000:	20000000 	.word	0x20000000
 8002004:	000f4240 	.word	0x000f4240

08002008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f000 fb50 	bl	80026bc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	d100      	bne.n	8002028 <HAL_RCC_OscConfig+0x20>
 8002026:	e07c      	b.n	8002122 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002028:	4bc3      	ldr	r3, [pc, #780]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2238      	movs	r2, #56	; 0x38
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002032:	4bc1      	ldr	r3, [pc, #772]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2203      	movs	r2, #3
 8002038:	4013      	ands	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d102      	bne.n	8002048 <HAL_RCC_OscConfig+0x40>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d002      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4bba      	ldr	r3, [pc, #744]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d062      	beq.n	8002120 <HAL_RCC_OscConfig+0x118>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d15e      	bne.n	8002120 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e32a      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	025b      	lsls	r3, r3, #9
 800206e:	429a      	cmp	r2, r3
 8002070:	d107      	bne.n	8002082 <HAL_RCC_OscConfig+0x7a>
 8002072:	4bb1      	ldr	r3, [pc, #708]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4bb0      	ldr	r3, [pc, #704]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0249      	lsls	r1, r1, #9
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e020      	b.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	23a0      	movs	r3, #160	; 0xa0
 8002088:	02db      	lsls	r3, r3, #11
 800208a:	429a      	cmp	r2, r3
 800208c:	d10e      	bne.n	80020ac <HAL_RCC_OscConfig+0xa4>
 800208e:	4baa      	ldr	r3, [pc, #680]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4ba9      	ldr	r3, [pc, #676]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	02c9      	lsls	r1, r1, #11
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	4ba6      	ldr	r3, [pc, #664]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4ba5      	ldr	r3, [pc, #660]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	0249      	lsls	r1, r1, #9
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020ac:	4ba2      	ldr	r3, [pc, #648]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4ba1      	ldr	r3, [pc, #644]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80020b2:	49a2      	ldr	r1, [pc, #648]	; (800233c <HAL_RCC_OscConfig+0x334>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4b9f      	ldr	r3, [pc, #636]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b9e      	ldr	r3, [pc, #632]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80020be:	49a0      	ldr	r1, [pc, #640]	; (8002340 <HAL_RCC_OscConfig+0x338>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d014      	beq.n	80020f6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe fbfa 	bl	80008c4 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d6:	f7fe fbf5 	bl	80008c4 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e2e9      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e8:	4b93      	ldr	r3, [pc, #588]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	4013      	ands	r3, r2
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0xce>
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe fbe5 	bl	80008c4 <HAL_GetTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe fbe0 	bl	80008c4 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e2d4      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	4013      	ands	r3, r2
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0xf8>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d100      	bne.n	800212e <HAL_RCC_OscConfig+0x126>
 800212c:	e099      	b.n	8002262 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212e:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2238      	movs	r2, #56	; 0x38
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002138:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2203      	movs	r2, #3
 800213e:	4013      	ands	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b10      	cmp	r3, #16
 8002146:	d102      	bne.n	800214e <HAL_RCC_OscConfig+0x146>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d002      	beq.n	8002154 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d135      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002154:	4b78      	ldr	r3, [pc, #480]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4013      	ands	r3, r2
 800215e:	d005      	beq.n	800216c <HAL_RCC_OscConfig+0x164>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e2a7      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b72      	ldr	r3, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a74      	ldr	r2, [pc, #464]	; (8002344 <HAL_RCC_OscConfig+0x33c>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	021a      	lsls	r2, r3, #8
 800217c:	4b6e      	ldr	r3, [pc, #440]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d112      	bne.n	80021ae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x340>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0adb      	lsrs	r3, r3, #11
 80021a2:	2207      	movs	r2, #7
 80021a4:	4013      	ands	r3, r2
 80021a6:	4a69      	ldr	r2, [pc, #420]	; (800234c <HAL_RCC_OscConfig+0x344>)
 80021a8:	40da      	lsrs	r2, r3
 80021aa:	4b69      	ldr	r3, [pc, #420]	; (8002350 <HAL_RCC_OscConfig+0x348>)
 80021ac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021ae:	4b69      	ldr	r3, [pc, #420]	; (8002354 <HAL_RCC_OscConfig+0x34c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7fe fb2a 	bl	800080c <HAL_InitTick>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d051      	beq.n	8002260 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e27d      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d030      	beq.n	800222a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021c8:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a5e      	ldr	r2, [pc, #376]	; (8002348 <HAL_RCC_OscConfig+0x340>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	4b58      	ldr	r3, [pc, #352]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b55      	ldr	r3, [pc, #340]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0049      	lsls	r1, r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe fb6b 	bl	80008c4 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7fe fb66 	bl	80008c4 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e25a      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4013      	ands	r3, r2
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_RCC_OscConfig+0x33c>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	e01b      	b.n	8002262 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002230:	4949      	ldr	r1, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0x350>)
 8002232:	400a      	ands	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fb45 	bl	80008c4 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe fb40 	bl	80008c4 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e234      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4013      	ands	r3, r2
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x238>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002260:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	4013      	ands	r3, r2
 800226a:	d047      	beq.n	80022fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2238      	movs	r2, #56	; 0x38
 8002272:	4013      	ands	r3, r2
 8002274:	2b18      	cmp	r3, #24
 8002276:	d10a      	bne.n	800228e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d03c      	beq.n	80022fc <HAL_RCC_OscConfig+0x2f4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d138      	bne.n	80022fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e216      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fb0f 	bl	80008c4 <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fb0a 	bl	80008c4 <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1fe      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d0f1      	beq.n	80022ac <HAL_RCC_OscConfig+0x2a4>
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80022cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe faf5 	bl	80008c4 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7fe faf0 	bl	80008c4 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1e4      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d1f1      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2204      	movs	r2, #4
 8002302:	4013      	ands	r3, r2
 8002304:	d100      	bne.n	8002308 <HAL_RCC_OscConfig+0x300>
 8002306:	e0c7      	b.n	8002498 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002308:	231f      	movs	r3, #31
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2238      	movs	r2, #56	; 0x38
 8002316:	4013      	ands	r3, r2
 8002318:	2b20      	cmp	r3, #32
 800231a:	d11f      	bne.n	800235c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x330>)
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	2202      	movs	r2, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d100      	bne.n	8002328 <HAL_RCC_OscConfig+0x320>
 8002326:	e0b7      	b.n	8002498 <HAL_RCC_OscConfig+0x490>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d000      	beq.n	8002332 <HAL_RCC_OscConfig+0x32a>
 8002330:	e0b2      	b.n	8002498 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1c2      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	40021000 	.word	0x40021000
 800233c:	fffeffff 	.word	0xfffeffff
 8002340:	fffbffff 	.word	0xfffbffff
 8002344:	ffff80ff 	.word	0xffff80ff
 8002348:	ffffc7ff 	.word	0xffffc7ff
 800234c:	00f42400 	.word	0x00f42400
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004
 8002358:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800235c:	4bb5      	ldr	r3, [pc, #724]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800235e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	055b      	lsls	r3, r3, #21
 8002364:	4013      	ands	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x364>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x366>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d011      	beq.n	8002396 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002376:	4baf      	ldr	r3, [pc, #700]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	0549      	lsls	r1, r1, #21
 800237c:	430a      	orrs	r2, r1
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002380:	4bac      	ldr	r3, [pc, #688]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	055b      	lsls	r3, r3, #21
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800238e:	231f      	movs	r3, #31
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002396:	4ba8      	ldr	r3, [pc, #672]	; (8002638 <HAL_RCC_OscConfig+0x630>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d11a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a2:	4ba5      	ldr	r3, [pc, #660]	; (8002638 <HAL_RCC_OscConfig+0x630>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <HAL_RCC_OscConfig+0x630>)
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	0049      	lsls	r1, r1, #1
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fa88 	bl	80008c4 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fe fa83 	bl	80008c4 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e177      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	4b9a      	ldr	r3, [pc, #616]	; (8002638 <HAL_RCC_OscConfig+0x630>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x3e6>
 80023e0:	4b94      	ldr	r3, [pc, #592]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80023e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023e4:	4b93      	ldr	r3, [pc, #588]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	430a      	orrs	r2, r1
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x420>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x408>
 80023f6:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80023f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023fa:	4b8e      	ldr	r3, [pc, #568]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80023fc:	2104      	movs	r1, #4
 80023fe:	430a      	orrs	r2, r1
 8002400:	65da      	str	r2, [r3, #92]	; 0x5c
 8002402:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002408:	2101      	movs	r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	65da      	str	r2, [r3, #92]	; 0x5c
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x420>
 8002410:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002414:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c
 800241c:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800241e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002422:	2104      	movs	r1, #4
 8002424:	438a      	bics	r2, r1
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d014      	beq.n	800245a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fa48 	bl	80008c4 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002438:	e009      	b.n	800244e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fa43 	bl	80008c4 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a7d      	ldr	r2, [pc, #500]	; (800263c <HAL_RCC_OscConfig+0x634>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e136      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x432>
 8002458:	e013      	b.n	8002482 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fa33 	bl	80008c4 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002462:	e009      	b.n	8002478 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fa2e 	bl	80008c4 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4a73      	ldr	r2, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x634>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e121      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002478:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b69      	ldr	r3, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800248e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002492:	496b      	ldr	r1, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x638>)
 8002494:	400a      	ands	r2, r1
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2220      	movs	r2, #32
 800249e:	4013      	ands	r3, r2
 80024a0:	d039      	beq.n	8002516 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024aa:	4b62      	ldr	r3, [pc, #392]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b61      	ldr	r3, [pc, #388]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	03c9      	lsls	r1, r1, #15
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe fa04 	bl	80008c4 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c2:	f7fe f9ff 	bl	80008c4 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0f3      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	4013      	ands	r3, r2
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x4ba>
 80024e0:	e019      	b.n	8002516 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80024e8:	4956      	ldr	r1, [pc, #344]	; (8002644 <HAL_RCC_OscConfig+0x63c>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe f9e9 	bl	80008c4 <HAL_GetTick>
 80024f2:	0003      	movs	r3, r0
 80024f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f8:	f7fe f9e4 	bl	80008c4 <HAL_GetTick>
 80024fc:	0002      	movs	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0d8      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	4013      	ands	r3, r2
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d100      	bne.n	8002520 <HAL_RCC_OscConfig+0x518>
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002520:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2238      	movs	r2, #56	; 0x38
 8002526:	4013      	ands	r3, r2
 8002528:	2b10      	cmp	r3, #16
 800252a:	d100      	bne.n	800252e <HAL_RCC_OscConfig+0x526>
 800252c:	e07b      	b.n	8002626 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d156      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800253c:	4942      	ldr	r1, [pc, #264]	; (8002648 <HAL_RCC_OscConfig+0x640>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe f9bf 	bl	80008c4 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe f9ba 	bl	80008c4 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0ae      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	049b      	lsls	r3, r3, #18
 8002566:	4013      	ands	r3, r2
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4a37      	ldr	r2, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x644>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	431a      	orrs	r2, r3
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800259a:	430a      	orrs	r2, r1
 800259c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0449      	lsls	r1, r1, #17
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0549      	lsls	r1, r1, #21
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe f983 	bl	80008c4 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe f97e 	bl	80008c4 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e072      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	049b      	lsls	r3, r3, #18
 80025de:	4013      	ands	r3, r2
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x5bc>
 80025e2:	e06a      	b.n	80026ba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 80025ea:	4917      	ldr	r1, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x640>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe f968 	bl	80008c4 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe f963 	bl	80008c4 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e057      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	049b      	lsls	r3, r3, #18
 8002614:	4013      	ands	r3, r2
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_OscConfig+0x62c>)
 800261e:	490c      	ldr	r1, [pc, #48]	; (8002650 <HAL_RCC_OscConfig+0x648>)
 8002620:	400a      	ands	r2, r1
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	e049      	b.n	80026ba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e044      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	00001388 	.word	0x00001388
 8002640:	efffffff 	.word	0xefffffff
 8002644:	ffbfffff 	.word	0xffbfffff
 8002648:	feffffff 	.word	0xfeffffff
 800264c:	11c1808c 	.word	0x11c1808c
 8002650:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x6bc>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2203      	movs	r2, #3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	429a      	cmp	r2, r3
 8002666:	d126      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2270      	movs	r2, #112	; 0x70
 800266c:	401a      	ands	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d11f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	23fe      	movs	r3, #254	; 0xfe
 800267a:	01db      	lsls	r3, r3, #7
 800267c:	401a      	ands	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d116      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	23f8      	movs	r3, #248	; 0xf8
 800268c:	039b      	lsls	r3, r3, #14
 800268e:	401a      	ands	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d10e      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	23e0      	movs	r3, #224	; 0xe0
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0f5b      	lsrs	r3, r3, #29
 80026ac:	075a      	lsls	r2, r3, #29
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b008      	add	sp, #32
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0e9      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2207      	movs	r2, #7
 80026e2:	4013      	ands	r3, r2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d91e      	bls.n	8002728 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b73      	ldr	r3, [pc, #460]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2207      	movs	r2, #7
 80026f0:	4393      	bics	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026fc:	f7fe f8e2 	bl	80008c4 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7fe f8dd 	bl	80008c4 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a6a      	ldr	r2, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0ca      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2207      	movs	r2, #7
 8002720:	4013      	ands	r3, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d015      	beq.n	800275e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2204      	movs	r2, #4
 8002738:	4013      	ands	r3, r2
 800273a:	d006      	beq.n	800274a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800273c:	4b60      	ldr	r3, [pc, #384]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b5f      	ldr	r3, [pc, #380]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002742:	21e0      	movs	r1, #224	; 0xe0
 8002744:	01c9      	lsls	r1, r1, #7
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274a:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCC_ClockConfig+0x1fc>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d057      	beq.n	8002818 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	4013      	ands	r3, r2
 800277a:	d12b      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e097      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d107      	bne.n	8002798 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	4013      	ands	r3, r2
 8002792:	d11f      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e08b      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4013      	ands	r3, r2
 80027aa:	d113      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e07f      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	2202      	movs	r2, #2
 80027be:	4013      	ands	r3, r2
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e074      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2202      	movs	r2, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e06d      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2207      	movs	r2, #7
 80027da:	4393      	bics	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe f86c 	bl	80008c4 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f0:	e009      	b.n	8002806 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f2:	f7fe f867 	bl	80008c4 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e054      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2238      	movs	r2, #56	; 0x38
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	429a      	cmp	r2, r3
 8002816:	d1ec      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2207      	movs	r2, #7
 800281e:	4013      	ands	r3, r2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d21e      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2207      	movs	r2, #7
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002838:	f7fe f844 	bl	80008c4 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002840:	e009      	b.n	8002856 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002842:	f7fe f83f 	bl	80008c4 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e02c      	b.n	80028b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2204      	movs	r2, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <HAL_RCC_ClockConfig+0x200>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800287e:	430a      	orrs	r2, r1
 8002880:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002882:	f000 f829 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002886:	0001      	movs	r1, r0
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	220f      	movs	r2, #15
 8002890:	401a      	ands	r2, r3
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x204>)
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	58d3      	ldr	r3, [r2, r3]
 8002898:	221f      	movs	r2, #31
 800289a:	4013      	ands	r3, r2
 800289c:	000a      	movs	r2, r1
 800289e:	40da      	lsrs	r2, r3
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x208>)
 80028a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x20c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fd ffaf 	bl	800080c <HAL_InitTick>
 80028ae:	0003      	movs	r3, r0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40022000 	.word	0x40022000
 80028bc:	00001388 	.word	0x00001388
 80028c0:	40021000 	.word	0x40021000
 80028c4:	fffff0ff 	.word	0xfffff0ff
 80028c8:	ffff8fff 	.word	0xffff8fff
 80028cc:	08003ec8 	.word	0x08003ec8
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2238      	movs	r2, #56	; 0x38
 80028e4:	4013      	ands	r3, r2
 80028e6:	d10f      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028e8:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0adb      	lsrs	r3, r3, #11
 80028ee:	2207      	movs	r2, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	4835      	ldr	r0, [pc, #212]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028fe:	f7fd fc01 	bl	8000104 <__udivsi3>
 8002902:	0003      	movs	r3, r0
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e05d      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2238      	movs	r2, #56	; 0x38
 800290e:	4013      	ands	r3, r2
 8002910:	2b08      	cmp	r3, #8
 8002912:	d102      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e054      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2238      	movs	r2, #56	; 0x38
 8002920:	4013      	ands	r3, r2
 8002922:	2b10      	cmp	r3, #16
 8002924:	d138      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002926:	4b2a      	ldr	r3, [pc, #168]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2203      	movs	r2, #3
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	2207      	movs	r2, #7
 8002938:	4013      	ands	r3, r2
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d10d      	bne.n	8002960 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4824      	ldr	r0, [pc, #144]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002948:	f7fd fbdc 	bl	8000104 <__udivsi3>
 800294c:	0003      	movs	r3, r0
 800294e:	0019      	movs	r1, r3
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	227f      	movs	r2, #127	; 0x7f
 8002958:	4013      	ands	r3, r2
 800295a:	434b      	muls	r3, r1
 800295c:	617b      	str	r3, [r7, #20]
        break;
 800295e:	e00d      	b.n	800297c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	481c      	ldr	r0, [pc, #112]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002964:	f7fd fbce 	bl	8000104 <__udivsi3>
 8002968:	0003      	movs	r3, r0
 800296a:	0019      	movs	r1, r3
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	227f      	movs	r2, #127	; 0x7f
 8002974:	4013      	ands	r3, r2
 8002976:	434b      	muls	r3, r1
 8002978:	617b      	str	r3, [r7, #20]
        break;
 800297a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0f5b      	lsrs	r3, r3, #29
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	3301      	adds	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	6978      	ldr	r0, [r7, #20]
 800298e:	f7fd fbb9 	bl	8000104 <__udivsi3>
 8002992:	0003      	movs	r3, r0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e015      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2238      	movs	r2, #56	; 0x38
 800299e:	4013      	ands	r3, r2
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d103      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2238      	movs	r2, #56	; 0x38
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b18      	cmp	r3, #24
 80029b6:	d103      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029b8:	23fa      	movs	r3, #250	; 0xfa
 80029ba:	01db      	lsls	r3, r3, #7
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	e001      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029c4:	693b      	ldr	r3, [r7, #16]
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b006      	add	sp, #24
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	40021000 	.word	0x40021000
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029e4:	2313      	movs	r3, #19
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ec:	2312      	movs	r3, #18
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	029b      	lsls	r3, r3, #10
 80029fc:	4013      	ands	r3, r2
 80029fe:	d100      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a00:	e0ad      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2011      	movs	r0, #17
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	055b      	lsls	r3, r3, #21
 8002a12:	4013      	ands	r3, r2
 8002a14:	d110      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	430a      	orrs	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a38:	4b3c      	ldr	r3, [pc, #240]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	0049      	lsls	r1, r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a46:	f7fd ff3d 	bl	80008c4 <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fd ff38 	bl	80008c4 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d904      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a5e:	2313      	movs	r3, #19
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2203      	movs	r2, #3
 8002a64:	701a      	strb	r2, [r3, #0]
        break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a68:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	d0ed      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a74:	2313      	movs	r3, #19
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d15e      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a82:	23c0      	movs	r3, #192	; 0xc0
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d014      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0249      	lsls	r1, r1, #9
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ab8:	491e      	ldr	r1, [pc, #120]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d016      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fd fefa 	bl	80008c4 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad4:	e00c      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fd fef5 	bl	80008c4 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d904      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ae6:	2313      	movs	r3, #19
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2203      	movs	r2, #3
 8002aec:	701a      	strb	r2, [r3, #0]
            break;
 8002aee:	e004      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0ed      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002afa:	2313      	movs	r3, #19
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b18:	e016      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2213      	movs	r2, #19
 8002b20:	18ba      	adds	r2, r7, r2
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e00f      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	fffffcff 	.word	0xfffffcff
 8002b34:	fffeffff 	.word	0xfffeffff
 8002b38:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	2312      	movs	r3, #18
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2213      	movs	r2, #19
 8002b42:	18ba      	adds	r2, r7, r2
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b48:	2311      	movs	r3, #17
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4bb6      	ldr	r3, [pc, #728]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b56:	4bb5      	ldr	r3, [pc, #724]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b58:	49b5      	ldr	r1, [pc, #724]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b68:	4bb0      	ldr	r3, [pc, #704]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4393      	bics	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4bad      	ldr	r3, [pc, #692]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d009      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b86:	4ba9      	ldr	r3, [pc, #676]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4ba5      	ldr	r3, [pc, #660]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b96:	430a      	orrs	r2, r1
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba4:	4ba1      	ldr	r3, [pc, #644]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	2230      	movs	r2, #48	; 0x30
 8002baa:	4393      	bics	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b9e      	ldr	r3, [pc, #632]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc2:	4b9a      	ldr	r3, [pc, #616]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	4a9b      	ldr	r2, [pc, #620]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	4b96      	ldr	r3, [pc, #600]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	015b      	lsls	r3, r3, #5
 8002bde:	4013      	ands	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002be2:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	4a94      	ldr	r2, [pc, #592]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d009      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c02:	4b8a      	ldr	r3, [pc, #552]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	4a8d      	ldr	r2, [pc, #564]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c10:	4b86      	ldr	r3, [pc, #536]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c22:	4b82      	ldr	r3, [pc, #520]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	4a86      	ldr	r2, [pc, #536]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	4b7e      	ldr	r3, [pc, #504]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c40:	4b7a      	ldr	r3, [pc, #488]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	4a7f      	ldr	r2, [pc, #508]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	4b77      	ldr	r3, [pc, #476]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2240      	movs	r2, #64	; 0x40
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c5e:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d015      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c7e:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	0899      	lsrs	r1, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c9c:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4b62      	ldr	r3, [pc, #392]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0249      	lsls	r1, r1, #9
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	031b      	lsls	r3, r3, #12
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	039b      	lsls	r3, r3, #14
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	4a5c      	ldr	r2, [pc, #368]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce4:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	03db      	lsls	r3, r3, #15
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0449      	lsls	r1, r1, #17
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	03db      	lsls	r3, r3, #15
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d016      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d20:	430a      	orrs	r2, r1
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	045b      	lsls	r3, r3, #17
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d30:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	0449      	lsls	r1, r1, #17
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4013      	ands	r3, r2
 8002d48:	d014      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	2203      	movs	r2, #3
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d106      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	0249      	lsls	r1, r1, #9
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	019b      	lsls	r3, r3, #6
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d014      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002d80:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	220c      	movs	r2, #12
 8002d86:	4393      	bics	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d90:	430a      	orrs	r2, r1
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d106      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	0249      	lsls	r1, r1, #9
 8002da6:	430a      	orrs	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	045b      	lsls	r3, r3, #17
 8002db2:	4013      	ands	r3, r2
 8002db4:	d016      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	0449      	lsls	r1, r1, #17
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	049b      	lsls	r3, r3, #18
 8002dec:	4013      	ands	r3, r2
 8002dee:	d016      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	0449      	lsls	r1, r1, #17
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e1e:	2312      	movs	r3, #18
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	781b      	ldrb	r3, [r3, #0]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b006      	add	sp, #24
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	efffffff 	.word	0xefffffff
 8002e34:	fffff3ff 	.word	0xfffff3ff
 8002e38:	fffffcff 	.word	0xfffffcff
 8002e3c:	fff3ffff 	.word	0xfff3ffff
 8002e40:	ffcfffff 	.word	0xffcfffff
 8002e44:	ffffcfff 	.word	0xffffcfff
 8002e48:	ffff3fff 	.word	0xffff3fff
 8002e4c:	ffbfffff 	.word	0xffbfffff
 8002e50:	feffffff 	.word	0xfeffffff

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e04a      	b.n	8002efc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	223d      	movs	r2, #61	; 0x3d
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d107      	bne.n	8002e82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	223c      	movs	r2, #60	; 0x3c
 8002e76:	2100      	movs	r1, #0
 8002e78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7fd fbf9 	bl	8000674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	223d      	movs	r2, #61	; 0x3d
 8002e86:	2102      	movs	r1, #2
 8002e88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	0019      	movs	r1, r3
 8002e94:	0010      	movs	r0, r2
 8002e96:	f000 fb5b 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2248      	movs	r2, #72	; 0x48
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	223e      	movs	r2, #62	; 0x3e
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2240      	movs	r2, #64	; 0x40
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2241      	movs	r2, #65	; 0x41
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2242      	movs	r2, #66	; 0x42
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2243      	movs	r2, #67	; 0x43
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2244      	movs	r2, #68	; 0x44
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2245      	movs	r2, #69	; 0x45
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2246      	movs	r2, #70	; 0x46
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2247      	movs	r2, #71	; 0x47
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223d      	movs	r2, #61	; 0x3d
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e04a      	b.n	8002fac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223d      	movs	r2, #61	; 0x3d
 8002f1a:	5c9b      	ldrb	r3, [r3, r2]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	223c      	movs	r2, #60	; 0x3c
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 f841 	bl	8002fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	223d      	movs	r2, #61	; 0x3d
 8002f36:	2102      	movs	r1, #2
 8002f38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f000 fb03 	bl	8003550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2248      	movs	r2, #72	; 0x48
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	223e      	movs	r2, #62	; 0x3e
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	223f      	movs	r2, #63	; 0x3f
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2241      	movs	r2, #65	; 0x41
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2242      	movs	r2, #66	; 0x42
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2243      	movs	r2, #67	; 0x43
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2244      	movs	r2, #68	; 0x44
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2245      	movs	r2, #69	; 0x45
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2246      	movs	r2, #70	; 0x46
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2247      	movs	r2, #71	; 0x47
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	223d      	movs	r2, #61	; 0x3d
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0x22>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	223e      	movs	r2, #62	; 0x3e
 8002fd8:	5c9b      	ldrb	r3, [r3, r2]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	1e5a      	subs	r2, r3, #1
 8002fe0:	4193      	sbcs	r3, r2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	e037      	b.n	8003056 <HAL_TIM_PWM_Start+0x92>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d108      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x3a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	223f      	movs	r2, #63	; 0x3f
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	1e5a      	subs	r2, r3, #1
 8002ff8:	4193      	sbcs	r3, r2
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	e02b      	b.n	8003056 <HAL_TIM_PWM_Start+0x92>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d108      	bne.n	8003016 <HAL_TIM_PWM_Start+0x52>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	5c9b      	ldrb	r3, [r3, r2]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	4193      	sbcs	r3, r2
 8003012:	b2db      	uxtb	r3, r3
 8003014:	e01f      	b.n	8003056 <HAL_TIM_PWM_Start+0x92>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d108      	bne.n	800302e <HAL_TIM_PWM_Start+0x6a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2241      	movs	r2, #65	; 0x41
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	4193      	sbcs	r3, r2
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e013      	b.n	8003056 <HAL_TIM_PWM_Start+0x92>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b10      	cmp	r3, #16
 8003032:	d108      	bne.n	8003046 <HAL_TIM_PWM_Start+0x82>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2242      	movs	r2, #66	; 0x42
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	4193      	sbcs	r3, r2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e007      	b.n	8003056 <HAL_TIM_PWM_Start+0x92>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2243      	movs	r2, #67	; 0x43
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	4193      	sbcs	r3, r2
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e090      	b.n	8003180 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0xaa>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	223e      	movs	r2, #62	; 0x3e
 8003068:	2102      	movs	r1, #2
 800306a:	5499      	strb	r1, [r3, r2]
 800306c:	e023      	b.n	80030b6 <HAL_TIM_PWM_Start+0xf2>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start+0xba>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	223f      	movs	r2, #63	; 0x3f
 8003078:	2102      	movs	r1, #2
 800307a:	5499      	strb	r1, [r3, r2]
 800307c:	e01b      	b.n	80030b6 <HAL_TIM_PWM_Start+0xf2>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start+0xca>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	2102      	movs	r1, #2
 800308a:	5499      	strb	r1, [r3, r2]
 800308c:	e013      	b.n	80030b6 <HAL_TIM_PWM_Start+0xf2>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d104      	bne.n	800309e <HAL_TIM_PWM_Start+0xda>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2241      	movs	r2, #65	; 0x41
 8003098:	2102      	movs	r1, #2
 800309a:	5499      	strb	r1, [r3, r2]
 800309c:	e00b      	b.n	80030b6 <HAL_TIM_PWM_Start+0xf2>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start+0xea>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2242      	movs	r2, #66	; 0x42
 80030a8:	2102      	movs	r1, #2
 80030aa:	5499      	strb	r1, [r3, r2]
 80030ac:	e003      	b.n	80030b6 <HAL_TIM_PWM_Start+0xf2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2243      	movs	r2, #67	; 0x43
 80030b2:	2102      	movs	r1, #2
 80030b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fe30 	bl	8003d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <HAL_TIM_PWM_Start+0x1c4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIM_PWM_Start+0x128>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2e      	ldr	r2, [pc, #184]	; (800318c <HAL_TIM_PWM_Start+0x1c8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_TIM_PWM_Start+0x128>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <HAL_TIM_PWM_Start+0x1cc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_PWM_Start+0x128>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <HAL_TIM_PWM_Start+0x1d0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x12c>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_TIM_PWM_Start+0x12e>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0209      	lsls	r1, r1, #8
 8003104:	430a      	orrs	r2, r1
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <HAL_TIM_PWM_Start+0x1c4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d014      	beq.n	800313c <HAL_TIM_PWM_Start+0x178>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	05db      	lsls	r3, r3, #23
 800311a:	429a      	cmp	r2, r3
 800311c:	d00e      	beq.n	800313c <HAL_TIM_PWM_Start+0x178>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_TIM_PWM_Start+0x1d4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d009      	beq.n	800313c <HAL_TIM_PWM_Start+0x178>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_TIM_PWM_Start+0x1d8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_TIM_PWM_Start+0x178>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a15      	ldr	r2, [pc, #84]	; (800318c <HAL_TIM_PWM_Start+0x1c8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d116      	bne.n	800316a <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_TIM_PWM_Start+0x1dc>)
 8003144:	4013      	ands	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b06      	cmp	r3, #6
 800314c:	d016      	beq.n	800317c <HAL_TIM_PWM_Start+0x1b8>
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	025b      	lsls	r3, r3, #9
 8003154:	429a      	cmp	r2, r3
 8003156:	d011      	beq.n	800317c <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2101      	movs	r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003168:	e008      	b.n	800317c <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e000      	b.n	800317e <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b004      	add	sp, #16
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	00010007 	.word	0x00010007

080031a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2317      	movs	r3, #23
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	223c      	movs	r2, #60	; 0x3c
 80031bc:	5c9b      	ldrb	r3, [r3, r2]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0e5      	b.n	8003392 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	223c      	movs	r2, #60	; 0x3c
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b14      	cmp	r3, #20
 80031d2:	d900      	bls.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80031d4:	e0d1      	b.n	800337a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	009a      	lsls	r2, r3, #2
 80031da:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	0011      	movs	r1, r2
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 fa3a 	bl	8003664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2108      	movs	r1, #8
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2104      	movs	r1, #4
 800320c:	438a      	bics	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6999      	ldr	r1, [r3, #24]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	619a      	str	r2, [r3, #24]
      break;
 8003222:	e0af      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f000 faa3 	bl	8003778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	0109      	lsls	r1, r1, #4
 8003240:	430a      	orrs	r2, r1
 8003242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4954      	ldr	r1, [pc, #336]	; (80033a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003250:	400a      	ands	r2, r1
 8003252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
      break;
 8003268:	e08c      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	0011      	movs	r1, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f000 fb04 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2108      	movs	r1, #8
 8003284:	430a      	orrs	r2, r1
 8003286:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2104      	movs	r1, #4
 8003294:	438a      	bics	r2, r1
 8003296:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69d9      	ldr	r1, [r3, #28]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	61da      	str	r2, [r3, #28]
      break;
 80032aa:	e06b      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	0011      	movs	r1, r2
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 fb6b 	bl	8003990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	0109      	lsls	r1, r1, #4
 80032c8:	430a      	orrs	r2, r1
 80032ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4932      	ldr	r1, [pc, #200]	; (80033a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80032d8:	400a      	ands	r2, r1
 80032da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69d9      	ldr	r1, [r3, #28]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	61da      	str	r2, [r3, #28]
      break;
 80032f0:	e048      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	0011      	movs	r1, r2
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 fbb2 	bl	8003a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2108      	movs	r1, #8
 800330c:	430a      	orrs	r2, r1
 800330e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2104      	movs	r1, #4
 800331c:	438a      	bics	r2, r1
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003332:	e027      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fbf1 	bl	8003b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0109      	lsls	r1, r1, #4
 8003350:	430a      	orrs	r2, r1
 8003352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4910      	ldr	r1, [pc, #64]	; (80033a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003360:	400a      	ands	r2, r1
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	021a      	lsls	r2, r3, #8
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003378:	e004      	b.n	8003384 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800337a:	2317      	movs	r3, #23
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
      break;
 8003382:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	223c      	movs	r2, #60	; 0x3c
 8003388:	2100      	movs	r1, #0
 800338a:	5499      	strb	r1, [r3, r2]

  return status;
 800338c:	2317      	movs	r3, #23
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	781b      	ldrb	r3, [r3, #0]
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b006      	add	sp, #24
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	08003f08 	.word	0x08003f08
 80033a0:	fffffbff 	.word	0xfffffbff

080033a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	230f      	movs	r3, #15
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223c      	movs	r2, #60	; 0x3c
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x20>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0bc      	b.n	800353e <HAL_TIM_ConfigClockSource+0x19a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2101      	movs	r1, #1
 80033ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	223d      	movs	r2, #61	; 0x3d
 80033d0:	2102      	movs	r1, #2
 80033d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_TIM_ConfigClockSource+0x1a4>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4a59      	ldr	r2, [pc, #356]	; (800354c <HAL_TIM_ConfigClockSource+0x1a8>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	0192      	lsls	r2, r2, #6
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d040      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xde>
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	0192      	lsls	r2, r2, #6
 8003404:	4293      	cmp	r3, r2
 8003406:	d900      	bls.n	800340a <HAL_TIM_ConfigClockSource+0x66>
 8003408:	e088      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	0152      	lsls	r2, r2, #5
 800340e:	4293      	cmp	r3, r2
 8003410:	d100      	bne.n	8003414 <HAL_TIM_ConfigClockSource+0x70>
 8003412:	e088      	b.n	8003526 <HAL_TIM_ConfigClockSource+0x182>
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	0152      	lsls	r2, r2, #5
 8003418:	4293      	cmp	r3, r2
 800341a:	d900      	bls.n	800341e <HAL_TIM_ConfigClockSource+0x7a>
 800341c:	e07e      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 800341e:	2b70      	cmp	r3, #112	; 0x70
 8003420:	d018      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xb0>
 8003422:	d900      	bls.n	8003426 <HAL_TIM_ConfigClockSource+0x82>
 8003424:	e07a      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 8003426:	2b60      	cmp	r3, #96	; 0x60
 8003428:	d04f      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x126>
 800342a:	d900      	bls.n	800342e <HAL_TIM_ConfigClockSource+0x8a>
 800342c:	e076      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 800342e:	2b50      	cmp	r3, #80	; 0x50
 8003430:	d03b      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x106>
 8003432:	d900      	bls.n	8003436 <HAL_TIM_ConfigClockSource+0x92>
 8003434:	e072      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d057      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x146>
 800343a:	d900      	bls.n	800343e <HAL_TIM_ConfigClockSource+0x9a>
 800343c:	e06e      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d063      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x166>
 8003442:	d86b      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d060      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x166>
 8003448:	d868      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x178>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d05d      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x166>
 800344e:	2b10      	cmp	r3, #16
 8003450:	d05b      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x166>
 8003452:	e063      	b.n	800351c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 fc3e 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2277      	movs	r2, #119	; 0x77
 8003474:	4313      	orrs	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e052      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 fc27 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	01c9      	lsls	r1, r1, #7
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
      break;
 80034a8:	e03e      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	001a      	movs	r2, r3
 80034b8:	f000 fb98 	bl	8003bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2150      	movs	r1, #80	; 0x50
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 fbf2 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 80034c8:	e02e      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	001a      	movs	r2, r3
 80034d8:	f000 fbb6 	bl	8003c48 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2160      	movs	r1, #96	; 0x60
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 fbe2 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 80034e8:	e01e      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	001a      	movs	r2, r3
 80034f8:	f000 fb78 	bl	8003bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2140      	movs	r1, #64	; 0x40
 8003502:	0018      	movs	r0, r3
 8003504:	f000 fbd2 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 8003508:	e00e      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	0019      	movs	r1, r3
 8003514:	0010      	movs	r0, r2
 8003516:	f000 fbc9 	bl	8003cac <TIM_ITRx_SetConfig>
      break;
 800351a:	e005      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800351c:	230f      	movs	r3, #15
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
      break;
 8003524:	e000      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003526:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223d      	movs	r2, #61	; 0x3d
 800352c:	2101      	movs	r1, #1
 800352e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	223c      	movs	r2, #60	; 0x3c
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]

  return status;
 8003538:	230f      	movs	r3, #15
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	781b      	ldrb	r3, [r3, #0]
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	ffceff88 	.word	0xffceff88
 800354c:	ffff00ff 	.word	0xffff00ff

08003550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a38      	ldr	r2, [pc, #224]	; (8003644 <TIM_Base_SetConfig+0xf4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00c      	beq.n	8003582 <TIM_Base_SetConfig+0x32>
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	429a      	cmp	r2, r3
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0x32>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a34      	ldr	r2, [pc, #208]	; (8003648 <TIM_Base_SetConfig+0xf8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0x32>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a33      	ldr	r2, [pc, #204]	; (800364c <TIM_Base_SetConfig+0xfc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2270      	movs	r2, #112	; 0x70
 8003586:	4393      	bics	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a2b      	ldr	r2, [pc, #172]	; (8003644 <TIM_Base_SetConfig+0xf4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01c      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	05db      	lsls	r3, r3, #23
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a27      	ldr	r2, [pc, #156]	; (8003648 <TIM_Base_SetConfig+0xf8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <TIM_Base_SetConfig+0xfc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <TIM_Base_SetConfig+0x100>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <TIM_Base_SetConfig+0x104>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <TIM_Base_SetConfig+0x108>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x86>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <TIM_Base_SetConfig+0x10c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <TIM_Base_SetConfig+0x110>)
 80035da:	4013      	ands	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	4393      	bics	r3, r2
 80035ee:	001a      	movs	r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <TIM_Base_SetConfig+0xf4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0xde>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <TIM_Base_SetConfig+0x104>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0xde>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a0d      	ldr	r2, [pc, #52]	; (8003658 <TIM_Base_SetConfig+0x108>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0xde>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a0c      	ldr	r2, [pc, #48]	; (800365c <TIM_Base_SetConfig+0x10c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d103      	bne.n	8003636 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	615a      	str	r2, [r3, #20]
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b004      	add	sp, #16
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40002000 	.word	0x40002000
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800
 8003660:	fffffcff 	.word	0xfffffcff

08003664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	2201      	movs	r2, #1
 8003674:	4393      	bics	r3, r2
 8003676:	001a      	movs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a32      	ldr	r2, [pc, #200]	; (800375c <TIM_OC1_SetConfig+0xf8>)
 8003692:	4013      	ands	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2203      	movs	r2, #3
 800369a:	4393      	bics	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2202      	movs	r2, #2
 80036ac:	4393      	bics	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a28      	ldr	r2, [pc, #160]	; (8003760 <TIM_OC1_SetConfig+0xfc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00b      	beq.n	80036da <TIM_OC1_SetConfig+0x76>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <TIM_OC1_SetConfig+0x100>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <TIM_OC1_SetConfig+0x76>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a26      	ldr	r2, [pc, #152]	; (8003768 <TIM_OC1_SetConfig+0x104>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d003      	beq.n	80036da <TIM_OC1_SetConfig+0x76>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a25      	ldr	r2, [pc, #148]	; (800376c <TIM_OC1_SetConfig+0x108>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10c      	bne.n	80036f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2208      	movs	r2, #8
 80036de:	4393      	bics	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2204      	movs	r2, #4
 80036f0:	4393      	bics	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <TIM_OC1_SetConfig+0xfc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_OC1_SetConfig+0xb0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a19      	ldr	r2, [pc, #100]	; (8003764 <TIM_OC1_SetConfig+0x100>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_OC1_SetConfig+0xb0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <TIM_OC1_SetConfig+0x104>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC1_SetConfig+0xb0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <TIM_OC1_SetConfig+0x108>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4a16      	ldr	r2, [pc, #88]	; (8003770 <TIM_OC1_SetConfig+0x10c>)
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <TIM_OC1_SetConfig+0x110>)
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b006      	add	sp, #24
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	fffeff8f 	.word	0xfffeff8f
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800
 8003770:	fffffeff 	.word	0xfffffeff
 8003774:	fffffdff 	.word	0xfffffdff

08003778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	2210      	movs	r2, #16
 8003788:	4393      	bics	r3, r2
 800378a:	001a      	movs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <TIM_OC2_SetConfig+0xe8>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	; (8003864 <TIM_OC2_SetConfig+0xec>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2220      	movs	r2, #32
 80037c2:	4393      	bics	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <TIM_OC2_SetConfig+0xf0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10d      	bne.n	80037f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	4393      	bics	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	4393      	bics	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <TIM_OC2_SetConfig+0xf0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_OC2_SetConfig+0x9e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1a      	ldr	r2, [pc, #104]	; (800386c <TIM_OC2_SetConfig+0xf4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_OC2_SetConfig+0x9e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <TIM_OC2_SetConfig+0xf8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_OC2_SetConfig+0x9e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a18      	ldr	r2, [pc, #96]	; (8003874 <TIM_OC2_SetConfig+0xfc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d113      	bne.n	800383e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <TIM_OC2_SetConfig+0x100>)
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4a16      	ldr	r2, [pc, #88]	; (800387c <TIM_OC2_SetConfig+0x104>)
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	621a      	str	r2, [r3, #32]
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b006      	add	sp, #24
 800385e:	bd80      	pop	{r7, pc}
 8003860:	feff8fff 	.word	0xfeff8fff
 8003864:	fffffcff 	.word	0xfffffcff
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40014000 	.word	0x40014000
 8003870:	40014400 	.word	0x40014400
 8003874:	40014800 	.word	0x40014800
 8003878:	fffffbff 	.word	0xfffffbff
 800387c:	fffff7ff 	.word	0xfffff7ff

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a35      	ldr	r2, [pc, #212]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <TIM_OC3_SetConfig+0xe8>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2203      	movs	r2, #3
 80038b4:	4393      	bics	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	4a29      	ldr	r2, [pc, #164]	; (800396c <TIM_OC3_SetConfig+0xec>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <TIM_OC3_SetConfig+0xf0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10d      	bne.n	80038fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4a24      	ldr	r2, [pc, #144]	; (8003974 <TIM_OC3_SetConfig+0xf4>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <TIM_OC3_SetConfig+0xf8>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <TIM_OC3_SetConfig+0xf0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00b      	beq.n	800391a <TIM_OC3_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <TIM_OC3_SetConfig+0xfc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_OC3_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <TIM_OC3_SetConfig+0x100>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_OC3_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <TIM_OC3_SetConfig+0x104>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d113      	bne.n	8003942 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <TIM_OC3_SetConfig+0x108>)
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <TIM_OC3_SetConfig+0x10c>)
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b006      	add	sp, #24
 8003962:	bd80      	pop	{r7, pc}
 8003964:	fffffeff 	.word	0xfffffeff
 8003968:	fffeff8f 	.word	0xfffeff8f
 800396c:	fffffdff 	.word	0xfffffdff
 8003970:	40012c00 	.word	0x40012c00
 8003974:	fffff7ff 	.word	0xfffff7ff
 8003978:	fffffbff 	.word	0xfffffbff
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800
 8003988:	ffffefff 	.word	0xffffefff
 800398c:	ffffdfff 	.word	0xffffdfff

08003990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <TIM_OC4_SetConfig+0xb0>)
 80039a0:	401a      	ands	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <TIM_OC4_SetConfig+0xb4>)
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <TIM_OC4_SetConfig+0xb8>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <TIM_OC4_SetConfig+0xbc>)
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	031b      	lsls	r3, r3, #12
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <TIM_OC4_SetConfig+0xc0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_OC4_SetConfig+0x78>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <TIM_OC4_SetConfig+0xc4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_OC4_SetConfig+0x78>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <TIM_OC4_SetConfig+0xc8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC4_SetConfig+0x78>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <TIM_OC4_SetConfig+0xcc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d109      	bne.n	8003a1c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <TIM_OC4_SetConfig+0xd0>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	019b      	lsls	r3, r3, #6
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	ffffefff 	.word	0xffffefff
 8003a44:	feff8fff 	.word	0xfeff8fff
 8003a48:	fffffcff 	.word	0xfffffcff
 8003a4c:	ffffdfff 	.word	0xffffdfff
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800
 8003a60:	ffffbfff 	.word	0xffffbfff

08003a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <TIM_OC5_SetConfig+0xa4>)
 8003a74:	401a      	ands	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <TIM_OC5_SetConfig+0xa8>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <TIM_OC5_SetConfig+0xac>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <TIM_OC5_SetConfig+0xb0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x6e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <TIM_OC5_SetConfig+0xb4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x6e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <TIM_OC5_SetConfig+0xb8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x6e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <TIM_OC5_SetConfig+0xbc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d109      	bne.n	8003ae6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <TIM_OC5_SetConfig+0xa4>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b006      	add	sp, #24
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	fffeffff 	.word	0xfffeffff
 8003b0c:	fffeff8f 	.word	0xfffeff8f
 8003b10:	fffdffff 	.word	0xfffdffff
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <TIM_OC6_SetConfig+0xa8>)
 8003b34:	401a      	ands	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <TIM_OC6_SetConfig+0xac>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <TIM_OC6_SetConfig+0xb0>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	051b      	lsls	r3, r3, #20
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <TIM_OC6_SetConfig+0xb4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <TIM_OC6_SetConfig+0x70>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <TIM_OC6_SetConfig+0xb8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <TIM_OC6_SetConfig+0x70>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <TIM_OC6_SetConfig+0xbc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_OC6_SetConfig+0x70>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <TIM_OC6_SetConfig+0xc0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d109      	bne.n	8003ba8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <TIM_OC6_SetConfig+0xc4>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b006      	add	sp, #24
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	ffefffff 	.word	0xffefffff
 8003bd0:	feff8fff 	.word	0xfeff8fff
 8003bd4:	ffdfffff 	.word	0xffdfffff
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800
 8003be8:	fffbffff 	.word	0xfffbffff

08003bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4393      	bics	r3, r2
 8003c06:	001a      	movs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	22f0      	movs	r2, #240	; 0xf0
 8003c16:	4393      	bics	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	220a      	movs	r2, #10
 8003c28:	4393      	bics	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b006      	add	sp, #24
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	2210      	movs	r2, #16
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <TIM_TI2_ConfigInputStage+0x60>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	031b      	lsls	r3, r3, #12
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	22a0      	movs	r2, #160	; 0xa0
 8003c84:	4393      	bics	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b006      	add	sp, #24
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	ffff0fff 	.word	0xffff0fff

08003cac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <TIM_ITRx_SetConfig+0x34>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	2207      	movs	r2, #7
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	609a      	str	r2, [r3, #8]
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	ffcfff8f 	.word	0xffcfff8f

08003ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <TIM_ETR_SetConfig+0x3c>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b006      	add	sp, #24
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	ffff00ff 	.word	0xffff00ff

08003d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	221f      	movs	r2, #31
 8003d34:	4013      	ands	r3, r2
 8003d36:	2201      	movs	r2, #1
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	0013      	movs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	43d2      	mvns	r2, r2
 8003d46:	401a      	ands	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	211f      	movs	r1, #31
 8003d54:	400b      	ands	r3, r1
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4099      	lsls	r1, r3
 8003d5a:	000b      	movs	r3, r1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b006      	add	sp, #24
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223c      	movs	r2, #60	; 0x3c
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e05a      	b.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223c      	movs	r2, #60	; 0x3c
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	223d      	movs	r2, #61	; 0x3d
 8003d90:	2102      	movs	r1, #2
 8003d92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2270      	movs	r2, #112	; 0x70
 8003dc4:	4393      	bics	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d014      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	05db      	lsls	r3, r3, #23
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d00e      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10c      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	4393      	bics	r3, r2
 8003e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	223d      	movs	r2, #61	; 0x3d
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	223c      	movs	r2, #60	; 0x3c
 8003e34:	2100      	movs	r1, #0
 8003e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b004      	add	sp, #16
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	ff0fffff 	.word	0xff0fffff
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40014000 	.word	0x40014000

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	4d0c      	ldr	r5, [pc, #48]	; (8003e90 <__libc_init_array+0x38>)
 8003e5e:	4c0d      	ldr	r4, [pc, #52]	; (8003e94 <__libc_init_array+0x3c>)
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	2600      	movs	r6, #0
 8003e6a:	f000 f821 	bl	8003eb0 <_init>
 8003e6e:	4d0a      	ldr	r5, [pc, #40]	; (8003e98 <__libc_init_array+0x40>)
 8003e70:	4c0a      	ldr	r4, [pc, #40]	; (8003e9c <__libc_init_array+0x44>)
 8003e72:	1b64      	subs	r4, r4, r5
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	00b3      	lsls	r3, r6, #2
 8003e7e:	58eb      	ldr	r3, [r5, r3]
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	00b3      	lsls	r3, r6, #2
 8003e88:	58eb      	ldr	r3, [r5, r3]
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08003f5c 	.word	0x08003f5c
 8003e94:	08003f5c 	.word	0x08003f5c
 8003e98:	08003f5c 	.word	0x08003f5c
 8003e9c:	08003f60 	.word	0x08003f60

08003ea0 <memset>:
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	1882      	adds	r2, r0, r2
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	7019      	strb	r1, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <_init>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr

08003ebc <_fini>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr
