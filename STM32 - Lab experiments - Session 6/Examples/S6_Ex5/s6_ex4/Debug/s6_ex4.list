
s6_ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004984  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b08  08004b08  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004b08  08004b08  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b08  08004b08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000078  08004b88  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004b88  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088fc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be0  00000000  00000000  0002899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c62e  00000000  00000000  0002b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bbb  00000000  00000000  00047c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4768  00000000  00000000  000517e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a4  00000000  00000000  00105f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004a28 	.word	0x08004a28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08004a28 	.word	0x08004a28

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_d2uiz>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2200      	movs	r2, #0
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <__aeabi_d2uiz+0x38>)
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
 800023a:	f000 feaf 	bl	8000f9c <__aeabi_dcmpge>
 800023e:	2800      	cmp	r0, #0
 8000240:	d104      	bne.n	800024c <__aeabi_d2uiz+0x1c>
 8000242:	0020      	movs	r0, r4
 8000244:	0029      	movs	r1, r5
 8000246:	f000 fe0f 	bl	8000e68 <__aeabi_d2iz>
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <__aeabi_d2uiz+0x38>)
 800024e:	2200      	movs	r2, #0
 8000250:	0020      	movs	r0, r4
 8000252:	0029      	movs	r1, r5
 8000254:	f000 fa76 	bl	8000744 <__aeabi_dsub>
 8000258:	f000 fe06 	bl	8000e68 <__aeabi_d2iz>
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	061b      	lsls	r3, r3, #24
 8000260:	469c      	mov	ip, r3
 8000262:	4460      	add	r0, ip
 8000264:	e7f1      	b.n	800024a <__aeabi_d2uiz+0x1a>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	41e00000 	.word	0x41e00000

0800026c <__aeabi_dmul>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	464e      	mov	r6, r9
 8000272:	4645      	mov	r5, r8
 8000274:	46de      	mov	lr, fp
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	4698      	mov	r8, r3
 800027a:	030c      	lsls	r4, r1, #12
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	0006      	movs	r6, r0
 8000280:	4692      	mov	sl, r2
 8000282:	b087      	sub	sp, #28
 8000284:	0b24      	lsrs	r4, r4, #12
 8000286:	0d5b      	lsrs	r3, r3, #21
 8000288:	0fcf      	lsrs	r7, r1, #31
 800028a:	2b00      	cmp	r3, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_dmul+0x24>
 800028e:	e15c      	b.n	800054a <__aeabi_dmul+0x2de>
 8000290:	4ad9      	ldr	r2, [pc, #868]	; (80005f8 <__aeabi_dmul+0x38c>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d100      	bne.n	8000298 <__aeabi_dmul+0x2c>
 8000296:	e175      	b.n	8000584 <__aeabi_dmul+0x318>
 8000298:	0f42      	lsrs	r2, r0, #29
 800029a:	00e4      	lsls	r4, r4, #3
 800029c:	4314      	orrs	r4, r2
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	0412      	lsls	r2, r2, #16
 80002a2:	4314      	orrs	r4, r2
 80002a4:	4ad5      	ldr	r2, [pc, #852]	; (80005fc <__aeabi_dmul+0x390>)
 80002a6:	00c5      	lsls	r5, r0, #3
 80002a8:	4694      	mov	ip, r2
 80002aa:	4463      	add	r3, ip
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2300      	movs	r3, #0
 80002b0:	4699      	mov	r9, r3
 80002b2:	469b      	mov	fp, r3
 80002b4:	4643      	mov	r3, r8
 80002b6:	4642      	mov	r2, r8
 80002b8:	031e      	lsls	r6, r3, #12
 80002ba:	0fd2      	lsrs	r2, r2, #31
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4650      	mov	r0, sl
 80002c0:	4690      	mov	r8, r2
 80002c2:	0b36      	lsrs	r6, r6, #12
 80002c4:	0d5b      	lsrs	r3, r3, #21
 80002c6:	d100      	bne.n	80002ca <__aeabi_dmul+0x5e>
 80002c8:	e120      	b.n	800050c <__aeabi_dmul+0x2a0>
 80002ca:	4acb      	ldr	r2, [pc, #812]	; (80005f8 <__aeabi_dmul+0x38c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dmul+0x66>
 80002d0:	e162      	b.n	8000598 <__aeabi_dmul+0x32c>
 80002d2:	49ca      	ldr	r1, [pc, #808]	; (80005fc <__aeabi_dmul+0x390>)
 80002d4:	0f42      	lsrs	r2, r0, #29
 80002d6:	468c      	mov	ip, r1
 80002d8:	9900      	ldr	r1, [sp, #0]
 80002da:	4463      	add	r3, ip
 80002dc:	00f6      	lsls	r6, r6, #3
 80002de:	468c      	mov	ip, r1
 80002e0:	4316      	orrs	r6, r2
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	449c      	add	ip, r3
 80002e6:	0412      	lsls	r2, r2, #16
 80002e8:	4663      	mov	r3, ip
 80002ea:	4316      	orrs	r6, r2
 80002ec:	00c2      	lsls	r2, r0, #3
 80002ee:	2000      	movs	r0, #0
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	9900      	ldr	r1, [sp, #0]
 80002f4:	4643      	mov	r3, r8
 80002f6:	3101      	adds	r1, #1
 80002f8:	468c      	mov	ip, r1
 80002fa:	4649      	mov	r1, r9
 80002fc:	407b      	eors	r3, r7
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	290f      	cmp	r1, #15
 8000302:	d826      	bhi.n	8000352 <__aeabi_dmul+0xe6>
 8000304:	4bbe      	ldr	r3, [pc, #760]	; (8000600 <__aeabi_dmul+0x394>)
 8000306:	0089      	lsls	r1, r1, #2
 8000308:	5859      	ldr	r1, [r3, r1]
 800030a:	468f      	mov	pc, r1
 800030c:	4643      	mov	r3, r8
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	0034      	movs	r4, r6
 8000312:	0015      	movs	r5, r2
 8000314:	4683      	mov	fp, r0
 8000316:	465b      	mov	r3, fp
 8000318:	2b02      	cmp	r3, #2
 800031a:	d016      	beq.n	800034a <__aeabi_dmul+0xde>
 800031c:	2b03      	cmp	r3, #3
 800031e:	d100      	bne.n	8000322 <__aeabi_dmul+0xb6>
 8000320:	e203      	b.n	800072a <__aeabi_dmul+0x4be>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d000      	beq.n	8000328 <__aeabi_dmul+0xbc>
 8000326:	e0cd      	b.n	80004c4 <__aeabi_dmul+0x258>
 8000328:	2200      	movs	r2, #0
 800032a:	2400      	movs	r4, #0
 800032c:	2500      	movs	r5, #0
 800032e:	9b01      	ldr	r3, [sp, #4]
 8000330:	0512      	lsls	r2, r2, #20
 8000332:	4322      	orrs	r2, r4
 8000334:	07db      	lsls	r3, r3, #31
 8000336:	431a      	orrs	r2, r3
 8000338:	0028      	movs	r0, r5
 800033a:	0011      	movs	r1, r2
 800033c:	b007      	add	sp, #28
 800033e:	bcf0      	pop	{r4, r5, r6, r7}
 8000340:	46bb      	mov	fp, r7
 8000342:	46b2      	mov	sl, r6
 8000344:	46a9      	mov	r9, r5
 8000346:	46a0      	mov	r8, r4
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	2400      	movs	r4, #0
 800034c:	2500      	movs	r5, #0
 800034e:	4aaa      	ldr	r2, [pc, #680]	; (80005f8 <__aeabi_dmul+0x38c>)
 8000350:	e7ed      	b.n	800032e <__aeabi_dmul+0xc2>
 8000352:	0c28      	lsrs	r0, r5, #16
 8000354:	042d      	lsls	r5, r5, #16
 8000356:	0c2d      	lsrs	r5, r5, #16
 8000358:	002b      	movs	r3, r5
 800035a:	0c11      	lsrs	r1, r2, #16
 800035c:	0412      	lsls	r2, r2, #16
 800035e:	0c12      	lsrs	r2, r2, #16
 8000360:	4353      	muls	r3, r2
 8000362:	4698      	mov	r8, r3
 8000364:	0013      	movs	r3, r2
 8000366:	002f      	movs	r7, r5
 8000368:	4343      	muls	r3, r0
 800036a:	4699      	mov	r9, r3
 800036c:	434f      	muls	r7, r1
 800036e:	444f      	add	r7, r9
 8000370:	46bb      	mov	fp, r7
 8000372:	4647      	mov	r7, r8
 8000374:	000b      	movs	r3, r1
 8000376:	0c3f      	lsrs	r7, r7, #16
 8000378:	46ba      	mov	sl, r7
 800037a:	4343      	muls	r3, r0
 800037c:	44da      	add	sl, fp
 800037e:	9302      	str	r3, [sp, #8]
 8000380:	45d1      	cmp	r9, sl
 8000382:	d904      	bls.n	800038e <__aeabi_dmul+0x122>
 8000384:	2780      	movs	r7, #128	; 0x80
 8000386:	027f      	lsls	r7, r7, #9
 8000388:	46b9      	mov	r9, r7
 800038a:	444b      	add	r3, r9
 800038c:	9302      	str	r3, [sp, #8]
 800038e:	4653      	mov	r3, sl
 8000390:	0c1b      	lsrs	r3, r3, #16
 8000392:	469b      	mov	fp, r3
 8000394:	4653      	mov	r3, sl
 8000396:	041f      	lsls	r7, r3, #16
 8000398:	4643      	mov	r3, r8
 800039a:	041b      	lsls	r3, r3, #16
 800039c:	0c1b      	lsrs	r3, r3, #16
 800039e:	4698      	mov	r8, r3
 80003a0:	003b      	movs	r3, r7
 80003a2:	4443      	add	r3, r8
 80003a4:	9304      	str	r3, [sp, #16]
 80003a6:	0c33      	lsrs	r3, r6, #16
 80003a8:	0436      	lsls	r6, r6, #16
 80003aa:	0c36      	lsrs	r6, r6, #16
 80003ac:	4698      	mov	r8, r3
 80003ae:	0033      	movs	r3, r6
 80003b0:	4343      	muls	r3, r0
 80003b2:	4699      	mov	r9, r3
 80003b4:	4643      	mov	r3, r8
 80003b6:	4343      	muls	r3, r0
 80003b8:	002f      	movs	r7, r5
 80003ba:	469a      	mov	sl, r3
 80003bc:	4643      	mov	r3, r8
 80003be:	4377      	muls	r7, r6
 80003c0:	435d      	muls	r5, r3
 80003c2:	0c38      	lsrs	r0, r7, #16
 80003c4:	444d      	add	r5, r9
 80003c6:	1945      	adds	r5, r0, r5
 80003c8:	45a9      	cmp	r9, r5
 80003ca:	d903      	bls.n	80003d4 <__aeabi_dmul+0x168>
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	025b      	lsls	r3, r3, #9
 80003d0:	4699      	mov	r9, r3
 80003d2:	44ca      	add	sl, r9
 80003d4:	043f      	lsls	r7, r7, #16
 80003d6:	0c28      	lsrs	r0, r5, #16
 80003d8:	0c3f      	lsrs	r7, r7, #16
 80003da:	042d      	lsls	r5, r5, #16
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	0c27      	lsrs	r7, r4, #16
 80003e0:	0424      	lsls	r4, r4, #16
 80003e2:	0c24      	lsrs	r4, r4, #16
 80003e4:	0003      	movs	r3, r0
 80003e6:	0020      	movs	r0, r4
 80003e8:	4350      	muls	r0, r2
 80003ea:	437a      	muls	r2, r7
 80003ec:	4691      	mov	r9, r2
 80003ee:	003a      	movs	r2, r7
 80003f0:	4453      	add	r3, sl
 80003f2:	9305      	str	r3, [sp, #20]
 80003f4:	0c03      	lsrs	r3, r0, #16
 80003f6:	469a      	mov	sl, r3
 80003f8:	434a      	muls	r2, r1
 80003fa:	4361      	muls	r1, r4
 80003fc:	4449      	add	r1, r9
 80003fe:	4451      	add	r1, sl
 8000400:	44ab      	add	fp, r5
 8000402:	4589      	cmp	r9, r1
 8000404:	d903      	bls.n	800040e <__aeabi_dmul+0x1a2>
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	4699      	mov	r9, r3
 800040c:	444a      	add	r2, r9
 800040e:	0400      	lsls	r0, r0, #16
 8000410:	0c0b      	lsrs	r3, r1, #16
 8000412:	0c00      	lsrs	r0, r0, #16
 8000414:	0409      	lsls	r1, r1, #16
 8000416:	1809      	adds	r1, r1, r0
 8000418:	0020      	movs	r0, r4
 800041a:	4699      	mov	r9, r3
 800041c:	4643      	mov	r3, r8
 800041e:	4370      	muls	r0, r6
 8000420:	435c      	muls	r4, r3
 8000422:	437e      	muls	r6, r7
 8000424:	435f      	muls	r7, r3
 8000426:	0c03      	lsrs	r3, r0, #16
 8000428:	4698      	mov	r8, r3
 800042a:	19a4      	adds	r4, r4, r6
 800042c:	4444      	add	r4, r8
 800042e:	444a      	add	r2, r9
 8000430:	9703      	str	r7, [sp, #12]
 8000432:	42a6      	cmp	r6, r4
 8000434:	d904      	bls.n	8000440 <__aeabi_dmul+0x1d4>
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	025b      	lsls	r3, r3, #9
 800043a:	4698      	mov	r8, r3
 800043c:	4447      	add	r7, r8
 800043e:	9703      	str	r7, [sp, #12]
 8000440:	0423      	lsls	r3, r4, #16
 8000442:	9e02      	ldr	r6, [sp, #8]
 8000444:	469a      	mov	sl, r3
 8000446:	9b05      	ldr	r3, [sp, #20]
 8000448:	445e      	add	r6, fp
 800044a:	4698      	mov	r8, r3
 800044c:	42ae      	cmp	r6, r5
 800044e:	41ad      	sbcs	r5, r5
 8000450:	1876      	adds	r6, r6, r1
 8000452:	428e      	cmp	r6, r1
 8000454:	4189      	sbcs	r1, r1
 8000456:	0400      	lsls	r0, r0, #16
 8000458:	0c00      	lsrs	r0, r0, #16
 800045a:	4450      	add	r0, sl
 800045c:	4440      	add	r0, r8
 800045e:	426d      	negs	r5, r5
 8000460:	1947      	adds	r7, r0, r5
 8000462:	46b8      	mov	r8, r7
 8000464:	4693      	mov	fp, r2
 8000466:	4249      	negs	r1, r1
 8000468:	4689      	mov	r9, r1
 800046a:	44c3      	add	fp, r8
 800046c:	44d9      	add	r9, fp
 800046e:	4298      	cmp	r0, r3
 8000470:	4180      	sbcs	r0, r0
 8000472:	45a8      	cmp	r8, r5
 8000474:	41ad      	sbcs	r5, r5
 8000476:	4593      	cmp	fp, r2
 8000478:	4192      	sbcs	r2, r2
 800047a:	4589      	cmp	r9, r1
 800047c:	4189      	sbcs	r1, r1
 800047e:	426d      	negs	r5, r5
 8000480:	4240      	negs	r0, r0
 8000482:	4328      	orrs	r0, r5
 8000484:	0c24      	lsrs	r4, r4, #16
 8000486:	4252      	negs	r2, r2
 8000488:	4249      	negs	r1, r1
 800048a:	430a      	orrs	r2, r1
 800048c:	9b03      	ldr	r3, [sp, #12]
 800048e:	1900      	adds	r0, r0, r4
 8000490:	1880      	adds	r0, r0, r2
 8000492:	18c7      	adds	r7, r0, r3
 8000494:	464b      	mov	r3, r9
 8000496:	0ddc      	lsrs	r4, r3, #23
 8000498:	9b04      	ldr	r3, [sp, #16]
 800049a:	0275      	lsls	r5, r6, #9
 800049c:	431d      	orrs	r5, r3
 800049e:	1e6a      	subs	r2, r5, #1
 80004a0:	4195      	sbcs	r5, r2
 80004a2:	464b      	mov	r3, r9
 80004a4:	0df6      	lsrs	r6, r6, #23
 80004a6:	027f      	lsls	r7, r7, #9
 80004a8:	4335      	orrs	r5, r6
 80004aa:	025a      	lsls	r2, r3, #9
 80004ac:	433c      	orrs	r4, r7
 80004ae:	4315      	orrs	r5, r2
 80004b0:	01fb      	lsls	r3, r7, #7
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_dmul+0x24a>
 80004b4:	e11c      	b.n	80006f0 <__aeabi_dmul+0x484>
 80004b6:	2101      	movs	r1, #1
 80004b8:	086a      	lsrs	r2, r5, #1
 80004ba:	400d      	ands	r5, r1
 80004bc:	4315      	orrs	r5, r2
 80004be:	07e2      	lsls	r2, r4, #31
 80004c0:	4315      	orrs	r5, r2
 80004c2:	0864      	lsrs	r4, r4, #1
 80004c4:	494f      	ldr	r1, [pc, #316]	; (8000604 <__aeabi_dmul+0x398>)
 80004c6:	4461      	add	r1, ip
 80004c8:	2900      	cmp	r1, #0
 80004ca:	dc00      	bgt.n	80004ce <__aeabi_dmul+0x262>
 80004cc:	e0b0      	b.n	8000630 <__aeabi_dmul+0x3c4>
 80004ce:	076b      	lsls	r3, r5, #29
 80004d0:	d009      	beq.n	80004e6 <__aeabi_dmul+0x27a>
 80004d2:	220f      	movs	r2, #15
 80004d4:	402a      	ands	r2, r5
 80004d6:	2a04      	cmp	r2, #4
 80004d8:	d005      	beq.n	80004e6 <__aeabi_dmul+0x27a>
 80004da:	1d2a      	adds	r2, r5, #4
 80004dc:	42aa      	cmp	r2, r5
 80004de:	41ad      	sbcs	r5, r5
 80004e0:	426d      	negs	r5, r5
 80004e2:	1964      	adds	r4, r4, r5
 80004e4:	0015      	movs	r5, r2
 80004e6:	01e3      	lsls	r3, r4, #7
 80004e8:	d504      	bpl.n	80004f4 <__aeabi_dmul+0x288>
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	4a46      	ldr	r2, [pc, #280]	; (8000608 <__aeabi_dmul+0x39c>)
 80004ee:	00c9      	lsls	r1, r1, #3
 80004f0:	4014      	ands	r4, r2
 80004f2:	4461      	add	r1, ip
 80004f4:	4a45      	ldr	r2, [pc, #276]	; (800060c <__aeabi_dmul+0x3a0>)
 80004f6:	4291      	cmp	r1, r2
 80004f8:	dd00      	ble.n	80004fc <__aeabi_dmul+0x290>
 80004fa:	e726      	b.n	800034a <__aeabi_dmul+0xde>
 80004fc:	0762      	lsls	r2, r4, #29
 80004fe:	08ed      	lsrs	r5, r5, #3
 8000500:	0264      	lsls	r4, r4, #9
 8000502:	0549      	lsls	r1, r1, #21
 8000504:	4315      	orrs	r5, r2
 8000506:	0b24      	lsrs	r4, r4, #12
 8000508:	0d4a      	lsrs	r2, r1, #21
 800050a:	e710      	b.n	800032e <__aeabi_dmul+0xc2>
 800050c:	4652      	mov	r2, sl
 800050e:	4332      	orrs	r2, r6
 8000510:	d100      	bne.n	8000514 <__aeabi_dmul+0x2a8>
 8000512:	e07f      	b.n	8000614 <__aeabi_dmul+0x3a8>
 8000514:	2e00      	cmp	r6, #0
 8000516:	d100      	bne.n	800051a <__aeabi_dmul+0x2ae>
 8000518:	e0dc      	b.n	80006d4 <__aeabi_dmul+0x468>
 800051a:	0030      	movs	r0, r6
 800051c:	f000 fd48 	bl	8000fb0 <__clzsi2>
 8000520:	0002      	movs	r2, r0
 8000522:	3a0b      	subs	r2, #11
 8000524:	231d      	movs	r3, #29
 8000526:	0001      	movs	r1, r0
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	3908      	subs	r1, #8
 800052e:	40da      	lsrs	r2, r3
 8000530:	408e      	lsls	r6, r1
 8000532:	4316      	orrs	r6, r2
 8000534:	4652      	mov	r2, sl
 8000536:	408a      	lsls	r2, r1
 8000538:	9b00      	ldr	r3, [sp, #0]
 800053a:	4935      	ldr	r1, [pc, #212]	; (8000610 <__aeabi_dmul+0x3a4>)
 800053c:	1a18      	subs	r0, r3, r0
 800053e:	0003      	movs	r3, r0
 8000540:	468c      	mov	ip, r1
 8000542:	4463      	add	r3, ip
 8000544:	2000      	movs	r0, #0
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	e6d3      	b.n	80002f2 <__aeabi_dmul+0x86>
 800054a:	0025      	movs	r5, r4
 800054c:	4305      	orrs	r5, r0
 800054e:	d04a      	beq.n	80005e6 <__aeabi_dmul+0x37a>
 8000550:	2c00      	cmp	r4, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dmul+0x2ea>
 8000554:	e0b0      	b.n	80006b8 <__aeabi_dmul+0x44c>
 8000556:	0020      	movs	r0, r4
 8000558:	f000 fd2a 	bl	8000fb0 <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	0002      	movs	r2, r0
 8000560:	390b      	subs	r1, #11
 8000562:	231d      	movs	r3, #29
 8000564:	0010      	movs	r0, r2
 8000566:	1a5b      	subs	r3, r3, r1
 8000568:	0031      	movs	r1, r6
 800056a:	0035      	movs	r5, r6
 800056c:	3808      	subs	r0, #8
 800056e:	4084      	lsls	r4, r0
 8000570:	40d9      	lsrs	r1, r3
 8000572:	4085      	lsls	r5, r0
 8000574:	430c      	orrs	r4, r1
 8000576:	4826      	ldr	r0, [pc, #152]	; (8000610 <__aeabi_dmul+0x3a4>)
 8000578:	1a83      	subs	r3, r0, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	4699      	mov	r9, r3
 8000580:	469b      	mov	fp, r3
 8000582:	e697      	b.n	80002b4 <__aeabi_dmul+0x48>
 8000584:	0005      	movs	r5, r0
 8000586:	4325      	orrs	r5, r4
 8000588:	d126      	bne.n	80005d8 <__aeabi_dmul+0x36c>
 800058a:	2208      	movs	r2, #8
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2302      	movs	r3, #2
 8000590:	2400      	movs	r4, #0
 8000592:	4691      	mov	r9, r2
 8000594:	469b      	mov	fp, r3
 8000596:	e68d      	b.n	80002b4 <__aeabi_dmul+0x48>
 8000598:	4652      	mov	r2, sl
 800059a:	9b00      	ldr	r3, [sp, #0]
 800059c:	4332      	orrs	r2, r6
 800059e:	d110      	bne.n	80005c2 <__aeabi_dmul+0x356>
 80005a0:	4915      	ldr	r1, [pc, #84]	; (80005f8 <__aeabi_dmul+0x38c>)
 80005a2:	2600      	movs	r6, #0
 80005a4:	468c      	mov	ip, r1
 80005a6:	4463      	add	r3, ip
 80005a8:	4649      	mov	r1, r9
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	4319      	orrs	r1, r3
 80005b0:	4689      	mov	r9, r1
 80005b2:	2002      	movs	r0, #2
 80005b4:	e69d      	b.n	80002f2 <__aeabi_dmul+0x86>
 80005b6:	465b      	mov	r3, fp
 80005b8:	9701      	str	r7, [sp, #4]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d000      	beq.n	80005c0 <__aeabi_dmul+0x354>
 80005be:	e6ad      	b.n	800031c <__aeabi_dmul+0xb0>
 80005c0:	e6c3      	b.n	800034a <__aeabi_dmul+0xde>
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <__aeabi_dmul+0x38c>)
 80005c4:	2003      	movs	r0, #3
 80005c6:	4694      	mov	ip, r2
 80005c8:	4463      	add	r3, ip
 80005ca:	464a      	mov	r2, r9
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2303      	movs	r3, #3
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4691      	mov	r9, r2
 80005d4:	4652      	mov	r2, sl
 80005d6:	e68c      	b.n	80002f2 <__aeabi_dmul+0x86>
 80005d8:	220c      	movs	r2, #12
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2303      	movs	r3, #3
 80005de:	0005      	movs	r5, r0
 80005e0:	4691      	mov	r9, r2
 80005e2:	469b      	mov	fp, r3
 80005e4:	e666      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005e6:	2304      	movs	r3, #4
 80005e8:	4699      	mov	r9, r3
 80005ea:	2300      	movs	r3, #0
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2400      	movs	r4, #0
 80005f2:	469b      	mov	fp, r3
 80005f4:	e65e      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	000007ff 	.word	0x000007ff
 80005fc:	fffffc01 	.word	0xfffffc01
 8000600:	08004a54 	.word	0x08004a54
 8000604:	000003ff 	.word	0x000003ff
 8000608:	feffffff 	.word	0xfeffffff
 800060c:	000007fe 	.word	0x000007fe
 8000610:	fffffc0d 	.word	0xfffffc0d
 8000614:	4649      	mov	r1, r9
 8000616:	2301      	movs	r3, #1
 8000618:	4319      	orrs	r1, r3
 800061a:	4689      	mov	r9, r1
 800061c:	2600      	movs	r6, #0
 800061e:	2001      	movs	r0, #1
 8000620:	e667      	b.n	80002f2 <__aeabi_dmul+0x86>
 8000622:	2300      	movs	r3, #0
 8000624:	2480      	movs	r4, #128	; 0x80
 8000626:	2500      	movs	r5, #0
 8000628:	4a43      	ldr	r2, [pc, #268]	; (8000738 <__aeabi_dmul+0x4cc>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	0324      	lsls	r4, r4, #12
 800062e:	e67e      	b.n	800032e <__aeabi_dmul+0xc2>
 8000630:	2001      	movs	r0, #1
 8000632:	1a40      	subs	r0, r0, r1
 8000634:	2838      	cmp	r0, #56	; 0x38
 8000636:	dd00      	ble.n	800063a <__aeabi_dmul+0x3ce>
 8000638:	e676      	b.n	8000328 <__aeabi_dmul+0xbc>
 800063a:	281f      	cmp	r0, #31
 800063c:	dd5b      	ble.n	80006f6 <__aeabi_dmul+0x48a>
 800063e:	221f      	movs	r2, #31
 8000640:	0023      	movs	r3, r4
 8000642:	4252      	negs	r2, r2
 8000644:	1a51      	subs	r1, r2, r1
 8000646:	40cb      	lsrs	r3, r1
 8000648:	0019      	movs	r1, r3
 800064a:	2820      	cmp	r0, #32
 800064c:	d003      	beq.n	8000656 <__aeabi_dmul+0x3ea>
 800064e:	4a3b      	ldr	r2, [pc, #236]	; (800073c <__aeabi_dmul+0x4d0>)
 8000650:	4462      	add	r2, ip
 8000652:	4094      	lsls	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	1e6a      	subs	r2, r5, #1
 8000658:	4195      	sbcs	r5, r2
 800065a:	002a      	movs	r2, r5
 800065c:	430a      	orrs	r2, r1
 800065e:	2107      	movs	r1, #7
 8000660:	000d      	movs	r5, r1
 8000662:	2400      	movs	r4, #0
 8000664:	4015      	ands	r5, r2
 8000666:	4211      	tst	r1, r2
 8000668:	d05b      	beq.n	8000722 <__aeabi_dmul+0x4b6>
 800066a:	210f      	movs	r1, #15
 800066c:	2400      	movs	r4, #0
 800066e:	4011      	ands	r1, r2
 8000670:	2904      	cmp	r1, #4
 8000672:	d053      	beq.n	800071c <__aeabi_dmul+0x4b0>
 8000674:	1d11      	adds	r1, r2, #4
 8000676:	4291      	cmp	r1, r2
 8000678:	4192      	sbcs	r2, r2
 800067a:	4252      	negs	r2, r2
 800067c:	18a4      	adds	r4, r4, r2
 800067e:	000a      	movs	r2, r1
 8000680:	0223      	lsls	r3, r4, #8
 8000682:	d54b      	bpl.n	800071c <__aeabi_dmul+0x4b0>
 8000684:	2201      	movs	r2, #1
 8000686:	2400      	movs	r4, #0
 8000688:	2500      	movs	r5, #0
 800068a:	e650      	b.n	800032e <__aeabi_dmul+0xc2>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	031b      	lsls	r3, r3, #12
 8000690:	421c      	tst	r4, r3
 8000692:	d009      	beq.n	80006a8 <__aeabi_dmul+0x43c>
 8000694:	421e      	tst	r6, r3
 8000696:	d107      	bne.n	80006a8 <__aeabi_dmul+0x43c>
 8000698:	4333      	orrs	r3, r6
 800069a:	031c      	lsls	r4, r3, #12
 800069c:	4643      	mov	r3, r8
 800069e:	0015      	movs	r5, r2
 80006a0:	0b24      	lsrs	r4, r4, #12
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <__aeabi_dmul+0x4cc>)
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	e642      	b.n	800032e <__aeabi_dmul+0xc2>
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0312      	lsls	r2, r2, #12
 80006ac:	4314      	orrs	r4, r2
 80006ae:	0324      	lsls	r4, r4, #12
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <__aeabi_dmul+0x4cc>)
 80006b2:	0b24      	lsrs	r4, r4, #12
 80006b4:	9701      	str	r7, [sp, #4]
 80006b6:	e63a      	b.n	800032e <__aeabi_dmul+0xc2>
 80006b8:	f000 fc7a 	bl	8000fb0 <__clzsi2>
 80006bc:	0001      	movs	r1, r0
 80006be:	0002      	movs	r2, r0
 80006c0:	3115      	adds	r1, #21
 80006c2:	3220      	adds	r2, #32
 80006c4:	291c      	cmp	r1, #28
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_dmul+0x45e>
 80006c8:	e74b      	b.n	8000562 <__aeabi_dmul+0x2f6>
 80006ca:	0034      	movs	r4, r6
 80006cc:	3808      	subs	r0, #8
 80006ce:	2500      	movs	r5, #0
 80006d0:	4084      	lsls	r4, r0
 80006d2:	e750      	b.n	8000576 <__aeabi_dmul+0x30a>
 80006d4:	f000 fc6c 	bl	8000fb0 <__clzsi2>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	3215      	adds	r2, #21
 80006de:	3020      	adds	r0, #32
 80006e0:	2a1c      	cmp	r2, #28
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_dmul+0x47a>
 80006e4:	e71e      	b.n	8000524 <__aeabi_dmul+0x2b8>
 80006e6:	4656      	mov	r6, sl
 80006e8:	3b08      	subs	r3, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	409e      	lsls	r6, r3
 80006ee:	e723      	b.n	8000538 <__aeabi_dmul+0x2cc>
 80006f0:	9b00      	ldr	r3, [sp, #0]
 80006f2:	469c      	mov	ip, r3
 80006f4:	e6e6      	b.n	80004c4 <__aeabi_dmul+0x258>
 80006f6:	4912      	ldr	r1, [pc, #72]	; (8000740 <__aeabi_dmul+0x4d4>)
 80006f8:	0022      	movs	r2, r4
 80006fa:	4461      	add	r1, ip
 80006fc:	002e      	movs	r6, r5
 80006fe:	408d      	lsls	r5, r1
 8000700:	408a      	lsls	r2, r1
 8000702:	40c6      	lsrs	r6, r0
 8000704:	1e69      	subs	r1, r5, #1
 8000706:	418d      	sbcs	r5, r1
 8000708:	4332      	orrs	r2, r6
 800070a:	432a      	orrs	r2, r5
 800070c:	40c4      	lsrs	r4, r0
 800070e:	0753      	lsls	r3, r2, #29
 8000710:	d0b6      	beq.n	8000680 <__aeabi_dmul+0x414>
 8000712:	210f      	movs	r1, #15
 8000714:	4011      	ands	r1, r2
 8000716:	2904      	cmp	r1, #4
 8000718:	d1ac      	bne.n	8000674 <__aeabi_dmul+0x408>
 800071a:	e7b1      	b.n	8000680 <__aeabi_dmul+0x414>
 800071c:	0765      	lsls	r5, r4, #29
 800071e:	0264      	lsls	r4, r4, #9
 8000720:	0b24      	lsrs	r4, r4, #12
 8000722:	08d2      	lsrs	r2, r2, #3
 8000724:	4315      	orrs	r5, r2
 8000726:	2200      	movs	r2, #0
 8000728:	e601      	b.n	800032e <__aeabi_dmul+0xc2>
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0312      	lsls	r2, r2, #12
 800072e:	4314      	orrs	r4, r2
 8000730:	0324      	lsls	r4, r4, #12
 8000732:	4a01      	ldr	r2, [pc, #4]	; (8000738 <__aeabi_dmul+0x4cc>)
 8000734:	0b24      	lsrs	r4, r4, #12
 8000736:	e5fa      	b.n	800032e <__aeabi_dmul+0xc2>
 8000738:	000007ff 	.word	0x000007ff
 800073c:	0000043e 	.word	0x0000043e
 8000740:	0000041e 	.word	0x0000041e

08000744 <__aeabi_dsub>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	4657      	mov	r7, sl
 8000748:	464e      	mov	r6, r9
 800074a:	4645      	mov	r5, r8
 800074c:	46de      	mov	lr, fp
 800074e:	b5e0      	push	{r5, r6, r7, lr}
 8000750:	001e      	movs	r6, r3
 8000752:	0017      	movs	r7, r2
 8000754:	004a      	lsls	r2, r1, #1
 8000756:	030b      	lsls	r3, r1, #12
 8000758:	0d52      	lsrs	r2, r2, #21
 800075a:	0a5b      	lsrs	r3, r3, #9
 800075c:	4690      	mov	r8, r2
 800075e:	0f42      	lsrs	r2, r0, #29
 8000760:	431a      	orrs	r2, r3
 8000762:	0fcd      	lsrs	r5, r1, #31
 8000764:	4ccd      	ldr	r4, [pc, #820]	; (8000a9c <__aeabi_dsub+0x358>)
 8000766:	0331      	lsls	r1, r6, #12
 8000768:	00c3      	lsls	r3, r0, #3
 800076a:	4694      	mov	ip, r2
 800076c:	0070      	lsls	r0, r6, #1
 800076e:	0f7a      	lsrs	r2, r7, #29
 8000770:	0a49      	lsrs	r1, r1, #9
 8000772:	00ff      	lsls	r7, r7, #3
 8000774:	469a      	mov	sl, r3
 8000776:	46b9      	mov	r9, r7
 8000778:	0d40      	lsrs	r0, r0, #21
 800077a:	0ff6      	lsrs	r6, r6, #31
 800077c:	4311      	orrs	r1, r2
 800077e:	42a0      	cmp	r0, r4
 8000780:	d100      	bne.n	8000784 <__aeabi_dsub+0x40>
 8000782:	e0b1      	b.n	80008e8 <__aeabi_dsub+0x1a4>
 8000784:	2201      	movs	r2, #1
 8000786:	4056      	eors	r6, r2
 8000788:	46b3      	mov	fp, r6
 800078a:	42b5      	cmp	r5, r6
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x4c>
 800078e:	e088      	b.n	80008a2 <__aeabi_dsub+0x15e>
 8000790:	4642      	mov	r2, r8
 8000792:	1a12      	subs	r2, r2, r0
 8000794:	2a00      	cmp	r2, #0
 8000796:	dc00      	bgt.n	800079a <__aeabi_dsub+0x56>
 8000798:	e0ae      	b.n	80008f8 <__aeabi_dsub+0x1b4>
 800079a:	2800      	cmp	r0, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dsub+0x5c>
 800079e:	e0c1      	b.n	8000924 <__aeabi_dsub+0x1e0>
 80007a0:	48be      	ldr	r0, [pc, #760]	; (8000a9c <__aeabi_dsub+0x358>)
 80007a2:	4580      	cmp	r8, r0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dsub+0x64>
 80007a6:	e151      	b.n	8000a4c <__aeabi_dsub+0x308>
 80007a8:	2080      	movs	r0, #128	; 0x80
 80007aa:	0400      	lsls	r0, r0, #16
 80007ac:	4301      	orrs	r1, r0
 80007ae:	2a38      	cmp	r2, #56	; 0x38
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dsub+0x70>
 80007b2:	e17b      	b.n	8000aac <__aeabi_dsub+0x368>
 80007b4:	2a1f      	cmp	r2, #31
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dsub+0x76>
 80007b8:	e1ee      	b.n	8000b98 <__aeabi_dsub+0x454>
 80007ba:	2020      	movs	r0, #32
 80007bc:	003e      	movs	r6, r7
 80007be:	1a80      	subs	r0, r0, r2
 80007c0:	000c      	movs	r4, r1
 80007c2:	40d6      	lsrs	r6, r2
 80007c4:	40d1      	lsrs	r1, r2
 80007c6:	4087      	lsls	r7, r0
 80007c8:	4662      	mov	r2, ip
 80007ca:	4084      	lsls	r4, r0
 80007cc:	1a52      	subs	r2, r2, r1
 80007ce:	1e78      	subs	r0, r7, #1
 80007d0:	4187      	sbcs	r7, r0
 80007d2:	4694      	mov	ip, r2
 80007d4:	4334      	orrs	r4, r6
 80007d6:	4327      	orrs	r7, r4
 80007d8:	1bdc      	subs	r4, r3, r7
 80007da:	42a3      	cmp	r3, r4
 80007dc:	419b      	sbcs	r3, r3
 80007de:	4662      	mov	r2, ip
 80007e0:	425b      	negs	r3, r3
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	4699      	mov	r9, r3
 80007e6:	464b      	mov	r3, r9
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dsub+0xaa>
 80007ec:	e118      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 80007ee:	464b      	mov	r3, r9
 80007f0:	0258      	lsls	r0, r3, #9
 80007f2:	0a43      	lsrs	r3, r0, #9
 80007f4:	4699      	mov	r9, r3
 80007f6:	464b      	mov	r3, r9
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dsub+0xba>
 80007fc:	e137      	b.n	8000a6e <__aeabi_dsub+0x32a>
 80007fe:	4648      	mov	r0, r9
 8000800:	f000 fbd6 	bl	8000fb0 <__clzsi2>
 8000804:	0001      	movs	r1, r0
 8000806:	3908      	subs	r1, #8
 8000808:	2320      	movs	r3, #32
 800080a:	0022      	movs	r2, r4
 800080c:	4648      	mov	r0, r9
 800080e:	1a5b      	subs	r3, r3, r1
 8000810:	40da      	lsrs	r2, r3
 8000812:	4088      	lsls	r0, r1
 8000814:	408c      	lsls	r4, r1
 8000816:	4643      	mov	r3, r8
 8000818:	4310      	orrs	r0, r2
 800081a:	4588      	cmp	r8, r1
 800081c:	dd00      	ble.n	8000820 <__aeabi_dsub+0xdc>
 800081e:	e136      	b.n	8000a8e <__aeabi_dsub+0x34a>
 8000820:	1ac9      	subs	r1, r1, r3
 8000822:	1c4b      	adds	r3, r1, #1
 8000824:	2b1f      	cmp	r3, #31
 8000826:	dd00      	ble.n	800082a <__aeabi_dsub+0xe6>
 8000828:	e0ea      	b.n	8000a00 <__aeabi_dsub+0x2bc>
 800082a:	2220      	movs	r2, #32
 800082c:	0026      	movs	r6, r4
 800082e:	1ad2      	subs	r2, r2, r3
 8000830:	0001      	movs	r1, r0
 8000832:	4094      	lsls	r4, r2
 8000834:	40de      	lsrs	r6, r3
 8000836:	40d8      	lsrs	r0, r3
 8000838:	2300      	movs	r3, #0
 800083a:	4091      	lsls	r1, r2
 800083c:	1e62      	subs	r2, r4, #1
 800083e:	4194      	sbcs	r4, r2
 8000840:	4681      	mov	r9, r0
 8000842:	4698      	mov	r8, r3
 8000844:	4331      	orrs	r1, r6
 8000846:	430c      	orrs	r4, r1
 8000848:	0763      	lsls	r3, r4, #29
 800084a:	d009      	beq.n	8000860 <__aeabi_dsub+0x11c>
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	2b04      	cmp	r3, #4
 8000852:	d005      	beq.n	8000860 <__aeabi_dsub+0x11c>
 8000854:	1d23      	adds	r3, r4, #4
 8000856:	42a3      	cmp	r3, r4
 8000858:	41a4      	sbcs	r4, r4
 800085a:	4264      	negs	r4, r4
 800085c:	44a1      	add	r9, r4
 800085e:	001c      	movs	r4, r3
 8000860:	464b      	mov	r3, r9
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	d400      	bmi.n	8000868 <__aeabi_dsub+0x124>
 8000866:	e0de      	b.n	8000a26 <__aeabi_dsub+0x2e2>
 8000868:	4641      	mov	r1, r8
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <__aeabi_dsub+0x358>)
 800086c:	3101      	adds	r1, #1
 800086e:	4299      	cmp	r1, r3
 8000870:	d100      	bne.n	8000874 <__aeabi_dsub+0x130>
 8000872:	e0e7      	b.n	8000a44 <__aeabi_dsub+0x300>
 8000874:	464b      	mov	r3, r9
 8000876:	488a      	ldr	r0, [pc, #552]	; (8000aa0 <__aeabi_dsub+0x35c>)
 8000878:	08e4      	lsrs	r4, r4, #3
 800087a:	4003      	ands	r3, r0
 800087c:	0018      	movs	r0, r3
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	075b      	lsls	r3, r3, #29
 8000882:	0240      	lsls	r0, r0, #9
 8000884:	4323      	orrs	r3, r4
 8000886:	0d4a      	lsrs	r2, r1, #21
 8000888:	0b04      	lsrs	r4, r0, #12
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	07ed      	lsls	r5, r5, #31
 800088e:	4322      	orrs	r2, r4
 8000890:	432a      	orrs	r2, r5
 8000892:	0018      	movs	r0, r3
 8000894:	0011      	movs	r1, r2
 8000896:	bcf0      	pop	{r4, r5, r6, r7}
 8000898:	46bb      	mov	fp, r7
 800089a:	46b2      	mov	sl, r6
 800089c:	46a9      	mov	r9, r5
 800089e:	46a0      	mov	r8, r4
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	4642      	mov	r2, r8
 80008a4:	1a12      	subs	r2, r2, r0
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	dd52      	ble.n	8000950 <__aeabi_dsub+0x20c>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dsub+0x16c>
 80008ae:	e09c      	b.n	80009ea <__aeabi_dsub+0x2a6>
 80008b0:	45a0      	cmp	r8, r4
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dsub+0x172>
 80008b4:	e0ca      	b.n	8000a4c <__aeabi_dsub+0x308>
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	0400      	lsls	r0, r0, #16
 80008ba:	4301      	orrs	r1, r0
 80008bc:	2a38      	cmp	r2, #56	; 0x38
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dsub+0x17e>
 80008c0:	e149      	b.n	8000b56 <__aeabi_dsub+0x412>
 80008c2:	2a1f      	cmp	r2, #31
 80008c4:	dc00      	bgt.n	80008c8 <__aeabi_dsub+0x184>
 80008c6:	e197      	b.n	8000bf8 <__aeabi_dsub+0x4b4>
 80008c8:	0010      	movs	r0, r2
 80008ca:	000e      	movs	r6, r1
 80008cc:	3820      	subs	r0, #32
 80008ce:	40c6      	lsrs	r6, r0
 80008d0:	2a20      	cmp	r2, #32
 80008d2:	d004      	beq.n	80008de <__aeabi_dsub+0x19a>
 80008d4:	2040      	movs	r0, #64	; 0x40
 80008d6:	1a82      	subs	r2, r0, r2
 80008d8:	4091      	lsls	r1, r2
 80008da:	430f      	orrs	r7, r1
 80008dc:	46b9      	mov	r9, r7
 80008de:	464c      	mov	r4, r9
 80008e0:	1e62      	subs	r2, r4, #1
 80008e2:	4194      	sbcs	r4, r2
 80008e4:	4334      	orrs	r4, r6
 80008e6:	e13a      	b.n	8000b5e <__aeabi_dsub+0x41a>
 80008e8:	000a      	movs	r2, r1
 80008ea:	433a      	orrs	r2, r7
 80008ec:	d028      	beq.n	8000940 <__aeabi_dsub+0x1fc>
 80008ee:	46b3      	mov	fp, r6
 80008f0:	42b5      	cmp	r5, r6
 80008f2:	d02b      	beq.n	800094c <__aeabi_dsub+0x208>
 80008f4:	4a6b      	ldr	r2, [pc, #428]	; (8000aa4 <__aeabi_dsub+0x360>)
 80008f6:	4442      	add	r2, r8
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d05d      	beq.n	80009b8 <__aeabi_dsub+0x274>
 80008fc:	4642      	mov	r2, r8
 80008fe:	4644      	mov	r4, r8
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	2c00      	cmp	r4, #0
 8000904:	d000      	beq.n	8000908 <__aeabi_dsub+0x1c4>
 8000906:	e0f5      	b.n	8000af4 <__aeabi_dsub+0x3b0>
 8000908:	4665      	mov	r5, ip
 800090a:	431d      	orrs	r5, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dsub+0x1cc>
 800090e:	e19c      	b.n	8000c4a <__aeabi_dsub+0x506>
 8000910:	1e55      	subs	r5, r2, #1
 8000912:	2a01      	cmp	r2, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dsub+0x1d4>
 8000916:	e1fb      	b.n	8000d10 <__aeabi_dsub+0x5cc>
 8000918:	4c60      	ldr	r4, [pc, #384]	; (8000a9c <__aeabi_dsub+0x358>)
 800091a:	42a2      	cmp	r2, r4
 800091c:	d100      	bne.n	8000920 <__aeabi_dsub+0x1dc>
 800091e:	e1bd      	b.n	8000c9c <__aeabi_dsub+0x558>
 8000920:	002a      	movs	r2, r5
 8000922:	e0f0      	b.n	8000b06 <__aeabi_dsub+0x3c2>
 8000924:	0008      	movs	r0, r1
 8000926:	4338      	orrs	r0, r7
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x1e8>
 800092a:	e0c3      	b.n	8000ab4 <__aeabi_dsub+0x370>
 800092c:	1e50      	subs	r0, r2, #1
 800092e:	2a01      	cmp	r2, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dsub+0x1f0>
 8000932:	e1a8      	b.n	8000c86 <__aeabi_dsub+0x542>
 8000934:	4c59      	ldr	r4, [pc, #356]	; (8000a9c <__aeabi_dsub+0x358>)
 8000936:	42a2      	cmp	r2, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dsub+0x1f8>
 800093a:	e087      	b.n	8000a4c <__aeabi_dsub+0x308>
 800093c:	0002      	movs	r2, r0
 800093e:	e736      	b.n	80007ae <__aeabi_dsub+0x6a>
 8000940:	2201      	movs	r2, #1
 8000942:	4056      	eors	r6, r2
 8000944:	46b3      	mov	fp, r6
 8000946:	42b5      	cmp	r5, r6
 8000948:	d000      	beq.n	800094c <__aeabi_dsub+0x208>
 800094a:	e721      	b.n	8000790 <__aeabi_dsub+0x4c>
 800094c:	4a55      	ldr	r2, [pc, #340]	; (8000aa4 <__aeabi_dsub+0x360>)
 800094e:	4442      	add	r2, r8
 8000950:	2a00      	cmp	r2, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dsub+0x212>
 8000954:	e0b5      	b.n	8000ac2 <__aeabi_dsub+0x37e>
 8000956:	4642      	mov	r2, r8
 8000958:	4644      	mov	r4, r8
 800095a:	1a82      	subs	r2, r0, r2
 800095c:	2c00      	cmp	r4, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_dsub+0x21e>
 8000960:	e138      	b.n	8000bd4 <__aeabi_dsub+0x490>
 8000962:	4e4e      	ldr	r6, [pc, #312]	; (8000a9c <__aeabi_dsub+0x358>)
 8000964:	42b0      	cmp	r0, r6
 8000966:	d100      	bne.n	800096a <__aeabi_dsub+0x226>
 8000968:	e1de      	b.n	8000d28 <__aeabi_dsub+0x5e4>
 800096a:	2680      	movs	r6, #128	; 0x80
 800096c:	4664      	mov	r4, ip
 800096e:	0436      	lsls	r6, r6, #16
 8000970:	4334      	orrs	r4, r6
 8000972:	46a4      	mov	ip, r4
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dsub+0x236>
 8000978:	e196      	b.n	8000ca8 <__aeabi_dsub+0x564>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dsub+0x23c>
 800097e:	e224      	b.n	8000dca <__aeabi_dsub+0x686>
 8000980:	2620      	movs	r6, #32
 8000982:	1ab4      	subs	r4, r6, r2
 8000984:	46a2      	mov	sl, r4
 8000986:	4664      	mov	r4, ip
 8000988:	4656      	mov	r6, sl
 800098a:	40b4      	lsls	r4, r6
 800098c:	46a1      	mov	r9, r4
 800098e:	001c      	movs	r4, r3
 8000990:	464e      	mov	r6, r9
 8000992:	40d4      	lsrs	r4, r2
 8000994:	4326      	orrs	r6, r4
 8000996:	0034      	movs	r4, r6
 8000998:	4656      	mov	r6, sl
 800099a:	40b3      	lsls	r3, r6
 800099c:	1e5e      	subs	r6, r3, #1
 800099e:	41b3      	sbcs	r3, r6
 80009a0:	431c      	orrs	r4, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	40d3      	lsrs	r3, r2
 80009a6:	18c9      	adds	r1, r1, r3
 80009a8:	19e4      	adds	r4, r4, r7
 80009aa:	42bc      	cmp	r4, r7
 80009ac:	41bf      	sbcs	r7, r7
 80009ae:	427f      	negs	r7, r7
 80009b0:	46b9      	mov	r9, r7
 80009b2:	4680      	mov	r8, r0
 80009b4:	4489      	add	r9, r1
 80009b6:	e0d8      	b.n	8000b6a <__aeabi_dsub+0x426>
 80009b8:	4640      	mov	r0, r8
 80009ba:	4c3b      	ldr	r4, [pc, #236]	; (8000aa8 <__aeabi_dsub+0x364>)
 80009bc:	3001      	adds	r0, #1
 80009be:	4220      	tst	r0, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dsub+0x280>
 80009c2:	e0b4      	b.n	8000b2e <__aeabi_dsub+0x3ea>
 80009c4:	4640      	mov	r0, r8
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dsub+0x288>
 80009ca:	e144      	b.n	8000c56 <__aeabi_dsub+0x512>
 80009cc:	4660      	mov	r0, ip
 80009ce:	4318      	orrs	r0, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dsub+0x290>
 80009d2:	e190      	b.n	8000cf6 <__aeabi_dsub+0x5b2>
 80009d4:	0008      	movs	r0, r1
 80009d6:	4338      	orrs	r0, r7
 80009d8:	d000      	beq.n	80009dc <__aeabi_dsub+0x298>
 80009da:	e1aa      	b.n	8000d32 <__aeabi_dsub+0x5ee>
 80009dc:	4661      	mov	r1, ip
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	0749      	lsls	r1, r1, #29
 80009e2:	430b      	orrs	r3, r1
 80009e4:	4661      	mov	r1, ip
 80009e6:	08cc      	lsrs	r4, r1, #3
 80009e8:	e027      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 80009ea:	0008      	movs	r0, r1
 80009ec:	4338      	orrs	r0, r7
 80009ee:	d061      	beq.n	8000ab4 <__aeabi_dsub+0x370>
 80009f0:	1e50      	subs	r0, r2, #1
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dsub+0x2b4>
 80009f6:	e139      	b.n	8000c6c <__aeabi_dsub+0x528>
 80009f8:	42a2      	cmp	r2, r4
 80009fa:	d027      	beq.n	8000a4c <__aeabi_dsub+0x308>
 80009fc:	0002      	movs	r2, r0
 80009fe:	e75d      	b.n	80008bc <__aeabi_dsub+0x178>
 8000a00:	0002      	movs	r2, r0
 8000a02:	391f      	subs	r1, #31
 8000a04:	40ca      	lsrs	r2, r1
 8000a06:	0011      	movs	r1, r2
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	d003      	beq.n	8000a14 <__aeabi_dsub+0x2d0>
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4098      	lsls	r0, r3
 8000a12:	4304      	orrs	r4, r0
 8000a14:	1e63      	subs	r3, r4, #1
 8000a16:	419c      	sbcs	r4, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	430c      	orrs	r4, r1
 8000a20:	0763      	lsls	r3, r4, #29
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dsub+0x2e2>
 8000a24:	e712      	b.n	800084c <__aeabi_dsub+0x108>
 8000a26:	464b      	mov	r3, r9
 8000a28:	464a      	mov	r2, r9
 8000a2a:	08e4      	lsrs	r4, r4, #3
 8000a2c:	075b      	lsls	r3, r3, #29
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	08d4      	lsrs	r4, r2, #3
 8000a32:	4642      	mov	r2, r8
 8000a34:	4919      	ldr	r1, [pc, #100]	; (8000a9c <__aeabi_dsub+0x358>)
 8000a36:	428a      	cmp	r2, r1
 8000a38:	d00e      	beq.n	8000a58 <__aeabi_dsub+0x314>
 8000a3a:	0324      	lsls	r4, r4, #12
 8000a3c:	0552      	lsls	r2, r2, #21
 8000a3e:	0b24      	lsrs	r4, r4, #12
 8000a40:	0d52      	lsrs	r2, r2, #21
 8000a42:	e722      	b.n	800088a <__aeabi_dsub+0x146>
 8000a44:	000a      	movs	r2, r1
 8000a46:	2400      	movs	r4, #0
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e71e      	b.n	800088a <__aeabi_dsub+0x146>
 8000a4c:	08db      	lsrs	r3, r3, #3
 8000a4e:	4662      	mov	r2, ip
 8000a50:	0752      	lsls	r2, r2, #29
 8000a52:	4313      	orrs	r3, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	08d4      	lsrs	r4, r2, #3
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4322      	orrs	r2, r4
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dsub+0x31c>
 8000a5e:	e1fc      	b.n	8000e5a <__aeabi_dsub+0x716>
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	0312      	lsls	r2, r2, #12
 8000a64:	4314      	orrs	r4, r2
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <__aeabi_dsub+0x358>)
 8000a6a:	0b24      	lsrs	r4, r4, #12
 8000a6c:	e70d      	b.n	800088a <__aeabi_dsub+0x146>
 8000a6e:	0020      	movs	r0, r4
 8000a70:	f000 fa9e 	bl	8000fb0 <__clzsi2>
 8000a74:	0001      	movs	r1, r0
 8000a76:	3118      	adds	r1, #24
 8000a78:	291f      	cmp	r1, #31
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_dsub+0x33a>
 8000a7c:	e6c4      	b.n	8000808 <__aeabi_dsub+0xc4>
 8000a7e:	3808      	subs	r0, #8
 8000a80:	4084      	lsls	r4, r0
 8000a82:	4643      	mov	r3, r8
 8000a84:	0020      	movs	r0, r4
 8000a86:	2400      	movs	r4, #0
 8000a88:	4588      	cmp	r8, r1
 8000a8a:	dc00      	bgt.n	8000a8e <__aeabi_dsub+0x34a>
 8000a8c:	e6c8      	b.n	8000820 <__aeabi_dsub+0xdc>
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__aeabi_dsub+0x35c>)
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	4010      	ands	r0, r2
 8000a94:	4698      	mov	r8, r3
 8000a96:	4681      	mov	r9, r0
 8000a98:	e6d6      	b.n	8000848 <__aeabi_dsub+0x104>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	000007ff 	.word	0x000007ff
 8000aa0:	ff7fffff 	.word	0xff7fffff
 8000aa4:	fffff801 	.word	0xfffff801
 8000aa8:	000007fe 	.word	0x000007fe
 8000aac:	430f      	orrs	r7, r1
 8000aae:	1e7a      	subs	r2, r7, #1
 8000ab0:	4197      	sbcs	r7, r2
 8000ab2:	e691      	b.n	80007d8 <__aeabi_dsub+0x94>
 8000ab4:	4661      	mov	r1, ip
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	0749      	lsls	r1, r1, #29
 8000aba:	430b      	orrs	r3, r1
 8000abc:	4661      	mov	r1, ip
 8000abe:	08cc      	lsrs	r4, r1, #3
 8000ac0:	e7b8      	b.n	8000a34 <__aeabi_dsub+0x2f0>
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	4cd3      	ldr	r4, [pc, #844]	; (8000e14 <__aeabi_dsub+0x6d0>)
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	4220      	tst	r0, r4
 8000aca:	d000      	beq.n	8000ace <__aeabi_dsub+0x38a>
 8000acc:	e0a2      	b.n	8000c14 <__aeabi_dsub+0x4d0>
 8000ace:	4640      	mov	r0, r8
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dsub+0x392>
 8000ad4:	e101      	b.n	8000cda <__aeabi_dsub+0x596>
 8000ad6:	4660      	mov	r0, ip
 8000ad8:	4318      	orrs	r0, r3
 8000ada:	d100      	bne.n	8000ade <__aeabi_dsub+0x39a>
 8000adc:	e15e      	b.n	8000d9c <__aeabi_dsub+0x658>
 8000ade:	0008      	movs	r0, r1
 8000ae0:	4338      	orrs	r0, r7
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_dsub+0x3a2>
 8000ae4:	e15f      	b.n	8000da6 <__aeabi_dsub+0x662>
 8000ae6:	4661      	mov	r1, ip
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	0749      	lsls	r1, r1, #29
 8000aec:	430b      	orrs	r3, r1
 8000aee:	4661      	mov	r1, ip
 8000af0:	08cc      	lsrs	r4, r1, #3
 8000af2:	e7a2      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000af4:	4dc8      	ldr	r5, [pc, #800]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000af6:	42a8      	cmp	r0, r5
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x3b8>
 8000afa:	e0cf      	b.n	8000c9c <__aeabi_dsub+0x558>
 8000afc:	2580      	movs	r5, #128	; 0x80
 8000afe:	4664      	mov	r4, ip
 8000b00:	042d      	lsls	r5, r5, #16
 8000b02:	432c      	orrs	r4, r5
 8000b04:	46a4      	mov	ip, r4
 8000b06:	2a38      	cmp	r2, #56	; 0x38
 8000b08:	dc56      	bgt.n	8000bb8 <__aeabi_dsub+0x474>
 8000b0a:	2a1f      	cmp	r2, #31
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_dsub+0x3cc>
 8000b0e:	e0d1      	b.n	8000cb4 <__aeabi_dsub+0x570>
 8000b10:	2520      	movs	r5, #32
 8000b12:	001e      	movs	r6, r3
 8000b14:	1aad      	subs	r5, r5, r2
 8000b16:	4664      	mov	r4, ip
 8000b18:	40ab      	lsls	r3, r5
 8000b1a:	40ac      	lsls	r4, r5
 8000b1c:	40d6      	lsrs	r6, r2
 8000b1e:	1e5d      	subs	r5, r3, #1
 8000b20:	41ab      	sbcs	r3, r5
 8000b22:	4334      	orrs	r4, r6
 8000b24:	4323      	orrs	r3, r4
 8000b26:	4664      	mov	r4, ip
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	1b09      	subs	r1, r1, r4
 8000b2c:	e049      	b.n	8000bc2 <__aeabi_dsub+0x47e>
 8000b2e:	4660      	mov	r0, ip
 8000b30:	1bdc      	subs	r4, r3, r7
 8000b32:	1a46      	subs	r6, r0, r1
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	4180      	sbcs	r0, r0
 8000b38:	4240      	negs	r0, r0
 8000b3a:	4681      	mov	r9, r0
 8000b3c:	0030      	movs	r0, r6
 8000b3e:	464e      	mov	r6, r9
 8000b40:	1b80      	subs	r0, r0, r6
 8000b42:	4681      	mov	r9, r0
 8000b44:	0200      	lsls	r0, r0, #8
 8000b46:	d476      	bmi.n	8000c36 <__aeabi_dsub+0x4f2>
 8000b48:	464b      	mov	r3, r9
 8000b4a:	4323      	orrs	r3, r4
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dsub+0x40c>
 8000b4e:	e652      	b.n	80007f6 <__aeabi_dsub+0xb2>
 8000b50:	2400      	movs	r4, #0
 8000b52:	2500      	movs	r5, #0
 8000b54:	e771      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000b56:	4339      	orrs	r1, r7
 8000b58:	000c      	movs	r4, r1
 8000b5a:	1e62      	subs	r2, r4, #1
 8000b5c:	4194      	sbcs	r4, r2
 8000b5e:	18e4      	adds	r4, r4, r3
 8000b60:	429c      	cmp	r4, r3
 8000b62:	419b      	sbcs	r3, r3
 8000b64:	425b      	negs	r3, r3
 8000b66:	4463      	add	r3, ip
 8000b68:	4699      	mov	r9, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	d400      	bmi.n	8000b72 <__aeabi_dsub+0x42e>
 8000b70:	e756      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000b72:	2301      	movs	r3, #1
 8000b74:	469c      	mov	ip, r3
 8000b76:	4ba8      	ldr	r3, [pc, #672]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000b78:	44e0      	add	r8, ip
 8000b7a:	4598      	cmp	r8, r3
 8000b7c:	d038      	beq.n	8000bf0 <__aeabi_dsub+0x4ac>
 8000b7e:	464b      	mov	r3, r9
 8000b80:	48a6      	ldr	r0, [pc, #664]	; (8000e1c <__aeabi_dsub+0x6d8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	4003      	ands	r3, r0
 8000b86:	0018      	movs	r0, r3
 8000b88:	0863      	lsrs	r3, r4, #1
 8000b8a:	4014      	ands	r4, r2
 8000b8c:	431c      	orrs	r4, r3
 8000b8e:	07c3      	lsls	r3, r0, #31
 8000b90:	431c      	orrs	r4, r3
 8000b92:	0843      	lsrs	r3, r0, #1
 8000b94:	4699      	mov	r9, r3
 8000b96:	e657      	b.n	8000848 <__aeabi_dsub+0x104>
 8000b98:	0010      	movs	r0, r2
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	3820      	subs	r0, #32
 8000b9e:	40c6      	lsrs	r6, r0
 8000ba0:	2a20      	cmp	r2, #32
 8000ba2:	d004      	beq.n	8000bae <__aeabi_dsub+0x46a>
 8000ba4:	2040      	movs	r0, #64	; 0x40
 8000ba6:	1a82      	subs	r2, r0, r2
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	430f      	orrs	r7, r1
 8000bac:	46b9      	mov	r9, r7
 8000bae:	464f      	mov	r7, r9
 8000bb0:	1e7a      	subs	r2, r7, #1
 8000bb2:	4197      	sbcs	r7, r2
 8000bb4:	4337      	orrs	r7, r6
 8000bb6:	e60f      	b.n	80007d8 <__aeabi_dsub+0x94>
 8000bb8:	4662      	mov	r2, ip
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	4193      	sbcs	r3, r2
 8000bc2:	1afc      	subs	r4, r7, r3
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	41bf      	sbcs	r7, r7
 8000bc8:	427f      	negs	r7, r7
 8000bca:	1bcb      	subs	r3, r1, r7
 8000bcc:	4699      	mov	r9, r3
 8000bce:	465d      	mov	r5, fp
 8000bd0:	4680      	mov	r8, r0
 8000bd2:	e608      	b.n	80007e6 <__aeabi_dsub+0xa2>
 8000bd4:	4666      	mov	r6, ip
 8000bd6:	431e      	orrs	r6, r3
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dsub+0x498>
 8000bda:	e0be      	b.n	8000d5a <__aeabi_dsub+0x616>
 8000bdc:	1e56      	subs	r6, r2, #1
 8000bde:	2a01      	cmp	r2, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dsub+0x4a0>
 8000be2:	e109      	b.n	8000df8 <__aeabi_dsub+0x6b4>
 8000be4:	4c8c      	ldr	r4, [pc, #560]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000be6:	42a2      	cmp	r2, r4
 8000be8:	d100      	bne.n	8000bec <__aeabi_dsub+0x4a8>
 8000bea:	e119      	b.n	8000e20 <__aeabi_dsub+0x6dc>
 8000bec:	0032      	movs	r2, r6
 8000bee:	e6c1      	b.n	8000974 <__aeabi_dsub+0x230>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e648      	b.n	800088a <__aeabi_dsub+0x146>
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	1a80      	subs	r0, r0, r2
 8000bfe:	003e      	movs	r6, r7
 8000c00:	4087      	lsls	r7, r0
 8000c02:	4084      	lsls	r4, r0
 8000c04:	40d6      	lsrs	r6, r2
 8000c06:	1e78      	subs	r0, r7, #1
 8000c08:	4187      	sbcs	r7, r0
 8000c0a:	40d1      	lsrs	r1, r2
 8000c0c:	4334      	orrs	r4, r6
 8000c0e:	433c      	orrs	r4, r7
 8000c10:	448c      	add	ip, r1
 8000c12:	e7a4      	b.n	8000b5e <__aeabi_dsub+0x41a>
 8000c14:	4a80      	ldr	r2, [pc, #512]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000c16:	4290      	cmp	r0, r2
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dsub+0x4d8>
 8000c1a:	e0e9      	b.n	8000df0 <__aeabi_dsub+0x6ac>
 8000c1c:	19df      	adds	r7, r3, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	419b      	sbcs	r3, r3
 8000c22:	4461      	add	r1, ip
 8000c24:	425b      	negs	r3, r3
 8000c26:	18c9      	adds	r1, r1, r3
 8000c28:	07cc      	lsls	r4, r1, #31
 8000c2a:	087f      	lsrs	r7, r7, #1
 8000c2c:	084b      	lsrs	r3, r1, #1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	4680      	mov	r8, r0
 8000c32:	433c      	orrs	r4, r7
 8000c34:	e6f4      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000c36:	1afc      	subs	r4, r7, r3
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	41bf      	sbcs	r7, r7
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	427f      	negs	r7, r7
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	1bcb      	subs	r3, r1, r7
 8000c44:	4699      	mov	r9, r3
 8000c46:	465d      	mov	r5, fp
 8000c48:	e5d5      	b.n	80007f6 <__aeabi_dsub+0xb2>
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	074b      	lsls	r3, r1, #29
 8000c4e:	465d      	mov	r5, fp
 8000c50:	433b      	orrs	r3, r7
 8000c52:	08cc      	lsrs	r4, r1, #3
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dsub+0x2f0>
 8000c56:	4662      	mov	r2, ip
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dsub+0x51a>
 8000c5c:	e082      	b.n	8000d64 <__aeabi_dsub+0x620>
 8000c5e:	000b      	movs	r3, r1
 8000c60:	433b      	orrs	r3, r7
 8000c62:	d11b      	bne.n	8000c9c <__aeabi_dsub+0x558>
 8000c64:	2480      	movs	r4, #128	; 0x80
 8000c66:	2500      	movs	r5, #0
 8000c68:	0324      	lsls	r4, r4, #12
 8000c6a:	e6f9      	b.n	8000a60 <__aeabi_dsub+0x31c>
 8000c6c:	19dc      	adds	r4, r3, r7
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	419b      	sbcs	r3, r3
 8000c72:	4461      	add	r1, ip
 8000c74:	4689      	mov	r9, r1
 8000c76:	425b      	negs	r3, r3
 8000c78:	4499      	add	r9, r3
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	d444      	bmi.n	8000d0a <__aeabi_dsub+0x5c6>
 8000c80:	2301      	movs	r3, #1
 8000c82:	4698      	mov	r8, r3
 8000c84:	e6cc      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000c86:	1bdc      	subs	r4, r3, r7
 8000c88:	4662      	mov	r2, ip
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	419b      	sbcs	r3, r3
 8000c8e:	1a51      	subs	r1, r2, r1
 8000c90:	425b      	negs	r3, r3
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	4699      	mov	r9, r3
 8000c96:	2301      	movs	r3, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	e5a4      	b.n	80007e6 <__aeabi_dsub+0xa2>
 8000c9c:	08ff      	lsrs	r7, r7, #3
 8000c9e:	074b      	lsls	r3, r1, #29
 8000ca0:	465d      	mov	r5, fp
 8000ca2:	433b      	orrs	r3, r7
 8000ca4:	08cc      	lsrs	r4, r1, #3
 8000ca6:	e6d7      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000ca8:	4662      	mov	r2, ip
 8000caa:	431a      	orrs	r2, r3
 8000cac:	0014      	movs	r4, r2
 8000cae:	1e63      	subs	r3, r4, #1
 8000cb0:	419c      	sbcs	r4, r3
 8000cb2:	e679      	b.n	80009a8 <__aeabi_dsub+0x264>
 8000cb4:	0015      	movs	r5, r2
 8000cb6:	4664      	mov	r4, ip
 8000cb8:	3d20      	subs	r5, #32
 8000cba:	40ec      	lsrs	r4, r5
 8000cbc:	46a0      	mov	r8, r4
 8000cbe:	2a20      	cmp	r2, #32
 8000cc0:	d005      	beq.n	8000cce <__aeabi_dsub+0x58a>
 8000cc2:	2540      	movs	r5, #64	; 0x40
 8000cc4:	4664      	mov	r4, ip
 8000cc6:	1aaa      	subs	r2, r5, r2
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	4323      	orrs	r3, r4
 8000ccc:	469a      	mov	sl, r3
 8000cce:	4654      	mov	r4, sl
 8000cd0:	1e63      	subs	r3, r4, #1
 8000cd2:	419c      	sbcs	r4, r3
 8000cd4:	4643      	mov	r3, r8
 8000cd6:	4323      	orrs	r3, r4
 8000cd8:	e773      	b.n	8000bc2 <__aeabi_dsub+0x47e>
 8000cda:	4662      	mov	r2, ip
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	d023      	beq.n	8000d28 <__aeabi_dsub+0x5e4>
 8000ce0:	000a      	movs	r2, r1
 8000ce2:	433a      	orrs	r2, r7
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_dsub+0x5a4>
 8000ce6:	e0a0      	b.n	8000e2a <__aeabi_dsub+0x6e6>
 8000ce8:	4662      	mov	r2, ip
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0752      	lsls	r2, r2, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	08d4      	lsrs	r4, r2, #3
 8000cf4:	e6b0      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	433b      	orrs	r3, r7
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dsub+0x5ba>
 8000cfc:	e728      	b.n	8000b50 <__aeabi_dsub+0x40c>
 8000cfe:	08ff      	lsrs	r7, r7, #3
 8000d00:	074b      	lsls	r3, r1, #29
 8000d02:	465d      	mov	r5, fp
 8000d04:	433b      	orrs	r3, r7
 8000d06:	08cc      	lsrs	r4, r1, #3
 8000d08:	e697      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	4698      	mov	r8, r3
 8000d0e:	e736      	b.n	8000b7e <__aeabi_dsub+0x43a>
 8000d10:	1afc      	subs	r4, r7, r3
 8000d12:	42a7      	cmp	r7, r4
 8000d14:	41bf      	sbcs	r7, r7
 8000d16:	4663      	mov	r3, ip
 8000d18:	427f      	negs	r7, r7
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	1bcb      	subs	r3, r1, r7
 8000d1e:	4699      	mov	r9, r3
 8000d20:	2301      	movs	r3, #1
 8000d22:	465d      	mov	r5, fp
 8000d24:	4698      	mov	r8, r3
 8000d26:	e55e      	b.n	80007e6 <__aeabi_dsub+0xa2>
 8000d28:	074b      	lsls	r3, r1, #29
 8000d2a:	08ff      	lsrs	r7, r7, #3
 8000d2c:	433b      	orrs	r3, r7
 8000d2e:	08cc      	lsrs	r4, r1, #3
 8000d30:	e692      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000d32:	1bdc      	subs	r4, r3, r7
 8000d34:	4660      	mov	r0, ip
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	41b6      	sbcs	r6, r6
 8000d3a:	1a40      	subs	r0, r0, r1
 8000d3c:	4276      	negs	r6, r6
 8000d3e:	1b80      	subs	r0, r0, r6
 8000d40:	4681      	mov	r9, r0
 8000d42:	0200      	lsls	r0, r0, #8
 8000d44:	d560      	bpl.n	8000e08 <__aeabi_dsub+0x6c4>
 8000d46:	1afc      	subs	r4, r7, r3
 8000d48:	42a7      	cmp	r7, r4
 8000d4a:	41bf      	sbcs	r7, r7
 8000d4c:	4663      	mov	r3, ip
 8000d4e:	427f      	negs	r7, r7
 8000d50:	1ac9      	subs	r1, r1, r3
 8000d52:	1bcb      	subs	r3, r1, r7
 8000d54:	4699      	mov	r9, r3
 8000d56:	465d      	mov	r5, fp
 8000d58:	e576      	b.n	8000848 <__aeabi_dsub+0x104>
 8000d5a:	08ff      	lsrs	r7, r7, #3
 8000d5c:	074b      	lsls	r3, r1, #29
 8000d5e:	433b      	orrs	r3, r7
 8000d60:	08cc      	lsrs	r4, r1, #3
 8000d62:	e667      	b.n	8000a34 <__aeabi_dsub+0x2f0>
 8000d64:	000a      	movs	r2, r1
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	433a      	orrs	r2, r7
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dsub+0x62a>
 8000d6c:	e66f      	b.n	8000a4e <__aeabi_dsub+0x30a>
 8000d6e:	4662      	mov	r2, ip
 8000d70:	0752      	lsls	r2, r2, #29
 8000d72:	4313      	orrs	r3, r2
 8000d74:	4662      	mov	r2, ip
 8000d76:	08d4      	lsrs	r4, r2, #3
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	0312      	lsls	r2, r2, #12
 8000d7c:	4214      	tst	r4, r2
 8000d7e:	d007      	beq.n	8000d90 <__aeabi_dsub+0x64c>
 8000d80:	08c8      	lsrs	r0, r1, #3
 8000d82:	4210      	tst	r0, r2
 8000d84:	d104      	bne.n	8000d90 <__aeabi_dsub+0x64c>
 8000d86:	465d      	mov	r5, fp
 8000d88:	0004      	movs	r4, r0
 8000d8a:	08fb      	lsrs	r3, r7, #3
 8000d8c:	0749      	lsls	r1, r1, #29
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	0f5a      	lsrs	r2, r3, #29
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	0752      	lsls	r2, r2, #29
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	e65d      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000d9c:	074b      	lsls	r3, r1, #29
 8000d9e:	08ff      	lsrs	r7, r7, #3
 8000da0:	433b      	orrs	r3, r7
 8000da2:	08cc      	lsrs	r4, r1, #3
 8000da4:	e649      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000da6:	19dc      	adds	r4, r3, r7
 8000da8:	429c      	cmp	r4, r3
 8000daa:	419b      	sbcs	r3, r3
 8000dac:	4461      	add	r1, ip
 8000dae:	4689      	mov	r9, r1
 8000db0:	425b      	negs	r3, r3
 8000db2:	4499      	add	r9, r3
 8000db4:	464b      	mov	r3, r9
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	d400      	bmi.n	8000dbc <__aeabi_dsub+0x678>
 8000dba:	e631      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <__aeabi_dsub+0x6d8>)
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	4698      	mov	r8, r3
 8000dc8:	e62a      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000dca:	0016      	movs	r6, r2
 8000dcc:	4664      	mov	r4, ip
 8000dce:	3e20      	subs	r6, #32
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	46a0      	mov	r8, r4
 8000dd4:	2a20      	cmp	r2, #32
 8000dd6:	d005      	beq.n	8000de4 <__aeabi_dsub+0x6a0>
 8000dd8:	2640      	movs	r6, #64	; 0x40
 8000dda:	4664      	mov	r4, ip
 8000ddc:	1ab2      	subs	r2, r6, r2
 8000dde:	4094      	lsls	r4, r2
 8000de0:	4323      	orrs	r3, r4
 8000de2:	469a      	mov	sl, r3
 8000de4:	4654      	mov	r4, sl
 8000de6:	1e63      	subs	r3, r4, #1
 8000de8:	419c      	sbcs	r4, r3
 8000dea:	4643      	mov	r3, r8
 8000dec:	431c      	orrs	r4, r3
 8000dee:	e5db      	b.n	80009a8 <__aeabi_dsub+0x264>
 8000df0:	0002      	movs	r2, r0
 8000df2:	2400      	movs	r4, #0
 8000df4:	2300      	movs	r3, #0
 8000df6:	e548      	b.n	800088a <__aeabi_dsub+0x146>
 8000df8:	19dc      	adds	r4, r3, r7
 8000dfa:	42bc      	cmp	r4, r7
 8000dfc:	41bf      	sbcs	r7, r7
 8000dfe:	4461      	add	r1, ip
 8000e00:	4689      	mov	r9, r1
 8000e02:	427f      	negs	r7, r7
 8000e04:	44b9      	add	r9, r7
 8000e06:	e738      	b.n	8000c7a <__aeabi_dsub+0x536>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dsub+0x6cc>
 8000e0e:	e69f      	b.n	8000b50 <__aeabi_dsub+0x40c>
 8000e10:	e606      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007fe 	.word	0x000007fe
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	ff7fffff 	.word	0xff7fffff
 8000e20:	08ff      	lsrs	r7, r7, #3
 8000e22:	074b      	lsls	r3, r1, #29
 8000e24:	433b      	orrs	r3, r7
 8000e26:	08cc      	lsrs	r4, r1, #3
 8000e28:	e616      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	0752      	lsls	r2, r2, #29
 8000e30:	4313      	orrs	r3, r2
 8000e32:	4662      	mov	r2, ip
 8000e34:	08d4      	lsrs	r4, r2, #3
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0312      	lsls	r2, r2, #12
 8000e3a:	4214      	tst	r4, r2
 8000e3c:	d007      	beq.n	8000e4e <__aeabi_dsub+0x70a>
 8000e3e:	08c8      	lsrs	r0, r1, #3
 8000e40:	4210      	tst	r0, r2
 8000e42:	d104      	bne.n	8000e4e <__aeabi_dsub+0x70a>
 8000e44:	465d      	mov	r5, fp
 8000e46:	0004      	movs	r4, r0
 8000e48:	08fb      	lsrs	r3, r7, #3
 8000e4a:	0749      	lsls	r1, r1, #29
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	0f5a      	lsrs	r2, r3, #29
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	e5fe      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4a01      	ldr	r2, [pc, #4]	; (8000e64 <__aeabi_dsub+0x720>)
 8000e5e:	001c      	movs	r4, r3
 8000e60:	e513      	b.n	800088a <__aeabi_dsub+0x146>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	000007ff 	.word	0x000007ff

08000e68 <__aeabi_d2iz>:
 8000e68:	000a      	movs	r2, r1
 8000e6a:	b530      	push	{r4, r5, lr}
 8000e6c:	4c13      	ldr	r4, [pc, #76]	; (8000ebc <__aeabi_d2iz+0x54>)
 8000e6e:	0053      	lsls	r3, r2, #1
 8000e70:	0309      	lsls	r1, r1, #12
 8000e72:	0005      	movs	r5, r0
 8000e74:	0b09      	lsrs	r1, r1, #12
 8000e76:	2000      	movs	r0, #0
 8000e78:	0d5b      	lsrs	r3, r3, #21
 8000e7a:	0fd2      	lsrs	r2, r2, #31
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	dd04      	ble.n	8000e8a <__aeabi_d2iz+0x22>
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <__aeabi_d2iz+0x58>)
 8000e82:	4283      	cmp	r3, r0
 8000e84:	dd02      	ble.n	8000e8c <__aeabi_d2iz+0x24>
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <__aeabi_d2iz+0x5c>)
 8000e88:	18d0      	adds	r0, r2, r3
 8000e8a:	bd30      	pop	{r4, r5, pc}
 8000e8c:	2080      	movs	r0, #128	; 0x80
 8000e8e:	0340      	lsls	r0, r0, #13
 8000e90:	4301      	orrs	r1, r0
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <__aeabi_d2iz+0x60>)
 8000e94:	1ac0      	subs	r0, r0, r3
 8000e96:	281f      	cmp	r0, #31
 8000e98:	dd08      	ble.n	8000eac <__aeabi_d2iz+0x44>
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <__aeabi_d2iz+0x64>)
 8000e9c:	1ac3      	subs	r3, r0, r3
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	000b      	movs	r3, r1
 8000ea2:	4258      	negs	r0, r3
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d1f0      	bne.n	8000e8a <__aeabi_d2iz+0x22>
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	e7ee      	b.n	8000e8a <__aeabi_d2iz+0x22>
 8000eac:	4c08      	ldr	r4, [pc, #32]	; (8000ed0 <__aeabi_d2iz+0x68>)
 8000eae:	40c5      	lsrs	r5, r0
 8000eb0:	46a4      	mov	ip, r4
 8000eb2:	4463      	add	r3, ip
 8000eb4:	4099      	lsls	r1, r3
 8000eb6:	000b      	movs	r3, r1
 8000eb8:	432b      	orrs	r3, r5
 8000eba:	e7f2      	b.n	8000ea2 <__aeabi_d2iz+0x3a>
 8000ebc:	000003fe 	.word	0x000003fe
 8000ec0:	0000041d 	.word	0x0000041d
 8000ec4:	7fffffff 	.word	0x7fffffff
 8000ec8:	00000433 	.word	0x00000433
 8000ecc:	00000413 	.word	0x00000413
 8000ed0:	fffffbed 	.word	0xfffffbed

08000ed4 <__aeabi_i2d>:
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d016      	beq.n	8000f08 <__aeabi_i2d+0x34>
 8000eda:	17c3      	asrs	r3, r0, #31
 8000edc:	18c5      	adds	r5, r0, r3
 8000ede:	405d      	eors	r5, r3
 8000ee0:	0fc4      	lsrs	r4, r0, #31
 8000ee2:	0028      	movs	r0, r5
 8000ee4:	f000 f864 	bl	8000fb0 <__clzsi2>
 8000ee8:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <__aeabi_i2d+0x5c>)
 8000eea:	1a12      	subs	r2, r2, r0
 8000eec:	280a      	cmp	r0, #10
 8000eee:	dc16      	bgt.n	8000f1e <__aeabi_i2d+0x4a>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	002e      	movs	r6, r5
 8000ef4:	3315      	adds	r3, #21
 8000ef6:	409e      	lsls	r6, r3
 8000ef8:	230b      	movs	r3, #11
 8000efa:	1a18      	subs	r0, r3, r0
 8000efc:	40c5      	lsrs	r5, r0
 8000efe:	0552      	lsls	r2, r2, #21
 8000f00:	032d      	lsls	r5, r5, #12
 8000f02:	0b2d      	lsrs	r5, r5, #12
 8000f04:	0d53      	lsrs	r3, r2, #21
 8000f06:	e003      	b.n	8000f10 <__aeabi_i2d+0x3c>
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	2600      	movs	r6, #0
 8000f10:	051b      	lsls	r3, r3, #20
 8000f12:	432b      	orrs	r3, r5
 8000f14:	07e4      	lsls	r4, r4, #31
 8000f16:	4323      	orrs	r3, r4
 8000f18:	0030      	movs	r0, r6
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
 8000f1e:	380b      	subs	r0, #11
 8000f20:	4085      	lsls	r5, r0
 8000f22:	0552      	lsls	r2, r2, #21
 8000f24:	032d      	lsls	r5, r5, #12
 8000f26:	2600      	movs	r6, #0
 8000f28:	0b2d      	lsrs	r5, r5, #12
 8000f2a:	0d53      	lsrs	r3, r2, #21
 8000f2c:	e7f0      	b.n	8000f10 <__aeabi_i2d+0x3c>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	0000041e 	.word	0x0000041e

08000f34 <__aeabi_cdrcmple>:
 8000f34:	4684      	mov	ip, r0
 8000f36:	0010      	movs	r0, r2
 8000f38:	4662      	mov	r2, ip
 8000f3a:	468c      	mov	ip, r1
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	4663      	mov	r3, ip
 8000f40:	e000      	b.n	8000f44 <__aeabi_cdcmpeq>
 8000f42:	46c0      	nop			; (mov r8, r8)

08000f44 <__aeabi_cdcmpeq>:
 8000f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f46:	f000 f8f9 	bl	800113c <__ledf2>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d401      	bmi.n	8000f52 <__aeabi_cdcmpeq+0xe>
 8000f4e:	2100      	movs	r1, #0
 8000f50:	42c8      	cmn	r0, r1
 8000f52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f54 <__aeabi_dcmpeq>:
 8000f54:	b510      	push	{r4, lr}
 8000f56:	f000 f849 	bl	8000fec <__eqdf2>
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <__aeabi_dcmplt>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f000 f8eb 	bl	800113c <__ledf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	db01      	blt.n	8000f6e <__aeabi_dcmplt+0xe>
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	2001      	movs	r0, #1
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)

08000f74 <__aeabi_dcmple>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	f000 f8e1 	bl	800113c <__ledf2>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	dd01      	ble.n	8000f82 <__aeabi_dcmple+0xe>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	2001      	movs	r0, #1
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <__aeabi_dcmpgt>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f000 f871 	bl	8001070 <__gedf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	dc01      	bgt.n	8000f96 <__aeabi_dcmpgt+0xe>
 8000f92:	2000      	movs	r0, #0
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	2001      	movs	r0, #1
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)

08000f9c <__aeabi_dcmpge>:
 8000f9c:	b510      	push	{r4, lr}
 8000f9e:	f000 f867 	bl	8001070 <__gedf2>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	da01      	bge.n	8000faa <__aeabi_dcmpge+0xe>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	2001      	movs	r0, #1
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)

08000fb0 <__clzsi2>:
 8000fb0:	211c      	movs	r1, #28
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d301      	bcc.n	8000fbe <__clzsi2+0xe>
 8000fba:	0c00      	lsrs	r0, r0, #16
 8000fbc:	3910      	subs	r1, #16
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d301      	bcc.n	8000fc8 <__clzsi2+0x18>
 8000fc4:	0a00      	lsrs	r0, r0, #8
 8000fc6:	3908      	subs	r1, #8
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d301      	bcc.n	8000fd2 <__clzsi2+0x22>
 8000fce:	0900      	lsrs	r0, r0, #4
 8000fd0:	3904      	subs	r1, #4
 8000fd2:	a202      	add	r2, pc, #8	; (adr r2, 8000fdc <__clzsi2+0x2c>)
 8000fd4:	5c10      	ldrb	r0, [r2, r0]
 8000fd6:	1840      	adds	r0, r0, r1
 8000fd8:	4770      	bx	lr
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	02020304 	.word	0x02020304
 8000fe0:	01010101 	.word	0x01010101
	...

08000fec <__eqdf2>:
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	464e      	mov	r6, r9
 8000ff0:	4645      	mov	r5, r8
 8000ff2:	46de      	mov	lr, fp
 8000ff4:	4657      	mov	r7, sl
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	b5e0      	push	{r5, r6, r7, lr}
 8000ffa:	0017      	movs	r7, r2
 8000ffc:	031a      	lsls	r2, r3, #12
 8000ffe:	0b12      	lsrs	r2, r2, #12
 8001000:	0005      	movs	r5, r0
 8001002:	4684      	mov	ip, r0
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <__eqdf2+0x80>)
 8001006:	030e      	lsls	r6, r1, #12
 8001008:	004c      	lsls	r4, r1, #1
 800100a:	4691      	mov	r9, r2
 800100c:	005a      	lsls	r2, r3, #1
 800100e:	0fdb      	lsrs	r3, r3, #31
 8001010:	469b      	mov	fp, r3
 8001012:	0b36      	lsrs	r6, r6, #12
 8001014:	0d64      	lsrs	r4, r4, #21
 8001016:	0fc9      	lsrs	r1, r1, #31
 8001018:	0d52      	lsrs	r2, r2, #21
 800101a:	4284      	cmp	r4, r0
 800101c:	d019      	beq.n	8001052 <__eqdf2+0x66>
 800101e:	4282      	cmp	r2, r0
 8001020:	d010      	beq.n	8001044 <__eqdf2+0x58>
 8001022:	2001      	movs	r0, #1
 8001024:	4294      	cmp	r4, r2
 8001026:	d10e      	bne.n	8001046 <__eqdf2+0x5a>
 8001028:	454e      	cmp	r6, r9
 800102a:	d10c      	bne.n	8001046 <__eqdf2+0x5a>
 800102c:	2001      	movs	r0, #1
 800102e:	45c4      	cmp	ip, r8
 8001030:	d109      	bne.n	8001046 <__eqdf2+0x5a>
 8001032:	4559      	cmp	r1, fp
 8001034:	d017      	beq.n	8001066 <__eqdf2+0x7a>
 8001036:	2c00      	cmp	r4, #0
 8001038:	d105      	bne.n	8001046 <__eqdf2+0x5a>
 800103a:	0030      	movs	r0, r6
 800103c:	4328      	orrs	r0, r5
 800103e:	1e43      	subs	r3, r0, #1
 8001040:	4198      	sbcs	r0, r3
 8001042:	e000      	b.n	8001046 <__eqdf2+0x5a>
 8001044:	2001      	movs	r0, #1
 8001046:	bcf0      	pop	{r4, r5, r6, r7}
 8001048:	46bb      	mov	fp, r7
 800104a:	46b2      	mov	sl, r6
 800104c:	46a9      	mov	r9, r5
 800104e:	46a0      	mov	r8, r4
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	0033      	movs	r3, r6
 8001054:	2001      	movs	r0, #1
 8001056:	432b      	orrs	r3, r5
 8001058:	d1f5      	bne.n	8001046 <__eqdf2+0x5a>
 800105a:	42a2      	cmp	r2, r4
 800105c:	d1f3      	bne.n	8001046 <__eqdf2+0x5a>
 800105e:	464b      	mov	r3, r9
 8001060:	433b      	orrs	r3, r7
 8001062:	d1f0      	bne.n	8001046 <__eqdf2+0x5a>
 8001064:	e7e2      	b.n	800102c <__eqdf2+0x40>
 8001066:	2000      	movs	r0, #0
 8001068:	e7ed      	b.n	8001046 <__eqdf2+0x5a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff

08001070 <__gedf2>:
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	4647      	mov	r7, r8
 8001074:	46ce      	mov	lr, r9
 8001076:	0004      	movs	r4, r0
 8001078:	0018      	movs	r0, r3
 800107a:	0016      	movs	r6, r2
 800107c:	031b      	lsls	r3, r3, #12
 800107e:	0b1b      	lsrs	r3, r3, #12
 8001080:	4d2d      	ldr	r5, [pc, #180]	; (8001138 <__gedf2+0xc8>)
 8001082:	004a      	lsls	r2, r1, #1
 8001084:	4699      	mov	r9, r3
 8001086:	b580      	push	{r7, lr}
 8001088:	0043      	lsls	r3, r0, #1
 800108a:	030f      	lsls	r7, r1, #12
 800108c:	46a4      	mov	ip, r4
 800108e:	46b0      	mov	r8, r6
 8001090:	0b3f      	lsrs	r7, r7, #12
 8001092:	0d52      	lsrs	r2, r2, #21
 8001094:	0fc9      	lsrs	r1, r1, #31
 8001096:	0d5b      	lsrs	r3, r3, #21
 8001098:	0fc0      	lsrs	r0, r0, #31
 800109a:	42aa      	cmp	r2, r5
 800109c:	d021      	beq.n	80010e2 <__gedf2+0x72>
 800109e:	42ab      	cmp	r3, r5
 80010a0:	d013      	beq.n	80010ca <__gedf2+0x5a>
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d122      	bne.n	80010ec <__gedf2+0x7c>
 80010a6:	433c      	orrs	r4, r7
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <__gedf2+0x42>
 80010ac:	464d      	mov	r5, r9
 80010ae:	432e      	orrs	r6, r5
 80010b0:	d022      	beq.n	80010f8 <__gedf2+0x88>
 80010b2:	2c00      	cmp	r4, #0
 80010b4:	d010      	beq.n	80010d8 <__gedf2+0x68>
 80010b6:	4281      	cmp	r1, r0
 80010b8:	d022      	beq.n	8001100 <__gedf2+0x90>
 80010ba:	2002      	movs	r0, #2
 80010bc:	3901      	subs	r1, #1
 80010be:	4008      	ands	r0, r1
 80010c0:	3801      	subs	r0, #1
 80010c2:	bcc0      	pop	{r6, r7}
 80010c4:	46b9      	mov	r9, r7
 80010c6:	46b0      	mov	r8, r6
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	464d      	mov	r5, r9
 80010cc:	432e      	orrs	r6, r5
 80010ce:	d129      	bne.n	8001124 <__gedf2+0xb4>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d1f0      	bne.n	80010b6 <__gedf2+0x46>
 80010d4:	433c      	orrs	r4, r7
 80010d6:	d1ee      	bne.n	80010b6 <__gedf2+0x46>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d1f2      	bne.n	80010c2 <__gedf2+0x52>
 80010dc:	2001      	movs	r0, #1
 80010de:	4240      	negs	r0, r0
 80010e0:	e7ef      	b.n	80010c2 <__gedf2+0x52>
 80010e2:	003d      	movs	r5, r7
 80010e4:	4325      	orrs	r5, r4
 80010e6:	d11d      	bne.n	8001124 <__gedf2+0xb4>
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d0ee      	beq.n	80010ca <__gedf2+0x5a>
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1e2      	bne.n	80010b6 <__gedf2+0x46>
 80010f0:	464c      	mov	r4, r9
 80010f2:	4326      	orrs	r6, r4
 80010f4:	d1df      	bne.n	80010b6 <__gedf2+0x46>
 80010f6:	e7e0      	b.n	80010ba <__gedf2+0x4a>
 80010f8:	2000      	movs	r0, #0
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	d0e1      	beq.n	80010c2 <__gedf2+0x52>
 80010fe:	e7dc      	b.n	80010ba <__gedf2+0x4a>
 8001100:	429a      	cmp	r2, r3
 8001102:	dc0a      	bgt.n	800111a <__gedf2+0xaa>
 8001104:	dbe8      	blt.n	80010d8 <__gedf2+0x68>
 8001106:	454f      	cmp	r7, r9
 8001108:	d8d7      	bhi.n	80010ba <__gedf2+0x4a>
 800110a:	d00e      	beq.n	800112a <__gedf2+0xba>
 800110c:	2000      	movs	r0, #0
 800110e:	454f      	cmp	r7, r9
 8001110:	d2d7      	bcs.n	80010c2 <__gedf2+0x52>
 8001112:	2900      	cmp	r1, #0
 8001114:	d0e2      	beq.n	80010dc <__gedf2+0x6c>
 8001116:	0008      	movs	r0, r1
 8001118:	e7d3      	b.n	80010c2 <__gedf2+0x52>
 800111a:	4243      	negs	r3, r0
 800111c:	4158      	adcs	r0, r3
 800111e:	0040      	lsls	r0, r0, #1
 8001120:	3801      	subs	r0, #1
 8001122:	e7ce      	b.n	80010c2 <__gedf2+0x52>
 8001124:	2002      	movs	r0, #2
 8001126:	4240      	negs	r0, r0
 8001128:	e7cb      	b.n	80010c2 <__gedf2+0x52>
 800112a:	45c4      	cmp	ip, r8
 800112c:	d8c5      	bhi.n	80010ba <__gedf2+0x4a>
 800112e:	2000      	movs	r0, #0
 8001130:	45c4      	cmp	ip, r8
 8001132:	d2c6      	bcs.n	80010c2 <__gedf2+0x52>
 8001134:	e7ed      	b.n	8001112 <__gedf2+0xa2>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000007ff 	.word	0x000007ff

0800113c <__ledf2>:
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	4647      	mov	r7, r8
 8001140:	46ce      	mov	lr, r9
 8001142:	0004      	movs	r4, r0
 8001144:	0018      	movs	r0, r3
 8001146:	0016      	movs	r6, r2
 8001148:	031b      	lsls	r3, r3, #12
 800114a:	0b1b      	lsrs	r3, r3, #12
 800114c:	4d2c      	ldr	r5, [pc, #176]	; (8001200 <__ledf2+0xc4>)
 800114e:	004a      	lsls	r2, r1, #1
 8001150:	4699      	mov	r9, r3
 8001152:	b580      	push	{r7, lr}
 8001154:	0043      	lsls	r3, r0, #1
 8001156:	030f      	lsls	r7, r1, #12
 8001158:	46a4      	mov	ip, r4
 800115a:	46b0      	mov	r8, r6
 800115c:	0b3f      	lsrs	r7, r7, #12
 800115e:	0d52      	lsrs	r2, r2, #21
 8001160:	0fc9      	lsrs	r1, r1, #31
 8001162:	0d5b      	lsrs	r3, r3, #21
 8001164:	0fc0      	lsrs	r0, r0, #31
 8001166:	42aa      	cmp	r2, r5
 8001168:	d00d      	beq.n	8001186 <__ledf2+0x4a>
 800116a:	42ab      	cmp	r3, r5
 800116c:	d010      	beq.n	8001190 <__ledf2+0x54>
 800116e:	2a00      	cmp	r2, #0
 8001170:	d127      	bne.n	80011c2 <__ledf2+0x86>
 8001172:	433c      	orrs	r4, r7
 8001174:	2b00      	cmp	r3, #0
 8001176:	d111      	bne.n	800119c <__ledf2+0x60>
 8001178:	464d      	mov	r5, r9
 800117a:	432e      	orrs	r6, r5
 800117c:	d10e      	bne.n	800119c <__ledf2+0x60>
 800117e:	2000      	movs	r0, #0
 8001180:	2c00      	cmp	r4, #0
 8001182:	d015      	beq.n	80011b0 <__ledf2+0x74>
 8001184:	e00e      	b.n	80011a4 <__ledf2+0x68>
 8001186:	003d      	movs	r5, r7
 8001188:	4325      	orrs	r5, r4
 800118a:	d110      	bne.n	80011ae <__ledf2+0x72>
 800118c:	4293      	cmp	r3, r2
 800118e:	d118      	bne.n	80011c2 <__ledf2+0x86>
 8001190:	464d      	mov	r5, r9
 8001192:	432e      	orrs	r6, r5
 8001194:	d10b      	bne.n	80011ae <__ledf2+0x72>
 8001196:	2a00      	cmp	r2, #0
 8001198:	d102      	bne.n	80011a0 <__ledf2+0x64>
 800119a:	433c      	orrs	r4, r7
 800119c:	2c00      	cmp	r4, #0
 800119e:	d00b      	beq.n	80011b8 <__ledf2+0x7c>
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d014      	beq.n	80011ce <__ledf2+0x92>
 80011a4:	2002      	movs	r0, #2
 80011a6:	3901      	subs	r1, #1
 80011a8:	4008      	ands	r0, r1
 80011aa:	3801      	subs	r0, #1
 80011ac:	e000      	b.n	80011b0 <__ledf2+0x74>
 80011ae:	2002      	movs	r0, #2
 80011b0:	bcc0      	pop	{r6, r7}
 80011b2:	46b9      	mov	r9, r7
 80011b4:	46b0      	mov	r8, r6
 80011b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1f9      	bne.n	80011b0 <__ledf2+0x74>
 80011bc:	2001      	movs	r0, #1
 80011be:	4240      	negs	r0, r0
 80011c0:	e7f6      	b.n	80011b0 <__ledf2+0x74>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ec      	bne.n	80011a0 <__ledf2+0x64>
 80011c6:	464c      	mov	r4, r9
 80011c8:	4326      	orrs	r6, r4
 80011ca:	d1e9      	bne.n	80011a0 <__ledf2+0x64>
 80011cc:	e7ea      	b.n	80011a4 <__ledf2+0x68>
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dd04      	ble.n	80011dc <__ledf2+0xa0>
 80011d2:	4243      	negs	r3, r0
 80011d4:	4158      	adcs	r0, r3
 80011d6:	0040      	lsls	r0, r0, #1
 80011d8:	3801      	subs	r0, #1
 80011da:	e7e9      	b.n	80011b0 <__ledf2+0x74>
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbeb      	blt.n	80011b8 <__ledf2+0x7c>
 80011e0:	454f      	cmp	r7, r9
 80011e2:	d8df      	bhi.n	80011a4 <__ledf2+0x68>
 80011e4:	d006      	beq.n	80011f4 <__ledf2+0xb8>
 80011e6:	2000      	movs	r0, #0
 80011e8:	454f      	cmp	r7, r9
 80011ea:	d2e1      	bcs.n	80011b0 <__ledf2+0x74>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d0e5      	beq.n	80011bc <__ledf2+0x80>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7dd      	b.n	80011b0 <__ledf2+0x74>
 80011f4:	45c4      	cmp	ip, r8
 80011f6:	d8d5      	bhi.n	80011a4 <__ledf2+0x68>
 80011f8:	2000      	movs	r0, #0
 80011fa:	45c4      	cmp	ip, r8
 80011fc:	d2d8      	bcs.n	80011b0 <__ledf2+0x74>
 80011fe:	e7f5      	b.n	80011ec <__ledf2+0xb0>
 8001200:	000007ff 	.word	0x000007ff

08001204 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8001208:	201e      	movs	r0, #30
 800120a:	f000 fc81 	bl	8001b10 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <lcd_init+0x8c>)
 8001210:	2200      	movs	r2, #0
 8001212:	2104      	movs	r1, #4
 8001214:	0018      	movs	r0, r3
 8001216:	f001 ffd3 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <lcd_init+0x8c>)
 8001220:	2201      	movs	r2, #1
 8001222:	0019      	movs	r1, r3
 8001224:	f001 ffcc 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4818      	ldr	r0, [pc, #96]	; (8001290 <lcd_init+0x8c>)
 800122e:	2200      	movs	r2, #0
 8001230:	0019      	movs	r1, r3
 8001232:	f001 ffc5 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <lcd_init+0x8c>)
 800123c:	2200      	movs	r2, #0
 800123e:	0019      	movs	r1, r3
 8001240:	f001 ffbe 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <lcd_init+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	2101      	movs	r1, #1
 800124a:	0018      	movs	r0, r3
 800124c:	f001 ffb8 	bl	80031c0 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <lcd_init+0x8c>)
 8001252:	2201      	movs	r2, #1
 8001254:	2102      	movs	r1, #2
 8001256:	0018      	movs	r0, r3
 8001258:	f001 ffb2 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <lcd_init+0x8c>)
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	0018      	movs	r0, r3
 8001264:	f001 ffac 	bl	80031c0 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8001268:	2128      	movs	r1, #40	; 0x28
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f812 	bl	8001294 <lcd_write>
	lcd_write(0,0x0c);
 8001270:	210c      	movs	r1, #12
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f80e 	bl	8001294 <lcd_write>
	lcd_write(0,0x06);
 8001278:	2106      	movs	r1, #6
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f80a 	bl	8001294 <lcd_write>
	lcd_write(0,0x01);
 8001280:	2101      	movs	r1, #1
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f806 	bl	8001294 <lcd_write>
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	50000400 	.word	0x50000400

08001294 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	0002      	movs	r2, r0
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	1c0a      	adds	r2, r1, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 fc32 	bl	8001b10 <HAL_Delay>
	if(type)
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <lcd_write+0x2e>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <lcd_write+0x1ac>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	2101      	movs	r1, #1
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 ff80 	bl	80031c0 <HAL_GPIO_WritePin>
 80012c0:	e005      	b.n	80012ce <lcd_write+0x3a>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <lcd_write+0x1ac>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	0018      	movs	r0, r3
 80012ca:	f001 ff79 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da07      	bge.n	80012e8 <lcd_write+0x54>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	015b      	lsls	r3, r3, #5
 80012dc:	4858      	ldr	r0, [pc, #352]	; (8001440 <lcd_write+0x1ac>)
 80012de:	2201      	movs	r2, #1
 80012e0:	0019      	movs	r1, r3
 80012e2:	f001 ff6d 	bl	80031c0 <HAL_GPIO_WritePin>
 80012e6:	e006      	b.n	80012f6 <lcd_write+0x62>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	4854      	ldr	r0, [pc, #336]	; (8001440 <lcd_write+0x1ac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	0019      	movs	r1, r3
 80012f2:	f001 ff65 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	4013      	ands	r3, r2
 80012fe:	d007      	beq.n	8001310 <lcd_write+0x7c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	484e      	ldr	r0, [pc, #312]	; (8001440 <lcd_write+0x1ac>)
 8001306:	2201      	movs	r2, #1
 8001308:	0019      	movs	r1, r3
 800130a:	f001 ff59 	bl	80031c0 <HAL_GPIO_WritePin>
 800130e:	e006      	b.n	800131e <lcd_write+0x8a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	484a      	ldr	r0, [pc, #296]	; (8001440 <lcd_write+0x1ac>)
 8001316:	2200      	movs	r2, #0
 8001318:	0019      	movs	r1, r3
 800131a:	f001 ff51 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 800131e:	1dbb      	adds	r3, r7, #6
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d007      	beq.n	8001338 <lcd_write+0xa4>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4844      	ldr	r0, [pc, #272]	; (8001440 <lcd_write+0x1ac>)
 800132e:	2201      	movs	r2, #1
 8001330:	0019      	movs	r1, r3
 8001332:	f001 ff45 	bl	80031c0 <HAL_GPIO_WritePin>
 8001336:	e006      	b.n	8001346 <lcd_write+0xb2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4840      	ldr	r0, [pc, #256]	; (8001440 <lcd_write+0x1ac>)
 800133e:	2200      	movs	r2, #0
 8001340:	0019      	movs	r1, r3
 8001342:	f001 ff3d 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2210      	movs	r2, #16
 800134c:	4013      	ands	r3, r2
 800134e:	d006      	beq.n	800135e <lcd_write+0xca>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <lcd_write+0x1ac>)
 8001352:	2201      	movs	r2, #1
 8001354:	2104      	movs	r1, #4
 8001356:	0018      	movs	r0, r3
 8001358:	f001 ff32 	bl	80031c0 <HAL_GPIO_WritePin>
 800135c:	e005      	b.n	800136a <lcd_write+0xd6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <lcd_write+0x1ac>)
 8001360:	2200      	movs	r2, #0
 8001362:	2104      	movs	r1, #4
 8001364:	0018      	movs	r0, r3
 8001366:	f001 ff2b 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <lcd_write+0x1ac>)
 800136c:	2201      	movs	r2, #1
 800136e:	2102      	movs	r1, #2
 8001370:	0018      	movs	r0, r3
 8001372:	f001 ff25 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001376:	4b32      	ldr	r3, [pc, #200]	; (8001440 <lcd_write+0x1ac>)
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	0018      	movs	r0, r3
 800137e:	f001 ff1f 	bl	80031c0 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2208      	movs	r2, #8
 8001388:	4013      	ands	r3, r2
 800138a:	d007      	beq.n	800139c <lcd_write+0x108>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <lcd_write+0x1ac>)
 8001392:	2201      	movs	r2, #1
 8001394:	0019      	movs	r1, r3
 8001396:	f001 ff13 	bl	80031c0 <HAL_GPIO_WritePin>
 800139a:	e006      	b.n	80013aa <lcd_write+0x116>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	4827      	ldr	r0, [pc, #156]	; (8001440 <lcd_write+0x1ac>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	0019      	movs	r1, r3
 80013a6:	f001 ff0b 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d007      	beq.n	80013c4 <lcd_write+0x130>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4821      	ldr	r0, [pc, #132]	; (8001440 <lcd_write+0x1ac>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	0019      	movs	r1, r3
 80013be:	f001 feff 	bl	80031c0 <HAL_GPIO_WritePin>
 80013c2:	e006      	b.n	80013d2 <lcd_write+0x13e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	481d      	ldr	r0, [pc, #116]	; (8001440 <lcd_write+0x1ac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	0019      	movs	r1, r3
 80013ce:	f001 fef7 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 80013d2:	1dbb      	adds	r3, r7, #6
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d007      	beq.n	80013ec <lcd_write+0x158>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <lcd_write+0x1ac>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	0019      	movs	r1, r3
 80013e6:	f001 feeb 	bl	80031c0 <HAL_GPIO_WritePin>
 80013ea:	e006      	b.n	80013fa <lcd_write+0x166>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <lcd_write+0x1ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	0019      	movs	r1, r3
 80013f6:	f001 fee3 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d006      	beq.n	8001412 <lcd_write+0x17e>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <lcd_write+0x1ac>)
 8001406:	2201      	movs	r2, #1
 8001408:	2104      	movs	r1, #4
 800140a:	0018      	movs	r0, r3
 800140c:	f001 fed8 	bl	80031c0 <HAL_GPIO_WritePin>
 8001410:	e005      	b.n	800141e <lcd_write+0x18a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <lcd_write+0x1ac>)
 8001414:	2200      	movs	r2, #0
 8001416:	2104      	movs	r1, #4
 8001418:	0018      	movs	r0, r3
 800141a:	f001 fed1 	bl	80031c0 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <lcd_write+0x1ac>)
 8001420:	2201      	movs	r2, #1
 8001422:	2102      	movs	r1, #2
 8001424:	0018      	movs	r0, r3
 8001426:	f001 fecb 	bl	80031c0 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <lcd_write+0x1ac>)
 800142c:	2200      	movs	r2, #0
 800142e:	2102      	movs	r1, #2
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fec5 	bl	80031c0 <HAL_GPIO_WritePin>
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	50000400 	.word	0x50000400

08001444 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	603a      	str	r2, [r7, #0]
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	1c02      	adds	r2, r0, #0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	1dbb      	adds	r3, r7, #6
 8001454:	1c0a      	adds	r2, r1, #0
 8001456:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d023      	beq.n	80014a8 <lcd_puts+0x64>
 8001460:	dc37      	bgt.n	80014d2 <lcd_puts+0x8e>
 8001462:	2b02      	cmp	r3, #2
 8001464:	d017      	beq.n	8001496 <lcd_puts+0x52>
 8001466:	dc34      	bgt.n	80014d2 <lcd_puts+0x8e>
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <lcd_puts+0x2e>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d009      	beq.n	8001484 <lcd_puts+0x40>
 8001470:	e023      	b.n	80014ba <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3b80      	subs	r3, #128	; 0x80
 8001478:	b2db      	uxtb	r3, r3
 800147a:	0019      	movs	r1, r3
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff09 	bl	8001294 <lcd_write>
			break;
 8001482:	e01a      	b.n	80014ba <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8001484:	1dbb      	adds	r3, r7, #6
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3b40      	subs	r3, #64	; 0x40
 800148a:	b2db      	uxtb	r3, r3
 800148c:	0019      	movs	r1, r3
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff00 	bl	8001294 <lcd_write>
			break;
 8001494:	e011      	b.n	80014ba <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8001496:	1dbb      	adds	r3, r7, #6
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3b70      	subs	r3, #112	; 0x70
 800149c:	b2db      	uxtb	r3, r3
 800149e:	0019      	movs	r1, r3
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fef7 	bl	8001294 <lcd_write>
			break;
 80014a6:	e008      	b.n	80014ba <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80014a8:	1dbb      	adds	r3, r7, #6
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3b30      	subs	r3, #48	; 0x30
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	0019      	movs	r1, r3
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff feee 	bl	8001294 <lcd_write>
			break;
 80014b8:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80014ba:	e00a      	b.n	80014d2 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	0019      	movs	r1, r3
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fee4 	bl	8001294 <lcd_write>
		string++;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	603b      	str	r3, [r7, #0]
	while(*string)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ef      	bne.n	80014bc <lcd_puts+0x78>
	}
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <lcd_clear>:
void lcd_clear(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 80014ea:	2101      	movs	r1, #1
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fed1 	bl	8001294 <lcd_write>
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ADC_ConvCpltCallback>:
char buffer[16];
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_ADC_ConvCpltCallback+0x20>)
 8001502:	0018      	movs	r0, r3
 8001504:	f000 feac 	bl	8002260 <HAL_ADC_GetValue>
 8001508:	0003      	movs	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_ADC_ConvCpltCallback+0x24>)
 800150e:	801a      	strh	r2, [r3, #0]
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000094 	.word	0x20000094
 800151c:	200000f8 	.word	0x200000f8

08001520 <main>:
int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	    HAL_Init();
 8001524:	f000 fa6e 	bl	8001a04 <HAL_Init>
	    SystemClock_Config();
 8001528:	f000 f85a 	bl	80015e0 <SystemClock_Config>
	    MX_GPIO_Init();
 800152c:	f000 f90c 	bl	8001748 <MX_GPIO_Init>
	    MX_ADC1_Init();
 8001530:	f000 f89e 	bl	8001670 <MX_ADC1_Init>
	    lcd_init();
 8001534:	f7ff fe66 	bl	8001204 <lcd_init>
	    lcd_clear();
 8001538:	f7ff ffd5 	bl	80014e6 <lcd_clear>
 // Calibrate The ADC On Power-Up For Better Accuracy
	    HAL_ADCEx_Calibration_Start(&hadc1);
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <main+0x98>)
 800153e:	0018      	movs	r0, r3
 8001540:	f001 fafe 	bl	8002b40 <HAL_ADCEx_Calibration_Start>
	    while (1)
	    {
	       // Start ADC Conversion
	    	HAL_ADC_Start_IT(&hadc1);
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <main+0x98>)
 8001546:	0018      	movs	r0, r3
 8001548:	f000 fe12 	bl	8002170 <HAL_ADC_Start_IT>
	      // Read The ADC Conversion Result
	  	    voltage= adc_value*(0.8057);
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <main+0x9c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff fcbf 	bl	8000ed4 <__aeabi_i2d>
 8001556:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <main+0xa0>)
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <main+0xa4>)
 800155a:	f7fe fe87 	bl	800026c <__aeabi_dmul>
 800155e:	0002      	movs	r2, r0
 8001560:	000b      	movs	r3, r1
 8001562:	0010      	movs	r0, r2
 8001564:	0019      	movs	r1, r3
 8001566:	f7fe fe63 	bl	8000230 <__aeabi_d2uiz>
 800156a:	0003      	movs	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <main+0xa8>)
 8001570:	801a      	strh	r2, [r3, #0]

	      snprintf(buffer, 10, "%d", voltage);
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <main+0xa8>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <main+0xac>)
 8001578:	4815      	ldr	r0, [pc, #84]	; (80015d0 <main+0xb0>)
 800157a:	210a      	movs	r1, #10
 800157c:	f002 fdd6 	bl	800412c <sniprintf>
	      str=(int8_t*)buffer;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <main+0xb4>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <main+0xb0>)
 8001584:	601a      	str	r2, [r3, #0]
		  lcd_puts(0,0,str1);
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <main+0xb8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	001a      	movs	r2, r3
 800158c:	2100      	movs	r1, #0
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff ff58 	bl	8001444 <lcd_puts>
		  lcd_puts(0,9,str);
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <main+0xb4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	001a      	movs	r2, r3
 800159a:	2109      	movs	r1, #9
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff51 	bl	8001444 <lcd_puts>
		  lcd_puts(0,14,str2);
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <main+0xbc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	001a      	movs	r2, r3
 80015a8:	210e      	movs	r1, #14
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff ff4a 	bl	8001444 <lcd_puts>
	        HAL_Delay(1);	    }}
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 faad 	bl	8001b10 <HAL_Delay>
	    	HAL_ADC_Start_IT(&hadc1);
 80015b6:	e7c5      	b.n	8001544 <main+0x24>
 80015b8:	20000094 	.word	0x20000094
 80015bc:	200000f8 	.word	0x200000f8
 80015c0:	5dcc63f1 	.word	0x5dcc63f1
 80015c4:	3fe9c84b 	.word	0x3fe9c84b
 80015c8:	200000fa 	.word	0x200000fa
 80015cc:	08004a50 	.word	0x08004a50
 80015d0:	20000100 	.word	0x20000100
 80015d4:	200000fc 	.word	0x200000fc
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b095      	sub	sp, #84	; 0x54
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	2414      	movs	r4, #20
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	0018      	movs	r0, r3
 80015ec:	233c      	movs	r3, #60	; 0x3c
 80015ee:	001a      	movs	r2, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	f002 fd93 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	0018      	movs	r0, r3
 80015fa:	2310      	movs	r3, #16
 80015fc:	001a      	movs	r2, r3
 80015fe:	2100      	movs	r1, #0
 8001600:	f002 fd8c 	bl	800411c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	0018      	movs	r0, r3
 800160a:	f001 fdf7 	bl	80031fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2202      	movs	r2, #2
 8001612:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	193b      	adds	r3, r7, r4
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	0052      	lsls	r2, r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800161c:	193b      	adds	r3, r7, r4
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	2240      	movs	r2, #64	; 0x40
 8001626:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001628:	193b      	adds	r3, r7, r4
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	193b      	adds	r3, r7, r4
 8001630:	0018      	movs	r0, r3
 8001632:	f001 fe23 	bl	800327c <HAL_RCC_OscConfig>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800163a:	f000 f8cb 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2100      	movs	r1, #0
 800165a:	0018      	movs	r0, r3
 800165c:	f002 f96e 	bl	800393c <HAL_RCC_ClockConfig>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001664:	f000 f8b6 	bl	80017d4 <Error_Handler>
  }
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b015      	add	sp, #84	; 0x54
 800166e:	bd90      	pop	{r4, r7, pc}

08001670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	0018      	movs	r0, r3
 800167a:	230c      	movs	r3, #12
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f002 fd4c 	bl	800411c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001684:	4b2d      	ldr	r3, [pc, #180]	; (800173c <MX_ADC1_Init+0xcc>)
 8001686:	4a2e      	ldr	r2, [pc, #184]	; (8001740 <MX_ADC1_Init+0xd0>)
 8001688:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <MX_ADC1_Init+0xcc>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	05d2      	lsls	r2, r2, #23
 8001690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <MX_ADC1_Init+0xcc>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <MX_ADC1_Init+0xcc>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <MX_ADC1_Init+0xcc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <MX_ADC1_Init+0xcc>)
 80016a6:	2204      	movs	r2, #4
 80016a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <MX_ADC1_Init+0xcc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_ADC1_Init+0xcc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <MX_ADC1_Init+0xcc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_ADC1_Init+0xcc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <MX_ADC1_Init+0xcc>)
 80016c4:	2220      	movs	r2, #32
 80016c6:	2100      	movs	r1, #0
 80016c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_ADC1_Init+0xcc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_ADC1_Init+0xcc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_ADC1_Init+0xcc>)
 80016d8:	222c      	movs	r2, #44	; 0x2c
 80016da:	2100      	movs	r1, #0
 80016dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_ADC1_Init+0xcc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_ADC1_Init+0xcc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_ADC1_Init+0xcc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_ADC1_Init+0xcc>)
 80016f2:	223c      	movs	r2, #60	; 0x3c
 80016f4:	2100      	movs	r1, #0
 80016f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_ADC1_Init+0xcc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_ADC1_Init+0xcc>)
 8001700:	0018      	movs	r0, r3
 8001702:	f000 fb8d 	bl	8001e20 <HAL_ADC_Init>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800170a:	f000 f863 	bl	80017d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <MX_ADC1_Init+0xd4>)
 8001712:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	1d3a      	adds	r2, r7, #4
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_ADC1_Init+0xcc>)
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f000 fece 	bl	80024c8 <HAL_ADC_ConfigChannel>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001730:	f000 f850 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b004      	add	sp, #16
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000094 	.word	0x20000094
 8001740:	40012400 	.word	0x40012400
 8001744:	1c000080 	.word	0x1c000080

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	240c      	movs	r4, #12
 8001750:	193b      	adds	r3, r7, r4
 8001752:	0018      	movs	r0, r3
 8001754:	2314      	movs	r3, #20
 8001756:	001a      	movs	r2, r3
 8001758:	2100      	movs	r1, #0
 800175a:	f002 fcdf 	bl	800411c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_GPIO_Init+0x80>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_GPIO_Init+0x80>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_GPIO_Init+0x80>)
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_GPIO_Init+0x80>)
 8001778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_GPIO_Init+0x80>)
 800177c:	2102      	movs	r1, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_GPIO_Init+0x80>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800178e:	490f      	ldr	r1, [pc, #60]	; (80017cc <MX_GPIO_Init+0x84>)
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_GPIO_Init+0x88>)
 8001792:	2200      	movs	r2, #0
 8001794:	0018      	movs	r0, r3
 8001796:	f001 fd13 	bl	80031c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800179a:	0021      	movs	r1, r4
 800179c:	187b      	adds	r3, r7, r1
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <MX_GPIO_Init+0x84>)
 80017a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2201      	movs	r2, #1
 80017a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <MX_GPIO_Init+0x88>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f001 fb94 	bl	8002ee8 <HAL_GPIO_Init>

}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b009      	add	sp, #36	; 0x24
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	00001c07 	.word	0x00001c07
 80017d0:	50000400 	.word	0x50000400

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x44>)
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_MspInit+0x44>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_MspInit+0x44>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_MspInit+0x44>)
 8001800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_MspInit+0x44>)
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	0549      	lsls	r1, r1, #21
 8001808:	430a      	orrs	r2, r1
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_MspInit+0x44>)
 800180e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	055b      	lsls	r3, r3, #21
 8001814:	4013      	ands	r3, r2
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b09d      	sub	sp, #116	; 0x74
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	235c      	movs	r3, #92	; 0x5c
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	0018      	movs	r0, r3
 8001836:	2314      	movs	r3, #20
 8001838:	001a      	movs	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	f002 fc6e 	bl	800411c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	2410      	movs	r4, #16
 8001842:	193b      	adds	r3, r7, r4
 8001844:	0018      	movs	r0, r3
 8001846:	234c      	movs	r3, #76	; 0x4c
 8001848:	001a      	movs	r2, r3
 800184a:	2100      	movs	r1, #0
 800184c:	f002 fc66 	bl	800411c <memset>
  if(hadc->Instance==ADC1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <HAL_ADC_MspInit+0xc0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d141      	bne.n	80018de <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	01d2      	lsls	r2, r2, #7
 8001860:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001862:	193b      	adds	r3, r7, r4
 8001864:	2200      	movs	r2, #0
 8001866:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	193b      	adds	r3, r7, r4
 800186a:	0018      	movs	r0, r3
 800186c:	f002 f9f0 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d001      	beq.n	8001878 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001874:	f7ff ffae 	bl	80017d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_ADC_MspInit+0xc4>)
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_ADC_MspInit+0xc4>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0349      	lsls	r1, r1, #13
 8001882:	430a      	orrs	r2, r1
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_ADC_MspInit+0xc4>)
 8001888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_ADC_MspInit+0xc4>)
 8001896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_ADC_MspInit+0xc4>)
 800189a:	2101      	movs	r1, #1
 800189c:	430a      	orrs	r2, r1
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_ADC_MspInit+0xc4>)
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ac:	215c      	movs	r1, #92	; 0x5c
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2203      	movs	r2, #3
 80018b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	187a      	adds	r2, r7, r1
 80018c2:	23a0      	movs	r3, #160	; 0xa0
 80018c4:	05db      	lsls	r3, r3, #23
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f001 fb0d 	bl	8002ee8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	200c      	movs	r0, #12
 80018d4:	f001 fad6 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80018d8:	200c      	movs	r0, #12
 80018da:	f001 fae8 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b01d      	add	sp, #116	; 0x74
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40012400 	.word	0x40012400
 80018ec:	40021000 	.word	0x40021000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f8e0 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <ADC1_COMP_IRQHandler+0x14>)
 8001926:	0018      	movs	r0, r3
 8001928:	f000 fca6 	bl	8002278 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	20000094 	.word	0x20000094

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	18d3      	adds	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f002 fbae 	bl	80040c8 <__errno>
 800196c:	0003      	movs	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	2301      	movs	r3, #1
 8001974:	425b      	negs	r3, r3
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	18d2      	adds	r2, r2, r3
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <_sbrk+0x64>)
 8001988:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b006      	add	sp, #24
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20024000 	.word	0x20024000
 8001998:	00000400 	.word	0x00000400
 800199c:	20000110 	.word	0x20000110
 80019a0:	20000128 	.word	0x20000128

080019a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b4:	f7ff fff6 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	; (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	; (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019de:	f002 fb79 	bl	80040d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019e2:	f7ff fd9d 	bl	8001520 <main>

080019e6 <LoopForever>:

LoopForever:
  b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   r0, =_estack
 80019e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80019f4:	08004b10 	.word	0x08004b10
  ldr r2, =_sbss
 80019f8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80019fc:	20000128 	.word	0x20000128

08001a00 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <CEC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_Init+0x3c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Init+0x3c>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0049      	lsls	r1, r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f000 f810 	bl	8001a44 <HAL_InitTick>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e001      	b.n	8001a34 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fed6 	bl	80017e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40022000 	.word	0x40022000

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_InitTick+0x88>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d02b      	beq.n	8001ab4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_InitTick+0x8c>)
 8001a5e:	681c      	ldr	r4, [r3, #0]
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_InitTick+0x88>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	0019      	movs	r1, r3
 8001a66:	23fa      	movs	r3, #250	; 0xfa
 8001a68:	0098      	lsls	r0, r3, #2
 8001a6a:	f7fe fb55 	bl	8000118 <__udivsi3>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	0019      	movs	r1, r3
 8001a72:	0020      	movs	r0, r4
 8001a74:	f7fe fb50 	bl	8000118 <__udivsi3>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f001 fa27 	bl	8002ece <HAL_SYSTICK_Config>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d112      	bne.n	8001aaa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d80a      	bhi.n	8001aa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	425b      	negs	r3, r3
 8001a90:	2200      	movs	r2, #0
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 f9f6 	bl	8002e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_InitTick+0x90>)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e00d      	b.n	8001abc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e008      	b.n	8001abc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aaa:	230f      	movs	r3, #15
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e003      	b.n	8001abc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b005      	add	sp, #20
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	20000010 	.word	0x20000010
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	2000000c 	.word	0x2000000c

08001ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_IncTick+0x1c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x20>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	18d2      	adds	r2, r2, r3
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_IncTick+0x20>)
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	20000010 	.word	0x20000010
 8001af8:	20000114 	.word	0x20000114

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <HAL_GetTick+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000114 	.word	0x20000114

08001b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff fff0 	bl	8001afc <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	d005      	beq.n	8001b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_Delay+0x44>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	001a      	movs	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	189b      	adds	r3, r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	f7ff ffe0 	bl	8001afc <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d8f7      	bhi.n	8001b38 <HAL_Delay+0x28>
  {
  }
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b004      	add	sp, #16
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000010 	.word	0x20000010

08001b58 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001b68:	401a      	ands	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	fe3fffff 	.word	0xfe3fffff

08001b80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	23e0      	movs	r3, #224	; 0xe0
 8001b8e:	045b      	lsls	r3, r3, #17
 8001b90:	4013      	ands	r3, r2
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	2104      	movs	r1, #4
 8001bae:	400a      	ands	r2, r1
 8001bb0:	2107      	movs	r1, #7
 8001bb2:	4091      	lsls	r1, r2
 8001bb4:	000a      	movs	r2, r1
 8001bb6:	43d2      	mvns	r2, r2
 8001bb8:	401a      	ands	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4099      	lsls	r1, r3
 8001bc4:	000b      	movs	r3, r1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	2104      	movs	r1, #4
 8001be6:	400a      	ands	r2, r1
 8001be8:	2107      	movs	r1, #7
 8001bea:	4091      	lsls	r1, r2
 8001bec:	000a      	movs	r2, r1
 8001bee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bf6:	40da      	lsrs	r2, r3
 8001bf8:	0013      	movs	r3, r2
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4013      	ands	r3, r2
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	211f      	movs	r1, #31
 8001c38:	400a      	ands	r2, r1
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	4091      	lsls	r1, r2
 8001c3e:	000a      	movs	r2, r1
 8001c40:	43d2      	mvns	r2, r2
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0e9b      	lsrs	r3, r3, #26
 8001c48:	210f      	movs	r1, #15
 8001c4a:	4019      	ands	r1, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	201f      	movs	r0, #31
 8001c50:	4003      	ands	r3, r0
 8001c52:	4099      	lsls	r1, r3
 8001c54:	000b      	movs	r3, r1
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b004      	add	sp, #16
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	035b      	lsls	r3, r3, #13
 8001c76:	0b5b      	lsrs	r3, r3, #13
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	0352      	lsls	r2, r2, #13
 8001c98:	0b52      	lsrs	r2, r2, #13
 8001c9a:	43d2      	mvns	r2, r2
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	4013      	ands	r3, r2
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	0212      	lsls	r2, r2, #8
 8001cd8:	43d2      	mvns	r2, r2
 8001cda:	401a      	ands	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	07ffff00 	.word	0x07ffff00

08001cfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0552      	lsls	r2, r2, #21
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	6fffffe8 	.word	0x6fffffe8

08001d24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	055b      	lsls	r3, r3, #21
 8001d34:	401a      	ands	r2, r3
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	055b      	lsls	r3, r3, #21
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d101      	bne.n	8001d42 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <LL_ADC_Enable+0x20>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	7fffffe8 	.word	0x7fffffe8

08001d70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <LL_ADC_Disable+0x20>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2202      	movs	r2, #2
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	7fffffe8 	.word	0x7fffffe8

08001d94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <LL_ADC_IsEnabled+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_ADC_IsEnabled+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d101      	bne.n	8001dce <LL_ADC_IsDisableOngoing+0x18>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_ADC_IsDisableOngoing+0x1a>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <LL_ADC_REG_StartConversion+0x20>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	2204      	movs	r2, #4
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	7fffffe8 	.word	0x7fffffe8

08001dfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d101      	bne.n	8001e14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e28:	231f      	movs	r3, #31
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e17f      	b.n	8002146 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fce9 	bl	8001828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2254      	movs	r2, #84	; 0x54
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff ff5b 	bl	8001d24 <LL_ADC_IsInternalRegulatorEnabled>
 8001e6e:	1e03      	subs	r3, r0, #0
 8001e70:	d115      	bne.n	8001e9e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7ff ff40 	bl	8001cfc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e7c:	4bb4      	ldr	r3, [pc, #720]	; (8002150 <HAL_ADC_Init+0x330>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	49b4      	ldr	r1, [pc, #720]	; (8002154 <HAL_ADC_Init+0x334>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7fe f948 	bl	8000118 <__udivsi3>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ff3e 	bl	8001d24 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea8:	1e03      	subs	r3, r0, #0
 8001eaa:	d10f      	bne.n	8001ecc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ec4:	231f      	movs	r3, #31
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff ff93 	bl	8001dfc <LL_ADC_REG_IsConversionOngoing>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	2210      	movs	r2, #16
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d000      	beq.n	8001ee6 <HAL_ADC_Init+0xc6>
 8001ee4:	e122      	b.n	800212c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d000      	beq.n	8001eee <HAL_ADC_Init+0xce>
 8001eec:	e11e      	b.n	800212c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a99      	ldr	r2, [pc, #612]	; (8002158 <HAL_ADC_Init+0x338>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff ff46 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d000      	beq.n	8001f0e <HAL_ADC_Init+0xee>
 8001f0c:	e0ad      	b.n	800206a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7e1b      	ldrb	r3, [r3, #24]
 8001f16:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001f18:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7e5b      	ldrb	r3, [r3, #25]
 8001f1e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f20:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7e9b      	ldrb	r3, [r3, #26]
 8001f26:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f28:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_ADC_Init+0x118>
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	e000      	b.n	8001f3a <HAL_ADC_Init+0x11a>
 8001f38:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f3a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f40:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da04      	bge.n	8001f54 <HAL_ADC_Init+0x134>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	e001      	b.n	8001f58 <HAL_ADC_Init+0x138>
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001f58:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	5c5b      	ldrb	r3, [r3, r1]
 8001f60:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f62:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	5c9b      	ldrb	r3, [r3, r2]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d115      	bne.n	8001fa0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7e9b      	ldrb	r3, [r3, #26]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	0252      	lsls	r2, r2, #9
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	e00b      	b.n	8001fa0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2201      	movs	r2, #1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fac:	23e0      	movs	r3, #224	; 0xe0
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_ADC_Init+0x33c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0f9b      	lsrs	r3, r3, #30
 8001fda:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223c      	movs	r2, #60	; 0x3c
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d111      	bne.n	8002016 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0f9b      	lsrs	r3, r3, #30
 8001ff8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ffe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002004:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800200a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	2201      	movs	r2, #1
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4a50      	ldr	r2, [pc, #320]	; (8002160 <HAL_ADC_Init+0x340>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	430a      	orrs	r2, r1
 800202a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	429a      	cmp	r2, r3
 8002036:	d018      	beq.n	800206a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	05db      	lsls	r3, r3, #23
 8002040:	429a      	cmp	r2, r3
 8002042:	d012      	beq.n	800206a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	061b      	lsls	r3, r3, #24
 800204c:	429a      	cmp	r2, r3
 800204e:	d00c      	beq.n	800206a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002050:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HAL_ADC_Init+0x344>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a44      	ldr	r2, [pc, #272]	; (8002168 <HAL_ADC_Init+0x348>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	23f0      	movs	r3, #240	; 0xf0
 8002060:	039b      	lsls	r3, r3, #14
 8002062:	401a      	ands	r2, r3
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_ADC_Init+0x344>)
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	001a      	movs	r2, r3
 8002074:	2100      	movs	r1, #0
 8002076:	f7ff fd90 	bl	8001b9a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	493a      	ldr	r1, [pc, #232]	; (800216c <HAL_ADC_Init+0x34c>)
 8002084:	001a      	movs	r2, r3
 8002086:	f7ff fd88 	bl	8001b9a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2110      	movs	r1, #16
 800209e:	4249      	negs	r1, r1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
 80020a4:	e018      	b.n	80020d8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	039b      	lsls	r3, r3, #14
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d112      	bne.n	80020d8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	3b01      	subs	r3, #1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	221c      	movs	r2, #28
 80020c2:	4013      	ands	r3, r2
 80020c4:	2210      	movs	r2, #16
 80020c6:	4252      	negs	r2, r2
 80020c8:	409a      	lsls	r2, r3
 80020ca:	0011      	movs	r1, r2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2100      	movs	r1, #0
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff fd78 	bl	8001bd4 <LL_ADC_GetSamplingTimeCommonChannels>
 80020e4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10b      	bne.n	8002106 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	2203      	movs	r2, #3
 80020fa:	4393      	bics	r3, r2
 80020fc:	2201      	movs	r2, #1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002104:	e01c      	b.n	8002140 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	2212      	movs	r2, #18
 800210c:	4393      	bics	r3, r2
 800210e:	2210      	movs	r2, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	2201      	movs	r2, #1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002122:	231f      	movs	r3, #31
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800212a:	e009      	b.n	8002140 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002130:	2210      	movs	r2, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002138:	231f      	movs	r3, #31
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002140:	231f      	movs	r3, #31
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b008      	add	sp, #32
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	20000008 	.word	0x20000008
 8002154:	00030d40 	.word	0x00030d40
 8002158:	fffffefd 	.word	0xfffffefd
 800215c:	fffe0201 	.word	0xfffe0201
 8002160:	1ffffc02 	.word	0x1ffffc02
 8002164:	40012708 	.word	0x40012708
 8002168:	ffc3ffff 	.word	0xffc3ffff
 800216c:	07ffff04 	.word	0x07ffff04

08002170 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff fe3d 	bl	8001dfc <LL_ADC_REG_IsConversionOngoing>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d15f      	bne.n	8002246 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2254      	movs	r2, #84	; 0x54
 800218a:	5c9b      	ldrb	r3, [r3, r2]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_ADC_Start_IT+0x24>
 8002190:	2302      	movs	r3, #2
 8002192:	e05f      	b.n	8002254 <HAL_ADC_Start_IT+0xe4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2254      	movs	r2, #84	; 0x54
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800219c:	250f      	movs	r5, #15
 800219e:	197c      	adds	r4, r7, r5
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fb68 	bl	8002878 <ADC_Enable>
 80021a8:	0003      	movs	r3, r0
 80021aa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021ac:	197b      	adds	r3, r7, r5
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d143      	bne.n	800223c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <HAL_ADC_Start_IT+0xec>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	0052      	lsls	r2, r2, #1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	221c      	movs	r2, #28
 80021d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2254      	movs	r2, #84	; 0x54
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	211c      	movs	r1, #28
 80021e8:	438a      	bics	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d108      	bne.n	8002206 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2108      	movs	r1, #8
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
          break;
 8002204:	e008      	b.n	8002218 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2104      	movs	r1, #4
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
          break;
 8002216:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2110      	movs	r1, #16
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff fdcf 	bl	8001dd8 <LL_ADC_REG_StartConversion>
 800223a:	e008      	b.n	800224e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2254      	movs	r2, #84	; 0x54
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]
 8002244:	e003      	b.n	800224e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002246:	230f      	movs	r3, #15
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800224e:	230f      	movs	r3, #15
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bdb0      	pop	{r4, r5, r7, pc}
 800225c:	fffff0fe 	.word	0xfffff0fe

08002260 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b002      	add	sp, #8
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d017      	beq.n	80022cc <HAL_ADC_IRQHandler+0x54>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d013      	beq.n	80022cc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	2210      	movs	r2, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d106      	bne.n	80022bc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 fd24 	bl	8002d0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2204      	movs	r2, #4
 80022d0:	4013      	ands	r3, r2
 80022d2:	d003      	beq.n	80022dc <HAL_ADC_IRQHandler+0x64>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2204      	movs	r2, #4
 80022d8:	4013      	ands	r3, r2
 80022da:	d107      	bne.n	80022ec <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2208      	movs	r2, #8
 80022e0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022e2:	d04d      	beq.n	8002380 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2208      	movs	r2, #8
 80022e8:	4013      	ands	r3, r2
 80022ea:	d049      	beq.n	8002380 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	2210      	movs	r2, #16
 80022f2:	4013      	ands	r3, r2
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff fc7a 	bl	8001c02 <LL_ADC_REG_IsTriggerSourceSWStart>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d02e      	beq.n	8002370 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7e9b      	ldrb	r3, [r3, #26]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d12a      	bne.n	8002370 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2208      	movs	r2, #8
 8002322:	4013      	ands	r3, r2
 8002324:	2b08      	cmp	r3, #8
 8002326:	d123      	bne.n	8002370 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff fd65 	bl	8001dfc <LL_ADC_REG_IsConversionOngoing>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d110      	bne.n	8002358 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	210c      	movs	r1, #12
 8002342:	438a      	bics	r2, r1
 8002344:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	4a56      	ldr	r2, [pc, #344]	; (80024a4 <HAL_ADC_IRQHandler+0x22c>)
 800234c:	4013      	ands	r3, r2
 800234e:	2201      	movs	r2, #1
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58
 8002356:	e00b      	b.n	8002370 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	2220      	movs	r2, #32
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2201      	movs	r2, #1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff f8c0 	bl	80014f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	220c      	movs	r2, #12
 800237e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	4013      	ands	r3, r2
 8002386:	d012      	beq.n	80023ae <HAL_ADC_IRQHandler+0x136>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	4013      	ands	r3, r2
 800238e:	d00e      	beq.n	80023ae <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	0252      	lsls	r2, r2, #9
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f881 	bl	80024a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	d014      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x16a>
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d00f      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	0292      	lsls	r2, r2, #10
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fc8a 	bl	8002cec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0052      	lsls	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d014      	beq.n	8002416 <HAL_ADC_IRQHandler+0x19e>
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d00f      	beq.n	8002416 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	02d2      	lsls	r2, r2, #11
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fc78 	bl	8002cfc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d02b      	beq.n	8002476 <HAL_ADC_IRQHandler+0x1fe>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2210      	movs	r2, #16
 8002422:	4013      	ands	r3, r2
 8002424:	d027      	beq.n	8002476 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800242e:	2301      	movs	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e008      	b.n	8002446 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff fc36 	bl	8001caa <LL_ADC_REG_GetDMATransfer>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d001      	beq.n	8002446 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002442:	2301      	movs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d110      	bne.n	800246e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	00d2      	lsls	r2, r2, #3
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	2202      	movs	r2, #2
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 f825 	bl	80024b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	019b      	lsls	r3, r3, #6
 800247c:	4013      	ands	r3, r2
 800247e:	d00d      	beq.n	800249c <HAL_ADC_IRQHandler+0x224>
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	019b      	lsls	r3, r3, #6
 8002486:	4013      	ands	r3, r2
 8002488:	d008      	beq.n	800249c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f000 fc45 	bl	8002d1c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	0192      	lsls	r2, r2, #6
 800249a:	601a      	str	r2, [r3, #0]
  }
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b006      	add	sp, #24
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	fffffefe 	.word	0xfffffefe

080024a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d2:	2317      	movs	r3, #23
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2254      	movs	r2, #84	; 0x54
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x24>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e1c0      	b.n	800286e <HAL_ADC_ConfigChannel+0x3a6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2254      	movs	r2, #84	; 0x54
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7ff fc7f 	bl	8001dfc <LL_ADC_REG_IsConversionOngoing>
 80024fe:	1e03      	subs	r3, r0, #0
 8002500:	d000      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x3c>
 8002502:	e1a3      	b.n	800284c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d100      	bne.n	800250e <HAL_ADC_ConfigChannel+0x46>
 800250c:	e143      	b.n	8002796 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	429a      	cmp	r2, r3
 8002518:	d004      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800251e:	4ac1      	ldr	r2, [pc, #772]	; (8002824 <HAL_ADC_ConfigChannel+0x35c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d108      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0019      	movs	r1, r3
 800252e:	0010      	movs	r0, r2
 8002530:	f7ff fb98 	bl	8001c64 <LL_ADC_REG_SetSequencerChAdd>
 8002534:	e0c9      	b.n	80026ca <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	211f      	movs	r1, #31
 8002540:	400b      	ands	r3, r1
 8002542:	210f      	movs	r1, #15
 8002544:	4099      	lsls	r1, r3
 8002546:	000b      	movs	r3, r1
 8002548:	43db      	mvns	r3, r3
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	035b      	lsls	r3, r3, #13
 8002554:	0b5b      	lsrs	r3, r3, #13
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x9c>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	221f      	movs	r2, #31
 8002560:	4013      	ands	r3, r2
 8002562:	e098      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2201      	movs	r2, #1
 800256a:	4013      	ands	r3, r2
 800256c:	d000      	beq.n	8002570 <HAL_ADC_ConfigChannel+0xa8>
 800256e:	e091      	b.n	8002694 <HAL_ADC_ConfigChannel+0x1cc>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	4013      	ands	r3, r2
 8002578:	d000      	beq.n	800257c <HAL_ADC_ConfigChannel+0xb4>
 800257a:	e089      	b.n	8002690 <HAL_ADC_ConfigChannel+0x1c8>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2204      	movs	r2, #4
 8002582:	4013      	ands	r3, r2
 8002584:	d000      	beq.n	8002588 <HAL_ADC_ConfigChannel+0xc0>
 8002586:	e081      	b.n	800268c <HAL_ADC_ConfigChannel+0x1c4>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2208      	movs	r2, #8
 800258e:	4013      	ands	r3, r2
 8002590:	d000      	beq.n	8002594 <HAL_ADC_ConfigChannel+0xcc>
 8002592:	e079      	b.n	8002688 <HAL_ADC_ConfigChannel+0x1c0>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2210      	movs	r2, #16
 800259a:	4013      	ands	r3, r2
 800259c:	d000      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0xd8>
 800259e:	e071      	b.n	8002684 <HAL_ADC_ConfigChannel+0x1bc>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2220      	movs	r2, #32
 80025a6:	4013      	ands	r3, r2
 80025a8:	d000      	beq.n	80025ac <HAL_ADC_ConfigChannel+0xe4>
 80025aa:	e069      	b.n	8002680 <HAL_ADC_ConfigChannel+0x1b8>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2240      	movs	r2, #64	; 0x40
 80025b2:	4013      	ands	r3, r2
 80025b4:	d000      	beq.n	80025b8 <HAL_ADC_ConfigChannel+0xf0>
 80025b6:	e061      	b.n	800267c <HAL_ADC_ConfigChannel+0x1b4>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	4013      	ands	r3, r2
 80025c0:	d000      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0xfc>
 80025c2:	e059      	b.n	8002678 <HAL_ADC_ConfigChannel+0x1b0>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d151      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1ac>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d149      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1a8>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4013      	ands	r3, r2
 80025e6:	d141      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1a4>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	4013      	ands	r3, r2
 80025f2:	d139      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1a0>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	015b      	lsls	r3, r3, #5
 80025fc:	4013      	ands	r3, r2
 80025fe:	d131      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x19c>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	019b      	lsls	r3, r3, #6
 8002608:	4013      	ands	r3, r2
 800260a:	d129      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x198>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	01db      	lsls	r3, r3, #7
 8002614:	4013      	ands	r3, r2
 8002616:	d121      	bne.n	800265c <HAL_ADC_ConfigChannel+0x194>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	4013      	ands	r3, r2
 8002622:	d119      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x190>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	025b      	lsls	r3, r3, #9
 800262c:	4013      	ands	r3, r2
 800262e:	d111      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x18c>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	029b      	lsls	r3, r3, #10
 8002638:	4013      	ands	r3, r2
 800263a:	d109      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x188>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	02db      	lsls	r3, r3, #11
 8002644:	4013      	ands	r3, r2
 8002646:	d001      	beq.n	800264c <HAL_ADC_ConfigChannel+0x184>
 8002648:	2312      	movs	r3, #18
 800264a:	e024      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 800264c:	2300      	movs	r3, #0
 800264e:	e022      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002650:	2311      	movs	r3, #17
 8002652:	e020      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002654:	2310      	movs	r3, #16
 8002656:	e01e      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002658:	230f      	movs	r3, #15
 800265a:	e01c      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 800265c:	230e      	movs	r3, #14
 800265e:	e01a      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002660:	230d      	movs	r3, #13
 8002662:	e018      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002664:	230c      	movs	r3, #12
 8002666:	e016      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002668:	230b      	movs	r3, #11
 800266a:	e014      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 800266c:	230a      	movs	r3, #10
 800266e:	e012      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002670:	2309      	movs	r3, #9
 8002672:	e010      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002674:	2308      	movs	r3, #8
 8002676:	e00e      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002678:	2307      	movs	r3, #7
 800267a:	e00c      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 800267c:	2306      	movs	r3, #6
 800267e:	e00a      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002680:	2305      	movs	r3, #5
 8002682:	e008      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002684:	2304      	movs	r3, #4
 8002686:	e006      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002688:	2303      	movs	r3, #3
 800268a:	e004      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 800268c:	2302      	movs	r3, #2
 800268e:	e002      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1ce>
 8002694:	2300      	movs	r3, #0
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6852      	ldr	r2, [r2, #4]
 800269a:	201f      	movs	r0, #31
 800269c:	4002      	ands	r2, r0
 800269e:	4093      	lsls	r3, r2
 80026a0:	000a      	movs	r2, r1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d808      	bhi.n	80026ca <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	001a      	movs	r2, r3
 80026c6:	f7ff faad 	bl	8001c24 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	001a      	movs	r2, r3
 80026d8:	f7ff faf4 	bl	8001cc4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db00      	blt.n	80026e6 <HAL_ADC_ConfigChannel+0x21e>
 80026e4:	e0bc      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e6:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff fa49 	bl	8001b80 <LL_ADC_GetCommonPathInternalCh>
 80026ee:	0003      	movs	r3, r0
 80026f0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4d      	ldr	r2, [pc, #308]	; (800282c <HAL_ADC_ConfigChannel+0x364>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d122      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002704:	d11d      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	0412      	lsls	r2, r2, #16
 800270c:	4313      	orrs	r3, r2
 800270e:	4a46      	ldr	r2, [pc, #280]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 8002710:	0019      	movs	r1, r3
 8002712:	0010      	movs	r0, r2
 8002714:	f7ff fa20 	bl	8001b58 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002718:	4b45      	ldr	r3, [pc, #276]	; (8002830 <HAL_ADC_ConfigChannel+0x368>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4945      	ldr	r1, [pc, #276]	; (8002834 <HAL_ADC_ConfigChannel+0x36c>)
 800271e:	0018      	movs	r0, r3
 8002720:	f7fd fcfa 	bl	8000118 <__udivsi3>
 8002724:	0003      	movs	r3, r0
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	0013      	movs	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	189b      	adds	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002732:	e002      	b.n	800273a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3b01      	subs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f9      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002740:	e08e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <HAL_ADC_ConfigChannel+0x370>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10e      	bne.n	800276a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	045b      	lsls	r3, r3, #17
 8002752:	4013      	ands	r3, r2
 8002754:	d109      	bne.n	800276a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	0452      	lsls	r2, r2, #17
 800275c:	4313      	orrs	r3, r2
 800275e:	4a32      	ldr	r2, [pc, #200]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 8002760:	0019      	movs	r1, r3
 8002762:	0010      	movs	r0, r2
 8002764:	f7ff f9f8 	bl	8001b58 <LL_ADC_SetCommonPathInternalCh>
 8002768:	e07a      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a33      	ldr	r2, [pc, #204]	; (800283c <HAL_ADC_ConfigChannel+0x374>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d000      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x2ae>
 8002774:	e074      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	03db      	lsls	r3, r3, #15
 800277c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800277e:	d000      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x2ba>
 8002780:	e06e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	03d2      	lsls	r2, r2, #15
 8002788:	4313      	orrs	r3, r2
 800278a:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 800278c:	0019      	movs	r1, r3
 800278e:	0010      	movs	r0, r2
 8002790:	f7ff f9e2 	bl	8001b58 <LL_ADC_SetCommonPathInternalCh>
 8002794:	e064      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	429a      	cmp	r2, r3
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_ADC_ConfigChannel+0x35c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0019      	movs	r1, r3
 80027b6:	0010      	movs	r0, r2
 80027b8:	f7ff fa65 	bl	8001c86 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	da4d      	bge.n	8002860 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff f9da 	bl	8001b80 <LL_ADC_GetCommonPathInternalCh>
 80027cc:	0003      	movs	r3, r0
 80027ce:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a15      	ldr	r2, [pc, #84]	; (800282c <HAL_ADC_ConfigChannel+0x364>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_ADC_ConfigChannel+0x378>)
 80027de:	4013      	ands	r3, r2
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 80027e2:	0019      	movs	r1, r3
 80027e4:	0010      	movs	r0, r2
 80027e6:	f7ff f9b7 	bl	8001b58 <LL_ADC_SetCommonPathInternalCh>
 80027ea:	e039      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_ADC_ConfigChannel+0x370>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d108      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_ADC_ConfigChannel+0x37c>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f7ff f9a9 	bl	8001b58 <LL_ADC_SetCommonPathInternalCh>
 8002806:	e02b      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_ADC_ConfigChannel+0x374>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d126      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <HAL_ADC_ConfigChannel+0x380>)
 8002816:	4013      	ands	r3, r2
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_ADC_ConfigChannel+0x360>)
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f7ff f99b 	bl	8001b58 <LL_ADC_SetCommonPathInternalCh>
 8002822:	e01d      	b.n	8002860 <HAL_ADC_ConfigChannel+0x398>
 8002824:	80000004 	.word	0x80000004
 8002828:	40012708 	.word	0x40012708
 800282c:	b0001000 	.word	0xb0001000
 8002830:	20000008 	.word	0x20000008
 8002834:	00030d40 	.word	0x00030d40
 8002838:	b8004000 	.word	0xb8004000
 800283c:	b4002000 	.word	0xb4002000
 8002840:	ff7fffff 	.word	0xff7fffff
 8002844:	feffffff 	.word	0xfeffffff
 8002848:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	2220      	movs	r2, #32
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002858:	2317      	movs	r3, #23
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2254      	movs	r2, #84	; 0x54
 8002864:	2100      	movs	r1, #0
 8002866:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002868:	2317      	movs	r3, #23
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	781b      	ldrb	r3, [r3, #0]
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b006      	add	sp, #24
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)

08002878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff fa83 	bl	8001d94 <LL_ADC_IsEnabled>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d000      	beq.n	8002894 <ADC_Enable+0x1c>
 8002892:	e069      	b.n	8002968 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4a36      	ldr	r2, [pc, #216]	; (8002974 <ADC_Enable+0xfc>)
 800289c:	4013      	ands	r3, r2
 800289e:	d00d      	beq.n	80028bc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	2210      	movs	r2, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	2201      	movs	r2, #1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e056      	b.n	800296a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff fa43 	bl	8001d4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <ADC_Enable+0x100>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff f959 	bl	8001b80 <LL_ADC_GetCommonPathInternalCh>
 80028ce:	0002      	movs	r2, r0
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	4013      	ands	r3, r2
 80028d6:	d00f      	beq.n	80028f8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <ADC_Enable+0x104>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4928      	ldr	r1, [pc, #160]	; (8002980 <ADC_Enable+0x108>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f7fd fc1a 	bl	8000118 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80028e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028ea:	e002      	b.n	80028f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f9      	bne.n	80028ec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e5b      	ldrb	r3, [r3, #25]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d033      	beq.n	8002968 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002900:	f7ff f8fc 	bl	8001afc <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002908:	e027      	b.n	800295a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0018      	movs	r0, r3
 8002910:	f7ff fa40 	bl	8001d94 <LL_ADC_IsEnabled>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d104      	bne.n	8002922 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fa15 	bl	8001d4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002922:	f7ff f8eb 	bl	8001afc <HAL_GetTick>
 8002926:	0002      	movs	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d914      	bls.n	800295a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	4013      	ands	r3, r2
 800293a:	2b01      	cmp	r3, #1
 800293c:	d00d      	beq.n	800295a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	2210      	movs	r2, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2201      	movs	r2, #1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e007      	b.n	800296a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	2b01      	cmp	r3, #1
 8002966:	d1d0      	bne.n	800290a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b004      	add	sp, #16
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	80000017 	.word	0x80000017
 8002978:	40012708 	.word	0x40012708
 800297c:	20000008 	.word	0x20000008
 8002980:	00030d40 	.word	0x00030d40

08002984 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff fa10 	bl	8001db6 <LL_ADC_IsDisableOngoing>
 8002996:	0003      	movs	r3, r0
 8002998:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0018      	movs	r0, r3
 80029a0:	f7ff f9f8 	bl	8001d94 <LL_ADC_IsEnabled>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d046      	beq.n	8002a36 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d143      	bne.n	8002a36 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2205      	movs	r2, #5
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10d      	bne.n	80029d8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff f9d5 	bl	8001d70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2203      	movs	r2, #3
 80029cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ce:	f7ff f895 	bl	8001afc <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029d6:	e028      	b.n	8002a2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	2210      	movs	r2, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2201      	movs	r2, #1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e021      	b.n	8002a38 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029f4:	f7ff f882 	bl	8001afc <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d913      	bls.n	8002a2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	2210      	movs	r2, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	2201      	movs	r2, #1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e006      	b.n	8002a38 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	d1de      	bne.n	80029f4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b004      	add	sp, #16
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <LL_ADC_SetCalibrationFactor>:
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	22b4      	movs	r2, #180	; 0xb4
 8002a4e:	589b      	ldr	r3, [r3, r2]
 8002a50:	227f      	movs	r2, #127	; 0x7f
 8002a52:	4393      	bics	r3, r2
 8002a54:	001a      	movs	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	21b4      	movs	r1, #180	; 0xb4
 8002a5e:	505a      	str	r2, [r3, r1]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <LL_ADC_GetCalibrationFactor>:
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	22b4      	movs	r2, #180	; 0xb4
 8002a74:	589b      	ldr	r3, [r3, r2]
 8002a76:	227f      	movs	r2, #127	; 0x7f
 8002a78:	4013      	ands	r3, r2
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <LL_ADC_Enable>:
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <LL_ADC_Enable+0x20>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	2201      	movs	r2, #1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	7fffffe8 	.word	0x7fffffe8

08002aa8 <LL_ADC_Disable>:
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <LL_ADC_Disable+0x20>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2202      	movs	r2, #2
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	7fffffe8 	.word	0x7fffffe8

08002acc <LL_ADC_IsEnabled>:
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_IsEnabled+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_IsEnabled+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <LL_ADC_StartCalibration>:
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <LL_ADC_StartCalibration+0x24>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0612      	lsls	r2, r2, #24
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	7fffffe8 	.word	0x7fffffe8

08002b18 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	0fdb      	lsrs	r3, r3, #31
 8002b26:	07da      	lsls	r2, r3, #31
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d101      	bne.n	8002b34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2254      	movs	r2, #84	; 0x54
 8002b54:	5c9b      	ldrb	r3, [r3, r2]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_ADCEx_Calibration_Start+0x1e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e0ba      	b.n	8002cd4 <HAL_ADCEx_Calibration_Start+0x194>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2254      	movs	r2, #84	; 0x54
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b66:	2317      	movs	r3, #23
 8002b68:	18fc      	adds	r4, r7, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff ff09 	bl	8002984 <ADC_Disable>
 8002b72:	0003      	movs	r3, r0
 8002b74:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff ffa6 	bl	8002acc <LL_ADC_IsEnabled>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d000      	beq.n	8002b86 <HAL_ADCEx_Calibration_Start+0x46>
 8002b84:	e099      	b.n	8002cba <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	4a54      	ldr	r2, [pc, #336]	; (8002cdc <HAL_ADCEx_Calibration_Start+0x19c>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2202      	movs	r2, #2
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	494d      	ldr	r1, [pc, #308]	; (8002ce4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e02d      	b.n	8002c14 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff ff97 	bl	8002af0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bc2:	e014      	b.n	8002bee <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4a46      	ldr	r2, [pc, #280]	; (8002ce8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d90d      	bls.n	8002bee <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	2212      	movs	r2, #18
 8002bd8:	4393      	bics	r3, r2
 8002bda:	2210      	movs	r2, #16
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2254      	movs	r2, #84	; 0x54
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e072      	b.n	8002cd4 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff ff90 	bl	8002b18 <LL_ADC_IsCalibrationOnGoing>
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d1e3      	bne.n	8002bc4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff ff31 	bl	8002a68 <LL_ADC_GetCalibrationFactor>
 8002c06:	0002      	movs	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d9ce      	bls.n	8002bb8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002c1a:	69f9      	ldr	r1, [r7, #28]
 8002c1c:	69b8      	ldr	r0, [r7, #24]
 8002c1e:	f7fd fa7b 	bl	8000118 <__udivsi3>
 8002c22:	0003      	movs	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff ff2a 	bl	8002a84 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff ff01 	bl	8002a40 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ff30 	bl	8002aa8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c48:	f7fe ff58 	bl	8001afc <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c50:	e01b      	b.n	8002c8a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c52:	f7fe ff53 	bl	8001afc <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d914      	bls.n	8002c8a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff ff31 	bl	8002acc <LL_ADC_IsEnabled>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d00d      	beq.n	8002c8a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	2210      	movs	r2, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2201      	movs	r2, #1
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e024      	b.n	8002cd4 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7ff ff1c 	bl	8002acc <LL_ADC_IsEnabled>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d1dc      	bne.n	8002c52 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	2203      	movs	r2, #3
 8002cae:	4393      	bics	r3, r2
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb8:	e005      	b.n	8002cc6 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2254      	movs	r2, #84	; 0x54
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002cce:	2317      	movs	r3, #23
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	781b      	ldrb	r3, [r3, #0]
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b009      	add	sp, #36	; 0x24
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	fffffefd 	.word	0xfffffefd
 8002ce0:	00008003 	.word	0x00008003
 8002ce4:	ffff7ffc 	.word	0xffff7ffc
 8002ce8:	0002f1ff 	.word	0x0002f1ff

08002cec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	0002      	movs	r2, r0
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3e:	d809      	bhi.n	8002d54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d40:	1dfb      	adds	r3, r7, #7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	231f      	movs	r3, #31
 8002d48:	401a      	ands	r2, r3
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_EnableIRQ+0x30>)
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4091      	lsls	r1, r2
 8002d50:	000a      	movs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	0002      	movs	r2, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	1dfb      	adds	r3, r7, #7
 8002d6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	1dfb      	adds	r3, r7, #7
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b7f      	cmp	r3, #127	; 0x7f
 8002d74:	d828      	bhi.n	8002dc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <__NVIC_SetPriority+0xd4>)
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	33c0      	adds	r3, #192	; 0xc0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	589b      	ldr	r3, [r3, r2]
 8002d86:	1dfa      	adds	r2, r7, #7
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	400a      	ands	r2, r1
 8002d90:	00d2      	lsls	r2, r2, #3
 8002d92:	21ff      	movs	r1, #255	; 0xff
 8002d94:	4091      	lsls	r1, r2
 8002d96:	000a      	movs	r2, r1
 8002d98:	43d2      	mvns	r2, r2
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	401a      	ands	r2, r3
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	0018      	movs	r0, r3
 8002dac:	2303      	movs	r3, #3
 8002dae:	4003      	ands	r3, r0
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db4:	481f      	ldr	r0, [pc, #124]	; (8002e34 <__NVIC_SetPriority+0xd4>)
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	33c0      	adds	r3, #192	; 0xc0
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dc6:	e031      	b.n	8002e2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <__NVIC_SetPriority+0xd8>)
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0019      	movs	r1, r3
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	3b08      	subs	r3, #8
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3306      	adds	r3, #6
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	3304      	adds	r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1dfa      	adds	r2, r7, #7
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	0011      	movs	r1, r2
 8002de8:	2203      	movs	r2, #3
 8002dea:	400a      	ands	r2, r1
 8002dec:	00d2      	lsls	r2, r2, #3
 8002dee:	21ff      	movs	r1, #255	; 0xff
 8002df0:	4091      	lsls	r1, r2
 8002df2:	000a      	movs	r2, r1
 8002df4:	43d2      	mvns	r2, r2
 8002df6:	401a      	ands	r2, r3
 8002df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	019b      	lsls	r3, r3, #6
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	401a      	ands	r2, r3
 8002e02:	1dfb      	adds	r3, r7, #7
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	0018      	movs	r0, r3
 8002e08:	2303      	movs	r3, #3
 8002e0a:	4003      	ands	r3, r0
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e10:	4809      	ldr	r0, [pc, #36]	; (8002e38 <__NVIC_SetPriority+0xd8>)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	001c      	movs	r4, r3
 8002e18:	230f      	movs	r3, #15
 8002e1a:	4023      	ands	r3, r4
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	430a      	orrs	r2, r1
 8002e22:	3306      	adds	r3, #6
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	18c3      	adds	r3, r0, r3
 8002e28:	3304      	adds	r3, #4
 8002e2a:	601a      	str	r2, [r3, #0]
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b003      	add	sp, #12
 8002e32:	bd90      	pop	{r4, r7, pc}
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1e5a      	subs	r2, r3, #1
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	045b      	lsls	r3, r3, #17
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d301      	bcc.n	8002e54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e50:	2301      	movs	r3, #1
 8002e52:	e010      	b.n	8002e76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <SysTick_Config+0x44>)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	425b      	negs	r3, r3
 8002e60:	2103      	movs	r1, #3
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff ff7c 	bl	8002d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x44>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x44>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	210f      	movs	r1, #15
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	1c02      	adds	r2, r0, #0
 8002e94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff ff5d 	bl	8002d60 <__NVIC_SetPriority>
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b25b      	sxtb	r3, r3
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff ff33 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ffaf 	bl	8002e3c <SysTick_Config>
 8002ede:	0003      	movs	r3, r0
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef6:	e14d      	b.n	8003194 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4091      	lsls	r1, r2
 8002f02:	000a      	movs	r2, r1
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d100      	bne.n	8002f10 <HAL_GPIO_Init+0x28>
 8002f0e:	e13e      	b.n	800318e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d005      	beq.n	8002f28 <HAL_GPIO_Init+0x40>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d130      	bne.n	8002f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	409a      	lsls	r2, r3
 8002f36:	0013      	movs	r3, r2
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5e:	2201      	movs	r2, #1
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
 8002f64:	0013      	movs	r3, r2
 8002f66:	43da      	mvns	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	2201      	movs	r2, #1
 8002f76:	401a      	ands	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	0013      	movs	r3, r2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d017      	beq.n	8002fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	0013      	movs	r3, r2
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d123      	bne.n	800301a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	58d3      	ldr	r3, [r2, r3]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	409a      	lsls	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2107      	movs	r1, #7
 8002ffe:	400b      	ands	r3, r1
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	409a      	lsls	r2, r3
 8003004:	0013      	movs	r3, r2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	6939      	ldr	r1, [r7, #16]
 8003018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	43da      	mvns	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2203      	movs	r2, #3
 8003038:	401a      	ands	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	23c0      	movs	r3, #192	; 0xc0
 8003054:	029b      	lsls	r3, r3, #10
 8003056:	4013      	ands	r3, r2
 8003058:	d100      	bne.n	800305c <HAL_GPIO_Init+0x174>
 800305a:	e098      	b.n	800318e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800305c:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3318      	adds	r3, #24
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	589b      	ldr	r3, [r3, r2]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	220f      	movs	r2, #15
 8003074:	409a      	lsls	r2, r3
 8003076:	0013      	movs	r3, r2
 8003078:	43da      	mvns	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	23a0      	movs	r3, #160	; 0xa0
 8003084:	05db      	lsls	r3, r3, #23
 8003086:	429a      	cmp	r2, r3
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x1d6>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <HAL_GPIO_Init+0x2c8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x1d2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a47      	ldr	r2, [pc, #284]	; (80031b4 <HAL_GPIO_Init+0x2cc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x1ce>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a46      	ldr	r2, [pc, #280]	; (80031b8 <HAL_GPIO_Init+0x2d0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x1ca>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a45      	ldr	r2, [pc, #276]	; (80031bc <HAL_GPIO_Init+0x2d4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x1c6>
 80030aa:	2304      	movs	r3, #4
 80030ac:	e008      	b.n	80030c0 <HAL_GPIO_Init+0x1d8>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_Init+0x1d8>
 80030b2:	2303      	movs	r3, #3
 80030b4:	e004      	b.n	80030c0 <HAL_GPIO_Init+0x1d8>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_Init+0x1d8>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_GPIO_Init+0x1d8>
 80030be:	2300      	movs	r3, #0
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	2103      	movs	r1, #3
 80030c4:	400a      	ands	r2, r1
 80030c6:	00d2      	lsls	r2, r2, #3
 80030c8:	4093      	lsls	r3, r2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80030d0:	4936      	ldr	r1, [pc, #216]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	3318      	adds	r3, #24
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43da      	mvns	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	035b      	lsls	r3, r3, #13
 80030f6:	4013      	ands	r3, r2
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43da      	mvns	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	039b      	lsls	r3, r3, #14
 8003120:	4013      	ands	r3, r2
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003132:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 8003134:	2384      	movs	r3, #132	; 0x84
 8003136:	58d3      	ldr	r3, [r2, r3]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43da      	mvns	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	029b      	lsls	r3, r3, #10
 800314c:	4013      	ands	r3, r2
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003158:	4914      	ldr	r1, [pc, #80]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 800315a:	2284      	movs	r2, #132	; 0x84
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003160:	4a12      	ldr	r2, [pc, #72]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	58d3      	ldr	r3, [r2, r3]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43da      	mvns	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	025b      	lsls	r3, r3, #9
 800317a:	4013      	ands	r3, r2
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003186:	4909      	ldr	r1, [pc, #36]	; (80031ac <HAL_GPIO_Init+0x2c4>)
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3301      	adds	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	40da      	lsrs	r2, r3
 800319c:	1e13      	subs	r3, r2, #0
 800319e:	d000      	beq.n	80031a2 <HAL_GPIO_Init+0x2ba>
 80031a0:	e6aa      	b.n	8002ef8 <HAL_GPIO_Init+0x10>
  }
}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b006      	add	sp, #24
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021800 	.word	0x40021800
 80031b0:	50000400 	.word	0x50000400
 80031b4:	50000800 	.word	0x50000800
 80031b8:	50000c00 	.word	0x50000c00
 80031bc:	50001000 	.word	0x50001000

080031c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	0008      	movs	r0, r1
 80031ca:	0011      	movs	r1, r2
 80031cc:	1cbb      	adds	r3, r7, #2
 80031ce:	1c02      	adds	r2, r0, #0
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	1c7b      	adds	r3, r7, #1
 80031d4:	1c0a      	adds	r2, r1, #0
 80031d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d8:	1c7b      	adds	r3, r7, #1
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031e0:	1cbb      	adds	r3, r7, #2
 80031e2:	881a      	ldrh	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ea:	1cbb      	adds	r3, r7, #2
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d11f      	bne.n	8003260 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	189b      	adds	r3, r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4912      	ldr	r1, [pc, #72]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800322e:	0018      	movs	r0, r3
 8003230:	f7fc ff72 	bl	8000118 <__udivsi3>
 8003234:	0003      	movs	r3, r0
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800323a:	e008      	b.n	800324e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3b01      	subs	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e001      	b.n	800324e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e009      	b.n	8003262 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	401a      	ands	r2, r3
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	429a      	cmp	r2, r3
 800325e:	d0ed      	beq.n	800323c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	40007000 	.word	0x40007000
 8003270:	fffff9ff 	.word	0xfffff9ff
 8003274:	20000008 	.word	0x20000008
 8003278:	000f4240 	.word	0x000f4240

0800327c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f000 fb50 	bl	8003930 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d100      	bne.n	800329c <HAL_RCC_OscConfig+0x20>
 800329a:	e07c      	b.n	8003396 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329c:	4bc3      	ldr	r3, [pc, #780]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2238      	movs	r2, #56	; 0x38
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a6:	4bc1      	ldr	r3, [pc, #772]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2203      	movs	r2, #3
 80032ac:	4013      	ands	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d102      	bne.n	80032bc <HAL_RCC_OscConfig+0x40>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d002      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4bba      	ldr	r3, [pc, #744]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	029b      	lsls	r3, r3, #10
 80032ca:	4013      	ands	r3, r2
 80032cc:	d062      	beq.n	8003394 <HAL_RCC_OscConfig+0x118>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d15e      	bne.n	8003394 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e32a      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	025b      	lsls	r3, r3, #9
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_OscConfig+0x7a>
 80032e6:	4bb1      	ldr	r3, [pc, #708]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4bb0      	ldr	r3, [pc, #704]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0249      	lsls	r1, r1, #9
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e020      	b.n	8003338 <HAL_RCC_OscConfig+0xbc>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	23a0      	movs	r3, #160	; 0xa0
 80032fc:	02db      	lsls	r3, r3, #11
 80032fe:	429a      	cmp	r2, r3
 8003300:	d10e      	bne.n	8003320 <HAL_RCC_OscConfig+0xa4>
 8003302:	4baa      	ldr	r3, [pc, #680]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4ba9      	ldr	r3, [pc, #676]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	02c9      	lsls	r1, r1, #11
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	4ba6      	ldr	r3, [pc, #664]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4ba5      	ldr	r3, [pc, #660]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0249      	lsls	r1, r1, #9
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xbc>
 8003320:	4ba2      	ldr	r3, [pc, #648]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4ba1      	ldr	r3, [pc, #644]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003326:	49a2      	ldr	r1, [pc, #648]	; (80035b0 <HAL_RCC_OscConfig+0x334>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	4b9f      	ldr	r3, [pc, #636]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b9e      	ldr	r3, [pc, #632]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003332:	49a0      	ldr	r1, [pc, #640]	; (80035b4 <HAL_RCC_OscConfig+0x338>)
 8003334:	400a      	ands	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d014      	beq.n	800336a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fbdc 	bl	8001afc <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334a:	f7fe fbd7 	bl	8001afc <HAL_GetTick>
 800334e:	0002      	movs	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b64      	cmp	r3, #100	; 0x64
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e2e9      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335c:	4b93      	ldr	r3, [pc, #588]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	029b      	lsls	r3, r3, #10
 8003364:	4013      	ands	r3, r2
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0xce>
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fe fbc7 	bl	8001afc <HAL_GetTick>
 800336e:	0003      	movs	r3, r0
 8003370:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fbc2 	bl	8001afc <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e2d4      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	029b      	lsls	r3, r3, #10
 800338e:	4013      	ands	r3, r2
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0xf8>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2202      	movs	r2, #2
 800339c:	4013      	ands	r3, r2
 800339e:	d100      	bne.n	80033a2 <HAL_RCC_OscConfig+0x126>
 80033a0:	e099      	b.n	80034d6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	4b82      	ldr	r3, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2238      	movs	r2, #56	; 0x38
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4013      	ands	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d102      	bne.n	80033c2 <HAL_RCC_OscConfig+0x146>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d002      	beq.n	80033c8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d135      	bne.n	8003434 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c8:	4b78      	ldr	r3, [pc, #480]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4013      	ands	r3, r2
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_OscConfig+0x164>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e2a7      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b72      	ldr	r3, [pc, #456]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <HAL_RCC_OscConfig+0x33c>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	4b6e      	ldr	r3, [pc, #440]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d112      	bne.n	8003422 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033fc:	4b6b      	ldr	r3, [pc, #428]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x340>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0adb      	lsrs	r3, r3, #11
 8003416:	2207      	movs	r2, #7
 8003418:	4013      	ands	r3, r2
 800341a:	4a69      	ldr	r2, [pc, #420]	; (80035c0 <HAL_RCC_OscConfig+0x344>)
 800341c:	40da      	lsrs	r2, r3
 800341e:	4b69      	ldr	r3, [pc, #420]	; (80035c4 <HAL_RCC_OscConfig+0x348>)
 8003420:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003422:	4b69      	ldr	r3, [pc, #420]	; (80035c8 <HAL_RCC_OscConfig+0x34c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0018      	movs	r0, r3
 8003428:	f7fe fb0c 	bl	8001a44 <HAL_InitTick>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d051      	beq.n	80034d4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e27d      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d030      	beq.n	800349e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800343c:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5e      	ldr	r2, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x340>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003450:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003456:	2180      	movs	r1, #128	; 0x80
 8003458:	0049      	lsls	r1, r1, #1
 800345a:	430a      	orrs	r2, r1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fb4d 	bl	8001afc <HAL_GetTick>
 8003462:	0003      	movs	r3, r0
 8003464:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe fb48 	bl	8001afc <HAL_GetTick>
 800346c:	0002      	movs	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e25a      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347a:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4013      	ands	r3, r2
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_RCC_OscConfig+0x33c>)
 800348c:	4013      	ands	r3, r2
 800348e:	0019      	movs	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	021a      	lsls	r2, r3, #8
 8003496:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	e01b      	b.n	80034d6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b42      	ldr	r3, [pc, #264]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80034a4:	4949      	ldr	r1, [pc, #292]	; (80035cc <HAL_RCC_OscConfig+0x350>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe fb27 	bl	8001afc <HAL_GetTick>
 80034ae:	0003      	movs	r3, r0
 80034b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe fb22 	bl	8001afc <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e234      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4013      	ands	r3, r2
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x238>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2208      	movs	r2, #8
 80034dc:	4013      	ands	r3, r2
 80034de:	d047      	beq.n	8003570 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2238      	movs	r2, #56	; 0x38
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b18      	cmp	r3, #24
 80034ea:	d10a      	bne.n	8003502 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 80034ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d03c      	beq.n	8003570 <HAL_RCC_OscConfig+0x2f4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d138      	bne.n	8003570 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e216      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d019      	beq.n	800353e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800350a:	4b28      	ldr	r3, [pc, #160]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 800350c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800350e:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003510:	2101      	movs	r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fe faf1 	bl	8001afc <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fe faec 	bl	8001afc <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1fe      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003532:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	d0f1      	beq.n	8003520 <HAL_RCC_OscConfig+0x2a4>
 800353c:	e018      	b.n	8003570 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003544:	2101      	movs	r1, #1
 8003546:	438a      	bics	r2, r1
 8003548:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe fad7 	bl	8001afc <HAL_GetTick>
 800354e:	0003      	movs	r3, r0
 8003550:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe fad2 	bl	8001afc <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1e4      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356a:	2202      	movs	r2, #2
 800356c:	4013      	ands	r3, r2
 800356e:	d1f1      	bne.n	8003554 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	4013      	ands	r3, r2
 8003578:	d100      	bne.n	800357c <HAL_RCC_OscConfig+0x300>
 800357a:	e0c7      	b.n	800370c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357c:	231f      	movs	r3, #31
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2238      	movs	r2, #56	; 0x38
 800358a:	4013      	ands	r3, r2
 800358c:	2b20      	cmp	r3, #32
 800358e:	d11f      	bne.n	80035d0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x330>)
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d100      	bne.n	800359c <HAL_RCC_OscConfig+0x320>
 800359a:	e0b7      	b.n	800370c <HAL_RCC_OscConfig+0x490>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d000      	beq.n	80035a6 <HAL_RCC_OscConfig+0x32a>
 80035a4:	e0b2      	b.n	800370c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e1c2      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40021000 	.word	0x40021000
 80035b0:	fffeffff 	.word	0xfffeffff
 80035b4:	fffbffff 	.word	0xfffbffff
 80035b8:	ffff80ff 	.word	0xffff80ff
 80035bc:	ffffc7ff 	.word	0xffffc7ff
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	20000008 	.word	0x20000008
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d0:	4bb5      	ldr	r3, [pc, #724]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80035d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	055b      	lsls	r3, r3, #21
 80035d8:	4013      	ands	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_OscConfig+0x364>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x366>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d011      	beq.n	800360a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	4bb0      	ldr	r3, [pc, #704]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80035e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ea:	4baf      	ldr	r3, [pc, #700]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	0549      	lsls	r1, r1, #21
 80035f0:	430a      	orrs	r2, r1
 80035f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80035f4:	4bac      	ldr	r3, [pc, #688]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80035f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	055b      	lsls	r3, r3, #21
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003602:	231f      	movs	r3, #31
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	4ba8      	ldr	r3, [pc, #672]	; (80038ac <HAL_RCC_OscConfig+0x630>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4013      	ands	r3, r2
 8003614:	d11a      	bne.n	800364c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003616:	4ba5      	ldr	r3, [pc, #660]	; (80038ac <HAL_RCC_OscConfig+0x630>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4ba4      	ldr	r3, [pc, #656]	; (80038ac <HAL_RCC_OscConfig+0x630>)
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0049      	lsls	r1, r1, #1
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003624:	f7fe fa6a 	bl	8001afc <HAL_GetTick>
 8003628:	0003      	movs	r3, r0
 800362a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe fa65 	bl	8001afc <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e177      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003640:	4b9a      	ldr	r3, [pc, #616]	; (80038ac <HAL_RCC_OscConfig+0x630>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4013      	ands	r3, r2
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x3e6>
 8003654:	4b94      	ldr	r3, [pc, #592]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003658:	4b93      	ldr	r3, [pc, #588]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800365a:	2101      	movs	r1, #1
 800365c:	430a      	orrs	r2, r1
 800365e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x420>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x408>
 800366a:	4b8f      	ldr	r3, [pc, #572]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800366c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800366e:	4b8e      	ldr	r3, [pc, #568]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003670:	2104      	movs	r1, #4
 8003672:	430a      	orrs	r2, r1
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c
 8003676:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800367a:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0x420>
 8003684:	4b88      	ldr	r3, [pc, #544]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003688:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003690:	4b85      	ldr	r3, [pc, #532]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003694:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003696:	2104      	movs	r1, #4
 8003698:	438a      	bics	r2, r1
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d014      	beq.n	80036ce <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fa2a 	bl	8001afc <HAL_GetTick>
 80036a8:	0003      	movs	r3, r0
 80036aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ac:	e009      	b.n	80036c2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fa25 	bl	8001afc <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_RCC_OscConfig+0x634>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e136      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c2:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	2202      	movs	r2, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x432>
 80036cc:	e013      	b.n	80036f6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fa15 	bl	8001afc <HAL_GetTick>
 80036d2:	0003      	movs	r3, r0
 80036d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d6:	e009      	b.n	80036ec <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe fa10 	bl	8001afc <HAL_GetTick>
 80036dc:	0002      	movs	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	4a73      	ldr	r2, [pc, #460]	; (80038b0 <HAL_RCC_OscConfig+0x634>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e121      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	2202      	movs	r2, #2
 80036f2:	4013      	ands	r3, r2
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036f6:	231f      	movs	r3, #31
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b69      	ldr	r3, [pc, #420]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003704:	4b68      	ldr	r3, [pc, #416]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003706:	496b      	ldr	r1, [pc, #428]	; (80038b4 <HAL_RCC_OscConfig+0x638>)
 8003708:	400a      	ands	r2, r1
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	4013      	ands	r3, r2
 8003714:	d039      	beq.n	800378a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01b      	beq.n	8003756 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800371e:	4b62      	ldr	r3, [pc, #392]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	03c9      	lsls	r1, r1, #15
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe f9e6 	bl	8001afc <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003736:	f7fe f9e1 	bl	8001afc <HAL_GetTick>
 800373a:	0002      	movs	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0f3      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003748:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	4013      	ands	r3, r2
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x4ba>
 8003754:	e019      	b.n	800378a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003756:	4b54      	ldr	r3, [pc, #336]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800375c:	4956      	ldr	r1, [pc, #344]	; (80038b8 <HAL_RCC_OscConfig+0x63c>)
 800375e:	400a      	ands	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fe f9cb 	bl	8001afc <HAL_GetTick>
 8003766:	0003      	movs	r3, r0
 8003768:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376c:	f7fe f9c6 	bl	8001afc <HAL_GetTick>
 8003770:	0002      	movs	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0d8      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	4013      	ands	r3, r2
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d100      	bne.n	8003794 <HAL_RCC_OscConfig+0x518>
 8003792:	e0cc      	b.n	800392e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003794:	4b44      	ldr	r3, [pc, #272]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2238      	movs	r2, #56	; 0x38
 800379a:	4013      	ands	r3, r2
 800379c:	2b10      	cmp	r3, #16
 800379e:	d100      	bne.n	80037a2 <HAL_RCC_OscConfig+0x526>
 80037a0:	e07b      	b.n	800389a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d156      	bne.n	8003858 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b3e      	ldr	r3, [pc, #248]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80037b0:	4942      	ldr	r1, [pc, #264]	; (80038bc <HAL_RCC_OscConfig+0x640>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fe f9a1 	bl	8001afc <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe f99c 	bl	8001afc <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0ae      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d2:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	049b      	lsls	r3, r3, #18
 80037da:	4013      	ands	r3, r2
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a37      	ldr	r2, [pc, #220]	; (80038c0 <HAL_RCC_OscConfig+0x644>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	431a      	orrs	r2, r3
 800380c:	4b26      	ldr	r3, [pc, #152]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800380e:	430a      	orrs	r2, r1
 8003810:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003818:	2180      	movs	r1, #128	; 0x80
 800381a:	0449      	lsls	r1, r1, #17
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	0549      	lsls	r1, r1, #21
 800382a:	430a      	orrs	r2, r1
 800382c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe f965 	bl	8001afc <HAL_GetTick>
 8003832:	0003      	movs	r3, r0
 8003834:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe f960 	bl	8001afc <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e072      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	049b      	lsls	r3, r3, #18
 8003852:	4013      	ands	r3, r2
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x5bc>
 8003856:	e06a      	b.n	800392e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800385e:	4917      	ldr	r1, [pc, #92]	; (80038bc <HAL_RCC_OscConfig+0x640>)
 8003860:	400a      	ands	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe f94a 	bl	8001afc <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe f945 	bl	8001afc <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e057      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	049b      	lsls	r3, r3, #18
 8003888:	4013      	ands	r3, r2
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_OscConfig+0x62c>)
 8003892:	490c      	ldr	r1, [pc, #48]	; (80038c4 <HAL_RCC_OscConfig+0x648>)
 8003894:	400a      	ands	r2, r1
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	e049      	b.n	800392e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d112      	bne.n	80038c8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e044      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40007000 	.word	0x40007000
 80038b0:	00001388 	.word	0x00001388
 80038b4:	efffffff 	.word	0xefffffff
 80038b8:	ffbfffff 	.word	0xffbfffff
 80038bc:	feffffff 	.word	0xfeffffff
 80038c0:	11c1808c 	.word	0x11c1808c
 80038c4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x6bc>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2203      	movs	r2, #3
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	429a      	cmp	r2, r3
 80038da:	d126      	bne.n	800392a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2270      	movs	r2, #112	; 0x70
 80038e0:	401a      	ands	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11f      	bne.n	800392a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	23fe      	movs	r3, #254	; 0xfe
 80038ee:	01db      	lsls	r3, r3, #7
 80038f0:	401a      	ands	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d116      	bne.n	800392a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	23f8      	movs	r3, #248	; 0xf8
 8003900:	039b      	lsls	r3, r3, #14
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d10e      	bne.n	800392a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	23e0      	movs	r3, #224	; 0xe0
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	401a      	ands	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	0f5b      	lsrs	r3, r3, #29
 8003920:	075a      	lsls	r2, r3, #29
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b008      	add	sp, #32
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0e9      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2207      	movs	r2, #7
 8003956:	4013      	ands	r3, r2
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d91e      	bls.n	800399c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2207      	movs	r2, #7
 8003964:	4393      	bics	r3, r2
 8003966:	0019      	movs	r1, r3
 8003968:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003970:	f7fe f8c4 	bl	8001afc <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003978:	e009      	b.n	800398e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397a:	f7fe f8bf 	bl	8001afc <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	4a6a      	ldr	r2, [pc, #424]	; (8003b30 <HAL_RCC_ClockConfig+0x1f4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0ca      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800398e:	4b67      	ldr	r3, [pc, #412]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2207      	movs	r2, #7
 8003994:	4013      	ands	r3, r2
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2202      	movs	r2, #2
 80039a2:	4013      	ands	r3, r2
 80039a4:	d015      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2204      	movs	r2, #4
 80039ac:	4013      	ands	r3, r2
 80039ae:	d006      	beq.n	80039be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039b0:	4b60      	ldr	r3, [pc, #384]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 80039b6:	21e0      	movs	r1, #224	; 0xe0
 80039b8:	01c9      	lsls	r1, r1, #7
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4a5d      	ldr	r2, [pc, #372]	; (8003b38 <HAL_RCC_ClockConfig+0x1fc>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d057      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	4013      	ands	r3, r2
 80039ee:	d12b      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e097      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fc:	4b4d      	ldr	r3, [pc, #308]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	049b      	lsls	r3, r3, #18
 8003a04:	4013      	ands	r3, r2
 8003a06:	d11f      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e08b      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a14:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d113      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e07f      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a2c:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e074      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2202      	movs	r2, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e06d      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a48:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	4393      	bics	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fe f84e 	bl	8001afc <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a64:	e009      	b.n	8003a7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a66:	f7fe f849 	bl	8001afc <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <HAL_RCC_ClockConfig+0x1f4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e054      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2e      	ldr	r3, [pc, #184]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2238      	movs	r2, #56	; 0x38
 8003a80:	401a      	ands	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1ec      	bne.n	8003a66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2207      	movs	r2, #7
 8003a92:	4013      	ands	r3, r2
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d21e      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aac:	f7fe f826 	bl	8001afc <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ab4:	e009      	b.n	8003aca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab6:	f7fe f821 	bl	8001afc <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_RCC_ClockConfig+0x1f4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e02c      	b.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2207      	movs	r2, #7
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1ee      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2204      	movs	r2, #4
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae2:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4a15      	ldr	r2, [pc, #84]	; (8003b3c <HAL_RCC_ClockConfig+0x200>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	0019      	movs	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003af6:	f000 f829 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003afa:	0001      	movs	r1, r0
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	220f      	movs	r2, #15
 8003b04:	401a      	ands	r2, r3
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCC_ClockConfig+0x204>)
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	58d3      	ldr	r3, [r2, r3]
 8003b0c:	221f      	movs	r2, #31
 8003b0e:	4013      	ands	r3, r2
 8003b10:	000a      	movs	r2, r1
 8003b12:	40da      	lsrs	r2, r3
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x208>)
 8003b16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_ClockConfig+0x20c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7fd ff91 	bl	8001a44 <HAL_InitTick>
 8003b22:	0003      	movs	r3, r0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40022000 	.word	0x40022000
 8003b30:	00001388 	.word	0x00001388
 8003b34:	40021000 	.word	0x40021000
 8003b38:	fffff0ff 	.word	0xfffff0ff
 8003b3c:	ffff8fff 	.word	0xffff8fff
 8003b40:	08004a94 	.word	0x08004a94
 8003b44:	20000008 	.word	0x20000008
 8003b48:	2000000c 	.word	0x2000000c

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b52:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2238      	movs	r2, #56	; 0x38
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d10f      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0adb      	lsrs	r3, r3, #11
 8003b62:	2207      	movs	r2, #7
 8003b64:	4013      	ands	r3, r2
 8003b66:	2201      	movs	r2, #1
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	0013      	movs	r3, r2
 8003b6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	4835      	ldr	r0, [pc, #212]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b72:	f7fc fad1 	bl	8000118 <__udivsi3>
 8003b76:	0003      	movs	r3, r0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e05d      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2238      	movs	r2, #56	; 0x38
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d102      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x100>)
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e054      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2238      	movs	r2, #56	; 0x38
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d138      	bne.n	8003c0c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	2207      	movs	r2, #7
 8003bac:	4013      	ands	r3, r2
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	4824      	ldr	r0, [pc, #144]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x100>)
 8003bbc:	f7fc faac 	bl	8000118 <__udivsi3>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	227f      	movs	r2, #127	; 0x7f
 8003bcc:	4013      	ands	r3, r2
 8003bce:	434b      	muls	r3, r1
 8003bd0:	617b      	str	r3, [r7, #20]
        break;
 8003bd2:	e00d      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	481c      	ldr	r0, [pc, #112]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bd8:	f7fc fa9e 	bl	8000118 <__udivsi3>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	0019      	movs	r1, r3
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	227f      	movs	r2, #127	; 0x7f
 8003be8:	4013      	ands	r3, r2
 8003bea:	434b      	muls	r3, r1
 8003bec:	617b      	str	r3, [r7, #20]
        break;
 8003bee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0f5b      	lsrs	r3, r3, #29
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	6978      	ldr	r0, [r7, #20]
 8003c02:	f7fc fa89 	bl	8000118 <__udivsi3>
 8003c06:	0003      	movs	r3, r0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	e015      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2238      	movs	r2, #56	; 0x38
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d103      	bne.n	8003c20 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2238      	movs	r2, #56	; 0x38
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b18      	cmp	r3, #24
 8003c2a:	d103      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c2c:	23fa      	movs	r3, #250	; 0xfa
 8003c2e:	01db      	lsls	r3, r3, #7
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e001      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c38:	693b      	ldr	r3, [r7, #16]
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b006      	add	sp, #24
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	40021000 	.word	0x40021000
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	007a1200 	.word	0x007a1200

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c58:	2313      	movs	r3, #19
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c60:	2312      	movs	r3, #18
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	4013      	ands	r3, r2
 8003c72:	d100      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003c74:	e0ad      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2011      	movs	r0, #17
 8003c78:	183b      	adds	r3, r7, r0
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	055b      	lsls	r3, r3, #21
 8003c86:	4013      	ands	r3, r2
 8003c88:	d110      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0549      	lsls	r1, r1, #21
 8003c94:	430a      	orrs	r2, r1
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c98:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	055b      	lsls	r3, r3, #21
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca6:	183b      	adds	r3, r7, r0
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cac:	4b3c      	ldr	r3, [pc, #240]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003cb2:	2180      	movs	r1, #128	; 0x80
 8003cb4:	0049      	lsls	r1, r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cba:	f7fd ff1f 	bl	8001afc <HAL_GetTick>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fd ff1a 	bl	8001afc <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d904      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003cd2:	2313      	movs	r3, #19
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
        break;
 8003cda:	e005      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cdc:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d0ed      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003ce8:	2313      	movs	r3, #19
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d15e      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cf6:	23c0      	movs	r3, #192	; 0xc0
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d014      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d0e:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d18:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	0249      	lsls	r1, r1, #9
 8003d22:	430a      	orrs	r2, r1
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d26:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d2c:	491e      	ldr	r1, [pc, #120]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d016      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fedc 	bl	8001afc <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d48:	e00c      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd fed7 	bl	8001afc <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d904      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003d5a:	2313      	movs	r3, #19
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	2203      	movs	r2, #3
 8003d60:	701a      	strb	r2, [r3, #0]
            break;
 8003d62:	e004      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2202      	movs	r2, #2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d0ed      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003d6e:	2313      	movs	r3, #19
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d78:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d8c:	e016      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d8e:	2312      	movs	r3, #18
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2213      	movs	r2, #19
 8003d94:	18ba      	adds	r2, r7, r2
 8003d96:	7812      	ldrb	r2, [r2, #0]
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e00f      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40007000 	.word	0x40007000
 8003da4:	fffffcff 	.word	0xfffffcff
 8003da8:	fffeffff 	.word	0xfffeffff
 8003dac:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	2312      	movs	r3, #18
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	2213      	movs	r2, #19
 8003db6:	18ba      	adds	r2, r7, r2
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dbc:	2311      	movs	r3, #17
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4bb6      	ldr	r3, [pc, #728]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dca:	4bb5      	ldr	r3, [pc, #724]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dcc:	49b5      	ldr	r1, [pc, #724]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ddc:	4bb0      	ldr	r3, [pc, #704]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	2203      	movs	r2, #3
 8003de2:	4393      	bics	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4bad      	ldr	r3, [pc, #692]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dec:	430a      	orrs	r2, r1
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfa:	4ba9      	ldr	r3, [pc, #676]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	220c      	movs	r2, #12
 8003e00:	4393      	bics	r3, r2
 8003e02:	0019      	movs	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	4ba5      	ldr	r3, [pc, #660]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2204      	movs	r2, #4
 8003e14:	4013      	ands	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e18:	4ba1      	ldr	r3, [pc, #644]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	2230      	movs	r2, #48	; 0x30
 8003e1e:	4393      	bics	r3, r2
 8003e20:	0019      	movs	r1, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	4b9e      	ldr	r3, [pc, #632]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2210      	movs	r2, #16
 8003e32:	4013      	ands	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e36:	4b9a      	ldr	r3, [pc, #616]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	4a9b      	ldr	r2, [pc, #620]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	0019      	movs	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	4b96      	ldr	r3, [pc, #600]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e46:	430a      	orrs	r2, r1
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	015b      	lsls	r3, r3, #5
 8003e52:	4013      	ands	r3, r2
 8003e54:	d009      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003e56:	4b92      	ldr	r3, [pc, #584]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	4a94      	ldr	r2, [pc, #592]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	4b8e      	ldr	r3, [pc, #568]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e66:	430a      	orrs	r2, r1
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4013      	ands	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e76:	4b8a      	ldr	r3, [pc, #552]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	4a8d      	ldr	r2, [pc, #564]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e84:	4b86      	ldr	r3, [pc, #536]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e86:	430a      	orrs	r2, r1
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4013      	ands	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e96:	4b82      	ldr	r3, [pc, #520]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	4a86      	ldr	r2, [pc, #536]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb4:	4b7a      	ldr	r3, [pc, #488]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	4a7f      	ldr	r2, [pc, #508]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	4b77      	ldr	r3, [pc, #476]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed2:	4b73      	ldr	r3, [pc, #460]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	4a79      	ldr	r2, [pc, #484]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	4b6f      	ldr	r3, [pc, #444]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d015      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ef2:	4b6b      	ldr	r3, [pc, #428]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	0899      	lsrs	r1, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efe:	4b68      	ldr	r3, [pc, #416]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f00:	430a      	orrs	r2, r1
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	05db      	lsls	r3, r3, #23
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f10:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	4b62      	ldr	r3, [pc, #392]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	0249      	lsls	r1, r1, #9
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	4013      	ands	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	4393      	bics	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f38:	4b59      	ldr	r3, [pc, #356]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	; 0x80
 8003f44:	039b      	lsls	r3, r3, #14
 8003f46:	4013      	ands	r3, r2
 8003f48:	d016      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f4a:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	4a5c      	ldr	r2, [pc, #368]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f58:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	03db      	lsls	r3, r3, #15
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f6a:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0449      	lsls	r1, r1, #17
 8003f74:	430a      	orrs	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	03db      	lsls	r3, r3, #15
 8003f80:	4013      	ands	r3, r2
 8003f82:	d016      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	4a4e      	ldr	r2, [pc, #312]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f94:	430a      	orrs	r2, r1
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	045b      	lsls	r3, r3, #17
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003fa4:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	0449      	lsls	r1, r1, #17
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d014      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003fbe:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d106      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	0249      	lsls	r1, r1, #9
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	019b      	lsls	r3, r3, #6
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d014      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004004:	430a      	orrs	r2, r1
 8004006:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b04      	cmp	r3, #4
 800400e:	d106      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	0249      	lsls	r1, r1, #9
 800401a:	430a      	orrs	r2, r1
 800401c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	045b      	lsls	r3, r3, #17
 8004026:	4013      	ands	r3, r2
 8004028:	d016      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800402a:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800403a:	430a      	orrs	r2, r1
 800403c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	019b      	lsls	r3, r3, #6
 8004046:	429a      	cmp	r2, r3
 8004048:	d106      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	0449      	lsls	r1, r1, #17
 8004054:	430a      	orrs	r2, r1
 8004056:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	049b      	lsls	r3, r3, #18
 8004060:	4013      	ands	r3, r2
 8004062:	d016      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004074:	430a      	orrs	r2, r1
 8004076:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	429a      	cmp	r2, r3
 8004082:	d106      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	0449      	lsls	r1, r1, #17
 800408e:	430a      	orrs	r2, r1
 8004090:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004092:	2312      	movs	r3, #18
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	781b      	ldrb	r3, [r3, #0]
}
 8004098:	0018      	movs	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	b006      	add	sp, #24
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	efffffff 	.word	0xefffffff
 80040a8:	fffff3ff 	.word	0xfffff3ff
 80040ac:	fffffcff 	.word	0xfffffcff
 80040b0:	fff3ffff 	.word	0xfff3ffff
 80040b4:	ffcfffff 	.word	0xffcfffff
 80040b8:	ffffcfff 	.word	0xffffcfff
 80040bc:	ffff3fff 	.word	0xffff3fff
 80040c0:	ffbfffff 	.word	0xffbfffff
 80040c4:	feffffff 	.word	0xfeffffff

080040c8 <__errno>:
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <__errno+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	4770      	bx	lr
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	20000014 	.word	0x20000014

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	2600      	movs	r6, #0
 80040d8:	4d0c      	ldr	r5, [pc, #48]	; (800410c <__libc_init_array+0x38>)
 80040da:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	2600      	movs	r6, #0
 80040e6:	f000 fc9f 	bl	8004a28 <_init>
 80040ea:	4d0a      	ldr	r5, [pc, #40]	; (8004114 <__libc_init_array+0x40>)
 80040ec:	4c0a      	ldr	r4, [pc, #40]	; (8004118 <__libc_init_array+0x44>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	00b3      	lsls	r3, r6, #2
 80040fa:	58eb      	ldr	r3, [r5, r3]
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	00b3      	lsls	r3, r6, #2
 8004104:	58eb      	ldr	r3, [r5, r3]
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08004b08 	.word	0x08004b08
 8004110:	08004b08 	.word	0x08004b08
 8004114:	08004b08 	.word	0x08004b08
 8004118:	08004b0c 	.word	0x08004b0c

0800411c <memset>:
 800411c:	0003      	movs	r3, r0
 800411e:	1882      	adds	r2, r0, r2
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	7019      	strb	r1, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <sniprintf>:
 800412c:	b40c      	push	{r2, r3}
 800412e:	b530      	push	{r4, r5, lr}
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <sniprintf+0x64>)
 8004132:	000c      	movs	r4, r1
 8004134:	681d      	ldr	r5, [r3, #0]
 8004136:	b09d      	sub	sp, #116	; 0x74
 8004138:	2900      	cmp	r1, #0
 800413a:	da08      	bge.n	800414e <sniprintf+0x22>
 800413c:	238b      	movs	r3, #139	; 0x8b
 800413e:	2001      	movs	r0, #1
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	4240      	negs	r0, r0
 8004144:	b01d      	add	sp, #116	; 0x74
 8004146:	bc30      	pop	{r4, r5}
 8004148:	bc08      	pop	{r3}
 800414a:	b002      	add	sp, #8
 800414c:	4718      	bx	r3
 800414e:	2382      	movs	r3, #130	; 0x82
 8004150:	466a      	mov	r2, sp
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	8293      	strh	r3, [r2, #20]
 8004156:	2300      	movs	r3, #0
 8004158:	9002      	str	r0, [sp, #8]
 800415a:	9006      	str	r0, [sp, #24]
 800415c:	4299      	cmp	r1, r3
 800415e:	d000      	beq.n	8004162 <sniprintf+0x36>
 8004160:	1e4b      	subs	r3, r1, #1
 8004162:	9304      	str	r3, [sp, #16]
 8004164:	9307      	str	r3, [sp, #28]
 8004166:	2301      	movs	r3, #1
 8004168:	466a      	mov	r2, sp
 800416a:	425b      	negs	r3, r3
 800416c:	82d3      	strh	r3, [r2, #22]
 800416e:	0028      	movs	r0, r5
 8004170:	ab21      	add	r3, sp, #132	; 0x84
 8004172:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004174:	a902      	add	r1, sp, #8
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	f000 f86e 	bl	8004258 <_svfiprintf_r>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	da01      	bge.n	8004184 <sniprintf+0x58>
 8004180:	238b      	movs	r3, #139	; 0x8b
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	2c00      	cmp	r4, #0
 8004186:	d0dd      	beq.n	8004144 <sniprintf+0x18>
 8004188:	2300      	movs	r3, #0
 800418a:	9a02      	ldr	r2, [sp, #8]
 800418c:	7013      	strb	r3, [r2, #0]
 800418e:	e7d9      	b.n	8004144 <sniprintf+0x18>
 8004190:	20000014 	.word	0x20000014

08004194 <__ssputs_r>:
 8004194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004196:	688e      	ldr	r6, [r1, #8]
 8004198:	b085      	sub	sp, #20
 800419a:	0007      	movs	r7, r0
 800419c:	000c      	movs	r4, r1
 800419e:	9203      	str	r2, [sp, #12]
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	429e      	cmp	r6, r3
 80041a4:	d83c      	bhi.n	8004220 <__ssputs_r+0x8c>
 80041a6:	2390      	movs	r3, #144	; 0x90
 80041a8:	898a      	ldrh	r2, [r1, #12]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	421a      	tst	r2, r3
 80041ae:	d034      	beq.n	800421a <__ssputs_r+0x86>
 80041b0:	6909      	ldr	r1, [r1, #16]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	6960      	ldr	r0, [r4, #20]
 80041b6:	1a5b      	subs	r3, r3, r1
 80041b8:	9302      	str	r3, [sp, #8]
 80041ba:	2303      	movs	r3, #3
 80041bc:	4343      	muls	r3, r0
 80041be:	0fdd      	lsrs	r5, r3, #31
 80041c0:	18ed      	adds	r5, r5, r3
 80041c2:	9b01      	ldr	r3, [sp, #4]
 80041c4:	9802      	ldr	r0, [sp, #8]
 80041c6:	3301      	adds	r3, #1
 80041c8:	181b      	adds	r3, r3, r0
 80041ca:	106d      	asrs	r5, r5, #1
 80041cc:	42ab      	cmp	r3, r5
 80041ce:	d900      	bls.n	80041d2 <__ssputs_r+0x3e>
 80041d0:	001d      	movs	r5, r3
 80041d2:	0553      	lsls	r3, r2, #21
 80041d4:	d532      	bpl.n	800423c <__ssputs_r+0xa8>
 80041d6:	0029      	movs	r1, r5
 80041d8:	0038      	movs	r0, r7
 80041da:	f000 fb53 	bl	8004884 <_malloc_r>
 80041de:	1e06      	subs	r6, r0, #0
 80041e0:	d109      	bne.n	80041f6 <__ssputs_r+0x62>
 80041e2:	230c      	movs	r3, #12
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	2340      	movs	r3, #64	; 0x40
 80041e8:	2001      	movs	r0, #1
 80041ea:	89a2      	ldrh	r2, [r4, #12]
 80041ec:	4240      	negs	r0, r0
 80041ee:	4313      	orrs	r3, r2
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	b005      	add	sp, #20
 80041f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f6:	9a02      	ldr	r2, [sp, #8]
 80041f8:	6921      	ldr	r1, [r4, #16]
 80041fa:	f000 faba 	bl	8004772 <memcpy>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <__ssputs_r+0xc0>)
 8004202:	401a      	ands	r2, r3
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	4313      	orrs	r3, r2
 8004208:	81a3      	strh	r3, [r4, #12]
 800420a:	9b02      	ldr	r3, [sp, #8]
 800420c:	6126      	str	r6, [r4, #16]
 800420e:	18f6      	adds	r6, r6, r3
 8004210:	6026      	str	r6, [r4, #0]
 8004212:	6165      	str	r5, [r4, #20]
 8004214:	9e01      	ldr	r6, [sp, #4]
 8004216:	1aed      	subs	r5, r5, r3
 8004218:	60a5      	str	r5, [r4, #8]
 800421a:	9b01      	ldr	r3, [sp, #4]
 800421c:	429e      	cmp	r6, r3
 800421e:	d900      	bls.n	8004222 <__ssputs_r+0x8e>
 8004220:	9e01      	ldr	r6, [sp, #4]
 8004222:	0032      	movs	r2, r6
 8004224:	9903      	ldr	r1, [sp, #12]
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	f000 faac 	bl	8004784 <memmove>
 800422c:	68a3      	ldr	r3, [r4, #8]
 800422e:	2000      	movs	r0, #0
 8004230:	1b9b      	subs	r3, r3, r6
 8004232:	60a3      	str	r3, [r4, #8]
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	199e      	adds	r6, r3, r6
 8004238:	6026      	str	r6, [r4, #0]
 800423a:	e7da      	b.n	80041f2 <__ssputs_r+0x5e>
 800423c:	002a      	movs	r2, r5
 800423e:	0038      	movs	r0, r7
 8004240:	f000 fb96 	bl	8004970 <_realloc_r>
 8004244:	1e06      	subs	r6, r0, #0
 8004246:	d1e0      	bne.n	800420a <__ssputs_r+0x76>
 8004248:	0038      	movs	r0, r7
 800424a:	6921      	ldr	r1, [r4, #16]
 800424c:	f000 faae 	bl	80047ac <_free_r>
 8004250:	e7c7      	b.n	80041e2 <__ssputs_r+0x4e>
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	fffffb7f 	.word	0xfffffb7f

08004258 <_svfiprintf_r>:
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b0a1      	sub	sp, #132	; 0x84
 800425c:	9003      	str	r0, [sp, #12]
 800425e:	001d      	movs	r5, r3
 8004260:	898b      	ldrh	r3, [r1, #12]
 8004262:	000f      	movs	r7, r1
 8004264:	0016      	movs	r6, r2
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	d511      	bpl.n	800428e <_svfiprintf_r+0x36>
 800426a:	690b      	ldr	r3, [r1, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10e      	bne.n	800428e <_svfiprintf_r+0x36>
 8004270:	2140      	movs	r1, #64	; 0x40
 8004272:	f000 fb07 	bl	8004884 <_malloc_r>
 8004276:	6038      	str	r0, [r7, #0]
 8004278:	6138      	str	r0, [r7, #16]
 800427a:	2800      	cmp	r0, #0
 800427c:	d105      	bne.n	800428a <_svfiprintf_r+0x32>
 800427e:	230c      	movs	r3, #12
 8004280:	9a03      	ldr	r2, [sp, #12]
 8004282:	3801      	subs	r0, #1
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	b021      	add	sp, #132	; 0x84
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	ac08      	add	r4, sp, #32
 8004292:	6163      	str	r3, [r4, #20]
 8004294:	3320      	adds	r3, #32
 8004296:	7663      	strb	r3, [r4, #25]
 8004298:	3310      	adds	r3, #16
 800429a:	76a3      	strb	r3, [r4, #26]
 800429c:	9507      	str	r5, [sp, #28]
 800429e:	0035      	movs	r5, r6
 80042a0:	782b      	ldrb	r3, [r5, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <_svfiprintf_r+0x52>
 80042a6:	2b25      	cmp	r3, #37	; 0x25
 80042a8:	d147      	bne.n	800433a <_svfiprintf_r+0xe2>
 80042aa:	1bab      	subs	r3, r5, r6
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	42b5      	cmp	r5, r6
 80042b0:	d00c      	beq.n	80042cc <_svfiprintf_r+0x74>
 80042b2:	0032      	movs	r2, r6
 80042b4:	0039      	movs	r1, r7
 80042b6:	9803      	ldr	r0, [sp, #12]
 80042b8:	f7ff ff6c 	bl	8004194 <__ssputs_r>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d100      	bne.n	80042c2 <_svfiprintf_r+0x6a>
 80042c0:	e0ae      	b.n	8004420 <_svfiprintf_r+0x1c8>
 80042c2:	6962      	ldr	r2, [r4, #20]
 80042c4:	9b05      	ldr	r3, [sp, #20]
 80042c6:	4694      	mov	ip, r2
 80042c8:	4463      	add	r3, ip
 80042ca:	6163      	str	r3, [r4, #20]
 80042cc:	782b      	ldrb	r3, [r5, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d100      	bne.n	80042d4 <_svfiprintf_r+0x7c>
 80042d2:	e0a5      	b.n	8004420 <_svfiprintf_r+0x1c8>
 80042d4:	2201      	movs	r2, #1
 80042d6:	2300      	movs	r3, #0
 80042d8:	4252      	negs	r2, r2
 80042da:	6062      	str	r2, [r4, #4]
 80042dc:	a904      	add	r1, sp, #16
 80042de:	3254      	adds	r2, #84	; 0x54
 80042e0:	1852      	adds	r2, r2, r1
 80042e2:	1c6e      	adds	r6, r5, #1
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	60e3      	str	r3, [r4, #12]
 80042e8:	60a3      	str	r3, [r4, #8]
 80042ea:	7013      	strb	r3, [r2, #0]
 80042ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80042ee:	2205      	movs	r2, #5
 80042f0:	7831      	ldrb	r1, [r6, #0]
 80042f2:	4854      	ldr	r0, [pc, #336]	; (8004444 <_svfiprintf_r+0x1ec>)
 80042f4:	f000 fa32 	bl	800475c <memchr>
 80042f8:	1c75      	adds	r5, r6, #1
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d11f      	bne.n	800433e <_svfiprintf_r+0xe6>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	06d3      	lsls	r3, r2, #27
 8004302:	d504      	bpl.n	800430e <_svfiprintf_r+0xb6>
 8004304:	2353      	movs	r3, #83	; 0x53
 8004306:	a904      	add	r1, sp, #16
 8004308:	185b      	adds	r3, r3, r1
 800430a:	2120      	movs	r1, #32
 800430c:	7019      	strb	r1, [r3, #0]
 800430e:	0713      	lsls	r3, r2, #28
 8004310:	d504      	bpl.n	800431c <_svfiprintf_r+0xc4>
 8004312:	2353      	movs	r3, #83	; 0x53
 8004314:	a904      	add	r1, sp, #16
 8004316:	185b      	adds	r3, r3, r1
 8004318:	212b      	movs	r1, #43	; 0x2b
 800431a:	7019      	strb	r1, [r3, #0]
 800431c:	7833      	ldrb	r3, [r6, #0]
 800431e:	2b2a      	cmp	r3, #42	; 0x2a
 8004320:	d016      	beq.n	8004350 <_svfiprintf_r+0xf8>
 8004322:	0035      	movs	r5, r6
 8004324:	2100      	movs	r1, #0
 8004326:	200a      	movs	r0, #10
 8004328:	68e3      	ldr	r3, [r4, #12]
 800432a:	782a      	ldrb	r2, [r5, #0]
 800432c:	1c6e      	adds	r6, r5, #1
 800432e:	3a30      	subs	r2, #48	; 0x30
 8004330:	2a09      	cmp	r2, #9
 8004332:	d94e      	bls.n	80043d2 <_svfiprintf_r+0x17a>
 8004334:	2900      	cmp	r1, #0
 8004336:	d111      	bne.n	800435c <_svfiprintf_r+0x104>
 8004338:	e017      	b.n	800436a <_svfiprintf_r+0x112>
 800433a:	3501      	adds	r5, #1
 800433c:	e7b0      	b.n	80042a0 <_svfiprintf_r+0x48>
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <_svfiprintf_r+0x1ec>)
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	1ac0      	subs	r0, r0, r3
 8004344:	2301      	movs	r3, #1
 8004346:	4083      	lsls	r3, r0
 8004348:	4313      	orrs	r3, r2
 800434a:	002e      	movs	r6, r5
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	e7ce      	b.n	80042ee <_svfiprintf_r+0x96>
 8004350:	9b07      	ldr	r3, [sp, #28]
 8004352:	1d19      	adds	r1, r3, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	9107      	str	r1, [sp, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	db01      	blt.n	8004360 <_svfiprintf_r+0x108>
 800435c:	930b      	str	r3, [sp, #44]	; 0x2c
 800435e:	e004      	b.n	800436a <_svfiprintf_r+0x112>
 8004360:	425b      	negs	r3, r3
 8004362:	60e3      	str	r3, [r4, #12]
 8004364:	2302      	movs	r3, #2
 8004366:	4313      	orrs	r3, r2
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	782b      	ldrb	r3, [r5, #0]
 800436c:	2b2e      	cmp	r3, #46	; 0x2e
 800436e:	d10a      	bne.n	8004386 <_svfiprintf_r+0x12e>
 8004370:	786b      	ldrb	r3, [r5, #1]
 8004372:	2b2a      	cmp	r3, #42	; 0x2a
 8004374:	d135      	bne.n	80043e2 <_svfiprintf_r+0x18a>
 8004376:	9b07      	ldr	r3, [sp, #28]
 8004378:	3502      	adds	r5, #2
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	9207      	str	r2, [sp, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db2b      	blt.n	80043dc <_svfiprintf_r+0x184>
 8004384:	9309      	str	r3, [sp, #36]	; 0x24
 8004386:	4e30      	ldr	r6, [pc, #192]	; (8004448 <_svfiprintf_r+0x1f0>)
 8004388:	2203      	movs	r2, #3
 800438a:	0030      	movs	r0, r6
 800438c:	7829      	ldrb	r1, [r5, #0]
 800438e:	f000 f9e5 	bl	800475c <memchr>
 8004392:	2800      	cmp	r0, #0
 8004394:	d006      	beq.n	80043a4 <_svfiprintf_r+0x14c>
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	1b80      	subs	r0, r0, r6
 800439a:	4083      	lsls	r3, r0
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	3501      	adds	r5, #1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	6023      	str	r3, [r4, #0]
 80043a4:	7829      	ldrb	r1, [r5, #0]
 80043a6:	2206      	movs	r2, #6
 80043a8:	4828      	ldr	r0, [pc, #160]	; (800444c <_svfiprintf_r+0x1f4>)
 80043aa:	1c6e      	adds	r6, r5, #1
 80043ac:	7621      	strb	r1, [r4, #24]
 80043ae:	f000 f9d5 	bl	800475c <memchr>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d03c      	beq.n	8004430 <_svfiprintf_r+0x1d8>
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <_svfiprintf_r+0x1f8>)
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d125      	bne.n	8004408 <_svfiprintf_r+0x1b0>
 80043bc:	2207      	movs	r2, #7
 80043be:	9b07      	ldr	r3, [sp, #28]
 80043c0:	3307      	adds	r3, #7
 80043c2:	4393      	bics	r3, r2
 80043c4:	3308      	adds	r3, #8
 80043c6:	9307      	str	r3, [sp, #28]
 80043c8:	6963      	ldr	r3, [r4, #20]
 80043ca:	9a04      	ldr	r2, [sp, #16]
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	6163      	str	r3, [r4, #20]
 80043d0:	e765      	b.n	800429e <_svfiprintf_r+0x46>
 80043d2:	4343      	muls	r3, r0
 80043d4:	0035      	movs	r5, r6
 80043d6:	2101      	movs	r1, #1
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	e7a6      	b.n	800432a <_svfiprintf_r+0xd2>
 80043dc:	2301      	movs	r3, #1
 80043de:	425b      	negs	r3, r3
 80043e0:	e7d0      	b.n	8004384 <_svfiprintf_r+0x12c>
 80043e2:	2300      	movs	r3, #0
 80043e4:	200a      	movs	r0, #10
 80043e6:	001a      	movs	r2, r3
 80043e8:	3501      	adds	r5, #1
 80043ea:	6063      	str	r3, [r4, #4]
 80043ec:	7829      	ldrb	r1, [r5, #0]
 80043ee:	1c6e      	adds	r6, r5, #1
 80043f0:	3930      	subs	r1, #48	; 0x30
 80043f2:	2909      	cmp	r1, #9
 80043f4:	d903      	bls.n	80043fe <_svfiprintf_r+0x1a6>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0c5      	beq.n	8004386 <_svfiprintf_r+0x12e>
 80043fa:	9209      	str	r2, [sp, #36]	; 0x24
 80043fc:	e7c3      	b.n	8004386 <_svfiprintf_r+0x12e>
 80043fe:	4342      	muls	r2, r0
 8004400:	0035      	movs	r5, r6
 8004402:	2301      	movs	r3, #1
 8004404:	1852      	adds	r2, r2, r1
 8004406:	e7f1      	b.n	80043ec <_svfiprintf_r+0x194>
 8004408:	ab07      	add	r3, sp, #28
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	003a      	movs	r2, r7
 800440e:	0021      	movs	r1, r4
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <_svfiprintf_r+0x1fc>)
 8004412:	9803      	ldr	r0, [sp, #12]
 8004414:	e000      	b.n	8004418 <_svfiprintf_r+0x1c0>
 8004416:	bf00      	nop
 8004418:	9004      	str	r0, [sp, #16]
 800441a:	9b04      	ldr	r3, [sp, #16]
 800441c:	3301      	adds	r3, #1
 800441e:	d1d3      	bne.n	80043c8 <_svfiprintf_r+0x170>
 8004420:	89bb      	ldrh	r3, [r7, #12]
 8004422:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004424:	065b      	lsls	r3, r3, #25
 8004426:	d400      	bmi.n	800442a <_svfiprintf_r+0x1d2>
 8004428:	e72d      	b.n	8004286 <_svfiprintf_r+0x2e>
 800442a:	2001      	movs	r0, #1
 800442c:	4240      	negs	r0, r0
 800442e:	e72a      	b.n	8004286 <_svfiprintf_r+0x2e>
 8004430:	ab07      	add	r3, sp, #28
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	003a      	movs	r2, r7
 8004436:	0021      	movs	r1, r4
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <_svfiprintf_r+0x1fc>)
 800443a:	9803      	ldr	r0, [sp, #12]
 800443c:	f000 f87c 	bl	8004538 <_printf_i>
 8004440:	e7ea      	b.n	8004418 <_svfiprintf_r+0x1c0>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	08004ad4 	.word	0x08004ad4
 8004448:	08004ada 	.word	0x08004ada
 800444c:	08004ade 	.word	0x08004ade
 8004450:	00000000 	.word	0x00000000
 8004454:	08004195 	.word	0x08004195

08004458 <_printf_common>:
 8004458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800445a:	0015      	movs	r5, r2
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	688a      	ldr	r2, [r1, #8]
 8004460:	690b      	ldr	r3, [r1, #16]
 8004462:	000c      	movs	r4, r1
 8004464:	9000      	str	r0, [sp, #0]
 8004466:	4293      	cmp	r3, r2
 8004468:	da00      	bge.n	800446c <_printf_common+0x14>
 800446a:	0013      	movs	r3, r2
 800446c:	0022      	movs	r2, r4
 800446e:	602b      	str	r3, [r5, #0]
 8004470:	3243      	adds	r2, #67	; 0x43
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	2a00      	cmp	r2, #0
 8004476:	d001      	beq.n	800447c <_printf_common+0x24>
 8004478:	3301      	adds	r3, #1
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	069b      	lsls	r3, r3, #26
 8004480:	d502      	bpl.n	8004488 <_printf_common+0x30>
 8004482:	682b      	ldr	r3, [r5, #0]
 8004484:	3302      	adds	r3, #2
 8004486:	602b      	str	r3, [r5, #0]
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	2306      	movs	r3, #6
 800448c:	0017      	movs	r7, r2
 800448e:	401f      	ands	r7, r3
 8004490:	421a      	tst	r2, r3
 8004492:	d027      	beq.n	80044e4 <_printf_common+0x8c>
 8004494:	0023      	movs	r3, r4
 8004496:	3343      	adds	r3, #67	; 0x43
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	1e5a      	subs	r2, r3, #1
 800449c:	4193      	sbcs	r3, r2
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	0692      	lsls	r2, r2, #26
 80044a2:	d430      	bmi.n	8004506 <_printf_common+0xae>
 80044a4:	0022      	movs	r2, r4
 80044a6:	9901      	ldr	r1, [sp, #4]
 80044a8:	9800      	ldr	r0, [sp, #0]
 80044aa:	9e08      	ldr	r6, [sp, #32]
 80044ac:	3243      	adds	r2, #67	; 0x43
 80044ae:	47b0      	blx	r6
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d025      	beq.n	8004500 <_printf_common+0xa8>
 80044b4:	2306      	movs	r3, #6
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	682a      	ldr	r2, [r5, #0]
 80044ba:	68e1      	ldr	r1, [r4, #12]
 80044bc:	2500      	movs	r5, #0
 80044be:	4003      	ands	r3, r0
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d103      	bne.n	80044cc <_printf_common+0x74>
 80044c4:	1a8d      	subs	r5, r1, r2
 80044c6:	43eb      	mvns	r3, r5
 80044c8:	17db      	asrs	r3, r3, #31
 80044ca:	401d      	ands	r5, r3
 80044cc:	68a3      	ldr	r3, [r4, #8]
 80044ce:	6922      	ldr	r2, [r4, #16]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	dd01      	ble.n	80044d8 <_printf_common+0x80>
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	18ed      	adds	r5, r5, r3
 80044d8:	2700      	movs	r7, #0
 80044da:	42bd      	cmp	r5, r7
 80044dc:	d120      	bne.n	8004520 <_printf_common+0xc8>
 80044de:	2000      	movs	r0, #0
 80044e0:	e010      	b.n	8004504 <_printf_common+0xac>
 80044e2:	3701      	adds	r7, #1
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	682a      	ldr	r2, [r5, #0]
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	42bb      	cmp	r3, r7
 80044ec:	ddd2      	ble.n	8004494 <_printf_common+0x3c>
 80044ee:	0022      	movs	r2, r4
 80044f0:	2301      	movs	r3, #1
 80044f2:	9901      	ldr	r1, [sp, #4]
 80044f4:	9800      	ldr	r0, [sp, #0]
 80044f6:	9e08      	ldr	r6, [sp, #32]
 80044f8:	3219      	adds	r2, #25
 80044fa:	47b0      	blx	r6
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d1f0      	bne.n	80044e2 <_printf_common+0x8a>
 8004500:	2001      	movs	r0, #1
 8004502:	4240      	negs	r0, r0
 8004504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004506:	2030      	movs	r0, #48	; 0x30
 8004508:	18e1      	adds	r1, r4, r3
 800450a:	3143      	adds	r1, #67	; 0x43
 800450c:	7008      	strb	r0, [r1, #0]
 800450e:	0021      	movs	r1, r4
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	3145      	adds	r1, #69	; 0x45
 8004514:	7809      	ldrb	r1, [r1, #0]
 8004516:	18a2      	adds	r2, r4, r2
 8004518:	3243      	adds	r2, #67	; 0x43
 800451a:	3302      	adds	r3, #2
 800451c:	7011      	strb	r1, [r2, #0]
 800451e:	e7c1      	b.n	80044a4 <_printf_common+0x4c>
 8004520:	0022      	movs	r2, r4
 8004522:	2301      	movs	r3, #1
 8004524:	9901      	ldr	r1, [sp, #4]
 8004526:	9800      	ldr	r0, [sp, #0]
 8004528:	9e08      	ldr	r6, [sp, #32]
 800452a:	321a      	adds	r2, #26
 800452c:	47b0      	blx	r6
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d0e6      	beq.n	8004500 <_printf_common+0xa8>
 8004532:	3701      	adds	r7, #1
 8004534:	e7d1      	b.n	80044da <_printf_common+0x82>
	...

08004538 <_printf_i>:
 8004538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453a:	b08b      	sub	sp, #44	; 0x2c
 800453c:	9206      	str	r2, [sp, #24]
 800453e:	000a      	movs	r2, r1
 8004540:	3243      	adds	r2, #67	; 0x43
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	9005      	str	r0, [sp, #20]
 8004546:	9204      	str	r2, [sp, #16]
 8004548:	7e0a      	ldrb	r2, [r1, #24]
 800454a:	000c      	movs	r4, r1
 800454c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800454e:	2a78      	cmp	r2, #120	; 0x78
 8004550:	d807      	bhi.n	8004562 <_printf_i+0x2a>
 8004552:	2a62      	cmp	r2, #98	; 0x62
 8004554:	d809      	bhi.n	800456a <_printf_i+0x32>
 8004556:	2a00      	cmp	r2, #0
 8004558:	d100      	bne.n	800455c <_printf_i+0x24>
 800455a:	e0c1      	b.n	80046e0 <_printf_i+0x1a8>
 800455c:	2a58      	cmp	r2, #88	; 0x58
 800455e:	d100      	bne.n	8004562 <_printf_i+0x2a>
 8004560:	e08c      	b.n	800467c <_printf_i+0x144>
 8004562:	0026      	movs	r6, r4
 8004564:	3642      	adds	r6, #66	; 0x42
 8004566:	7032      	strb	r2, [r6, #0]
 8004568:	e022      	b.n	80045b0 <_printf_i+0x78>
 800456a:	0010      	movs	r0, r2
 800456c:	3863      	subs	r0, #99	; 0x63
 800456e:	2815      	cmp	r0, #21
 8004570:	d8f7      	bhi.n	8004562 <_printf_i+0x2a>
 8004572:	f7fb fdc7 	bl	8000104 <__gnu_thumb1_case_shi>
 8004576:	0016      	.short	0x0016
 8004578:	fff6001f 	.word	0xfff6001f
 800457c:	fff6fff6 	.word	0xfff6fff6
 8004580:	001ffff6 	.word	0x001ffff6
 8004584:	fff6fff6 	.word	0xfff6fff6
 8004588:	fff6fff6 	.word	0xfff6fff6
 800458c:	003600a8 	.word	0x003600a8
 8004590:	fff6009a 	.word	0xfff6009a
 8004594:	00b9fff6 	.word	0x00b9fff6
 8004598:	0036fff6 	.word	0x0036fff6
 800459c:	fff6fff6 	.word	0xfff6fff6
 80045a0:	009e      	.short	0x009e
 80045a2:	0026      	movs	r6, r4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	3642      	adds	r6, #66	; 0x42
 80045a8:	1d11      	adds	r1, r2, #4
 80045aa:	6019      	str	r1, [r3, #0]
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	7033      	strb	r3, [r6, #0]
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0a7      	b.n	8004704 <_printf_i+0x1cc>
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	1d0a      	adds	r2, r1, #4
 80045ba:	0605      	lsls	r5, r0, #24
 80045bc:	d50b      	bpl.n	80045d6 <_printf_i+0x9e>
 80045be:	680d      	ldr	r5, [r1, #0]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	2d00      	cmp	r5, #0
 80045c4:	da03      	bge.n	80045ce <_printf_i+0x96>
 80045c6:	232d      	movs	r3, #45	; 0x2d
 80045c8:	9a04      	ldr	r2, [sp, #16]
 80045ca:	426d      	negs	r5, r5
 80045cc:	7013      	strb	r3, [r2, #0]
 80045ce:	4b61      	ldr	r3, [pc, #388]	; (8004754 <_printf_i+0x21c>)
 80045d0:	270a      	movs	r7, #10
 80045d2:	9303      	str	r3, [sp, #12]
 80045d4:	e01b      	b.n	800460e <_printf_i+0xd6>
 80045d6:	680d      	ldr	r5, [r1, #0]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	0641      	lsls	r1, r0, #25
 80045dc:	d5f1      	bpl.n	80045c2 <_printf_i+0x8a>
 80045de:	b22d      	sxth	r5, r5
 80045e0:	e7ef      	b.n	80045c2 <_printf_i+0x8a>
 80045e2:	680d      	ldr	r5, [r1, #0]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	1d08      	adds	r0, r1, #4
 80045e8:	6018      	str	r0, [r3, #0]
 80045ea:	062e      	lsls	r6, r5, #24
 80045ec:	d501      	bpl.n	80045f2 <_printf_i+0xba>
 80045ee:	680d      	ldr	r5, [r1, #0]
 80045f0:	e003      	b.n	80045fa <_printf_i+0xc2>
 80045f2:	066d      	lsls	r5, r5, #25
 80045f4:	d5fb      	bpl.n	80045ee <_printf_i+0xb6>
 80045f6:	680d      	ldr	r5, [r1, #0]
 80045f8:	b2ad      	uxth	r5, r5
 80045fa:	4b56      	ldr	r3, [pc, #344]	; (8004754 <_printf_i+0x21c>)
 80045fc:	2708      	movs	r7, #8
 80045fe:	9303      	str	r3, [sp, #12]
 8004600:	2a6f      	cmp	r2, #111	; 0x6f
 8004602:	d000      	beq.n	8004606 <_printf_i+0xce>
 8004604:	3702      	adds	r7, #2
 8004606:	0023      	movs	r3, r4
 8004608:	2200      	movs	r2, #0
 800460a:	3343      	adds	r3, #67	; 0x43
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	60a3      	str	r3, [r4, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db03      	blt.n	800461e <_printf_i+0xe6>
 8004616:	2204      	movs	r2, #4
 8004618:	6821      	ldr	r1, [r4, #0]
 800461a:	4391      	bics	r1, r2
 800461c:	6021      	str	r1, [r4, #0]
 800461e:	2d00      	cmp	r5, #0
 8004620:	d102      	bne.n	8004628 <_printf_i+0xf0>
 8004622:	9e04      	ldr	r6, [sp, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <_printf_i+0x10a>
 8004628:	9e04      	ldr	r6, [sp, #16]
 800462a:	0028      	movs	r0, r5
 800462c:	0039      	movs	r1, r7
 800462e:	f7fb fdf9 	bl	8000224 <__aeabi_uidivmod>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	3e01      	subs	r6, #1
 8004636:	5c5b      	ldrb	r3, [r3, r1]
 8004638:	7033      	strb	r3, [r6, #0]
 800463a:	002b      	movs	r3, r5
 800463c:	0005      	movs	r5, r0
 800463e:	429f      	cmp	r7, r3
 8004640:	d9f3      	bls.n	800462a <_printf_i+0xf2>
 8004642:	2f08      	cmp	r7, #8
 8004644:	d109      	bne.n	800465a <_printf_i+0x122>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	07db      	lsls	r3, r3, #31
 800464a:	d506      	bpl.n	800465a <_printf_i+0x122>
 800464c:	6863      	ldr	r3, [r4, #4]
 800464e:	6922      	ldr	r2, [r4, #16]
 8004650:	4293      	cmp	r3, r2
 8004652:	dc02      	bgt.n	800465a <_printf_i+0x122>
 8004654:	2330      	movs	r3, #48	; 0x30
 8004656:	3e01      	subs	r6, #1
 8004658:	7033      	strb	r3, [r6, #0]
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	6123      	str	r3, [r4, #16]
 8004660:	9b07      	ldr	r3, [sp, #28]
 8004662:	0021      	movs	r1, r4
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	9805      	ldr	r0, [sp, #20]
 8004668:	9b06      	ldr	r3, [sp, #24]
 800466a:	aa09      	add	r2, sp, #36	; 0x24
 800466c:	f7ff fef4 	bl	8004458 <_printf_common>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d14c      	bne.n	800470e <_printf_i+0x1d6>
 8004674:	2001      	movs	r0, #1
 8004676:	4240      	negs	r0, r0
 8004678:	b00b      	add	sp, #44	; 0x2c
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467c:	3145      	adds	r1, #69	; 0x45
 800467e:	700a      	strb	r2, [r1, #0]
 8004680:	4a34      	ldr	r2, [pc, #208]	; (8004754 <_printf_i+0x21c>)
 8004682:	9203      	str	r2, [sp, #12]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	6821      	ldr	r1, [r4, #0]
 8004688:	ca20      	ldmia	r2!, {r5}
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	0608      	lsls	r0, r1, #24
 800468e:	d516      	bpl.n	80046be <_printf_i+0x186>
 8004690:	07cb      	lsls	r3, r1, #31
 8004692:	d502      	bpl.n	800469a <_printf_i+0x162>
 8004694:	2320      	movs	r3, #32
 8004696:	4319      	orrs	r1, r3
 8004698:	6021      	str	r1, [r4, #0]
 800469a:	2710      	movs	r7, #16
 800469c:	2d00      	cmp	r5, #0
 800469e:	d1b2      	bne.n	8004606 <_printf_i+0xce>
 80046a0:	2320      	movs	r3, #32
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	439a      	bics	r2, r3
 80046a6:	6022      	str	r2, [r4, #0]
 80046a8:	e7ad      	b.n	8004606 <_printf_i+0xce>
 80046aa:	2220      	movs	r2, #32
 80046ac:	6809      	ldr	r1, [r1, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	6022      	str	r2, [r4, #0]
 80046b2:	0022      	movs	r2, r4
 80046b4:	2178      	movs	r1, #120	; 0x78
 80046b6:	3245      	adds	r2, #69	; 0x45
 80046b8:	7011      	strb	r1, [r2, #0]
 80046ba:	4a27      	ldr	r2, [pc, #156]	; (8004758 <_printf_i+0x220>)
 80046bc:	e7e1      	b.n	8004682 <_printf_i+0x14a>
 80046be:	0648      	lsls	r0, r1, #25
 80046c0:	d5e6      	bpl.n	8004690 <_printf_i+0x158>
 80046c2:	b2ad      	uxth	r5, r5
 80046c4:	e7e4      	b.n	8004690 <_printf_i+0x158>
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	680d      	ldr	r5, [r1, #0]
 80046ca:	1d10      	adds	r0, r2, #4
 80046cc:	6949      	ldr	r1, [r1, #20]
 80046ce:	6018      	str	r0, [r3, #0]
 80046d0:	6813      	ldr	r3, [r2, #0]
 80046d2:	062e      	lsls	r6, r5, #24
 80046d4:	d501      	bpl.n	80046da <_printf_i+0x1a2>
 80046d6:	6019      	str	r1, [r3, #0]
 80046d8:	e002      	b.n	80046e0 <_printf_i+0x1a8>
 80046da:	066d      	lsls	r5, r5, #25
 80046dc:	d5fb      	bpl.n	80046d6 <_printf_i+0x19e>
 80046de:	8019      	strh	r1, [r3, #0]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9e04      	ldr	r6, [sp, #16]
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	e7bb      	b.n	8004660 <_printf_i+0x128>
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	1d11      	adds	r1, r2, #4
 80046ec:	6019      	str	r1, [r3, #0]
 80046ee:	6816      	ldr	r6, [r2, #0]
 80046f0:	2100      	movs	r1, #0
 80046f2:	0030      	movs	r0, r6
 80046f4:	6862      	ldr	r2, [r4, #4]
 80046f6:	f000 f831 	bl	800475c <memchr>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d001      	beq.n	8004702 <_printf_i+0x1ca>
 80046fe:	1b80      	subs	r0, r0, r6
 8004700:	6060      	str	r0, [r4, #4]
 8004702:	6863      	ldr	r3, [r4, #4]
 8004704:	6123      	str	r3, [r4, #16]
 8004706:	2300      	movs	r3, #0
 8004708:	9a04      	ldr	r2, [sp, #16]
 800470a:	7013      	strb	r3, [r2, #0]
 800470c:	e7a8      	b.n	8004660 <_printf_i+0x128>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	0032      	movs	r2, r6
 8004712:	9906      	ldr	r1, [sp, #24]
 8004714:	9805      	ldr	r0, [sp, #20]
 8004716:	9d07      	ldr	r5, [sp, #28]
 8004718:	47a8      	blx	r5
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d0aa      	beq.n	8004674 <_printf_i+0x13c>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	079b      	lsls	r3, r3, #30
 8004722:	d415      	bmi.n	8004750 <_printf_i+0x218>
 8004724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004726:	68e0      	ldr	r0, [r4, #12]
 8004728:	4298      	cmp	r0, r3
 800472a:	daa5      	bge.n	8004678 <_printf_i+0x140>
 800472c:	0018      	movs	r0, r3
 800472e:	e7a3      	b.n	8004678 <_printf_i+0x140>
 8004730:	0022      	movs	r2, r4
 8004732:	2301      	movs	r3, #1
 8004734:	9906      	ldr	r1, [sp, #24]
 8004736:	9805      	ldr	r0, [sp, #20]
 8004738:	9e07      	ldr	r6, [sp, #28]
 800473a:	3219      	adds	r2, #25
 800473c:	47b0      	blx	r6
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d098      	beq.n	8004674 <_printf_i+0x13c>
 8004742:	3501      	adds	r5, #1
 8004744:	68e3      	ldr	r3, [r4, #12]
 8004746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	42ab      	cmp	r3, r5
 800474c:	dcf0      	bgt.n	8004730 <_printf_i+0x1f8>
 800474e:	e7e9      	b.n	8004724 <_printf_i+0x1ec>
 8004750:	2500      	movs	r5, #0
 8004752:	e7f7      	b.n	8004744 <_printf_i+0x20c>
 8004754:	08004ae5 	.word	0x08004ae5
 8004758:	08004af6 	.word	0x08004af6

0800475c <memchr>:
 800475c:	b2c9      	uxtb	r1, r1
 800475e:	1882      	adds	r2, r0, r2
 8004760:	4290      	cmp	r0, r2
 8004762:	d101      	bne.n	8004768 <memchr+0xc>
 8004764:	2000      	movs	r0, #0
 8004766:	4770      	bx	lr
 8004768:	7803      	ldrb	r3, [r0, #0]
 800476a:	428b      	cmp	r3, r1
 800476c:	d0fb      	beq.n	8004766 <memchr+0xa>
 800476e:	3001      	adds	r0, #1
 8004770:	e7f6      	b.n	8004760 <memchr+0x4>

08004772 <memcpy>:
 8004772:	2300      	movs	r3, #0
 8004774:	b510      	push	{r4, lr}
 8004776:	429a      	cmp	r2, r3
 8004778:	d100      	bne.n	800477c <memcpy+0xa>
 800477a:	bd10      	pop	{r4, pc}
 800477c:	5ccc      	ldrb	r4, [r1, r3]
 800477e:	54c4      	strb	r4, [r0, r3]
 8004780:	3301      	adds	r3, #1
 8004782:	e7f8      	b.n	8004776 <memcpy+0x4>

08004784 <memmove>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4288      	cmp	r0, r1
 8004788:	d902      	bls.n	8004790 <memmove+0xc>
 800478a:	188b      	adds	r3, r1, r2
 800478c:	4298      	cmp	r0, r3
 800478e:	d303      	bcc.n	8004798 <memmove+0x14>
 8004790:	2300      	movs	r3, #0
 8004792:	e007      	b.n	80047a4 <memmove+0x20>
 8004794:	5c8b      	ldrb	r3, [r1, r2]
 8004796:	5483      	strb	r3, [r0, r2]
 8004798:	3a01      	subs	r2, #1
 800479a:	d2fb      	bcs.n	8004794 <memmove+0x10>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	5ccc      	ldrb	r4, [r1, r3]
 80047a0:	54c4      	strb	r4, [r0, r3]
 80047a2:	3301      	adds	r3, #1
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1fa      	bne.n	800479e <memmove+0x1a>
 80047a8:	e7f8      	b.n	800479c <memmove+0x18>
	...

080047ac <_free_r>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	0005      	movs	r5, r0
 80047b0:	2900      	cmp	r1, #0
 80047b2:	d010      	beq.n	80047d6 <_free_r+0x2a>
 80047b4:	1f0c      	subs	r4, r1, #4
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da00      	bge.n	80047be <_free_r+0x12>
 80047bc:	18e4      	adds	r4, r4, r3
 80047be:	0028      	movs	r0, r5
 80047c0:	f000 f918 	bl	80049f4 <__malloc_lock>
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <_free_r+0x90>)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <_free_r+0x2c>
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	6014      	str	r4, [r2, #0]
 80047d0:	0028      	movs	r0, r5
 80047d2:	f000 f917 	bl	8004a04 <__malloc_unlock>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d908      	bls.n	80047ee <_free_r+0x42>
 80047dc:	6821      	ldr	r1, [r4, #0]
 80047de:	1860      	adds	r0, r4, r1
 80047e0:	4283      	cmp	r3, r0
 80047e2:	d1f3      	bne.n	80047cc <_free_r+0x20>
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	1841      	adds	r1, r0, r1
 80047ea:	6021      	str	r1, [r4, #0]
 80047ec:	e7ee      	b.n	80047cc <_free_r+0x20>
 80047ee:	001a      	movs	r2, r3
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <_free_r+0x4e>
 80047f6:	42a3      	cmp	r3, r4
 80047f8:	d9f9      	bls.n	80047ee <_free_r+0x42>
 80047fa:	6811      	ldr	r1, [r2, #0]
 80047fc:	1850      	adds	r0, r2, r1
 80047fe:	42a0      	cmp	r0, r4
 8004800:	d10b      	bne.n	800481a <_free_r+0x6e>
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	1809      	adds	r1, r1, r0
 8004806:	1850      	adds	r0, r2, r1
 8004808:	6011      	str	r1, [r2, #0]
 800480a:	4283      	cmp	r3, r0
 800480c:	d1e0      	bne.n	80047d0 <_free_r+0x24>
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	1841      	adds	r1, r0, r1
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	6053      	str	r3, [r2, #4]
 8004818:	e7da      	b.n	80047d0 <_free_r+0x24>
 800481a:	42a0      	cmp	r0, r4
 800481c:	d902      	bls.n	8004824 <_free_r+0x78>
 800481e:	230c      	movs	r3, #12
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	e7d5      	b.n	80047d0 <_free_r+0x24>
 8004824:	6821      	ldr	r1, [r4, #0]
 8004826:	1860      	adds	r0, r4, r1
 8004828:	4283      	cmp	r3, r0
 800482a:	d103      	bne.n	8004834 <_free_r+0x88>
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	1841      	adds	r1, r0, r1
 8004832:	6021      	str	r1, [r4, #0]
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6054      	str	r4, [r2, #4]
 8004838:	e7ca      	b.n	80047d0 <_free_r+0x24>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	20000118 	.word	0x20000118

08004840 <sbrk_aligned>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	4e0f      	ldr	r6, [pc, #60]	; (8004880 <sbrk_aligned+0x40>)
 8004844:	000d      	movs	r5, r1
 8004846:	6831      	ldr	r1, [r6, #0]
 8004848:	0004      	movs	r4, r0
 800484a:	2900      	cmp	r1, #0
 800484c:	d102      	bne.n	8004854 <sbrk_aligned+0x14>
 800484e:	f000 f8bf 	bl	80049d0 <_sbrk_r>
 8004852:	6030      	str	r0, [r6, #0]
 8004854:	0029      	movs	r1, r5
 8004856:	0020      	movs	r0, r4
 8004858:	f000 f8ba 	bl	80049d0 <_sbrk_r>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d00a      	beq.n	8004876 <sbrk_aligned+0x36>
 8004860:	2303      	movs	r3, #3
 8004862:	1cc5      	adds	r5, r0, #3
 8004864:	439d      	bics	r5, r3
 8004866:	42a8      	cmp	r0, r5
 8004868:	d007      	beq.n	800487a <sbrk_aligned+0x3a>
 800486a:	1a29      	subs	r1, r5, r0
 800486c:	0020      	movs	r0, r4
 800486e:	f000 f8af 	bl	80049d0 <_sbrk_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	d101      	bne.n	800487a <sbrk_aligned+0x3a>
 8004876:	2501      	movs	r5, #1
 8004878:	426d      	negs	r5, r5
 800487a:	0028      	movs	r0, r5
 800487c:	bd70      	pop	{r4, r5, r6, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	2000011c 	.word	0x2000011c

08004884 <_malloc_r>:
 8004884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004886:	2203      	movs	r2, #3
 8004888:	1ccb      	adds	r3, r1, #3
 800488a:	4393      	bics	r3, r2
 800488c:	3308      	adds	r3, #8
 800488e:	0006      	movs	r6, r0
 8004890:	001f      	movs	r7, r3
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d232      	bcs.n	80048fc <_malloc_r+0x78>
 8004896:	270c      	movs	r7, #12
 8004898:	42b9      	cmp	r1, r7
 800489a:	d831      	bhi.n	8004900 <_malloc_r+0x7c>
 800489c:	0030      	movs	r0, r6
 800489e:	f000 f8a9 	bl	80049f4 <__malloc_lock>
 80048a2:	4d32      	ldr	r5, [pc, #200]	; (800496c <_malloc_r+0xe8>)
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	001c      	movs	r4, r3
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	d12e      	bne.n	800490a <_malloc_r+0x86>
 80048ac:	0039      	movs	r1, r7
 80048ae:	0030      	movs	r0, r6
 80048b0:	f7ff ffc6 	bl	8004840 <sbrk_aligned>
 80048b4:	0004      	movs	r4, r0
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	d11e      	bne.n	80048f8 <_malloc_r+0x74>
 80048ba:	682c      	ldr	r4, [r5, #0]
 80048bc:	0025      	movs	r5, r4
 80048be:	2d00      	cmp	r5, #0
 80048c0:	d14a      	bne.n	8004958 <_malloc_r+0xd4>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	0029      	movs	r1, r5
 80048c6:	18e3      	adds	r3, r4, r3
 80048c8:	0030      	movs	r0, r6
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	f000 f880 	bl	80049d0 <_sbrk_r>
 80048d0:	9b01      	ldr	r3, [sp, #4]
 80048d2:	4283      	cmp	r3, r0
 80048d4:	d143      	bne.n	800495e <_malloc_r+0xda>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	3703      	adds	r7, #3
 80048da:	1aff      	subs	r7, r7, r3
 80048dc:	2303      	movs	r3, #3
 80048de:	439f      	bics	r7, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	2f0c      	cmp	r7, #12
 80048e4:	d200      	bcs.n	80048e8 <_malloc_r+0x64>
 80048e6:	270c      	movs	r7, #12
 80048e8:	0039      	movs	r1, r7
 80048ea:	0030      	movs	r0, r6
 80048ec:	f7ff ffa8 	bl	8004840 <sbrk_aligned>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d034      	beq.n	800495e <_malloc_r+0xda>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	19df      	adds	r7, r3, r7
 80048f8:	6027      	str	r7, [r4, #0]
 80048fa:	e013      	b.n	8004924 <_malloc_r+0xa0>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dacb      	bge.n	8004898 <_malloc_r+0x14>
 8004900:	230c      	movs	r3, #12
 8004902:	2500      	movs	r5, #0
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	0028      	movs	r0, r5
 8004908:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800490a:	6822      	ldr	r2, [r4, #0]
 800490c:	1bd1      	subs	r1, r2, r7
 800490e:	d420      	bmi.n	8004952 <_malloc_r+0xce>
 8004910:	290b      	cmp	r1, #11
 8004912:	d917      	bls.n	8004944 <_malloc_r+0xc0>
 8004914:	19e2      	adds	r2, r4, r7
 8004916:	6027      	str	r7, [r4, #0]
 8004918:	42a3      	cmp	r3, r4
 800491a:	d111      	bne.n	8004940 <_malloc_r+0xbc>
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	6011      	str	r1, [r2, #0]
 8004922:	6053      	str	r3, [r2, #4]
 8004924:	0030      	movs	r0, r6
 8004926:	0025      	movs	r5, r4
 8004928:	f000 f86c 	bl	8004a04 <__malloc_unlock>
 800492c:	2207      	movs	r2, #7
 800492e:	350b      	adds	r5, #11
 8004930:	1d23      	adds	r3, r4, #4
 8004932:	4395      	bics	r5, r2
 8004934:	1aea      	subs	r2, r5, r3
 8004936:	429d      	cmp	r5, r3
 8004938:	d0e5      	beq.n	8004906 <_malloc_r+0x82>
 800493a:	1b5b      	subs	r3, r3, r5
 800493c:	50a3      	str	r3, [r4, r2]
 800493e:	e7e2      	b.n	8004906 <_malloc_r+0x82>
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	e7ec      	b.n	800491e <_malloc_r+0x9a>
 8004944:	6862      	ldr	r2, [r4, #4]
 8004946:	42a3      	cmp	r3, r4
 8004948:	d101      	bne.n	800494e <_malloc_r+0xca>
 800494a:	602a      	str	r2, [r5, #0]
 800494c:	e7ea      	b.n	8004924 <_malloc_r+0xa0>
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	e7e8      	b.n	8004924 <_malloc_r+0xa0>
 8004952:	0023      	movs	r3, r4
 8004954:	6864      	ldr	r4, [r4, #4]
 8004956:	e7a7      	b.n	80048a8 <_malloc_r+0x24>
 8004958:	002c      	movs	r4, r5
 800495a:	686d      	ldr	r5, [r5, #4]
 800495c:	e7af      	b.n	80048be <_malloc_r+0x3a>
 800495e:	230c      	movs	r3, #12
 8004960:	0030      	movs	r0, r6
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	f000 f84e 	bl	8004a04 <__malloc_unlock>
 8004968:	e7cd      	b.n	8004906 <_malloc_r+0x82>
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	20000118 	.word	0x20000118

08004970 <_realloc_r>:
 8004970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004972:	0007      	movs	r7, r0
 8004974:	000e      	movs	r6, r1
 8004976:	0014      	movs	r4, r2
 8004978:	2900      	cmp	r1, #0
 800497a:	d105      	bne.n	8004988 <_realloc_r+0x18>
 800497c:	0011      	movs	r1, r2
 800497e:	f7ff ff81 	bl	8004884 <_malloc_r>
 8004982:	0005      	movs	r5, r0
 8004984:	0028      	movs	r0, r5
 8004986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004988:	2a00      	cmp	r2, #0
 800498a:	d103      	bne.n	8004994 <_realloc_r+0x24>
 800498c:	f7ff ff0e 	bl	80047ac <_free_r>
 8004990:	0025      	movs	r5, r4
 8004992:	e7f7      	b.n	8004984 <_realloc_r+0x14>
 8004994:	f000 f83e 	bl	8004a14 <_malloc_usable_size_r>
 8004998:	9001      	str	r0, [sp, #4]
 800499a:	4284      	cmp	r4, r0
 800499c:	d803      	bhi.n	80049a6 <_realloc_r+0x36>
 800499e:	0035      	movs	r5, r6
 80049a0:	0843      	lsrs	r3, r0, #1
 80049a2:	42a3      	cmp	r3, r4
 80049a4:	d3ee      	bcc.n	8004984 <_realloc_r+0x14>
 80049a6:	0021      	movs	r1, r4
 80049a8:	0038      	movs	r0, r7
 80049aa:	f7ff ff6b 	bl	8004884 <_malloc_r>
 80049ae:	1e05      	subs	r5, r0, #0
 80049b0:	d0e8      	beq.n	8004984 <_realloc_r+0x14>
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	0022      	movs	r2, r4
 80049b6:	429c      	cmp	r4, r3
 80049b8:	d900      	bls.n	80049bc <_realloc_r+0x4c>
 80049ba:	001a      	movs	r2, r3
 80049bc:	0031      	movs	r1, r6
 80049be:	0028      	movs	r0, r5
 80049c0:	f7ff fed7 	bl	8004772 <memcpy>
 80049c4:	0031      	movs	r1, r6
 80049c6:	0038      	movs	r0, r7
 80049c8:	f7ff fef0 	bl	80047ac <_free_r>
 80049cc:	e7da      	b.n	8004984 <_realloc_r+0x14>
	...

080049d0 <_sbrk_r>:
 80049d0:	2300      	movs	r3, #0
 80049d2:	b570      	push	{r4, r5, r6, lr}
 80049d4:	4d06      	ldr	r5, [pc, #24]	; (80049f0 <_sbrk_r+0x20>)
 80049d6:	0004      	movs	r4, r0
 80049d8:	0008      	movs	r0, r1
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	f7fc ffac 	bl	8001938 <_sbrk>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d103      	bne.n	80049ec <_sbrk_r+0x1c>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d000      	beq.n	80049ec <_sbrk_r+0x1c>
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	bd70      	pop	{r4, r5, r6, pc}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	20000120 	.word	0x20000120

080049f4 <__malloc_lock>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4802      	ldr	r0, [pc, #8]	; (8004a00 <__malloc_lock+0xc>)
 80049f8:	f000 f814 	bl	8004a24 <__retarget_lock_acquire_recursive>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	20000124 	.word	0x20000124

08004a04 <__malloc_unlock>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	4802      	ldr	r0, [pc, #8]	; (8004a10 <__malloc_unlock+0xc>)
 8004a08:	f000 f80d 	bl	8004a26 <__retarget_lock_release_recursive>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	20000124 	.word	0x20000124

08004a14 <_malloc_usable_size_r>:
 8004a14:	1f0b      	subs	r3, r1, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1f18      	subs	r0, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da01      	bge.n	8004a22 <_malloc_usable_size_r+0xe>
 8004a1e:	580b      	ldr	r3, [r1, r0]
 8004a20:	18c0      	adds	r0, r0, r3
 8004a22:	4770      	bx	lr

08004a24 <__retarget_lock_acquire_recursive>:
 8004a24:	4770      	bx	lr

08004a26 <__retarget_lock_release_recursive>:
 8004a26:	4770      	bx	lr

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
