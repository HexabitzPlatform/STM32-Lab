
s6_ex7_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe4  08004fe4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004fe4  08004fe4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fe4  08004fe4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000078  08005064  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08005064  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000901f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8b  00000000  00000000  000290bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a5  00000000  00000000  0002c018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab27  00000000  00000000  000488bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b52f1  00000000  00000000  000533e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001086d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002514  00000000  00000000  00108728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004f04 	.word	0x08004f04

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08004f04 	.word	0x08004f04

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_d2uiz>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2200      	movs	r2, #0
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <__aeabi_d2uiz+0x38>)
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
 800023a:	f000 feaf 	bl	8000f9c <__aeabi_dcmpge>
 800023e:	2800      	cmp	r0, #0
 8000240:	d104      	bne.n	800024c <__aeabi_d2uiz+0x1c>
 8000242:	0020      	movs	r0, r4
 8000244:	0029      	movs	r1, r5
 8000246:	f000 fe0f 	bl	8000e68 <__aeabi_d2iz>
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <__aeabi_d2uiz+0x38>)
 800024e:	2200      	movs	r2, #0
 8000250:	0020      	movs	r0, r4
 8000252:	0029      	movs	r1, r5
 8000254:	f000 fa76 	bl	8000744 <__aeabi_dsub>
 8000258:	f000 fe06 	bl	8000e68 <__aeabi_d2iz>
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	061b      	lsls	r3, r3, #24
 8000260:	469c      	mov	ip, r3
 8000262:	4460      	add	r0, ip
 8000264:	e7f1      	b.n	800024a <__aeabi_d2uiz+0x1a>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	41e00000 	.word	0x41e00000

0800026c <__aeabi_dmul>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	464e      	mov	r6, r9
 8000272:	4645      	mov	r5, r8
 8000274:	46de      	mov	lr, fp
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	4698      	mov	r8, r3
 800027a:	030c      	lsls	r4, r1, #12
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	0006      	movs	r6, r0
 8000280:	4692      	mov	sl, r2
 8000282:	b087      	sub	sp, #28
 8000284:	0b24      	lsrs	r4, r4, #12
 8000286:	0d5b      	lsrs	r3, r3, #21
 8000288:	0fcf      	lsrs	r7, r1, #31
 800028a:	2b00      	cmp	r3, #0
 800028c:	d100      	bne.n	8000290 <__aeabi_dmul+0x24>
 800028e:	e15c      	b.n	800054a <__aeabi_dmul+0x2de>
 8000290:	4ad9      	ldr	r2, [pc, #868]	; (80005f8 <__aeabi_dmul+0x38c>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d100      	bne.n	8000298 <__aeabi_dmul+0x2c>
 8000296:	e175      	b.n	8000584 <__aeabi_dmul+0x318>
 8000298:	0f42      	lsrs	r2, r0, #29
 800029a:	00e4      	lsls	r4, r4, #3
 800029c:	4314      	orrs	r4, r2
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	0412      	lsls	r2, r2, #16
 80002a2:	4314      	orrs	r4, r2
 80002a4:	4ad5      	ldr	r2, [pc, #852]	; (80005fc <__aeabi_dmul+0x390>)
 80002a6:	00c5      	lsls	r5, r0, #3
 80002a8:	4694      	mov	ip, r2
 80002aa:	4463      	add	r3, ip
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2300      	movs	r3, #0
 80002b0:	4699      	mov	r9, r3
 80002b2:	469b      	mov	fp, r3
 80002b4:	4643      	mov	r3, r8
 80002b6:	4642      	mov	r2, r8
 80002b8:	031e      	lsls	r6, r3, #12
 80002ba:	0fd2      	lsrs	r2, r2, #31
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4650      	mov	r0, sl
 80002c0:	4690      	mov	r8, r2
 80002c2:	0b36      	lsrs	r6, r6, #12
 80002c4:	0d5b      	lsrs	r3, r3, #21
 80002c6:	d100      	bne.n	80002ca <__aeabi_dmul+0x5e>
 80002c8:	e120      	b.n	800050c <__aeabi_dmul+0x2a0>
 80002ca:	4acb      	ldr	r2, [pc, #812]	; (80005f8 <__aeabi_dmul+0x38c>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dmul+0x66>
 80002d0:	e162      	b.n	8000598 <__aeabi_dmul+0x32c>
 80002d2:	49ca      	ldr	r1, [pc, #808]	; (80005fc <__aeabi_dmul+0x390>)
 80002d4:	0f42      	lsrs	r2, r0, #29
 80002d6:	468c      	mov	ip, r1
 80002d8:	9900      	ldr	r1, [sp, #0]
 80002da:	4463      	add	r3, ip
 80002dc:	00f6      	lsls	r6, r6, #3
 80002de:	468c      	mov	ip, r1
 80002e0:	4316      	orrs	r6, r2
 80002e2:	2280      	movs	r2, #128	; 0x80
 80002e4:	449c      	add	ip, r3
 80002e6:	0412      	lsls	r2, r2, #16
 80002e8:	4663      	mov	r3, ip
 80002ea:	4316      	orrs	r6, r2
 80002ec:	00c2      	lsls	r2, r0, #3
 80002ee:	2000      	movs	r0, #0
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	9900      	ldr	r1, [sp, #0]
 80002f4:	4643      	mov	r3, r8
 80002f6:	3101      	adds	r1, #1
 80002f8:	468c      	mov	ip, r1
 80002fa:	4649      	mov	r1, r9
 80002fc:	407b      	eors	r3, r7
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	290f      	cmp	r1, #15
 8000302:	d826      	bhi.n	8000352 <__aeabi_dmul+0xe6>
 8000304:	4bbe      	ldr	r3, [pc, #760]	; (8000600 <__aeabi_dmul+0x394>)
 8000306:	0089      	lsls	r1, r1, #2
 8000308:	5859      	ldr	r1, [r3, r1]
 800030a:	468f      	mov	pc, r1
 800030c:	4643      	mov	r3, r8
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	0034      	movs	r4, r6
 8000312:	0015      	movs	r5, r2
 8000314:	4683      	mov	fp, r0
 8000316:	465b      	mov	r3, fp
 8000318:	2b02      	cmp	r3, #2
 800031a:	d016      	beq.n	800034a <__aeabi_dmul+0xde>
 800031c:	2b03      	cmp	r3, #3
 800031e:	d100      	bne.n	8000322 <__aeabi_dmul+0xb6>
 8000320:	e203      	b.n	800072a <__aeabi_dmul+0x4be>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d000      	beq.n	8000328 <__aeabi_dmul+0xbc>
 8000326:	e0cd      	b.n	80004c4 <__aeabi_dmul+0x258>
 8000328:	2200      	movs	r2, #0
 800032a:	2400      	movs	r4, #0
 800032c:	2500      	movs	r5, #0
 800032e:	9b01      	ldr	r3, [sp, #4]
 8000330:	0512      	lsls	r2, r2, #20
 8000332:	4322      	orrs	r2, r4
 8000334:	07db      	lsls	r3, r3, #31
 8000336:	431a      	orrs	r2, r3
 8000338:	0028      	movs	r0, r5
 800033a:	0011      	movs	r1, r2
 800033c:	b007      	add	sp, #28
 800033e:	bcf0      	pop	{r4, r5, r6, r7}
 8000340:	46bb      	mov	fp, r7
 8000342:	46b2      	mov	sl, r6
 8000344:	46a9      	mov	r9, r5
 8000346:	46a0      	mov	r8, r4
 8000348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034a:	2400      	movs	r4, #0
 800034c:	2500      	movs	r5, #0
 800034e:	4aaa      	ldr	r2, [pc, #680]	; (80005f8 <__aeabi_dmul+0x38c>)
 8000350:	e7ed      	b.n	800032e <__aeabi_dmul+0xc2>
 8000352:	0c28      	lsrs	r0, r5, #16
 8000354:	042d      	lsls	r5, r5, #16
 8000356:	0c2d      	lsrs	r5, r5, #16
 8000358:	002b      	movs	r3, r5
 800035a:	0c11      	lsrs	r1, r2, #16
 800035c:	0412      	lsls	r2, r2, #16
 800035e:	0c12      	lsrs	r2, r2, #16
 8000360:	4353      	muls	r3, r2
 8000362:	4698      	mov	r8, r3
 8000364:	0013      	movs	r3, r2
 8000366:	002f      	movs	r7, r5
 8000368:	4343      	muls	r3, r0
 800036a:	4699      	mov	r9, r3
 800036c:	434f      	muls	r7, r1
 800036e:	444f      	add	r7, r9
 8000370:	46bb      	mov	fp, r7
 8000372:	4647      	mov	r7, r8
 8000374:	000b      	movs	r3, r1
 8000376:	0c3f      	lsrs	r7, r7, #16
 8000378:	46ba      	mov	sl, r7
 800037a:	4343      	muls	r3, r0
 800037c:	44da      	add	sl, fp
 800037e:	9302      	str	r3, [sp, #8]
 8000380:	45d1      	cmp	r9, sl
 8000382:	d904      	bls.n	800038e <__aeabi_dmul+0x122>
 8000384:	2780      	movs	r7, #128	; 0x80
 8000386:	027f      	lsls	r7, r7, #9
 8000388:	46b9      	mov	r9, r7
 800038a:	444b      	add	r3, r9
 800038c:	9302      	str	r3, [sp, #8]
 800038e:	4653      	mov	r3, sl
 8000390:	0c1b      	lsrs	r3, r3, #16
 8000392:	469b      	mov	fp, r3
 8000394:	4653      	mov	r3, sl
 8000396:	041f      	lsls	r7, r3, #16
 8000398:	4643      	mov	r3, r8
 800039a:	041b      	lsls	r3, r3, #16
 800039c:	0c1b      	lsrs	r3, r3, #16
 800039e:	4698      	mov	r8, r3
 80003a0:	003b      	movs	r3, r7
 80003a2:	4443      	add	r3, r8
 80003a4:	9304      	str	r3, [sp, #16]
 80003a6:	0c33      	lsrs	r3, r6, #16
 80003a8:	0436      	lsls	r6, r6, #16
 80003aa:	0c36      	lsrs	r6, r6, #16
 80003ac:	4698      	mov	r8, r3
 80003ae:	0033      	movs	r3, r6
 80003b0:	4343      	muls	r3, r0
 80003b2:	4699      	mov	r9, r3
 80003b4:	4643      	mov	r3, r8
 80003b6:	4343      	muls	r3, r0
 80003b8:	002f      	movs	r7, r5
 80003ba:	469a      	mov	sl, r3
 80003bc:	4643      	mov	r3, r8
 80003be:	4377      	muls	r7, r6
 80003c0:	435d      	muls	r5, r3
 80003c2:	0c38      	lsrs	r0, r7, #16
 80003c4:	444d      	add	r5, r9
 80003c6:	1945      	adds	r5, r0, r5
 80003c8:	45a9      	cmp	r9, r5
 80003ca:	d903      	bls.n	80003d4 <__aeabi_dmul+0x168>
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	025b      	lsls	r3, r3, #9
 80003d0:	4699      	mov	r9, r3
 80003d2:	44ca      	add	sl, r9
 80003d4:	043f      	lsls	r7, r7, #16
 80003d6:	0c28      	lsrs	r0, r5, #16
 80003d8:	0c3f      	lsrs	r7, r7, #16
 80003da:	042d      	lsls	r5, r5, #16
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	0c27      	lsrs	r7, r4, #16
 80003e0:	0424      	lsls	r4, r4, #16
 80003e2:	0c24      	lsrs	r4, r4, #16
 80003e4:	0003      	movs	r3, r0
 80003e6:	0020      	movs	r0, r4
 80003e8:	4350      	muls	r0, r2
 80003ea:	437a      	muls	r2, r7
 80003ec:	4691      	mov	r9, r2
 80003ee:	003a      	movs	r2, r7
 80003f0:	4453      	add	r3, sl
 80003f2:	9305      	str	r3, [sp, #20]
 80003f4:	0c03      	lsrs	r3, r0, #16
 80003f6:	469a      	mov	sl, r3
 80003f8:	434a      	muls	r2, r1
 80003fa:	4361      	muls	r1, r4
 80003fc:	4449      	add	r1, r9
 80003fe:	4451      	add	r1, sl
 8000400:	44ab      	add	fp, r5
 8000402:	4589      	cmp	r9, r1
 8000404:	d903      	bls.n	800040e <__aeabi_dmul+0x1a2>
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	4699      	mov	r9, r3
 800040c:	444a      	add	r2, r9
 800040e:	0400      	lsls	r0, r0, #16
 8000410:	0c0b      	lsrs	r3, r1, #16
 8000412:	0c00      	lsrs	r0, r0, #16
 8000414:	0409      	lsls	r1, r1, #16
 8000416:	1809      	adds	r1, r1, r0
 8000418:	0020      	movs	r0, r4
 800041a:	4699      	mov	r9, r3
 800041c:	4643      	mov	r3, r8
 800041e:	4370      	muls	r0, r6
 8000420:	435c      	muls	r4, r3
 8000422:	437e      	muls	r6, r7
 8000424:	435f      	muls	r7, r3
 8000426:	0c03      	lsrs	r3, r0, #16
 8000428:	4698      	mov	r8, r3
 800042a:	19a4      	adds	r4, r4, r6
 800042c:	4444      	add	r4, r8
 800042e:	444a      	add	r2, r9
 8000430:	9703      	str	r7, [sp, #12]
 8000432:	42a6      	cmp	r6, r4
 8000434:	d904      	bls.n	8000440 <__aeabi_dmul+0x1d4>
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	025b      	lsls	r3, r3, #9
 800043a:	4698      	mov	r8, r3
 800043c:	4447      	add	r7, r8
 800043e:	9703      	str	r7, [sp, #12]
 8000440:	0423      	lsls	r3, r4, #16
 8000442:	9e02      	ldr	r6, [sp, #8]
 8000444:	469a      	mov	sl, r3
 8000446:	9b05      	ldr	r3, [sp, #20]
 8000448:	445e      	add	r6, fp
 800044a:	4698      	mov	r8, r3
 800044c:	42ae      	cmp	r6, r5
 800044e:	41ad      	sbcs	r5, r5
 8000450:	1876      	adds	r6, r6, r1
 8000452:	428e      	cmp	r6, r1
 8000454:	4189      	sbcs	r1, r1
 8000456:	0400      	lsls	r0, r0, #16
 8000458:	0c00      	lsrs	r0, r0, #16
 800045a:	4450      	add	r0, sl
 800045c:	4440      	add	r0, r8
 800045e:	426d      	negs	r5, r5
 8000460:	1947      	adds	r7, r0, r5
 8000462:	46b8      	mov	r8, r7
 8000464:	4693      	mov	fp, r2
 8000466:	4249      	negs	r1, r1
 8000468:	4689      	mov	r9, r1
 800046a:	44c3      	add	fp, r8
 800046c:	44d9      	add	r9, fp
 800046e:	4298      	cmp	r0, r3
 8000470:	4180      	sbcs	r0, r0
 8000472:	45a8      	cmp	r8, r5
 8000474:	41ad      	sbcs	r5, r5
 8000476:	4593      	cmp	fp, r2
 8000478:	4192      	sbcs	r2, r2
 800047a:	4589      	cmp	r9, r1
 800047c:	4189      	sbcs	r1, r1
 800047e:	426d      	negs	r5, r5
 8000480:	4240      	negs	r0, r0
 8000482:	4328      	orrs	r0, r5
 8000484:	0c24      	lsrs	r4, r4, #16
 8000486:	4252      	negs	r2, r2
 8000488:	4249      	negs	r1, r1
 800048a:	430a      	orrs	r2, r1
 800048c:	9b03      	ldr	r3, [sp, #12]
 800048e:	1900      	adds	r0, r0, r4
 8000490:	1880      	adds	r0, r0, r2
 8000492:	18c7      	adds	r7, r0, r3
 8000494:	464b      	mov	r3, r9
 8000496:	0ddc      	lsrs	r4, r3, #23
 8000498:	9b04      	ldr	r3, [sp, #16]
 800049a:	0275      	lsls	r5, r6, #9
 800049c:	431d      	orrs	r5, r3
 800049e:	1e6a      	subs	r2, r5, #1
 80004a0:	4195      	sbcs	r5, r2
 80004a2:	464b      	mov	r3, r9
 80004a4:	0df6      	lsrs	r6, r6, #23
 80004a6:	027f      	lsls	r7, r7, #9
 80004a8:	4335      	orrs	r5, r6
 80004aa:	025a      	lsls	r2, r3, #9
 80004ac:	433c      	orrs	r4, r7
 80004ae:	4315      	orrs	r5, r2
 80004b0:	01fb      	lsls	r3, r7, #7
 80004b2:	d400      	bmi.n	80004b6 <__aeabi_dmul+0x24a>
 80004b4:	e11c      	b.n	80006f0 <__aeabi_dmul+0x484>
 80004b6:	2101      	movs	r1, #1
 80004b8:	086a      	lsrs	r2, r5, #1
 80004ba:	400d      	ands	r5, r1
 80004bc:	4315      	orrs	r5, r2
 80004be:	07e2      	lsls	r2, r4, #31
 80004c0:	4315      	orrs	r5, r2
 80004c2:	0864      	lsrs	r4, r4, #1
 80004c4:	494f      	ldr	r1, [pc, #316]	; (8000604 <__aeabi_dmul+0x398>)
 80004c6:	4461      	add	r1, ip
 80004c8:	2900      	cmp	r1, #0
 80004ca:	dc00      	bgt.n	80004ce <__aeabi_dmul+0x262>
 80004cc:	e0b0      	b.n	8000630 <__aeabi_dmul+0x3c4>
 80004ce:	076b      	lsls	r3, r5, #29
 80004d0:	d009      	beq.n	80004e6 <__aeabi_dmul+0x27a>
 80004d2:	220f      	movs	r2, #15
 80004d4:	402a      	ands	r2, r5
 80004d6:	2a04      	cmp	r2, #4
 80004d8:	d005      	beq.n	80004e6 <__aeabi_dmul+0x27a>
 80004da:	1d2a      	adds	r2, r5, #4
 80004dc:	42aa      	cmp	r2, r5
 80004de:	41ad      	sbcs	r5, r5
 80004e0:	426d      	negs	r5, r5
 80004e2:	1964      	adds	r4, r4, r5
 80004e4:	0015      	movs	r5, r2
 80004e6:	01e3      	lsls	r3, r4, #7
 80004e8:	d504      	bpl.n	80004f4 <__aeabi_dmul+0x288>
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	4a46      	ldr	r2, [pc, #280]	; (8000608 <__aeabi_dmul+0x39c>)
 80004ee:	00c9      	lsls	r1, r1, #3
 80004f0:	4014      	ands	r4, r2
 80004f2:	4461      	add	r1, ip
 80004f4:	4a45      	ldr	r2, [pc, #276]	; (800060c <__aeabi_dmul+0x3a0>)
 80004f6:	4291      	cmp	r1, r2
 80004f8:	dd00      	ble.n	80004fc <__aeabi_dmul+0x290>
 80004fa:	e726      	b.n	800034a <__aeabi_dmul+0xde>
 80004fc:	0762      	lsls	r2, r4, #29
 80004fe:	08ed      	lsrs	r5, r5, #3
 8000500:	0264      	lsls	r4, r4, #9
 8000502:	0549      	lsls	r1, r1, #21
 8000504:	4315      	orrs	r5, r2
 8000506:	0b24      	lsrs	r4, r4, #12
 8000508:	0d4a      	lsrs	r2, r1, #21
 800050a:	e710      	b.n	800032e <__aeabi_dmul+0xc2>
 800050c:	4652      	mov	r2, sl
 800050e:	4332      	orrs	r2, r6
 8000510:	d100      	bne.n	8000514 <__aeabi_dmul+0x2a8>
 8000512:	e07f      	b.n	8000614 <__aeabi_dmul+0x3a8>
 8000514:	2e00      	cmp	r6, #0
 8000516:	d100      	bne.n	800051a <__aeabi_dmul+0x2ae>
 8000518:	e0dc      	b.n	80006d4 <__aeabi_dmul+0x468>
 800051a:	0030      	movs	r0, r6
 800051c:	f000 fd48 	bl	8000fb0 <__clzsi2>
 8000520:	0002      	movs	r2, r0
 8000522:	3a0b      	subs	r2, #11
 8000524:	231d      	movs	r3, #29
 8000526:	0001      	movs	r1, r0
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	3908      	subs	r1, #8
 800052e:	40da      	lsrs	r2, r3
 8000530:	408e      	lsls	r6, r1
 8000532:	4316      	orrs	r6, r2
 8000534:	4652      	mov	r2, sl
 8000536:	408a      	lsls	r2, r1
 8000538:	9b00      	ldr	r3, [sp, #0]
 800053a:	4935      	ldr	r1, [pc, #212]	; (8000610 <__aeabi_dmul+0x3a4>)
 800053c:	1a18      	subs	r0, r3, r0
 800053e:	0003      	movs	r3, r0
 8000540:	468c      	mov	ip, r1
 8000542:	4463      	add	r3, ip
 8000544:	2000      	movs	r0, #0
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	e6d3      	b.n	80002f2 <__aeabi_dmul+0x86>
 800054a:	0025      	movs	r5, r4
 800054c:	4305      	orrs	r5, r0
 800054e:	d04a      	beq.n	80005e6 <__aeabi_dmul+0x37a>
 8000550:	2c00      	cmp	r4, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dmul+0x2ea>
 8000554:	e0b0      	b.n	80006b8 <__aeabi_dmul+0x44c>
 8000556:	0020      	movs	r0, r4
 8000558:	f000 fd2a 	bl	8000fb0 <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	0002      	movs	r2, r0
 8000560:	390b      	subs	r1, #11
 8000562:	231d      	movs	r3, #29
 8000564:	0010      	movs	r0, r2
 8000566:	1a5b      	subs	r3, r3, r1
 8000568:	0031      	movs	r1, r6
 800056a:	0035      	movs	r5, r6
 800056c:	3808      	subs	r0, #8
 800056e:	4084      	lsls	r4, r0
 8000570:	40d9      	lsrs	r1, r3
 8000572:	4085      	lsls	r5, r0
 8000574:	430c      	orrs	r4, r1
 8000576:	4826      	ldr	r0, [pc, #152]	; (8000610 <__aeabi_dmul+0x3a4>)
 8000578:	1a83      	subs	r3, r0, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	4699      	mov	r9, r3
 8000580:	469b      	mov	fp, r3
 8000582:	e697      	b.n	80002b4 <__aeabi_dmul+0x48>
 8000584:	0005      	movs	r5, r0
 8000586:	4325      	orrs	r5, r4
 8000588:	d126      	bne.n	80005d8 <__aeabi_dmul+0x36c>
 800058a:	2208      	movs	r2, #8
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2302      	movs	r3, #2
 8000590:	2400      	movs	r4, #0
 8000592:	4691      	mov	r9, r2
 8000594:	469b      	mov	fp, r3
 8000596:	e68d      	b.n	80002b4 <__aeabi_dmul+0x48>
 8000598:	4652      	mov	r2, sl
 800059a:	9b00      	ldr	r3, [sp, #0]
 800059c:	4332      	orrs	r2, r6
 800059e:	d110      	bne.n	80005c2 <__aeabi_dmul+0x356>
 80005a0:	4915      	ldr	r1, [pc, #84]	; (80005f8 <__aeabi_dmul+0x38c>)
 80005a2:	2600      	movs	r6, #0
 80005a4:	468c      	mov	ip, r1
 80005a6:	4463      	add	r3, ip
 80005a8:	4649      	mov	r1, r9
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2302      	movs	r3, #2
 80005ae:	4319      	orrs	r1, r3
 80005b0:	4689      	mov	r9, r1
 80005b2:	2002      	movs	r0, #2
 80005b4:	e69d      	b.n	80002f2 <__aeabi_dmul+0x86>
 80005b6:	465b      	mov	r3, fp
 80005b8:	9701      	str	r7, [sp, #4]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d000      	beq.n	80005c0 <__aeabi_dmul+0x354>
 80005be:	e6ad      	b.n	800031c <__aeabi_dmul+0xb0>
 80005c0:	e6c3      	b.n	800034a <__aeabi_dmul+0xde>
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <__aeabi_dmul+0x38c>)
 80005c4:	2003      	movs	r0, #3
 80005c6:	4694      	mov	ip, r2
 80005c8:	4463      	add	r3, ip
 80005ca:	464a      	mov	r2, r9
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2303      	movs	r3, #3
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4691      	mov	r9, r2
 80005d4:	4652      	mov	r2, sl
 80005d6:	e68c      	b.n	80002f2 <__aeabi_dmul+0x86>
 80005d8:	220c      	movs	r2, #12
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2303      	movs	r3, #3
 80005de:	0005      	movs	r5, r0
 80005e0:	4691      	mov	r9, r2
 80005e2:	469b      	mov	fp, r3
 80005e4:	e666      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005e6:	2304      	movs	r3, #4
 80005e8:	4699      	mov	r9, r3
 80005ea:	2300      	movs	r3, #0
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2400      	movs	r4, #0
 80005f2:	469b      	mov	fp, r3
 80005f4:	e65e      	b.n	80002b4 <__aeabi_dmul+0x48>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	000007ff 	.word	0x000007ff
 80005fc:	fffffc01 	.word	0xfffffc01
 8000600:	08004f30 	.word	0x08004f30
 8000604:	000003ff 	.word	0x000003ff
 8000608:	feffffff 	.word	0xfeffffff
 800060c:	000007fe 	.word	0x000007fe
 8000610:	fffffc0d 	.word	0xfffffc0d
 8000614:	4649      	mov	r1, r9
 8000616:	2301      	movs	r3, #1
 8000618:	4319      	orrs	r1, r3
 800061a:	4689      	mov	r9, r1
 800061c:	2600      	movs	r6, #0
 800061e:	2001      	movs	r0, #1
 8000620:	e667      	b.n	80002f2 <__aeabi_dmul+0x86>
 8000622:	2300      	movs	r3, #0
 8000624:	2480      	movs	r4, #128	; 0x80
 8000626:	2500      	movs	r5, #0
 8000628:	4a43      	ldr	r2, [pc, #268]	; (8000738 <__aeabi_dmul+0x4cc>)
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	0324      	lsls	r4, r4, #12
 800062e:	e67e      	b.n	800032e <__aeabi_dmul+0xc2>
 8000630:	2001      	movs	r0, #1
 8000632:	1a40      	subs	r0, r0, r1
 8000634:	2838      	cmp	r0, #56	; 0x38
 8000636:	dd00      	ble.n	800063a <__aeabi_dmul+0x3ce>
 8000638:	e676      	b.n	8000328 <__aeabi_dmul+0xbc>
 800063a:	281f      	cmp	r0, #31
 800063c:	dd5b      	ble.n	80006f6 <__aeabi_dmul+0x48a>
 800063e:	221f      	movs	r2, #31
 8000640:	0023      	movs	r3, r4
 8000642:	4252      	negs	r2, r2
 8000644:	1a51      	subs	r1, r2, r1
 8000646:	40cb      	lsrs	r3, r1
 8000648:	0019      	movs	r1, r3
 800064a:	2820      	cmp	r0, #32
 800064c:	d003      	beq.n	8000656 <__aeabi_dmul+0x3ea>
 800064e:	4a3b      	ldr	r2, [pc, #236]	; (800073c <__aeabi_dmul+0x4d0>)
 8000650:	4462      	add	r2, ip
 8000652:	4094      	lsls	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	1e6a      	subs	r2, r5, #1
 8000658:	4195      	sbcs	r5, r2
 800065a:	002a      	movs	r2, r5
 800065c:	430a      	orrs	r2, r1
 800065e:	2107      	movs	r1, #7
 8000660:	000d      	movs	r5, r1
 8000662:	2400      	movs	r4, #0
 8000664:	4015      	ands	r5, r2
 8000666:	4211      	tst	r1, r2
 8000668:	d05b      	beq.n	8000722 <__aeabi_dmul+0x4b6>
 800066a:	210f      	movs	r1, #15
 800066c:	2400      	movs	r4, #0
 800066e:	4011      	ands	r1, r2
 8000670:	2904      	cmp	r1, #4
 8000672:	d053      	beq.n	800071c <__aeabi_dmul+0x4b0>
 8000674:	1d11      	adds	r1, r2, #4
 8000676:	4291      	cmp	r1, r2
 8000678:	4192      	sbcs	r2, r2
 800067a:	4252      	negs	r2, r2
 800067c:	18a4      	adds	r4, r4, r2
 800067e:	000a      	movs	r2, r1
 8000680:	0223      	lsls	r3, r4, #8
 8000682:	d54b      	bpl.n	800071c <__aeabi_dmul+0x4b0>
 8000684:	2201      	movs	r2, #1
 8000686:	2400      	movs	r4, #0
 8000688:	2500      	movs	r5, #0
 800068a:	e650      	b.n	800032e <__aeabi_dmul+0xc2>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	031b      	lsls	r3, r3, #12
 8000690:	421c      	tst	r4, r3
 8000692:	d009      	beq.n	80006a8 <__aeabi_dmul+0x43c>
 8000694:	421e      	tst	r6, r3
 8000696:	d107      	bne.n	80006a8 <__aeabi_dmul+0x43c>
 8000698:	4333      	orrs	r3, r6
 800069a:	031c      	lsls	r4, r3, #12
 800069c:	4643      	mov	r3, r8
 800069e:	0015      	movs	r5, r2
 80006a0:	0b24      	lsrs	r4, r4, #12
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <__aeabi_dmul+0x4cc>)
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	e642      	b.n	800032e <__aeabi_dmul+0xc2>
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0312      	lsls	r2, r2, #12
 80006ac:	4314      	orrs	r4, r2
 80006ae:	0324      	lsls	r4, r4, #12
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <__aeabi_dmul+0x4cc>)
 80006b2:	0b24      	lsrs	r4, r4, #12
 80006b4:	9701      	str	r7, [sp, #4]
 80006b6:	e63a      	b.n	800032e <__aeabi_dmul+0xc2>
 80006b8:	f000 fc7a 	bl	8000fb0 <__clzsi2>
 80006bc:	0001      	movs	r1, r0
 80006be:	0002      	movs	r2, r0
 80006c0:	3115      	adds	r1, #21
 80006c2:	3220      	adds	r2, #32
 80006c4:	291c      	cmp	r1, #28
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_dmul+0x45e>
 80006c8:	e74b      	b.n	8000562 <__aeabi_dmul+0x2f6>
 80006ca:	0034      	movs	r4, r6
 80006cc:	3808      	subs	r0, #8
 80006ce:	2500      	movs	r5, #0
 80006d0:	4084      	lsls	r4, r0
 80006d2:	e750      	b.n	8000576 <__aeabi_dmul+0x30a>
 80006d4:	f000 fc6c 	bl	8000fb0 <__clzsi2>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	3215      	adds	r2, #21
 80006de:	3020      	adds	r0, #32
 80006e0:	2a1c      	cmp	r2, #28
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_dmul+0x47a>
 80006e4:	e71e      	b.n	8000524 <__aeabi_dmul+0x2b8>
 80006e6:	4656      	mov	r6, sl
 80006e8:	3b08      	subs	r3, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	409e      	lsls	r6, r3
 80006ee:	e723      	b.n	8000538 <__aeabi_dmul+0x2cc>
 80006f0:	9b00      	ldr	r3, [sp, #0]
 80006f2:	469c      	mov	ip, r3
 80006f4:	e6e6      	b.n	80004c4 <__aeabi_dmul+0x258>
 80006f6:	4912      	ldr	r1, [pc, #72]	; (8000740 <__aeabi_dmul+0x4d4>)
 80006f8:	0022      	movs	r2, r4
 80006fa:	4461      	add	r1, ip
 80006fc:	002e      	movs	r6, r5
 80006fe:	408d      	lsls	r5, r1
 8000700:	408a      	lsls	r2, r1
 8000702:	40c6      	lsrs	r6, r0
 8000704:	1e69      	subs	r1, r5, #1
 8000706:	418d      	sbcs	r5, r1
 8000708:	4332      	orrs	r2, r6
 800070a:	432a      	orrs	r2, r5
 800070c:	40c4      	lsrs	r4, r0
 800070e:	0753      	lsls	r3, r2, #29
 8000710:	d0b6      	beq.n	8000680 <__aeabi_dmul+0x414>
 8000712:	210f      	movs	r1, #15
 8000714:	4011      	ands	r1, r2
 8000716:	2904      	cmp	r1, #4
 8000718:	d1ac      	bne.n	8000674 <__aeabi_dmul+0x408>
 800071a:	e7b1      	b.n	8000680 <__aeabi_dmul+0x414>
 800071c:	0765      	lsls	r5, r4, #29
 800071e:	0264      	lsls	r4, r4, #9
 8000720:	0b24      	lsrs	r4, r4, #12
 8000722:	08d2      	lsrs	r2, r2, #3
 8000724:	4315      	orrs	r5, r2
 8000726:	2200      	movs	r2, #0
 8000728:	e601      	b.n	800032e <__aeabi_dmul+0xc2>
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0312      	lsls	r2, r2, #12
 800072e:	4314      	orrs	r4, r2
 8000730:	0324      	lsls	r4, r4, #12
 8000732:	4a01      	ldr	r2, [pc, #4]	; (8000738 <__aeabi_dmul+0x4cc>)
 8000734:	0b24      	lsrs	r4, r4, #12
 8000736:	e5fa      	b.n	800032e <__aeabi_dmul+0xc2>
 8000738:	000007ff 	.word	0x000007ff
 800073c:	0000043e 	.word	0x0000043e
 8000740:	0000041e 	.word	0x0000041e

08000744 <__aeabi_dsub>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	4657      	mov	r7, sl
 8000748:	464e      	mov	r6, r9
 800074a:	4645      	mov	r5, r8
 800074c:	46de      	mov	lr, fp
 800074e:	b5e0      	push	{r5, r6, r7, lr}
 8000750:	001e      	movs	r6, r3
 8000752:	0017      	movs	r7, r2
 8000754:	004a      	lsls	r2, r1, #1
 8000756:	030b      	lsls	r3, r1, #12
 8000758:	0d52      	lsrs	r2, r2, #21
 800075a:	0a5b      	lsrs	r3, r3, #9
 800075c:	4690      	mov	r8, r2
 800075e:	0f42      	lsrs	r2, r0, #29
 8000760:	431a      	orrs	r2, r3
 8000762:	0fcd      	lsrs	r5, r1, #31
 8000764:	4ccd      	ldr	r4, [pc, #820]	; (8000a9c <__aeabi_dsub+0x358>)
 8000766:	0331      	lsls	r1, r6, #12
 8000768:	00c3      	lsls	r3, r0, #3
 800076a:	4694      	mov	ip, r2
 800076c:	0070      	lsls	r0, r6, #1
 800076e:	0f7a      	lsrs	r2, r7, #29
 8000770:	0a49      	lsrs	r1, r1, #9
 8000772:	00ff      	lsls	r7, r7, #3
 8000774:	469a      	mov	sl, r3
 8000776:	46b9      	mov	r9, r7
 8000778:	0d40      	lsrs	r0, r0, #21
 800077a:	0ff6      	lsrs	r6, r6, #31
 800077c:	4311      	orrs	r1, r2
 800077e:	42a0      	cmp	r0, r4
 8000780:	d100      	bne.n	8000784 <__aeabi_dsub+0x40>
 8000782:	e0b1      	b.n	80008e8 <__aeabi_dsub+0x1a4>
 8000784:	2201      	movs	r2, #1
 8000786:	4056      	eors	r6, r2
 8000788:	46b3      	mov	fp, r6
 800078a:	42b5      	cmp	r5, r6
 800078c:	d100      	bne.n	8000790 <__aeabi_dsub+0x4c>
 800078e:	e088      	b.n	80008a2 <__aeabi_dsub+0x15e>
 8000790:	4642      	mov	r2, r8
 8000792:	1a12      	subs	r2, r2, r0
 8000794:	2a00      	cmp	r2, #0
 8000796:	dc00      	bgt.n	800079a <__aeabi_dsub+0x56>
 8000798:	e0ae      	b.n	80008f8 <__aeabi_dsub+0x1b4>
 800079a:	2800      	cmp	r0, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dsub+0x5c>
 800079e:	e0c1      	b.n	8000924 <__aeabi_dsub+0x1e0>
 80007a0:	48be      	ldr	r0, [pc, #760]	; (8000a9c <__aeabi_dsub+0x358>)
 80007a2:	4580      	cmp	r8, r0
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dsub+0x64>
 80007a6:	e151      	b.n	8000a4c <__aeabi_dsub+0x308>
 80007a8:	2080      	movs	r0, #128	; 0x80
 80007aa:	0400      	lsls	r0, r0, #16
 80007ac:	4301      	orrs	r1, r0
 80007ae:	2a38      	cmp	r2, #56	; 0x38
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dsub+0x70>
 80007b2:	e17b      	b.n	8000aac <__aeabi_dsub+0x368>
 80007b4:	2a1f      	cmp	r2, #31
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dsub+0x76>
 80007b8:	e1ee      	b.n	8000b98 <__aeabi_dsub+0x454>
 80007ba:	2020      	movs	r0, #32
 80007bc:	003e      	movs	r6, r7
 80007be:	1a80      	subs	r0, r0, r2
 80007c0:	000c      	movs	r4, r1
 80007c2:	40d6      	lsrs	r6, r2
 80007c4:	40d1      	lsrs	r1, r2
 80007c6:	4087      	lsls	r7, r0
 80007c8:	4662      	mov	r2, ip
 80007ca:	4084      	lsls	r4, r0
 80007cc:	1a52      	subs	r2, r2, r1
 80007ce:	1e78      	subs	r0, r7, #1
 80007d0:	4187      	sbcs	r7, r0
 80007d2:	4694      	mov	ip, r2
 80007d4:	4334      	orrs	r4, r6
 80007d6:	4327      	orrs	r7, r4
 80007d8:	1bdc      	subs	r4, r3, r7
 80007da:	42a3      	cmp	r3, r4
 80007dc:	419b      	sbcs	r3, r3
 80007de:	4662      	mov	r2, ip
 80007e0:	425b      	negs	r3, r3
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	4699      	mov	r9, r3
 80007e6:	464b      	mov	r3, r9
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dsub+0xaa>
 80007ec:	e118      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 80007ee:	464b      	mov	r3, r9
 80007f0:	0258      	lsls	r0, r3, #9
 80007f2:	0a43      	lsrs	r3, r0, #9
 80007f4:	4699      	mov	r9, r3
 80007f6:	464b      	mov	r3, r9
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dsub+0xba>
 80007fc:	e137      	b.n	8000a6e <__aeabi_dsub+0x32a>
 80007fe:	4648      	mov	r0, r9
 8000800:	f000 fbd6 	bl	8000fb0 <__clzsi2>
 8000804:	0001      	movs	r1, r0
 8000806:	3908      	subs	r1, #8
 8000808:	2320      	movs	r3, #32
 800080a:	0022      	movs	r2, r4
 800080c:	4648      	mov	r0, r9
 800080e:	1a5b      	subs	r3, r3, r1
 8000810:	40da      	lsrs	r2, r3
 8000812:	4088      	lsls	r0, r1
 8000814:	408c      	lsls	r4, r1
 8000816:	4643      	mov	r3, r8
 8000818:	4310      	orrs	r0, r2
 800081a:	4588      	cmp	r8, r1
 800081c:	dd00      	ble.n	8000820 <__aeabi_dsub+0xdc>
 800081e:	e136      	b.n	8000a8e <__aeabi_dsub+0x34a>
 8000820:	1ac9      	subs	r1, r1, r3
 8000822:	1c4b      	adds	r3, r1, #1
 8000824:	2b1f      	cmp	r3, #31
 8000826:	dd00      	ble.n	800082a <__aeabi_dsub+0xe6>
 8000828:	e0ea      	b.n	8000a00 <__aeabi_dsub+0x2bc>
 800082a:	2220      	movs	r2, #32
 800082c:	0026      	movs	r6, r4
 800082e:	1ad2      	subs	r2, r2, r3
 8000830:	0001      	movs	r1, r0
 8000832:	4094      	lsls	r4, r2
 8000834:	40de      	lsrs	r6, r3
 8000836:	40d8      	lsrs	r0, r3
 8000838:	2300      	movs	r3, #0
 800083a:	4091      	lsls	r1, r2
 800083c:	1e62      	subs	r2, r4, #1
 800083e:	4194      	sbcs	r4, r2
 8000840:	4681      	mov	r9, r0
 8000842:	4698      	mov	r8, r3
 8000844:	4331      	orrs	r1, r6
 8000846:	430c      	orrs	r4, r1
 8000848:	0763      	lsls	r3, r4, #29
 800084a:	d009      	beq.n	8000860 <__aeabi_dsub+0x11c>
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	2b04      	cmp	r3, #4
 8000852:	d005      	beq.n	8000860 <__aeabi_dsub+0x11c>
 8000854:	1d23      	adds	r3, r4, #4
 8000856:	42a3      	cmp	r3, r4
 8000858:	41a4      	sbcs	r4, r4
 800085a:	4264      	negs	r4, r4
 800085c:	44a1      	add	r9, r4
 800085e:	001c      	movs	r4, r3
 8000860:	464b      	mov	r3, r9
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	d400      	bmi.n	8000868 <__aeabi_dsub+0x124>
 8000866:	e0de      	b.n	8000a26 <__aeabi_dsub+0x2e2>
 8000868:	4641      	mov	r1, r8
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <__aeabi_dsub+0x358>)
 800086c:	3101      	adds	r1, #1
 800086e:	4299      	cmp	r1, r3
 8000870:	d100      	bne.n	8000874 <__aeabi_dsub+0x130>
 8000872:	e0e7      	b.n	8000a44 <__aeabi_dsub+0x300>
 8000874:	464b      	mov	r3, r9
 8000876:	488a      	ldr	r0, [pc, #552]	; (8000aa0 <__aeabi_dsub+0x35c>)
 8000878:	08e4      	lsrs	r4, r4, #3
 800087a:	4003      	ands	r3, r0
 800087c:	0018      	movs	r0, r3
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	075b      	lsls	r3, r3, #29
 8000882:	0240      	lsls	r0, r0, #9
 8000884:	4323      	orrs	r3, r4
 8000886:	0d4a      	lsrs	r2, r1, #21
 8000888:	0b04      	lsrs	r4, r0, #12
 800088a:	0512      	lsls	r2, r2, #20
 800088c:	07ed      	lsls	r5, r5, #31
 800088e:	4322      	orrs	r2, r4
 8000890:	432a      	orrs	r2, r5
 8000892:	0018      	movs	r0, r3
 8000894:	0011      	movs	r1, r2
 8000896:	bcf0      	pop	{r4, r5, r6, r7}
 8000898:	46bb      	mov	fp, r7
 800089a:	46b2      	mov	sl, r6
 800089c:	46a9      	mov	r9, r5
 800089e:	46a0      	mov	r8, r4
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	4642      	mov	r2, r8
 80008a4:	1a12      	subs	r2, r2, r0
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	dd52      	ble.n	8000950 <__aeabi_dsub+0x20c>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dsub+0x16c>
 80008ae:	e09c      	b.n	80009ea <__aeabi_dsub+0x2a6>
 80008b0:	45a0      	cmp	r8, r4
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dsub+0x172>
 80008b4:	e0ca      	b.n	8000a4c <__aeabi_dsub+0x308>
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	0400      	lsls	r0, r0, #16
 80008ba:	4301      	orrs	r1, r0
 80008bc:	2a38      	cmp	r2, #56	; 0x38
 80008be:	dd00      	ble.n	80008c2 <__aeabi_dsub+0x17e>
 80008c0:	e149      	b.n	8000b56 <__aeabi_dsub+0x412>
 80008c2:	2a1f      	cmp	r2, #31
 80008c4:	dc00      	bgt.n	80008c8 <__aeabi_dsub+0x184>
 80008c6:	e197      	b.n	8000bf8 <__aeabi_dsub+0x4b4>
 80008c8:	0010      	movs	r0, r2
 80008ca:	000e      	movs	r6, r1
 80008cc:	3820      	subs	r0, #32
 80008ce:	40c6      	lsrs	r6, r0
 80008d0:	2a20      	cmp	r2, #32
 80008d2:	d004      	beq.n	80008de <__aeabi_dsub+0x19a>
 80008d4:	2040      	movs	r0, #64	; 0x40
 80008d6:	1a82      	subs	r2, r0, r2
 80008d8:	4091      	lsls	r1, r2
 80008da:	430f      	orrs	r7, r1
 80008dc:	46b9      	mov	r9, r7
 80008de:	464c      	mov	r4, r9
 80008e0:	1e62      	subs	r2, r4, #1
 80008e2:	4194      	sbcs	r4, r2
 80008e4:	4334      	orrs	r4, r6
 80008e6:	e13a      	b.n	8000b5e <__aeabi_dsub+0x41a>
 80008e8:	000a      	movs	r2, r1
 80008ea:	433a      	orrs	r2, r7
 80008ec:	d028      	beq.n	8000940 <__aeabi_dsub+0x1fc>
 80008ee:	46b3      	mov	fp, r6
 80008f0:	42b5      	cmp	r5, r6
 80008f2:	d02b      	beq.n	800094c <__aeabi_dsub+0x208>
 80008f4:	4a6b      	ldr	r2, [pc, #428]	; (8000aa4 <__aeabi_dsub+0x360>)
 80008f6:	4442      	add	r2, r8
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d05d      	beq.n	80009b8 <__aeabi_dsub+0x274>
 80008fc:	4642      	mov	r2, r8
 80008fe:	4644      	mov	r4, r8
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	2c00      	cmp	r4, #0
 8000904:	d000      	beq.n	8000908 <__aeabi_dsub+0x1c4>
 8000906:	e0f5      	b.n	8000af4 <__aeabi_dsub+0x3b0>
 8000908:	4665      	mov	r5, ip
 800090a:	431d      	orrs	r5, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dsub+0x1cc>
 800090e:	e19c      	b.n	8000c4a <__aeabi_dsub+0x506>
 8000910:	1e55      	subs	r5, r2, #1
 8000912:	2a01      	cmp	r2, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dsub+0x1d4>
 8000916:	e1fb      	b.n	8000d10 <__aeabi_dsub+0x5cc>
 8000918:	4c60      	ldr	r4, [pc, #384]	; (8000a9c <__aeabi_dsub+0x358>)
 800091a:	42a2      	cmp	r2, r4
 800091c:	d100      	bne.n	8000920 <__aeabi_dsub+0x1dc>
 800091e:	e1bd      	b.n	8000c9c <__aeabi_dsub+0x558>
 8000920:	002a      	movs	r2, r5
 8000922:	e0f0      	b.n	8000b06 <__aeabi_dsub+0x3c2>
 8000924:	0008      	movs	r0, r1
 8000926:	4338      	orrs	r0, r7
 8000928:	d100      	bne.n	800092c <__aeabi_dsub+0x1e8>
 800092a:	e0c3      	b.n	8000ab4 <__aeabi_dsub+0x370>
 800092c:	1e50      	subs	r0, r2, #1
 800092e:	2a01      	cmp	r2, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dsub+0x1f0>
 8000932:	e1a8      	b.n	8000c86 <__aeabi_dsub+0x542>
 8000934:	4c59      	ldr	r4, [pc, #356]	; (8000a9c <__aeabi_dsub+0x358>)
 8000936:	42a2      	cmp	r2, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dsub+0x1f8>
 800093a:	e087      	b.n	8000a4c <__aeabi_dsub+0x308>
 800093c:	0002      	movs	r2, r0
 800093e:	e736      	b.n	80007ae <__aeabi_dsub+0x6a>
 8000940:	2201      	movs	r2, #1
 8000942:	4056      	eors	r6, r2
 8000944:	46b3      	mov	fp, r6
 8000946:	42b5      	cmp	r5, r6
 8000948:	d000      	beq.n	800094c <__aeabi_dsub+0x208>
 800094a:	e721      	b.n	8000790 <__aeabi_dsub+0x4c>
 800094c:	4a55      	ldr	r2, [pc, #340]	; (8000aa4 <__aeabi_dsub+0x360>)
 800094e:	4442      	add	r2, r8
 8000950:	2a00      	cmp	r2, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dsub+0x212>
 8000954:	e0b5      	b.n	8000ac2 <__aeabi_dsub+0x37e>
 8000956:	4642      	mov	r2, r8
 8000958:	4644      	mov	r4, r8
 800095a:	1a82      	subs	r2, r0, r2
 800095c:	2c00      	cmp	r4, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_dsub+0x21e>
 8000960:	e138      	b.n	8000bd4 <__aeabi_dsub+0x490>
 8000962:	4e4e      	ldr	r6, [pc, #312]	; (8000a9c <__aeabi_dsub+0x358>)
 8000964:	42b0      	cmp	r0, r6
 8000966:	d100      	bne.n	800096a <__aeabi_dsub+0x226>
 8000968:	e1de      	b.n	8000d28 <__aeabi_dsub+0x5e4>
 800096a:	2680      	movs	r6, #128	; 0x80
 800096c:	4664      	mov	r4, ip
 800096e:	0436      	lsls	r6, r6, #16
 8000970:	4334      	orrs	r4, r6
 8000972:	46a4      	mov	ip, r4
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dsub+0x236>
 8000978:	e196      	b.n	8000ca8 <__aeabi_dsub+0x564>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dsub+0x23c>
 800097e:	e224      	b.n	8000dca <__aeabi_dsub+0x686>
 8000980:	2620      	movs	r6, #32
 8000982:	1ab4      	subs	r4, r6, r2
 8000984:	46a2      	mov	sl, r4
 8000986:	4664      	mov	r4, ip
 8000988:	4656      	mov	r6, sl
 800098a:	40b4      	lsls	r4, r6
 800098c:	46a1      	mov	r9, r4
 800098e:	001c      	movs	r4, r3
 8000990:	464e      	mov	r6, r9
 8000992:	40d4      	lsrs	r4, r2
 8000994:	4326      	orrs	r6, r4
 8000996:	0034      	movs	r4, r6
 8000998:	4656      	mov	r6, sl
 800099a:	40b3      	lsls	r3, r6
 800099c:	1e5e      	subs	r6, r3, #1
 800099e:	41b3      	sbcs	r3, r6
 80009a0:	431c      	orrs	r4, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	40d3      	lsrs	r3, r2
 80009a6:	18c9      	adds	r1, r1, r3
 80009a8:	19e4      	adds	r4, r4, r7
 80009aa:	42bc      	cmp	r4, r7
 80009ac:	41bf      	sbcs	r7, r7
 80009ae:	427f      	negs	r7, r7
 80009b0:	46b9      	mov	r9, r7
 80009b2:	4680      	mov	r8, r0
 80009b4:	4489      	add	r9, r1
 80009b6:	e0d8      	b.n	8000b6a <__aeabi_dsub+0x426>
 80009b8:	4640      	mov	r0, r8
 80009ba:	4c3b      	ldr	r4, [pc, #236]	; (8000aa8 <__aeabi_dsub+0x364>)
 80009bc:	3001      	adds	r0, #1
 80009be:	4220      	tst	r0, r4
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dsub+0x280>
 80009c2:	e0b4      	b.n	8000b2e <__aeabi_dsub+0x3ea>
 80009c4:	4640      	mov	r0, r8
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dsub+0x288>
 80009ca:	e144      	b.n	8000c56 <__aeabi_dsub+0x512>
 80009cc:	4660      	mov	r0, ip
 80009ce:	4318      	orrs	r0, r3
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dsub+0x290>
 80009d2:	e190      	b.n	8000cf6 <__aeabi_dsub+0x5b2>
 80009d4:	0008      	movs	r0, r1
 80009d6:	4338      	orrs	r0, r7
 80009d8:	d000      	beq.n	80009dc <__aeabi_dsub+0x298>
 80009da:	e1aa      	b.n	8000d32 <__aeabi_dsub+0x5ee>
 80009dc:	4661      	mov	r1, ip
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	0749      	lsls	r1, r1, #29
 80009e2:	430b      	orrs	r3, r1
 80009e4:	4661      	mov	r1, ip
 80009e6:	08cc      	lsrs	r4, r1, #3
 80009e8:	e027      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 80009ea:	0008      	movs	r0, r1
 80009ec:	4338      	orrs	r0, r7
 80009ee:	d061      	beq.n	8000ab4 <__aeabi_dsub+0x370>
 80009f0:	1e50      	subs	r0, r2, #1
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dsub+0x2b4>
 80009f6:	e139      	b.n	8000c6c <__aeabi_dsub+0x528>
 80009f8:	42a2      	cmp	r2, r4
 80009fa:	d027      	beq.n	8000a4c <__aeabi_dsub+0x308>
 80009fc:	0002      	movs	r2, r0
 80009fe:	e75d      	b.n	80008bc <__aeabi_dsub+0x178>
 8000a00:	0002      	movs	r2, r0
 8000a02:	391f      	subs	r1, #31
 8000a04:	40ca      	lsrs	r2, r1
 8000a06:	0011      	movs	r1, r2
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	d003      	beq.n	8000a14 <__aeabi_dsub+0x2d0>
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	4098      	lsls	r0, r3
 8000a12:	4304      	orrs	r4, r0
 8000a14:	1e63      	subs	r3, r4, #1
 8000a16:	419c      	sbcs	r4, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	430c      	orrs	r4, r1
 8000a20:	0763      	lsls	r3, r4, #29
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dsub+0x2e2>
 8000a24:	e712      	b.n	800084c <__aeabi_dsub+0x108>
 8000a26:	464b      	mov	r3, r9
 8000a28:	464a      	mov	r2, r9
 8000a2a:	08e4      	lsrs	r4, r4, #3
 8000a2c:	075b      	lsls	r3, r3, #29
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	08d4      	lsrs	r4, r2, #3
 8000a32:	4642      	mov	r2, r8
 8000a34:	4919      	ldr	r1, [pc, #100]	; (8000a9c <__aeabi_dsub+0x358>)
 8000a36:	428a      	cmp	r2, r1
 8000a38:	d00e      	beq.n	8000a58 <__aeabi_dsub+0x314>
 8000a3a:	0324      	lsls	r4, r4, #12
 8000a3c:	0552      	lsls	r2, r2, #21
 8000a3e:	0b24      	lsrs	r4, r4, #12
 8000a40:	0d52      	lsrs	r2, r2, #21
 8000a42:	e722      	b.n	800088a <__aeabi_dsub+0x146>
 8000a44:	000a      	movs	r2, r1
 8000a46:	2400      	movs	r4, #0
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e71e      	b.n	800088a <__aeabi_dsub+0x146>
 8000a4c:	08db      	lsrs	r3, r3, #3
 8000a4e:	4662      	mov	r2, ip
 8000a50:	0752      	lsls	r2, r2, #29
 8000a52:	4313      	orrs	r3, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	08d4      	lsrs	r4, r2, #3
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4322      	orrs	r2, r4
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dsub+0x31c>
 8000a5e:	e1fc      	b.n	8000e5a <__aeabi_dsub+0x716>
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	0312      	lsls	r2, r2, #12
 8000a64:	4314      	orrs	r4, r2
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <__aeabi_dsub+0x358>)
 8000a6a:	0b24      	lsrs	r4, r4, #12
 8000a6c:	e70d      	b.n	800088a <__aeabi_dsub+0x146>
 8000a6e:	0020      	movs	r0, r4
 8000a70:	f000 fa9e 	bl	8000fb0 <__clzsi2>
 8000a74:	0001      	movs	r1, r0
 8000a76:	3118      	adds	r1, #24
 8000a78:	291f      	cmp	r1, #31
 8000a7a:	dc00      	bgt.n	8000a7e <__aeabi_dsub+0x33a>
 8000a7c:	e6c4      	b.n	8000808 <__aeabi_dsub+0xc4>
 8000a7e:	3808      	subs	r0, #8
 8000a80:	4084      	lsls	r4, r0
 8000a82:	4643      	mov	r3, r8
 8000a84:	0020      	movs	r0, r4
 8000a86:	2400      	movs	r4, #0
 8000a88:	4588      	cmp	r8, r1
 8000a8a:	dc00      	bgt.n	8000a8e <__aeabi_dsub+0x34a>
 8000a8c:	e6c8      	b.n	8000820 <__aeabi_dsub+0xdc>
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__aeabi_dsub+0x35c>)
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	4010      	ands	r0, r2
 8000a94:	4698      	mov	r8, r3
 8000a96:	4681      	mov	r9, r0
 8000a98:	e6d6      	b.n	8000848 <__aeabi_dsub+0x104>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	000007ff 	.word	0x000007ff
 8000aa0:	ff7fffff 	.word	0xff7fffff
 8000aa4:	fffff801 	.word	0xfffff801
 8000aa8:	000007fe 	.word	0x000007fe
 8000aac:	430f      	orrs	r7, r1
 8000aae:	1e7a      	subs	r2, r7, #1
 8000ab0:	4197      	sbcs	r7, r2
 8000ab2:	e691      	b.n	80007d8 <__aeabi_dsub+0x94>
 8000ab4:	4661      	mov	r1, ip
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	0749      	lsls	r1, r1, #29
 8000aba:	430b      	orrs	r3, r1
 8000abc:	4661      	mov	r1, ip
 8000abe:	08cc      	lsrs	r4, r1, #3
 8000ac0:	e7b8      	b.n	8000a34 <__aeabi_dsub+0x2f0>
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	4cd3      	ldr	r4, [pc, #844]	; (8000e14 <__aeabi_dsub+0x6d0>)
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	4220      	tst	r0, r4
 8000aca:	d000      	beq.n	8000ace <__aeabi_dsub+0x38a>
 8000acc:	e0a2      	b.n	8000c14 <__aeabi_dsub+0x4d0>
 8000ace:	4640      	mov	r0, r8
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_dsub+0x392>
 8000ad4:	e101      	b.n	8000cda <__aeabi_dsub+0x596>
 8000ad6:	4660      	mov	r0, ip
 8000ad8:	4318      	orrs	r0, r3
 8000ada:	d100      	bne.n	8000ade <__aeabi_dsub+0x39a>
 8000adc:	e15e      	b.n	8000d9c <__aeabi_dsub+0x658>
 8000ade:	0008      	movs	r0, r1
 8000ae0:	4338      	orrs	r0, r7
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_dsub+0x3a2>
 8000ae4:	e15f      	b.n	8000da6 <__aeabi_dsub+0x662>
 8000ae6:	4661      	mov	r1, ip
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	0749      	lsls	r1, r1, #29
 8000aec:	430b      	orrs	r3, r1
 8000aee:	4661      	mov	r1, ip
 8000af0:	08cc      	lsrs	r4, r1, #3
 8000af2:	e7a2      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000af4:	4dc8      	ldr	r5, [pc, #800]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000af6:	42a8      	cmp	r0, r5
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x3b8>
 8000afa:	e0cf      	b.n	8000c9c <__aeabi_dsub+0x558>
 8000afc:	2580      	movs	r5, #128	; 0x80
 8000afe:	4664      	mov	r4, ip
 8000b00:	042d      	lsls	r5, r5, #16
 8000b02:	432c      	orrs	r4, r5
 8000b04:	46a4      	mov	ip, r4
 8000b06:	2a38      	cmp	r2, #56	; 0x38
 8000b08:	dc56      	bgt.n	8000bb8 <__aeabi_dsub+0x474>
 8000b0a:	2a1f      	cmp	r2, #31
 8000b0c:	dd00      	ble.n	8000b10 <__aeabi_dsub+0x3cc>
 8000b0e:	e0d1      	b.n	8000cb4 <__aeabi_dsub+0x570>
 8000b10:	2520      	movs	r5, #32
 8000b12:	001e      	movs	r6, r3
 8000b14:	1aad      	subs	r5, r5, r2
 8000b16:	4664      	mov	r4, ip
 8000b18:	40ab      	lsls	r3, r5
 8000b1a:	40ac      	lsls	r4, r5
 8000b1c:	40d6      	lsrs	r6, r2
 8000b1e:	1e5d      	subs	r5, r3, #1
 8000b20:	41ab      	sbcs	r3, r5
 8000b22:	4334      	orrs	r4, r6
 8000b24:	4323      	orrs	r3, r4
 8000b26:	4664      	mov	r4, ip
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	1b09      	subs	r1, r1, r4
 8000b2c:	e049      	b.n	8000bc2 <__aeabi_dsub+0x47e>
 8000b2e:	4660      	mov	r0, ip
 8000b30:	1bdc      	subs	r4, r3, r7
 8000b32:	1a46      	subs	r6, r0, r1
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	4180      	sbcs	r0, r0
 8000b38:	4240      	negs	r0, r0
 8000b3a:	4681      	mov	r9, r0
 8000b3c:	0030      	movs	r0, r6
 8000b3e:	464e      	mov	r6, r9
 8000b40:	1b80      	subs	r0, r0, r6
 8000b42:	4681      	mov	r9, r0
 8000b44:	0200      	lsls	r0, r0, #8
 8000b46:	d476      	bmi.n	8000c36 <__aeabi_dsub+0x4f2>
 8000b48:	464b      	mov	r3, r9
 8000b4a:	4323      	orrs	r3, r4
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dsub+0x40c>
 8000b4e:	e652      	b.n	80007f6 <__aeabi_dsub+0xb2>
 8000b50:	2400      	movs	r4, #0
 8000b52:	2500      	movs	r5, #0
 8000b54:	e771      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000b56:	4339      	orrs	r1, r7
 8000b58:	000c      	movs	r4, r1
 8000b5a:	1e62      	subs	r2, r4, #1
 8000b5c:	4194      	sbcs	r4, r2
 8000b5e:	18e4      	adds	r4, r4, r3
 8000b60:	429c      	cmp	r4, r3
 8000b62:	419b      	sbcs	r3, r3
 8000b64:	425b      	negs	r3, r3
 8000b66:	4463      	add	r3, ip
 8000b68:	4699      	mov	r9, r3
 8000b6a:	464b      	mov	r3, r9
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	d400      	bmi.n	8000b72 <__aeabi_dsub+0x42e>
 8000b70:	e756      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000b72:	2301      	movs	r3, #1
 8000b74:	469c      	mov	ip, r3
 8000b76:	4ba8      	ldr	r3, [pc, #672]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000b78:	44e0      	add	r8, ip
 8000b7a:	4598      	cmp	r8, r3
 8000b7c:	d038      	beq.n	8000bf0 <__aeabi_dsub+0x4ac>
 8000b7e:	464b      	mov	r3, r9
 8000b80:	48a6      	ldr	r0, [pc, #664]	; (8000e1c <__aeabi_dsub+0x6d8>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	4003      	ands	r3, r0
 8000b86:	0018      	movs	r0, r3
 8000b88:	0863      	lsrs	r3, r4, #1
 8000b8a:	4014      	ands	r4, r2
 8000b8c:	431c      	orrs	r4, r3
 8000b8e:	07c3      	lsls	r3, r0, #31
 8000b90:	431c      	orrs	r4, r3
 8000b92:	0843      	lsrs	r3, r0, #1
 8000b94:	4699      	mov	r9, r3
 8000b96:	e657      	b.n	8000848 <__aeabi_dsub+0x104>
 8000b98:	0010      	movs	r0, r2
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	3820      	subs	r0, #32
 8000b9e:	40c6      	lsrs	r6, r0
 8000ba0:	2a20      	cmp	r2, #32
 8000ba2:	d004      	beq.n	8000bae <__aeabi_dsub+0x46a>
 8000ba4:	2040      	movs	r0, #64	; 0x40
 8000ba6:	1a82      	subs	r2, r0, r2
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	430f      	orrs	r7, r1
 8000bac:	46b9      	mov	r9, r7
 8000bae:	464f      	mov	r7, r9
 8000bb0:	1e7a      	subs	r2, r7, #1
 8000bb2:	4197      	sbcs	r7, r2
 8000bb4:	4337      	orrs	r7, r6
 8000bb6:	e60f      	b.n	80007d8 <__aeabi_dsub+0x94>
 8000bb8:	4662      	mov	r2, ip
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	4193      	sbcs	r3, r2
 8000bc2:	1afc      	subs	r4, r7, r3
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	41bf      	sbcs	r7, r7
 8000bc8:	427f      	negs	r7, r7
 8000bca:	1bcb      	subs	r3, r1, r7
 8000bcc:	4699      	mov	r9, r3
 8000bce:	465d      	mov	r5, fp
 8000bd0:	4680      	mov	r8, r0
 8000bd2:	e608      	b.n	80007e6 <__aeabi_dsub+0xa2>
 8000bd4:	4666      	mov	r6, ip
 8000bd6:	431e      	orrs	r6, r3
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dsub+0x498>
 8000bda:	e0be      	b.n	8000d5a <__aeabi_dsub+0x616>
 8000bdc:	1e56      	subs	r6, r2, #1
 8000bde:	2a01      	cmp	r2, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dsub+0x4a0>
 8000be2:	e109      	b.n	8000df8 <__aeabi_dsub+0x6b4>
 8000be4:	4c8c      	ldr	r4, [pc, #560]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000be6:	42a2      	cmp	r2, r4
 8000be8:	d100      	bne.n	8000bec <__aeabi_dsub+0x4a8>
 8000bea:	e119      	b.n	8000e20 <__aeabi_dsub+0x6dc>
 8000bec:	0032      	movs	r2, r6
 8000bee:	e6c1      	b.n	8000974 <__aeabi_dsub+0x230>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e648      	b.n	800088a <__aeabi_dsub+0x146>
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	000c      	movs	r4, r1
 8000bfc:	1a80      	subs	r0, r0, r2
 8000bfe:	003e      	movs	r6, r7
 8000c00:	4087      	lsls	r7, r0
 8000c02:	4084      	lsls	r4, r0
 8000c04:	40d6      	lsrs	r6, r2
 8000c06:	1e78      	subs	r0, r7, #1
 8000c08:	4187      	sbcs	r7, r0
 8000c0a:	40d1      	lsrs	r1, r2
 8000c0c:	4334      	orrs	r4, r6
 8000c0e:	433c      	orrs	r4, r7
 8000c10:	448c      	add	ip, r1
 8000c12:	e7a4      	b.n	8000b5e <__aeabi_dsub+0x41a>
 8000c14:	4a80      	ldr	r2, [pc, #512]	; (8000e18 <__aeabi_dsub+0x6d4>)
 8000c16:	4290      	cmp	r0, r2
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dsub+0x4d8>
 8000c1a:	e0e9      	b.n	8000df0 <__aeabi_dsub+0x6ac>
 8000c1c:	19df      	adds	r7, r3, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	419b      	sbcs	r3, r3
 8000c22:	4461      	add	r1, ip
 8000c24:	425b      	negs	r3, r3
 8000c26:	18c9      	adds	r1, r1, r3
 8000c28:	07cc      	lsls	r4, r1, #31
 8000c2a:	087f      	lsrs	r7, r7, #1
 8000c2c:	084b      	lsrs	r3, r1, #1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	4680      	mov	r8, r0
 8000c32:	433c      	orrs	r4, r7
 8000c34:	e6f4      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000c36:	1afc      	subs	r4, r7, r3
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	41bf      	sbcs	r7, r7
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	427f      	negs	r7, r7
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	1bcb      	subs	r3, r1, r7
 8000c44:	4699      	mov	r9, r3
 8000c46:	465d      	mov	r5, fp
 8000c48:	e5d5      	b.n	80007f6 <__aeabi_dsub+0xb2>
 8000c4a:	08ff      	lsrs	r7, r7, #3
 8000c4c:	074b      	lsls	r3, r1, #29
 8000c4e:	465d      	mov	r5, fp
 8000c50:	433b      	orrs	r3, r7
 8000c52:	08cc      	lsrs	r4, r1, #3
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dsub+0x2f0>
 8000c56:	4662      	mov	r2, ip
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_dsub+0x51a>
 8000c5c:	e082      	b.n	8000d64 <__aeabi_dsub+0x620>
 8000c5e:	000b      	movs	r3, r1
 8000c60:	433b      	orrs	r3, r7
 8000c62:	d11b      	bne.n	8000c9c <__aeabi_dsub+0x558>
 8000c64:	2480      	movs	r4, #128	; 0x80
 8000c66:	2500      	movs	r5, #0
 8000c68:	0324      	lsls	r4, r4, #12
 8000c6a:	e6f9      	b.n	8000a60 <__aeabi_dsub+0x31c>
 8000c6c:	19dc      	adds	r4, r3, r7
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	419b      	sbcs	r3, r3
 8000c72:	4461      	add	r1, ip
 8000c74:	4689      	mov	r9, r1
 8000c76:	425b      	negs	r3, r3
 8000c78:	4499      	add	r9, r3
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	d444      	bmi.n	8000d0a <__aeabi_dsub+0x5c6>
 8000c80:	2301      	movs	r3, #1
 8000c82:	4698      	mov	r8, r3
 8000c84:	e6cc      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000c86:	1bdc      	subs	r4, r3, r7
 8000c88:	4662      	mov	r2, ip
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	419b      	sbcs	r3, r3
 8000c8e:	1a51      	subs	r1, r2, r1
 8000c90:	425b      	negs	r3, r3
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	4699      	mov	r9, r3
 8000c96:	2301      	movs	r3, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	e5a4      	b.n	80007e6 <__aeabi_dsub+0xa2>
 8000c9c:	08ff      	lsrs	r7, r7, #3
 8000c9e:	074b      	lsls	r3, r1, #29
 8000ca0:	465d      	mov	r5, fp
 8000ca2:	433b      	orrs	r3, r7
 8000ca4:	08cc      	lsrs	r4, r1, #3
 8000ca6:	e6d7      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000ca8:	4662      	mov	r2, ip
 8000caa:	431a      	orrs	r2, r3
 8000cac:	0014      	movs	r4, r2
 8000cae:	1e63      	subs	r3, r4, #1
 8000cb0:	419c      	sbcs	r4, r3
 8000cb2:	e679      	b.n	80009a8 <__aeabi_dsub+0x264>
 8000cb4:	0015      	movs	r5, r2
 8000cb6:	4664      	mov	r4, ip
 8000cb8:	3d20      	subs	r5, #32
 8000cba:	40ec      	lsrs	r4, r5
 8000cbc:	46a0      	mov	r8, r4
 8000cbe:	2a20      	cmp	r2, #32
 8000cc0:	d005      	beq.n	8000cce <__aeabi_dsub+0x58a>
 8000cc2:	2540      	movs	r5, #64	; 0x40
 8000cc4:	4664      	mov	r4, ip
 8000cc6:	1aaa      	subs	r2, r5, r2
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	4323      	orrs	r3, r4
 8000ccc:	469a      	mov	sl, r3
 8000cce:	4654      	mov	r4, sl
 8000cd0:	1e63      	subs	r3, r4, #1
 8000cd2:	419c      	sbcs	r4, r3
 8000cd4:	4643      	mov	r3, r8
 8000cd6:	4323      	orrs	r3, r4
 8000cd8:	e773      	b.n	8000bc2 <__aeabi_dsub+0x47e>
 8000cda:	4662      	mov	r2, ip
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	d023      	beq.n	8000d28 <__aeabi_dsub+0x5e4>
 8000ce0:	000a      	movs	r2, r1
 8000ce2:	433a      	orrs	r2, r7
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_dsub+0x5a4>
 8000ce6:	e0a0      	b.n	8000e2a <__aeabi_dsub+0x6e6>
 8000ce8:	4662      	mov	r2, ip
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0752      	lsls	r2, r2, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	4662      	mov	r2, ip
 8000cf2:	08d4      	lsrs	r4, r2, #3
 8000cf4:	e6b0      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	433b      	orrs	r3, r7
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dsub+0x5ba>
 8000cfc:	e728      	b.n	8000b50 <__aeabi_dsub+0x40c>
 8000cfe:	08ff      	lsrs	r7, r7, #3
 8000d00:	074b      	lsls	r3, r1, #29
 8000d02:	465d      	mov	r5, fp
 8000d04:	433b      	orrs	r3, r7
 8000d06:	08cc      	lsrs	r4, r1, #3
 8000d08:	e697      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	4698      	mov	r8, r3
 8000d0e:	e736      	b.n	8000b7e <__aeabi_dsub+0x43a>
 8000d10:	1afc      	subs	r4, r7, r3
 8000d12:	42a7      	cmp	r7, r4
 8000d14:	41bf      	sbcs	r7, r7
 8000d16:	4663      	mov	r3, ip
 8000d18:	427f      	negs	r7, r7
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	1bcb      	subs	r3, r1, r7
 8000d1e:	4699      	mov	r9, r3
 8000d20:	2301      	movs	r3, #1
 8000d22:	465d      	mov	r5, fp
 8000d24:	4698      	mov	r8, r3
 8000d26:	e55e      	b.n	80007e6 <__aeabi_dsub+0xa2>
 8000d28:	074b      	lsls	r3, r1, #29
 8000d2a:	08ff      	lsrs	r7, r7, #3
 8000d2c:	433b      	orrs	r3, r7
 8000d2e:	08cc      	lsrs	r4, r1, #3
 8000d30:	e692      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000d32:	1bdc      	subs	r4, r3, r7
 8000d34:	4660      	mov	r0, ip
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	41b6      	sbcs	r6, r6
 8000d3a:	1a40      	subs	r0, r0, r1
 8000d3c:	4276      	negs	r6, r6
 8000d3e:	1b80      	subs	r0, r0, r6
 8000d40:	4681      	mov	r9, r0
 8000d42:	0200      	lsls	r0, r0, #8
 8000d44:	d560      	bpl.n	8000e08 <__aeabi_dsub+0x6c4>
 8000d46:	1afc      	subs	r4, r7, r3
 8000d48:	42a7      	cmp	r7, r4
 8000d4a:	41bf      	sbcs	r7, r7
 8000d4c:	4663      	mov	r3, ip
 8000d4e:	427f      	negs	r7, r7
 8000d50:	1ac9      	subs	r1, r1, r3
 8000d52:	1bcb      	subs	r3, r1, r7
 8000d54:	4699      	mov	r9, r3
 8000d56:	465d      	mov	r5, fp
 8000d58:	e576      	b.n	8000848 <__aeabi_dsub+0x104>
 8000d5a:	08ff      	lsrs	r7, r7, #3
 8000d5c:	074b      	lsls	r3, r1, #29
 8000d5e:	433b      	orrs	r3, r7
 8000d60:	08cc      	lsrs	r4, r1, #3
 8000d62:	e667      	b.n	8000a34 <__aeabi_dsub+0x2f0>
 8000d64:	000a      	movs	r2, r1
 8000d66:	08db      	lsrs	r3, r3, #3
 8000d68:	433a      	orrs	r2, r7
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dsub+0x62a>
 8000d6c:	e66f      	b.n	8000a4e <__aeabi_dsub+0x30a>
 8000d6e:	4662      	mov	r2, ip
 8000d70:	0752      	lsls	r2, r2, #29
 8000d72:	4313      	orrs	r3, r2
 8000d74:	4662      	mov	r2, ip
 8000d76:	08d4      	lsrs	r4, r2, #3
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	0312      	lsls	r2, r2, #12
 8000d7c:	4214      	tst	r4, r2
 8000d7e:	d007      	beq.n	8000d90 <__aeabi_dsub+0x64c>
 8000d80:	08c8      	lsrs	r0, r1, #3
 8000d82:	4210      	tst	r0, r2
 8000d84:	d104      	bne.n	8000d90 <__aeabi_dsub+0x64c>
 8000d86:	465d      	mov	r5, fp
 8000d88:	0004      	movs	r4, r0
 8000d8a:	08fb      	lsrs	r3, r7, #3
 8000d8c:	0749      	lsls	r1, r1, #29
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	0f5a      	lsrs	r2, r3, #29
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	0752      	lsls	r2, r2, #29
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	e65d      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000d9c:	074b      	lsls	r3, r1, #29
 8000d9e:	08ff      	lsrs	r7, r7, #3
 8000da0:	433b      	orrs	r3, r7
 8000da2:	08cc      	lsrs	r4, r1, #3
 8000da4:	e649      	b.n	8000a3a <__aeabi_dsub+0x2f6>
 8000da6:	19dc      	adds	r4, r3, r7
 8000da8:	429c      	cmp	r4, r3
 8000daa:	419b      	sbcs	r3, r3
 8000dac:	4461      	add	r1, ip
 8000dae:	4689      	mov	r9, r1
 8000db0:	425b      	negs	r3, r3
 8000db2:	4499      	add	r9, r3
 8000db4:	464b      	mov	r3, r9
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	d400      	bmi.n	8000dbc <__aeabi_dsub+0x678>
 8000dba:	e631      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <__aeabi_dsub+0x6d8>)
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	4698      	mov	r8, r3
 8000dc8:	e62a      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000dca:	0016      	movs	r6, r2
 8000dcc:	4664      	mov	r4, ip
 8000dce:	3e20      	subs	r6, #32
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	46a0      	mov	r8, r4
 8000dd4:	2a20      	cmp	r2, #32
 8000dd6:	d005      	beq.n	8000de4 <__aeabi_dsub+0x6a0>
 8000dd8:	2640      	movs	r6, #64	; 0x40
 8000dda:	4664      	mov	r4, ip
 8000ddc:	1ab2      	subs	r2, r6, r2
 8000dde:	4094      	lsls	r4, r2
 8000de0:	4323      	orrs	r3, r4
 8000de2:	469a      	mov	sl, r3
 8000de4:	4654      	mov	r4, sl
 8000de6:	1e63      	subs	r3, r4, #1
 8000de8:	419c      	sbcs	r4, r3
 8000dea:	4643      	mov	r3, r8
 8000dec:	431c      	orrs	r4, r3
 8000dee:	e5db      	b.n	80009a8 <__aeabi_dsub+0x264>
 8000df0:	0002      	movs	r2, r0
 8000df2:	2400      	movs	r4, #0
 8000df4:	2300      	movs	r3, #0
 8000df6:	e548      	b.n	800088a <__aeabi_dsub+0x146>
 8000df8:	19dc      	adds	r4, r3, r7
 8000dfa:	42bc      	cmp	r4, r7
 8000dfc:	41bf      	sbcs	r7, r7
 8000dfe:	4461      	add	r1, ip
 8000e00:	4689      	mov	r9, r1
 8000e02:	427f      	negs	r7, r7
 8000e04:	44b9      	add	r9, r7
 8000e06:	e738      	b.n	8000c7a <__aeabi_dsub+0x536>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dsub+0x6cc>
 8000e0e:	e69f      	b.n	8000b50 <__aeabi_dsub+0x40c>
 8000e10:	e606      	b.n	8000a20 <__aeabi_dsub+0x2dc>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007fe 	.word	0x000007fe
 8000e18:	000007ff 	.word	0x000007ff
 8000e1c:	ff7fffff 	.word	0xff7fffff
 8000e20:	08ff      	lsrs	r7, r7, #3
 8000e22:	074b      	lsls	r3, r1, #29
 8000e24:	433b      	orrs	r3, r7
 8000e26:	08cc      	lsrs	r4, r1, #3
 8000e28:	e616      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000e2a:	4662      	mov	r2, ip
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	0752      	lsls	r2, r2, #29
 8000e30:	4313      	orrs	r3, r2
 8000e32:	4662      	mov	r2, ip
 8000e34:	08d4      	lsrs	r4, r2, #3
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0312      	lsls	r2, r2, #12
 8000e3a:	4214      	tst	r4, r2
 8000e3c:	d007      	beq.n	8000e4e <__aeabi_dsub+0x70a>
 8000e3e:	08c8      	lsrs	r0, r1, #3
 8000e40:	4210      	tst	r0, r2
 8000e42:	d104      	bne.n	8000e4e <__aeabi_dsub+0x70a>
 8000e44:	465d      	mov	r5, fp
 8000e46:	0004      	movs	r4, r0
 8000e48:	08fb      	lsrs	r3, r7, #3
 8000e4a:	0749      	lsls	r1, r1, #29
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	0f5a      	lsrs	r2, r3, #29
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	0752      	lsls	r2, r2, #29
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	e5fe      	b.n	8000a58 <__aeabi_dsub+0x314>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4a01      	ldr	r2, [pc, #4]	; (8000e64 <__aeabi_dsub+0x720>)
 8000e5e:	001c      	movs	r4, r3
 8000e60:	e513      	b.n	800088a <__aeabi_dsub+0x146>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	000007ff 	.word	0x000007ff

08000e68 <__aeabi_d2iz>:
 8000e68:	000a      	movs	r2, r1
 8000e6a:	b530      	push	{r4, r5, lr}
 8000e6c:	4c13      	ldr	r4, [pc, #76]	; (8000ebc <__aeabi_d2iz+0x54>)
 8000e6e:	0053      	lsls	r3, r2, #1
 8000e70:	0309      	lsls	r1, r1, #12
 8000e72:	0005      	movs	r5, r0
 8000e74:	0b09      	lsrs	r1, r1, #12
 8000e76:	2000      	movs	r0, #0
 8000e78:	0d5b      	lsrs	r3, r3, #21
 8000e7a:	0fd2      	lsrs	r2, r2, #31
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	dd04      	ble.n	8000e8a <__aeabi_d2iz+0x22>
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <__aeabi_d2iz+0x58>)
 8000e82:	4283      	cmp	r3, r0
 8000e84:	dd02      	ble.n	8000e8c <__aeabi_d2iz+0x24>
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <__aeabi_d2iz+0x5c>)
 8000e88:	18d0      	adds	r0, r2, r3
 8000e8a:	bd30      	pop	{r4, r5, pc}
 8000e8c:	2080      	movs	r0, #128	; 0x80
 8000e8e:	0340      	lsls	r0, r0, #13
 8000e90:	4301      	orrs	r1, r0
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <__aeabi_d2iz+0x60>)
 8000e94:	1ac0      	subs	r0, r0, r3
 8000e96:	281f      	cmp	r0, #31
 8000e98:	dd08      	ble.n	8000eac <__aeabi_d2iz+0x44>
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <__aeabi_d2iz+0x64>)
 8000e9c:	1ac3      	subs	r3, r0, r3
 8000e9e:	40d9      	lsrs	r1, r3
 8000ea0:	000b      	movs	r3, r1
 8000ea2:	4258      	negs	r0, r3
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d1f0      	bne.n	8000e8a <__aeabi_d2iz+0x22>
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	e7ee      	b.n	8000e8a <__aeabi_d2iz+0x22>
 8000eac:	4c08      	ldr	r4, [pc, #32]	; (8000ed0 <__aeabi_d2iz+0x68>)
 8000eae:	40c5      	lsrs	r5, r0
 8000eb0:	46a4      	mov	ip, r4
 8000eb2:	4463      	add	r3, ip
 8000eb4:	4099      	lsls	r1, r3
 8000eb6:	000b      	movs	r3, r1
 8000eb8:	432b      	orrs	r3, r5
 8000eba:	e7f2      	b.n	8000ea2 <__aeabi_d2iz+0x3a>
 8000ebc:	000003fe 	.word	0x000003fe
 8000ec0:	0000041d 	.word	0x0000041d
 8000ec4:	7fffffff 	.word	0x7fffffff
 8000ec8:	00000433 	.word	0x00000433
 8000ecc:	00000413 	.word	0x00000413
 8000ed0:	fffffbed 	.word	0xfffffbed

08000ed4 <__aeabi_i2d>:
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d016      	beq.n	8000f08 <__aeabi_i2d+0x34>
 8000eda:	17c3      	asrs	r3, r0, #31
 8000edc:	18c5      	adds	r5, r0, r3
 8000ede:	405d      	eors	r5, r3
 8000ee0:	0fc4      	lsrs	r4, r0, #31
 8000ee2:	0028      	movs	r0, r5
 8000ee4:	f000 f864 	bl	8000fb0 <__clzsi2>
 8000ee8:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <__aeabi_i2d+0x5c>)
 8000eea:	1a12      	subs	r2, r2, r0
 8000eec:	280a      	cmp	r0, #10
 8000eee:	dc16      	bgt.n	8000f1e <__aeabi_i2d+0x4a>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	002e      	movs	r6, r5
 8000ef4:	3315      	adds	r3, #21
 8000ef6:	409e      	lsls	r6, r3
 8000ef8:	230b      	movs	r3, #11
 8000efa:	1a18      	subs	r0, r3, r0
 8000efc:	40c5      	lsrs	r5, r0
 8000efe:	0552      	lsls	r2, r2, #21
 8000f00:	032d      	lsls	r5, r5, #12
 8000f02:	0b2d      	lsrs	r5, r5, #12
 8000f04:	0d53      	lsrs	r3, r2, #21
 8000f06:	e003      	b.n	8000f10 <__aeabi_i2d+0x3c>
 8000f08:	2400      	movs	r4, #0
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	2600      	movs	r6, #0
 8000f10:	051b      	lsls	r3, r3, #20
 8000f12:	432b      	orrs	r3, r5
 8000f14:	07e4      	lsls	r4, r4, #31
 8000f16:	4323      	orrs	r3, r4
 8000f18:	0030      	movs	r0, r6
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
 8000f1e:	380b      	subs	r0, #11
 8000f20:	4085      	lsls	r5, r0
 8000f22:	0552      	lsls	r2, r2, #21
 8000f24:	032d      	lsls	r5, r5, #12
 8000f26:	2600      	movs	r6, #0
 8000f28:	0b2d      	lsrs	r5, r5, #12
 8000f2a:	0d53      	lsrs	r3, r2, #21
 8000f2c:	e7f0      	b.n	8000f10 <__aeabi_i2d+0x3c>
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	0000041e 	.word	0x0000041e

08000f34 <__aeabi_cdrcmple>:
 8000f34:	4684      	mov	ip, r0
 8000f36:	0010      	movs	r0, r2
 8000f38:	4662      	mov	r2, ip
 8000f3a:	468c      	mov	ip, r1
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	4663      	mov	r3, ip
 8000f40:	e000      	b.n	8000f44 <__aeabi_cdcmpeq>
 8000f42:	46c0      	nop			; (mov r8, r8)

08000f44 <__aeabi_cdcmpeq>:
 8000f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f46:	f000 f8f9 	bl	800113c <__ledf2>
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d401      	bmi.n	8000f52 <__aeabi_cdcmpeq+0xe>
 8000f4e:	2100      	movs	r1, #0
 8000f50:	42c8      	cmn	r0, r1
 8000f52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f54 <__aeabi_dcmpeq>:
 8000f54:	b510      	push	{r4, lr}
 8000f56:	f000 f849 	bl	8000fec <__eqdf2>
 8000f5a:	4240      	negs	r0, r0
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <__aeabi_dcmplt>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	f000 f8eb 	bl	800113c <__ledf2>
 8000f66:	2800      	cmp	r0, #0
 8000f68:	db01      	blt.n	8000f6e <__aeabi_dcmplt+0xe>
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	2001      	movs	r0, #1
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)

08000f74 <__aeabi_dcmple>:
 8000f74:	b510      	push	{r4, lr}
 8000f76:	f000 f8e1 	bl	800113c <__ledf2>
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	dd01      	ble.n	8000f82 <__aeabi_dcmple+0xe>
 8000f7e:	2000      	movs	r0, #0
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	2001      	movs	r0, #1
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)

08000f88 <__aeabi_dcmpgt>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f000 f871 	bl	8001070 <__gedf2>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	dc01      	bgt.n	8000f96 <__aeabi_dcmpgt+0xe>
 8000f92:	2000      	movs	r0, #0
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	2001      	movs	r0, #1
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)

08000f9c <__aeabi_dcmpge>:
 8000f9c:	b510      	push	{r4, lr}
 8000f9e:	f000 f867 	bl	8001070 <__gedf2>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	da01      	bge.n	8000faa <__aeabi_dcmpge+0xe>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	2001      	movs	r0, #1
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)

08000fb0 <__clzsi2>:
 8000fb0:	211c      	movs	r1, #28
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d301      	bcc.n	8000fbe <__clzsi2+0xe>
 8000fba:	0c00      	lsrs	r0, r0, #16
 8000fbc:	3910      	subs	r1, #16
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d301      	bcc.n	8000fc8 <__clzsi2+0x18>
 8000fc4:	0a00      	lsrs	r0, r0, #8
 8000fc6:	3908      	subs	r1, #8
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d301      	bcc.n	8000fd2 <__clzsi2+0x22>
 8000fce:	0900      	lsrs	r0, r0, #4
 8000fd0:	3904      	subs	r1, #4
 8000fd2:	a202      	add	r2, pc, #8	; (adr r2, 8000fdc <__clzsi2+0x2c>)
 8000fd4:	5c10      	ldrb	r0, [r2, r0]
 8000fd6:	1840      	adds	r0, r0, r1
 8000fd8:	4770      	bx	lr
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	02020304 	.word	0x02020304
 8000fe0:	01010101 	.word	0x01010101
	...

08000fec <__eqdf2>:
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	464e      	mov	r6, r9
 8000ff0:	4645      	mov	r5, r8
 8000ff2:	46de      	mov	lr, fp
 8000ff4:	4657      	mov	r7, sl
 8000ff6:	4690      	mov	r8, r2
 8000ff8:	b5e0      	push	{r5, r6, r7, lr}
 8000ffa:	0017      	movs	r7, r2
 8000ffc:	031a      	lsls	r2, r3, #12
 8000ffe:	0b12      	lsrs	r2, r2, #12
 8001000:	0005      	movs	r5, r0
 8001002:	4684      	mov	ip, r0
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <__eqdf2+0x80>)
 8001006:	030e      	lsls	r6, r1, #12
 8001008:	004c      	lsls	r4, r1, #1
 800100a:	4691      	mov	r9, r2
 800100c:	005a      	lsls	r2, r3, #1
 800100e:	0fdb      	lsrs	r3, r3, #31
 8001010:	469b      	mov	fp, r3
 8001012:	0b36      	lsrs	r6, r6, #12
 8001014:	0d64      	lsrs	r4, r4, #21
 8001016:	0fc9      	lsrs	r1, r1, #31
 8001018:	0d52      	lsrs	r2, r2, #21
 800101a:	4284      	cmp	r4, r0
 800101c:	d019      	beq.n	8001052 <__eqdf2+0x66>
 800101e:	4282      	cmp	r2, r0
 8001020:	d010      	beq.n	8001044 <__eqdf2+0x58>
 8001022:	2001      	movs	r0, #1
 8001024:	4294      	cmp	r4, r2
 8001026:	d10e      	bne.n	8001046 <__eqdf2+0x5a>
 8001028:	454e      	cmp	r6, r9
 800102a:	d10c      	bne.n	8001046 <__eqdf2+0x5a>
 800102c:	2001      	movs	r0, #1
 800102e:	45c4      	cmp	ip, r8
 8001030:	d109      	bne.n	8001046 <__eqdf2+0x5a>
 8001032:	4559      	cmp	r1, fp
 8001034:	d017      	beq.n	8001066 <__eqdf2+0x7a>
 8001036:	2c00      	cmp	r4, #0
 8001038:	d105      	bne.n	8001046 <__eqdf2+0x5a>
 800103a:	0030      	movs	r0, r6
 800103c:	4328      	orrs	r0, r5
 800103e:	1e43      	subs	r3, r0, #1
 8001040:	4198      	sbcs	r0, r3
 8001042:	e000      	b.n	8001046 <__eqdf2+0x5a>
 8001044:	2001      	movs	r0, #1
 8001046:	bcf0      	pop	{r4, r5, r6, r7}
 8001048:	46bb      	mov	fp, r7
 800104a:	46b2      	mov	sl, r6
 800104c:	46a9      	mov	r9, r5
 800104e:	46a0      	mov	r8, r4
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	0033      	movs	r3, r6
 8001054:	2001      	movs	r0, #1
 8001056:	432b      	orrs	r3, r5
 8001058:	d1f5      	bne.n	8001046 <__eqdf2+0x5a>
 800105a:	42a2      	cmp	r2, r4
 800105c:	d1f3      	bne.n	8001046 <__eqdf2+0x5a>
 800105e:	464b      	mov	r3, r9
 8001060:	433b      	orrs	r3, r7
 8001062:	d1f0      	bne.n	8001046 <__eqdf2+0x5a>
 8001064:	e7e2      	b.n	800102c <__eqdf2+0x40>
 8001066:	2000      	movs	r0, #0
 8001068:	e7ed      	b.n	8001046 <__eqdf2+0x5a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff

08001070 <__gedf2>:
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	4647      	mov	r7, r8
 8001074:	46ce      	mov	lr, r9
 8001076:	0004      	movs	r4, r0
 8001078:	0018      	movs	r0, r3
 800107a:	0016      	movs	r6, r2
 800107c:	031b      	lsls	r3, r3, #12
 800107e:	0b1b      	lsrs	r3, r3, #12
 8001080:	4d2d      	ldr	r5, [pc, #180]	; (8001138 <__gedf2+0xc8>)
 8001082:	004a      	lsls	r2, r1, #1
 8001084:	4699      	mov	r9, r3
 8001086:	b580      	push	{r7, lr}
 8001088:	0043      	lsls	r3, r0, #1
 800108a:	030f      	lsls	r7, r1, #12
 800108c:	46a4      	mov	ip, r4
 800108e:	46b0      	mov	r8, r6
 8001090:	0b3f      	lsrs	r7, r7, #12
 8001092:	0d52      	lsrs	r2, r2, #21
 8001094:	0fc9      	lsrs	r1, r1, #31
 8001096:	0d5b      	lsrs	r3, r3, #21
 8001098:	0fc0      	lsrs	r0, r0, #31
 800109a:	42aa      	cmp	r2, r5
 800109c:	d021      	beq.n	80010e2 <__gedf2+0x72>
 800109e:	42ab      	cmp	r3, r5
 80010a0:	d013      	beq.n	80010ca <__gedf2+0x5a>
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d122      	bne.n	80010ec <__gedf2+0x7c>
 80010a6:	433c      	orrs	r4, r7
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <__gedf2+0x42>
 80010ac:	464d      	mov	r5, r9
 80010ae:	432e      	orrs	r6, r5
 80010b0:	d022      	beq.n	80010f8 <__gedf2+0x88>
 80010b2:	2c00      	cmp	r4, #0
 80010b4:	d010      	beq.n	80010d8 <__gedf2+0x68>
 80010b6:	4281      	cmp	r1, r0
 80010b8:	d022      	beq.n	8001100 <__gedf2+0x90>
 80010ba:	2002      	movs	r0, #2
 80010bc:	3901      	subs	r1, #1
 80010be:	4008      	ands	r0, r1
 80010c0:	3801      	subs	r0, #1
 80010c2:	bcc0      	pop	{r6, r7}
 80010c4:	46b9      	mov	r9, r7
 80010c6:	46b0      	mov	r8, r6
 80010c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ca:	464d      	mov	r5, r9
 80010cc:	432e      	orrs	r6, r5
 80010ce:	d129      	bne.n	8001124 <__gedf2+0xb4>
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d1f0      	bne.n	80010b6 <__gedf2+0x46>
 80010d4:	433c      	orrs	r4, r7
 80010d6:	d1ee      	bne.n	80010b6 <__gedf2+0x46>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d1f2      	bne.n	80010c2 <__gedf2+0x52>
 80010dc:	2001      	movs	r0, #1
 80010de:	4240      	negs	r0, r0
 80010e0:	e7ef      	b.n	80010c2 <__gedf2+0x52>
 80010e2:	003d      	movs	r5, r7
 80010e4:	4325      	orrs	r5, r4
 80010e6:	d11d      	bne.n	8001124 <__gedf2+0xb4>
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d0ee      	beq.n	80010ca <__gedf2+0x5a>
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1e2      	bne.n	80010b6 <__gedf2+0x46>
 80010f0:	464c      	mov	r4, r9
 80010f2:	4326      	orrs	r6, r4
 80010f4:	d1df      	bne.n	80010b6 <__gedf2+0x46>
 80010f6:	e7e0      	b.n	80010ba <__gedf2+0x4a>
 80010f8:	2000      	movs	r0, #0
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	d0e1      	beq.n	80010c2 <__gedf2+0x52>
 80010fe:	e7dc      	b.n	80010ba <__gedf2+0x4a>
 8001100:	429a      	cmp	r2, r3
 8001102:	dc0a      	bgt.n	800111a <__gedf2+0xaa>
 8001104:	dbe8      	blt.n	80010d8 <__gedf2+0x68>
 8001106:	454f      	cmp	r7, r9
 8001108:	d8d7      	bhi.n	80010ba <__gedf2+0x4a>
 800110a:	d00e      	beq.n	800112a <__gedf2+0xba>
 800110c:	2000      	movs	r0, #0
 800110e:	454f      	cmp	r7, r9
 8001110:	d2d7      	bcs.n	80010c2 <__gedf2+0x52>
 8001112:	2900      	cmp	r1, #0
 8001114:	d0e2      	beq.n	80010dc <__gedf2+0x6c>
 8001116:	0008      	movs	r0, r1
 8001118:	e7d3      	b.n	80010c2 <__gedf2+0x52>
 800111a:	4243      	negs	r3, r0
 800111c:	4158      	adcs	r0, r3
 800111e:	0040      	lsls	r0, r0, #1
 8001120:	3801      	subs	r0, #1
 8001122:	e7ce      	b.n	80010c2 <__gedf2+0x52>
 8001124:	2002      	movs	r0, #2
 8001126:	4240      	negs	r0, r0
 8001128:	e7cb      	b.n	80010c2 <__gedf2+0x52>
 800112a:	45c4      	cmp	ip, r8
 800112c:	d8c5      	bhi.n	80010ba <__gedf2+0x4a>
 800112e:	2000      	movs	r0, #0
 8001130:	45c4      	cmp	ip, r8
 8001132:	d2c6      	bcs.n	80010c2 <__gedf2+0x52>
 8001134:	e7ed      	b.n	8001112 <__gedf2+0xa2>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000007ff 	.word	0x000007ff

0800113c <__ledf2>:
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	4647      	mov	r7, r8
 8001140:	46ce      	mov	lr, r9
 8001142:	0004      	movs	r4, r0
 8001144:	0018      	movs	r0, r3
 8001146:	0016      	movs	r6, r2
 8001148:	031b      	lsls	r3, r3, #12
 800114a:	0b1b      	lsrs	r3, r3, #12
 800114c:	4d2c      	ldr	r5, [pc, #176]	; (8001200 <__ledf2+0xc4>)
 800114e:	004a      	lsls	r2, r1, #1
 8001150:	4699      	mov	r9, r3
 8001152:	b580      	push	{r7, lr}
 8001154:	0043      	lsls	r3, r0, #1
 8001156:	030f      	lsls	r7, r1, #12
 8001158:	46a4      	mov	ip, r4
 800115a:	46b0      	mov	r8, r6
 800115c:	0b3f      	lsrs	r7, r7, #12
 800115e:	0d52      	lsrs	r2, r2, #21
 8001160:	0fc9      	lsrs	r1, r1, #31
 8001162:	0d5b      	lsrs	r3, r3, #21
 8001164:	0fc0      	lsrs	r0, r0, #31
 8001166:	42aa      	cmp	r2, r5
 8001168:	d00d      	beq.n	8001186 <__ledf2+0x4a>
 800116a:	42ab      	cmp	r3, r5
 800116c:	d010      	beq.n	8001190 <__ledf2+0x54>
 800116e:	2a00      	cmp	r2, #0
 8001170:	d127      	bne.n	80011c2 <__ledf2+0x86>
 8001172:	433c      	orrs	r4, r7
 8001174:	2b00      	cmp	r3, #0
 8001176:	d111      	bne.n	800119c <__ledf2+0x60>
 8001178:	464d      	mov	r5, r9
 800117a:	432e      	orrs	r6, r5
 800117c:	d10e      	bne.n	800119c <__ledf2+0x60>
 800117e:	2000      	movs	r0, #0
 8001180:	2c00      	cmp	r4, #0
 8001182:	d015      	beq.n	80011b0 <__ledf2+0x74>
 8001184:	e00e      	b.n	80011a4 <__ledf2+0x68>
 8001186:	003d      	movs	r5, r7
 8001188:	4325      	orrs	r5, r4
 800118a:	d110      	bne.n	80011ae <__ledf2+0x72>
 800118c:	4293      	cmp	r3, r2
 800118e:	d118      	bne.n	80011c2 <__ledf2+0x86>
 8001190:	464d      	mov	r5, r9
 8001192:	432e      	orrs	r6, r5
 8001194:	d10b      	bne.n	80011ae <__ledf2+0x72>
 8001196:	2a00      	cmp	r2, #0
 8001198:	d102      	bne.n	80011a0 <__ledf2+0x64>
 800119a:	433c      	orrs	r4, r7
 800119c:	2c00      	cmp	r4, #0
 800119e:	d00b      	beq.n	80011b8 <__ledf2+0x7c>
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d014      	beq.n	80011ce <__ledf2+0x92>
 80011a4:	2002      	movs	r0, #2
 80011a6:	3901      	subs	r1, #1
 80011a8:	4008      	ands	r0, r1
 80011aa:	3801      	subs	r0, #1
 80011ac:	e000      	b.n	80011b0 <__ledf2+0x74>
 80011ae:	2002      	movs	r0, #2
 80011b0:	bcc0      	pop	{r6, r7}
 80011b2:	46b9      	mov	r9, r7
 80011b4:	46b0      	mov	r8, r6
 80011b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1f9      	bne.n	80011b0 <__ledf2+0x74>
 80011bc:	2001      	movs	r0, #1
 80011be:	4240      	negs	r0, r0
 80011c0:	e7f6      	b.n	80011b0 <__ledf2+0x74>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ec      	bne.n	80011a0 <__ledf2+0x64>
 80011c6:	464c      	mov	r4, r9
 80011c8:	4326      	orrs	r6, r4
 80011ca:	d1e9      	bne.n	80011a0 <__ledf2+0x64>
 80011cc:	e7ea      	b.n	80011a4 <__ledf2+0x68>
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dd04      	ble.n	80011dc <__ledf2+0xa0>
 80011d2:	4243      	negs	r3, r0
 80011d4:	4158      	adcs	r0, r3
 80011d6:	0040      	lsls	r0, r0, #1
 80011d8:	3801      	subs	r0, #1
 80011da:	e7e9      	b.n	80011b0 <__ledf2+0x74>
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbeb      	blt.n	80011b8 <__ledf2+0x7c>
 80011e0:	454f      	cmp	r7, r9
 80011e2:	d8df      	bhi.n	80011a4 <__ledf2+0x68>
 80011e4:	d006      	beq.n	80011f4 <__ledf2+0xb8>
 80011e6:	2000      	movs	r0, #0
 80011e8:	454f      	cmp	r7, r9
 80011ea:	d2e1      	bcs.n	80011b0 <__ledf2+0x74>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d0e5      	beq.n	80011bc <__ledf2+0x80>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7dd      	b.n	80011b0 <__ledf2+0x74>
 80011f4:	45c4      	cmp	ip, r8
 80011f6:	d8d5      	bhi.n	80011a4 <__ledf2+0x68>
 80011f8:	2000      	movs	r0, #0
 80011fa:	45c4      	cmp	ip, r8
 80011fc:	d2d8      	bcs.n	80011b0 <__ledf2+0x74>
 80011fe:	e7f5      	b.n	80011ec <__ledf2+0xb0>
 8001200:	000007ff 	.word	0x000007ff

08001204 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8001208:	201e      	movs	r0, #30
 800120a:	f000 fcb5 	bl	8001b78 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <lcd_init+0x8c>)
 8001210:	2200      	movs	r2, #0
 8001212:	2104      	movs	r1, #4
 8001214:	0018      	movs	r0, r3
 8001216:	f002 fa41 	bl	800369c <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <lcd_init+0x8c>)
 8001220:	2201      	movs	r2, #1
 8001222:	0019      	movs	r1, r3
 8001224:	f002 fa3a 	bl	800369c <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4818      	ldr	r0, [pc, #96]	; (8001290 <lcd_init+0x8c>)
 800122e:	2200      	movs	r2, #0
 8001230:	0019      	movs	r1, r3
 8001232:	f002 fa33 	bl	800369c <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	4815      	ldr	r0, [pc, #84]	; (8001290 <lcd_init+0x8c>)
 800123c:	2200      	movs	r2, #0
 800123e:	0019      	movs	r1, r3
 8001240:	f002 fa2c 	bl	800369c <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <lcd_init+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	2101      	movs	r1, #1
 800124a:	0018      	movs	r0, r3
 800124c:	f002 fa26 	bl	800369c <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <lcd_init+0x8c>)
 8001252:	2201      	movs	r2, #1
 8001254:	2102      	movs	r1, #2
 8001256:	0018      	movs	r0, r3
 8001258:	f002 fa20 	bl	800369c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <lcd_init+0x8c>)
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	0018      	movs	r0, r3
 8001264:	f002 fa1a 	bl	800369c <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8001268:	2128      	movs	r1, #40	; 0x28
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f812 	bl	8001294 <lcd_write>
	lcd_write(0,0x0c);
 8001270:	210c      	movs	r1, #12
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f80e 	bl	8001294 <lcd_write>
	lcd_write(0,0x06);
 8001278:	2106      	movs	r1, #6
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f80a 	bl	8001294 <lcd_write>
	lcd_write(0,0x01);
 8001280:	2101      	movs	r1, #1
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f806 	bl	8001294 <lcd_write>
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	50000400 	.word	0x50000400

08001294 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	0002      	movs	r2, r0
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	1c0a      	adds	r2, r1, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 fc66 	bl	8001b78 <HAL_Delay>
	if(type)
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <lcd_write+0x2e>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <lcd_write+0x1ac>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	2101      	movs	r1, #1
 80012ba:	0018      	movs	r0, r3
 80012bc:	f002 f9ee 	bl	800369c <HAL_GPIO_WritePin>
 80012c0:	e005      	b.n	80012ce <lcd_write+0x3a>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <lcd_write+0x1ac>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	0018      	movs	r0, r3
 80012ca:	f002 f9e7 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da07      	bge.n	80012e8 <lcd_write+0x54>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	015b      	lsls	r3, r3, #5
 80012dc:	4858      	ldr	r0, [pc, #352]	; (8001440 <lcd_write+0x1ac>)
 80012de:	2201      	movs	r2, #1
 80012e0:	0019      	movs	r1, r3
 80012e2:	f002 f9db 	bl	800369c <HAL_GPIO_WritePin>
 80012e6:	e006      	b.n	80012f6 <lcd_write+0x62>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	4854      	ldr	r0, [pc, #336]	; (8001440 <lcd_write+0x1ac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	0019      	movs	r1, r3
 80012f2:	f002 f9d3 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 80012f6:	1dbb      	adds	r3, r7, #6
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	4013      	ands	r3, r2
 80012fe:	d007      	beq.n	8001310 <lcd_write+0x7c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	484e      	ldr	r0, [pc, #312]	; (8001440 <lcd_write+0x1ac>)
 8001306:	2201      	movs	r2, #1
 8001308:	0019      	movs	r1, r3
 800130a:	f002 f9c7 	bl	800369c <HAL_GPIO_WritePin>
 800130e:	e006      	b.n	800131e <lcd_write+0x8a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	484a      	ldr	r0, [pc, #296]	; (8001440 <lcd_write+0x1ac>)
 8001316:	2200      	movs	r2, #0
 8001318:	0019      	movs	r1, r3
 800131a:	f002 f9bf 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 800131e:	1dbb      	adds	r3, r7, #6
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d007      	beq.n	8001338 <lcd_write+0xa4>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4844      	ldr	r0, [pc, #272]	; (8001440 <lcd_write+0x1ac>)
 800132e:	2201      	movs	r2, #1
 8001330:	0019      	movs	r1, r3
 8001332:	f002 f9b3 	bl	800369c <HAL_GPIO_WritePin>
 8001336:	e006      	b.n	8001346 <lcd_write+0xb2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4840      	ldr	r0, [pc, #256]	; (8001440 <lcd_write+0x1ac>)
 800133e:	2200      	movs	r2, #0
 8001340:	0019      	movs	r1, r3
 8001342:	f002 f9ab 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2210      	movs	r2, #16
 800134c:	4013      	ands	r3, r2
 800134e:	d006      	beq.n	800135e <lcd_write+0xca>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <lcd_write+0x1ac>)
 8001352:	2201      	movs	r2, #1
 8001354:	2104      	movs	r1, #4
 8001356:	0018      	movs	r0, r3
 8001358:	f002 f9a0 	bl	800369c <HAL_GPIO_WritePin>
 800135c:	e005      	b.n	800136a <lcd_write+0xd6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <lcd_write+0x1ac>)
 8001360:	2200      	movs	r2, #0
 8001362:	2104      	movs	r1, #4
 8001364:	0018      	movs	r0, r3
 8001366:	f002 f999 	bl	800369c <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <lcd_write+0x1ac>)
 800136c:	2201      	movs	r2, #1
 800136e:	2102      	movs	r1, #2
 8001370:	0018      	movs	r0, r3
 8001372:	f002 f993 	bl	800369c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001376:	4b32      	ldr	r3, [pc, #200]	; (8001440 <lcd_write+0x1ac>)
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	0018      	movs	r0, r3
 800137e:	f002 f98d 	bl	800369c <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2208      	movs	r2, #8
 8001388:	4013      	ands	r3, r2
 800138a:	d007      	beq.n	800139c <lcd_write+0x108>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	482b      	ldr	r0, [pc, #172]	; (8001440 <lcd_write+0x1ac>)
 8001392:	2201      	movs	r2, #1
 8001394:	0019      	movs	r1, r3
 8001396:	f002 f981 	bl	800369c <HAL_GPIO_WritePin>
 800139a:	e006      	b.n	80013aa <lcd_write+0x116>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	015b      	lsls	r3, r3, #5
 80013a0:	4827      	ldr	r0, [pc, #156]	; (8001440 <lcd_write+0x1ac>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	0019      	movs	r1, r3
 80013a6:	f002 f979 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d007      	beq.n	80013c4 <lcd_write+0x130>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4821      	ldr	r0, [pc, #132]	; (8001440 <lcd_write+0x1ac>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	0019      	movs	r1, r3
 80013be:	f002 f96d 	bl	800369c <HAL_GPIO_WritePin>
 80013c2:	e006      	b.n	80013d2 <lcd_write+0x13e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	481d      	ldr	r0, [pc, #116]	; (8001440 <lcd_write+0x1ac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	0019      	movs	r1, r3
 80013ce:	f002 f965 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 80013d2:	1dbb      	adds	r3, r7, #6
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d007      	beq.n	80013ec <lcd_write+0x158>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <lcd_write+0x1ac>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	0019      	movs	r1, r3
 80013e6:	f002 f959 	bl	800369c <HAL_GPIO_WritePin>
 80013ea:	e006      	b.n	80013fa <lcd_write+0x166>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <lcd_write+0x1ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	0019      	movs	r1, r3
 80013f6:	f002 f951 	bl	800369c <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d006      	beq.n	8001412 <lcd_write+0x17e>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <lcd_write+0x1ac>)
 8001406:	2201      	movs	r2, #1
 8001408:	2104      	movs	r1, #4
 800140a:	0018      	movs	r0, r3
 800140c:	f002 f946 	bl	800369c <HAL_GPIO_WritePin>
 8001410:	e005      	b.n	800141e <lcd_write+0x18a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <lcd_write+0x1ac>)
 8001414:	2200      	movs	r2, #0
 8001416:	2104      	movs	r1, #4
 8001418:	0018      	movs	r0, r3
 800141a:	f002 f93f 	bl	800369c <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <lcd_write+0x1ac>)
 8001420:	2201      	movs	r2, #1
 8001422:	2102      	movs	r1, #2
 8001424:	0018      	movs	r0, r3
 8001426:	f002 f939 	bl	800369c <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <lcd_write+0x1ac>)
 800142c:	2200      	movs	r2, #0
 800142e:	2102      	movs	r1, #2
 8001430:	0018      	movs	r0, r3
 8001432:	f002 f933 	bl	800369c <HAL_GPIO_WritePin>
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	50000400 	.word	0x50000400

08001444 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	603a      	str	r2, [r7, #0]
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	1c02      	adds	r2, r0, #0
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	1dbb      	adds	r3, r7, #6
 8001454:	1c0a      	adds	r2, r1, #0
 8001456:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d023      	beq.n	80014a8 <lcd_puts+0x64>
 8001460:	dc37      	bgt.n	80014d2 <lcd_puts+0x8e>
 8001462:	2b02      	cmp	r3, #2
 8001464:	d017      	beq.n	8001496 <lcd_puts+0x52>
 8001466:	dc34      	bgt.n	80014d2 <lcd_puts+0x8e>
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <lcd_puts+0x2e>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d009      	beq.n	8001484 <lcd_puts+0x40>
 8001470:	e023      	b.n	80014ba <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8001472:	1dbb      	adds	r3, r7, #6
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3b80      	subs	r3, #128	; 0x80
 8001478:	b2db      	uxtb	r3, r3
 800147a:	0019      	movs	r1, r3
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff09 	bl	8001294 <lcd_write>
			break;
 8001482:	e01a      	b.n	80014ba <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8001484:	1dbb      	adds	r3, r7, #6
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3b40      	subs	r3, #64	; 0x40
 800148a:	b2db      	uxtb	r3, r3
 800148c:	0019      	movs	r1, r3
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff00 	bl	8001294 <lcd_write>
			break;
 8001494:	e011      	b.n	80014ba <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8001496:	1dbb      	adds	r3, r7, #6
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3b70      	subs	r3, #112	; 0x70
 800149c:	b2db      	uxtb	r3, r3
 800149e:	0019      	movs	r1, r3
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fef7 	bl	8001294 <lcd_write>
			break;
 80014a6:	e008      	b.n	80014ba <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80014a8:	1dbb      	adds	r3, r7, #6
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3b30      	subs	r3, #48	; 0x30
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	0019      	movs	r1, r3
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff feee 	bl	8001294 <lcd_write>
			break;
 80014b8:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80014ba:	e00a      	b.n	80014d2 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	0019      	movs	r1, r3
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fee4 	bl	8001294 <lcd_write>
		string++;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	603b      	str	r3, [r7, #0]
	while(*string)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ef      	bne.n	80014bc <lcd_puts+0x78>
	}
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <lcd_clear>:
void lcd_clear(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 80014ea:	2101      	movs	r1, #1
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fed1 	bl	8001294 <lcd_write>
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <main>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);

int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
   HAL_Init();
 80014fc:	f000 fab6 	bl	8001a6c <HAL_Init>
 SystemClock_Config();
 8001500:	f000 f85e 	bl	80015c0 <SystemClock_Config>
 MX_GPIO_Init();
 8001504:	f000 f92e 	bl	8001764 <MX_GPIO_Init>
  MX_DMA_Init();
 8001508:	f000 f90e 	bl	8001728 <MX_DMA_Init>
  MX_ADC1_Init();
 800150c:	f000 f8a0 	bl	8001650 <MX_ADC1_Init>
  lcd_init();
 8001510:	f7ff fe78 	bl	8001204 <lcd_init>
  lcd_clear();
 8001514:	f7ff ffe7 	bl	80014e6 <lcd_clear>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <main+0xa0>)
 800151a:	0018      	movs	r0, r3
 800151c:	f001 fad8 	bl	8002ad0 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
	  // Start ADC Conversion
	  	            HAL_ADC_Start_DMA(&hadc1, & adc_value, 1);
 8001520:	491e      	ldr	r1, [pc, #120]	; (800159c <main+0xa4>)
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <main+0xa0>)
 8001524:	2201      	movs	r2, #1
 8001526:	0018      	movs	r0, r3
 8001528:	f000 fe4a 	bl	80021c0 <HAL_ADC_Start_DMA>
	  	      // Read The ADC Conversion Result
	  	  	    voltage= adc_value*(0.8057);
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <main+0xa4>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fccf 	bl	8000ed4 <__aeabi_i2d>
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <main+0xa8>)
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <main+0xac>)
 800153a:	f7fe fe97 	bl	800026c <__aeabi_dmul>
 800153e:	0002      	movs	r2, r0
 8001540:	000b      	movs	r3, r1
 8001542:	0010      	movs	r0, r2
 8001544:	0019      	movs	r1, r3
 8001546:	f7fe fe73 	bl	8000230 <__aeabi_d2uiz>
 800154a:	0003      	movs	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <main+0xb0>)
 8001550:	801a      	strh	r2, [r3, #0]

	  	      snprintf(buffer, 10, "%d", voltage);
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <main+0xb0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <main+0xb4>)
 8001558:	4815      	ldr	r0, [pc, #84]	; (80015b0 <main+0xb8>)
 800155a:	210a      	movs	r1, #10
 800155c:	f003 f854 	bl	8004608 <sniprintf>
	  	      str=(int8_t*)buffer;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <main+0xbc>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <main+0xb8>)
 8001564:	601a      	str	r2, [r3, #0]
	  		  lcd_puts(0,0,str1);
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <main+0xc0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	001a      	movs	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ff68 	bl	8001444 <lcd_puts>
	  		  lcd_puts(0,9,str);
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <main+0xbc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	001a      	movs	r2, r3
 800157a:	2109      	movs	r1, #9
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff ff61 	bl	8001444 <lcd_puts>
	  		  lcd_puts(0,14,str2);
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <main+0xc4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	001a      	movs	r2, r3
 8001588:	210e      	movs	r1, #14
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff ff5a 	bl	8001444 <lcd_puts>
	  	        HAL_Delay(100);
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f000 faf1 	bl	8001b78 <HAL_Delay>
	  	            HAL_ADC_Start_DMA(&hadc1, & adc_value, 1);
 8001596:	e7c3      	b.n	8001520 <main+0x28>
 8001598:	20000094 	.word	0x20000094
 800159c:	20000158 	.word	0x20000158
 80015a0:	5dcc63f1 	.word	0x5dcc63f1
 80015a4:	3fe9c84b 	.word	0x3fe9c84b
 80015a8:	2000015a 	.word	0x2000015a
 80015ac:	08004f2c 	.word	0x08004f2c
 80015b0:	20000160 	.word	0x20000160
 80015b4:	2000015c 	.word	0x2000015c
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b095      	sub	sp, #84	; 0x54
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	2414      	movs	r4, #20
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	0018      	movs	r0, r3
 80015cc:	233c      	movs	r3, #60	; 0x3c
 80015ce:	001a      	movs	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f003 f811 	bl	80045f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	0018      	movs	r0, r3
 80015da:	2310      	movs	r3, #16
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f003 f80a 	bl	80045f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f002 f875 	bl	80036d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ee:	193b      	adds	r3, r7, r4
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f4:	193b      	adds	r3, r7, r4
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	0052      	lsls	r2, r2, #1
 80015fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80015fc:	193b      	adds	r3, r7, r4
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001602:	193b      	adds	r3, r7, r4
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001608:	193b      	adds	r3, r7, r4
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160e:	193b      	adds	r3, r7, r4
 8001610:	0018      	movs	r0, r3
 8001612:	f002 f8a1 	bl	8003758 <HAL_RCC_OscConfig>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800161a:	f000 f8e9 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2100      	movs	r1, #0
 800163a:	0018      	movs	r0, r3
 800163c:	f002 fbec 	bl	8003e18 <HAL_RCC_ClockConfig>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001644:	f000 f8d4 	bl	80017f0 <Error_Handler>
  }
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b015      	add	sp, #84	; 0x54
 800164e:	bd90      	pop	{r4, r7, pc}

08001650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	0018      	movs	r0, r3
 800165a:	230c      	movs	r3, #12
 800165c:	001a      	movs	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	f002 ffca 	bl	80045f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_ADC1_Init+0xcc>)
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <MX_ADC1_Init+0xd0>)
 8001668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <MX_ADC1_Init+0xcc>)
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	05d2      	lsls	r2, r2, #23
 8001670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_ADC1_Init+0xcc>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_ADC1_Init+0xcc>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <MX_ADC1_Init+0xcc>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_ADC1_Init+0xcc>)
 8001686:	2204      	movs	r2, #4
 8001688:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <MX_ADC1_Init+0xcc>)
 800168c:	2200      	movs	r2, #0
 800168e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_ADC1_Init+0xcc>)
 8001692:	2200      	movs	r2, #0
 8001694:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_ADC1_Init+0xcc>)
 8001698:	2200      	movs	r2, #0
 800169a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ADC1_Init+0xcc>)
 800169e:	2201      	movs	r2, #1
 80016a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_ADC1_Init+0xcc>)
 80016a4:	2220      	movs	r2, #32
 80016a6:	2100      	movs	r1, #0
 80016a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_ADC1_Init+0xcc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_ADC1_Init+0xcc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_ADC1_Init+0xcc>)
 80016b8:	222c      	movs	r2, #44	; 0x2c
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_ADC1_Init+0xcc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_ADC1_Init+0xcc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_ADC1_Init+0xcc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_ADC1_Init+0xcc>)
 80016d2:	223c      	movs	r2, #60	; 0x3c
 80016d4:	2100      	movs	r1, #0
 80016d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_ADC1_Init+0xcc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_ADC1_Init+0xcc>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 fbc5 	bl	8001e70 <HAL_ADC_Init>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80016ea:	f000 f881 	bl	80017f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <MX_ADC1_Init+0xd4>)
 80016f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001700:	1d3a      	adds	r2, r7, #4
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_ADC1_Init+0xcc>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fe00 	bl	800230c <HAL_ADC_ConfigChannel>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001710:	f000 f86e 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000094 	.word	0x20000094
 8001720:	40012400 	.word	0x40012400
 8001724:	1c000080 	.word	0x1c000080

08001728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_DMA_Init+0x38>)
 8001730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_DMA_Init+0x38>)
 8001734:	2101      	movs	r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_DMA_Init+0x38>)
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	2201      	movs	r2, #1
 8001740:	4013      	ands	r3, r2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2009      	movs	r0, #9
 800174c:	f001 fb68 	bl	8002e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001750:	2009      	movs	r0, #9
 8001752:	f001 fb7a 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	40021000 	.word	0x40021000

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	240c      	movs	r4, #12
 800176c:	193b      	adds	r3, r7, r4
 800176e:	0018      	movs	r0, r3
 8001770:	2314      	movs	r3, #20
 8001772:	001a      	movs	r2, r3
 8001774:	2100      	movs	r1, #0
 8001776:	f002 ff3f 	bl	80045f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_GPIO_Init+0x80>)
 800177c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_GPIO_Init+0x80>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_GPIO_Init+0x80>)
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_GPIO_Init+0x80>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_GPIO_Init+0x80>)
 8001798:	2102      	movs	r1, #2
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_GPIO_Init+0x80>)
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80017aa:	490f      	ldr	r1, [pc, #60]	; (80017e8 <MX_GPIO_Init+0x84>)
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_GPIO_Init+0x88>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	0018      	movs	r0, r3
 80017b2:	f001 ff73 	bl	800369c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80017b6:	0021      	movs	r1, r4
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <MX_GPIO_Init+0x84>)
 80017bc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2201      	movs	r2, #1
 80017c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	4a06      	ldr	r2, [pc, #24]	; (80017ec <MX_GPIO_Init+0x88>)
 80017d4:	0019      	movs	r1, r3
 80017d6:	0010      	movs	r0, r2
 80017d8:	f001 fdf4 	bl	80033c4 <HAL_GPIO_Init>

}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b009      	add	sp, #36	; 0x24
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	00001c07 	.word	0x00001c07
 80017ec:	50000400 	.word	0x50000400

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>
	...

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x44>)
 8001804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_MspInit+0x44>)
 8001808:	2101      	movs	r1, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x44>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2201      	movs	r2, #1
 8001814:	4013      	ands	r3, r2
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_MspInit+0x44>)
 800181c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_MspInit+0x44>)
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0549      	lsls	r1, r1, #21
 8001824:	430a      	orrs	r2, r1
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_MspInit+0x44>)
 800182a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	055b      	lsls	r3, r3, #21
 8001830:	4013      	ands	r3, r2
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b09d      	sub	sp, #116	; 0x74
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	235c      	movs	r3, #92	; 0x5c
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	0018      	movs	r0, r3
 8001852:	2314      	movs	r3, #20
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f002 fece 	bl	80045f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	2410      	movs	r4, #16
 800185e:	193b      	adds	r3, r7, r4
 8001860:	0018      	movs	r0, r3
 8001862:	234c      	movs	r3, #76	; 0x4c
 8001864:	001a      	movs	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f002 fec6 	bl	80045f8 <memset>
  if(hadc->Instance==ADC1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a35      	ldr	r2, [pc, #212]	; (8001948 <HAL_ADC_MspInit+0x104>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d164      	bne.n	8001940 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001876:	193b      	adds	r3, r7, r4
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	01d2      	lsls	r2, r2, #7
 800187c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2200      	movs	r2, #0
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001884:	193b      	adds	r3, r7, r4
 8001886:	0018      	movs	r0, r3
 8001888:	f002 fc50 	bl	800412c <HAL_RCCEx_PeriphCLKConfig>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001890:	f7ff ffae 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_ADC_MspInit+0x108>)
 8001896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_ADC_MspInit+0x108>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	0349      	lsls	r1, r1, #13
 800189e:	430a      	orrs	r2, r1
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_ADC_MspInit+0x108>)
 80018a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	035b      	lsls	r3, r3, #13
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_ADC_MspInit+0x108>)
 80018b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_ADC_MspInit+0x108>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	430a      	orrs	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_ADC_MspInit+0x108>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c8:	215c      	movs	r1, #92	; 0x5c
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2203      	movs	r2, #3
 80018d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	187a      	adds	r2, r7, r1
 80018de:	23a0      	movs	r3, #160	; 0xa0
 80018e0:	05db      	lsls	r3, r3, #23
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 fd6d 	bl	80033c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_ADC_MspInit+0x110>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 80018f2:	2205      	movs	r2, #5
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	0052      	lsls	r2, r2, #1
 800190e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	00d2      	lsls	r2, r2, #3
 8001916:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 8001926:	0018      	movs	r0, r3
 8001928:	f001 faac 	bl	8002e84 <HAL_DMA_Init>
 800192c:	1e03      	subs	r3, r0, #0
 800192e:	d001      	beq.n	8001934 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001930:	f7ff ff5e 	bl	80017f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 8001938:	651a      	str	r2, [r3, #80]	; 0x50
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_ADC_MspInit+0x10c>)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b01d      	add	sp, #116	; 0x74
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	40012400 	.word	0x40012400
 800194c:	40021000 	.word	0x40021000
 8001950:	200000f8 	.word	0x200000f8
 8001954:	40020008 	.word	0x40020008

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800195c:	e7fe      	b.n	800195c <NMI_Handler+0x4>

0800195e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 f8e0 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <DMA1_Channel1_IRQHandler+0x14>)
 800198e:	0018      	movs	r0, r3
 8001990:	f001 fbaa 	bl	80030e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	200000f8 	.word	0x200000f8

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f002 fde8 	bl	80045a4 <__errno>
 80019d4:	0003      	movs	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	2301      	movs	r3, #1
 80019dc:	425b      	negs	r3, r3
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	18d2      	adds	r2, r2, r3
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b006      	add	sp, #24
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20024000 	.word	0x20024000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	20000170 	.word	0x20000170
 8001a08:	20000188 	.word	0x20000188

08001a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a1c:	f7ff fff6 	bl	8001a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	; (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	; (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a46:	f002 fdb3 	bl	80045b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a4a:	f7ff fd55 	bl	80014f8 <main>

08001a4e <LoopForever>:

LoopForever:
  b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   r0, =_estack
 8001a50:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a5c:	08004fec 	.word	0x08004fec
  ldr r2, =_sbss
 8001a60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a64:	20000188 	.word	0x20000188

08001a68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_COMP_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_Init+0x3c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Init+0x3c>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0049      	lsls	r1, r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 f810 	bl	8001aac <HAL_InitTick>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e001      	b.n	8001a9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff feb0 	bl	80017fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	781b      	ldrb	r3, [r3, #0]
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_InitTick+0x88>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02b      	beq.n	8001b1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_InitTick+0x8c>)
 8001ac6:	681c      	ldr	r4, [r3, #0]
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_InitTick+0x88>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	0019      	movs	r1, r3
 8001ace:	23fa      	movs	r3, #250	; 0xfa
 8001ad0:	0098      	lsls	r0, r3, #2
 8001ad2:	f7fe fb21 	bl	8000118 <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0020      	movs	r0, r4
 8001adc:	f7fe fb1c 	bl	8000118 <__udivsi3>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 f9c1 	bl	8002e6a <HAL_SYSTICK_Config>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d112      	bne.n	8001b12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d80a      	bhi.n	8001b08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	2301      	movs	r3, #1
 8001af6:	425b      	negs	r3, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	0018      	movs	r0, r3
 8001afc:	f001 f990 	bl	8002e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_InitTick+0x90>)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e00d      	b.n	8001b24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e008      	b.n	8001b24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b12:	230f      	movs	r3, #15
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e003      	b.n	8001b24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b24:	230f      	movs	r3, #15
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	781b      	ldrb	r3, [r3, #0]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b005      	add	sp, #20
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	20000010 	.word	0x20000010
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_IncTick+0x1c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x20>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	18d2      	adds	r2, r2, r3
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <HAL_IncTick+0x20>)
 8001b52:	601a      	str	r2, [r3, #0]
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	20000010 	.word	0x20000010
 8001b60:	20000174 	.word	0x20000174

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <HAL_GetTick+0x10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000174 	.word	0x20000174

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff fff0 	bl	8001b64 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	001a      	movs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	f7ff ffe0 	bl	8001b64 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	20000010 	.word	0x20000010

08001bc0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	fe3fffff 	.word	0xfe3fffff

08001be8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	23e0      	movs	r3, #224	; 0xe0
 8001bf6:	045b      	lsls	r3, r3, #17
 8001bf8:	4013      	ands	r3, r2
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	2104      	movs	r1, #4
 8001c16:	400a      	ands	r2, r1
 8001c18:	2107      	movs	r1, #7
 8001c1a:	4091      	lsls	r1, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	43d2      	mvns	r2, r2
 8001c20:	401a      	ands	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2104      	movs	r1, #4
 8001c26:	400b      	ands	r3, r1
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4099      	lsls	r1, r3
 8001c2c:	000b      	movs	r3, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b004      	add	sp, #16
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	400a      	ands	r2, r1
 8001c50:	2107      	movs	r1, #7
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2104      	movs	r1, #4
 8001c5c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c5e:	40da      	lsrs	r2, r3
 8001c60:	0013      	movs	r3, r2
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	211f      	movs	r1, #31
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	43d2      	mvns	r2, r2
 8001caa:	401a      	ands	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	0e9b      	lsrs	r3, r3, #26
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	201f      	movs	r0, #31
 8001cb8:	4003      	ands	r3, r0
 8001cba:	4099      	lsls	r1, r3
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	035b      	lsls	r3, r3, #13
 8001cde:	0b5b      	lsrs	r3, r3, #13
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}

08001cee <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	0352      	lsls	r2, r2, #13
 8001d00:	0b52      	lsrs	r2, r2, #13
 8001d02:	43d2      	mvns	r2, r2
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	0212      	lsls	r2, r2, #8
 8001d28:	43d2      	mvns	r2, r2
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	400b      	ands	r3, r1
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001d36:	400b      	ands	r3, r1
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	07ffff00 	.word	0x07ffff00

08001d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	0552      	lsls	r2, r2, #21
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b002      	add	sp, #8
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	6fffffe8 	.word	0x6fffffe8

08001d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	055b      	lsls	r3, r3, #21
 8001d84:	401a      	ands	r2, r3
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	055b      	lsls	r3, r3, #21
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <LL_ADC_Enable+0x20>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	2201      	movs	r2, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	7fffffe8 	.word	0x7fffffe8

08001dc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <LL_ADC_Disable+0x20>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	7fffffe8 	.word	0x7fffffe8

08001de4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_IsEnabled+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_IsEnabled+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_IsDisableOngoing+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_IsDisableOngoing+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <LL_ADC_REG_StartConversion+0x20>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	2204      	movs	r2, #4
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	7fffffe8 	.word	0x7fffffe8

08001e4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d101      	bne.n	8001e64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	231f      	movs	r3, #31
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e17f      	b.n	8002196 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff fccf 	bl	8001844 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2254      	movs	r2, #84	; 0x54
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff ff5b 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7ff ff40 	bl	8001d4c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ecc:	4bb4      	ldr	r3, [pc, #720]	; (80021a0 <HAL_ADC_Init+0x330>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	49b4      	ldr	r1, [pc, #720]	; (80021a4 <HAL_ADC_Init+0x334>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe f920 	bl	8000118 <__udivsi3>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	3301      	adds	r3, #1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee0:	e002      	b.n	8001ee8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f9      	bne.n	8001ee2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff ff3e 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001ef8:	1e03      	subs	r3, r0, #0
 8001efa:	d10f      	bne.n	8001f1c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	2210      	movs	r2, #16
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f14:	231f      	movs	r3, #31
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff ff93 	bl	8001e4c <LL_ADC_REG_IsConversionOngoing>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	2210      	movs	r2, #16
 8001f30:	4013      	ands	r3, r2
 8001f32:	d000      	beq.n	8001f36 <HAL_ADC_Init+0xc6>
 8001f34:	e122      	b.n	800217c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d000      	beq.n	8001f3e <HAL_ADC_Init+0xce>
 8001f3c:	e11e      	b.n	800217c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4a99      	ldr	r2, [pc, #612]	; (80021a8 <HAL_ADC_Init+0x338>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	2202      	movs	r2, #2
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f7ff ff46 	bl	8001de4 <LL_ADC_IsEnabled>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d000      	beq.n	8001f5e <HAL_ADC_Init+0xee>
 8001f5c:	e0ad      	b.n	80020ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7e1b      	ldrb	r3, [r3, #24]
 8001f66:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001f68:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7e5b      	ldrb	r3, [r3, #25]
 8001f6e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f70:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7e9b      	ldrb	r3, [r3, #26]
 8001f76:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f78:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_ADC_Init+0x118>
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	015b      	lsls	r3, r3, #5
 8001f86:	e000      	b.n	8001f8a <HAL_ADC_Init+0x11a>
 8001f88:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f8a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f90:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da04      	bge.n	8001fa4 <HAL_ADC_Init+0x134>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	e001      	b.n	8001fa8 <HAL_ADC_Init+0x138>
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001fa8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	5c5b      	ldrb	r3, [r3, r1]
 8001fb0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001fb2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	5c9b      	ldrb	r3, [r3, r2]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d115      	bne.n	8001ff0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e9b      	ldrb	r3, [r3, #26]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0252      	lsls	r2, r2, #9
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	2220      	movs	r2, #32
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	2201      	movs	r2, #1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ffc:	23e0      	movs	r3, #224	; 0xe0
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002006:	4313      	orrs	r3, r2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a65      	ldr	r2, [pc, #404]	; (80021ac <HAL_ADC_Init+0x33c>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	430a      	orrs	r2, r1
 8002022:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0f9b      	lsrs	r3, r3, #30
 800202a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002030:	4313      	orrs	r3, r2
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	223c      	movs	r2, #60	; 0x3c
 800203c:	5c9b      	ldrb	r3, [r3, r2]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d111      	bne.n	8002066 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0f9b      	lsrs	r3, r3, #30
 8002048:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800204e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002054:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800205a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	2201      	movs	r2, #1
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	4a50      	ldr	r2, [pc, #320]	; (80021b0 <HAL_ADC_Init+0x340>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	430a      	orrs	r2, r1
 800207a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	23c0      	movs	r3, #192	; 0xc0
 8002082:	061b      	lsls	r3, r3, #24
 8002084:	429a      	cmp	r2, r3
 8002086:	d018      	beq.n	80020ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	05db      	lsls	r3, r3, #23
 8002090:	429a      	cmp	r2, r3
 8002092:	d012      	beq.n	80020ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	429a      	cmp	r2, r3
 800209e:	d00c      	beq.n	80020ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80020a0:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_ADC_Init+0x344>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a44      	ldr	r2, [pc, #272]	; (80021b8 <HAL_ADC_Init+0x348>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	23f0      	movs	r3, #240	; 0xf0
 80020b0:	039b      	lsls	r3, r3, #14
 80020b2:	401a      	ands	r2, r3
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_ADC_Init+0x344>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	001a      	movs	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	f7ff fd9c 	bl	8001c02 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	493a      	ldr	r1, [pc, #232]	; (80021bc <HAL_ADC_Init+0x34c>)
 80020d4:	001a      	movs	r2, r3
 80020d6:	f7ff fd94 	bl	8001c02 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2110      	movs	r1, #16
 80020ee:	4249      	negs	r1, r1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
 80020f4:	e018      	b.n	8002128 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	039b      	lsls	r3, r3, #14
 80020fe:	429a      	cmp	r2, r3
 8002100:	d112      	bne.n	8002128 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	3b01      	subs	r3, #1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	221c      	movs	r2, #28
 8002112:	4013      	ands	r3, r2
 8002114:	2210      	movs	r2, #16
 8002116:	4252      	negs	r2, r2
 8002118:	409a      	lsls	r2, r3
 800211a:	0011      	movs	r1, r2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	0018      	movs	r0, r3
 8002130:	f7ff fd84 	bl	8001c3c <LL_ADC_GetSamplingTimeCommonChannels>
 8002134:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800213a:	429a      	cmp	r2, r3
 800213c:	d10b      	bne.n	8002156 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	2203      	movs	r2, #3
 800214a:	4393      	bics	r3, r2
 800214c:	2201      	movs	r2, #1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002154:	e01c      	b.n	8002190 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	2212      	movs	r2, #18
 800215c:	4393      	bics	r3, r2
 800215e:	2210      	movs	r2, #16
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	2201      	movs	r2, #1
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002172:	231f      	movs	r3, #31
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800217a:	e009      	b.n	8002190 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	2210      	movs	r2, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002188:	231f      	movs	r3, #31
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002190:	231f      	movs	r3, #31
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b008      	add	sp, #32
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	20000008 	.word	0x20000008
 80021a4:	00030d40 	.word	0x00030d40
 80021a8:	fffffefd 	.word	0xfffffefd
 80021ac:	ffde0201 	.word	0xffde0201
 80021b0:	1ffffc02 	.word	0x1ffffc02
 80021b4:	40012708 	.word	0x40012708
 80021b8:	ffc3ffff 	.word	0xffc3ffff
 80021bc:	07ffff04 	.word	0x07ffff04

080021c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fe3b 	bl	8001e4c <LL_ADC_REG_IsConversionOngoing>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d16c      	bne.n	80022b4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2254      	movs	r2, #84	; 0x54
 80021de:	5c9b      	ldrb	r3, [r3, r2]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_Start_DMA+0x28>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e06c      	b.n	80022c2 <HAL_ADC_Start_DMA+0x102>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2254      	movs	r2, #84	; 0x54
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	d113      	bne.n	8002224 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff fdef 	bl	8001de4 <LL_ADC_IsEnabled>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d004      	beq.n	8002214 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0018      	movs	r0, r3
 8002210:	f7ff fdd6 	bl	8001dc0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002224:	2517      	movs	r5, #23
 8002226:	197c      	adds	r4, r7, r5
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 fa46 	bl	80026bc <ADC_Enable>
 8002230:	0003      	movs	r3, r0
 8002232:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002234:	002c      	movs	r4, r5
 8002236:	193b      	adds	r3, r7, r4
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d13e      	bne.n	80022bc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_ADC_Start_DMA+0x10c>)
 8002244:	4013      	ands	r3, r2
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0052      	lsls	r2, r2, #1
 800224a:	431a      	orrs	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_ADC_Start_DMA+0x110>)
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_ADC_Start_DMA+0x114>)
 8002264:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226a:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_ADC_Start_DMA+0x118>)
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	221c      	movs	r2, #28
 8002274:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2254      	movs	r2, #84	; 0x54
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2110      	movs	r1, #16
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3340      	adds	r3, #64	; 0x40
 8002298:	0019      	movs	r1, r3
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	193c      	adds	r4, r7, r4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f000 fe9c 	bl	8002fdc <HAL_DMA_Start_IT>
 80022a4:	0003      	movs	r3, r0
 80022a6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fdbb 	bl	8001e28 <LL_ADC_REG_StartConversion>
 80022b2:	e003      	b.n	80022bc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2202      	movs	r2, #2
 80022ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80022bc:	2317      	movs	r3, #23
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b006      	add	sp, #24
 80022c8:	bdb0      	pop	{r4, r5, r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	fffff0fe 	.word	0xfffff0fe
 80022d0:	08002885 	.word	0x08002885
 80022d4:	0800294d 	.word	0x0800294d
 80022d8:	0800296b 	.word	0x0800296b

080022dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002316:	2317      	movs	r3, #23
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2254      	movs	r2, #84	; 0x54
 8002326:	5c9b      	ldrb	r3, [r3, r2]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e1c0      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x3a6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2254      	movs	r2, #84	; 0x54
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff fd85 	bl	8001e4c <LL_ADC_REG_IsConversionOngoing>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d000      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x3c>
 8002346:	e1a3      	b.n	8002690 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d100      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x46>
 8002350:	e143      	b.n	80025da <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	061b      	lsls	r3, r3, #24
 800235a:	429a      	cmp	r2, r3
 800235c:	d004      	beq.n	8002368 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002362:	4ac1      	ldr	r2, [pc, #772]	; (8002668 <HAL_ADC_ConfigChannel+0x35c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0019      	movs	r1, r3
 8002372:	0010      	movs	r0, r2
 8002374:	f7ff fcaa 	bl	8001ccc <LL_ADC_REG_SetSequencerChAdd>
 8002378:	e0c9      	b.n	800250e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	211f      	movs	r1, #31
 8002384:	400b      	ands	r3, r1
 8002386:	210f      	movs	r1, #15
 8002388:	4099      	lsls	r1, r3
 800238a:	000b      	movs	r3, r1
 800238c:	43db      	mvns	r3, r3
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	035b      	lsls	r3, r3, #13
 8002398:	0b5b      	lsrs	r3, r3, #13
 800239a:	d105      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x9c>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	221f      	movs	r2, #31
 80023a4:	4013      	ands	r3, r2
 80023a6:	e098      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d000      	beq.n	80023b4 <HAL_ADC_ConfigChannel+0xa8>
 80023b2:	e091      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x1cc>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d000      	beq.n	80023c0 <HAL_ADC_ConfigChannel+0xb4>
 80023be:	e089      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x1c8>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2204      	movs	r2, #4
 80023c6:	4013      	ands	r3, r2
 80023c8:	d000      	beq.n	80023cc <HAL_ADC_ConfigChannel+0xc0>
 80023ca:	e081      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x1c4>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2208      	movs	r2, #8
 80023d2:	4013      	ands	r3, r2
 80023d4:	d000      	beq.n	80023d8 <HAL_ADC_ConfigChannel+0xcc>
 80023d6:	e079      	b.n	80024cc <HAL_ADC_ConfigChannel+0x1c0>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2210      	movs	r2, #16
 80023de:	4013      	ands	r3, r2
 80023e0:	d000      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0xd8>
 80023e2:	e071      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x1bc>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	4013      	ands	r3, r2
 80023ec:	d000      	beq.n	80023f0 <HAL_ADC_ConfigChannel+0xe4>
 80023ee:	e069      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1b8>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	4013      	ands	r3, r2
 80023f8:	d000      	beq.n	80023fc <HAL_ADC_ConfigChannel+0xf0>
 80023fa:	e061      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x1b4>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2280      	movs	r2, #128	; 0x80
 8002402:	4013      	ands	r3, r2
 8002404:	d000      	beq.n	8002408 <HAL_ADC_ConfigChannel+0xfc>
 8002406:	e059      	b.n	80024bc <HAL_ADC_ConfigChannel+0x1b0>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d151      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1ac>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d149      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1a8>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4013      	ands	r3, r2
 800242a:	d141      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1a4>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4013      	ands	r3, r2
 8002436:	d139      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1a0>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	015b      	lsls	r3, r3, #5
 8002440:	4013      	ands	r3, r2
 8002442:	d131      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x19c>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	019b      	lsls	r3, r3, #6
 800244c:	4013      	ands	r3, r2
 800244e:	d129      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x198>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	01db      	lsls	r3, r3, #7
 8002458:	4013      	ands	r3, r2
 800245a:	d121      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x194>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4013      	ands	r3, r2
 8002466:	d119      	bne.n	800249c <HAL_ADC_ConfigChannel+0x190>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	025b      	lsls	r3, r3, #9
 8002470:	4013      	ands	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x18c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	4013      	ands	r3, r2
 800247e:	d109      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x188>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	02db      	lsls	r3, r3, #11
 8002488:	4013      	ands	r3, r2
 800248a:	d001      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x184>
 800248c:	2312      	movs	r3, #18
 800248e:	e024      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 8002490:	2300      	movs	r3, #0
 8002492:	e022      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 8002494:	2311      	movs	r3, #17
 8002496:	e020      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 8002498:	2310      	movs	r3, #16
 800249a:	e01e      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 800249c:	230f      	movs	r3, #15
 800249e:	e01c      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024a0:	230e      	movs	r3, #14
 80024a2:	e01a      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024a4:	230d      	movs	r3, #13
 80024a6:	e018      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024a8:	230c      	movs	r3, #12
 80024aa:	e016      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024ac:	230b      	movs	r3, #11
 80024ae:	e014      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024b0:	230a      	movs	r3, #10
 80024b2:	e012      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024b4:	2309      	movs	r3, #9
 80024b6:	e010      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024b8:	2308      	movs	r3, #8
 80024ba:	e00e      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024bc:	2307      	movs	r3, #7
 80024be:	e00c      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024c0:	2306      	movs	r3, #6
 80024c2:	e00a      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024c4:	2305      	movs	r3, #5
 80024c6:	e008      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024c8:	2304      	movs	r3, #4
 80024ca:	e006      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e004      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e002      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <HAL_ADC_ConfigChannel+0x1ce>
 80024d8:	2300      	movs	r3, #0
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6852      	ldr	r2, [r2, #4]
 80024de:	201f      	movs	r0, #31
 80024e0:	4002      	ands	r2, r0
 80024e2:	4093      	lsls	r3, r2
 80024e4:	000a      	movs	r2, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d808      	bhi.n	800250e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	001a      	movs	r2, r3
 800250a:	f7ff fbbf 	bl	8001c8c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	001a      	movs	r2, r3
 800251c:	f7ff fbfa 	bl	8001d14 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db00      	blt.n	800252a <HAL_ADC_ConfigChannel+0x21e>
 8002528:	e0bc      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252a:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff fb5b 	bl	8001be8 <LL_ADC_GetCommonPathInternalCh>
 8002532:	0003      	movs	r3, r0
 8002534:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_ADC_ConfigChannel+0x364>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d122      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002548:	d11d      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	0412      	lsls	r2, r2, #16
 8002550:	4313      	orrs	r3, r2
 8002552:	4a46      	ldr	r2, [pc, #280]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 8002554:	0019      	movs	r1, r3
 8002556:	0010      	movs	r0, r2
 8002558:	f7ff fb32 	bl	8001bc0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <HAL_ADC_ConfigChannel+0x368>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4945      	ldr	r1, [pc, #276]	; (8002678 <HAL_ADC_ConfigChannel+0x36c>)
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd fdd8 	bl	8000118 <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	0013      	movs	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	189b      	adds	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002576:	e002      	b.n	800257e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3b01      	subs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002584:	e08e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a3c      	ldr	r2, [pc, #240]	; (800267c <HAL_ADC_ConfigChannel+0x370>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d10e      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	045b      	lsls	r3, r3, #17
 8002596:	4013      	ands	r3, r2
 8002598:	d109      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0452      	lsls	r2, r2, #17
 80025a0:	4313      	orrs	r3, r2
 80025a2:	4a32      	ldr	r2, [pc, #200]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 80025a4:	0019      	movs	r1, r3
 80025a6:	0010      	movs	r0, r2
 80025a8:	f7ff fb0a 	bl	8001bc0 <LL_ADC_SetCommonPathInternalCh>
 80025ac:	e07a      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a33      	ldr	r2, [pc, #204]	; (8002680 <HAL_ADC_ConfigChannel+0x374>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d000      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x2ae>
 80025b8:	e074      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	03db      	lsls	r3, r3, #15
 80025c0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80025c2:	d000      	beq.n	80025c6 <HAL_ADC_ConfigChannel+0x2ba>
 80025c4:	e06e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	03d2      	lsls	r2, r2, #15
 80025cc:	4313      	orrs	r3, r2
 80025ce:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 80025d0:	0019      	movs	r1, r3
 80025d2:	0010      	movs	r0, r2
 80025d4:	f7ff faf4 	bl	8001bc0 <LL_ADC_SetCommonPathInternalCh>
 80025d8:	e064      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d004      	beq.n	80025f0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <HAL_ADC_ConfigChannel+0x35c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d107      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0019      	movs	r1, r3
 80025fa:	0010      	movs	r0, r2
 80025fc:	f7ff fb77 	bl	8001cee <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	da4d      	bge.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff faec 	bl	8001be8 <LL_ADC_GetCommonPathInternalCh>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a15      	ldr	r2, [pc, #84]	; (8002670 <HAL_ADC_ConfigChannel+0x364>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_ADC_ConfigChannel+0x378>)
 8002622:	4013      	ands	r3, r2
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 8002626:	0019      	movs	r1, r3
 8002628:	0010      	movs	r0, r2
 800262a:	f7ff fac9 	bl	8001bc0 <LL_ADC_SetCommonPathInternalCh>
 800262e:	e039      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_ADC_ConfigChannel+0x370>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_ADC_ConfigChannel+0x37c>)
 800263e:	4013      	ands	r3, r2
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f7ff fabb 	bl	8001bc0 <LL_ADC_SetCommonPathInternalCh>
 800264a:	e02b      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_ADC_ConfigChannel+0x374>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d126      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_ADC_ConfigChannel+0x380>)
 800265a:	4013      	ands	r3, r2
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <HAL_ADC_ConfigChannel+0x360>)
 800265e:	0019      	movs	r1, r3
 8002660:	0010      	movs	r0, r2
 8002662:	f7ff faad 	bl	8001bc0 <LL_ADC_SetCommonPathInternalCh>
 8002666:	e01d      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x398>
 8002668:	80000004 	.word	0x80000004
 800266c:	40012708 	.word	0x40012708
 8002670:	b0001000 	.word	0xb0001000
 8002674:	20000008 	.word	0x20000008
 8002678:	00030d40 	.word	0x00030d40
 800267c:	b8004000 	.word	0xb8004000
 8002680:	b4002000 	.word	0xb4002000
 8002684:	ff7fffff 	.word	0xff7fffff
 8002688:	feffffff 	.word	0xfeffffff
 800268c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	2220      	movs	r2, #32
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800269c:	2317      	movs	r3, #23
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2254      	movs	r2, #84	; 0x54
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80026ac:	2317      	movs	r3, #23
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	781b      	ldrb	r3, [r3, #0]
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b006      	add	sp, #24
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)

080026bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff fb89 	bl	8001de4 <LL_ADC_IsEnabled>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d000      	beq.n	80026d8 <ADC_Enable+0x1c>
 80026d6:	e069      	b.n	80027ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a36      	ldr	r2, [pc, #216]	; (80027b8 <ADC_Enable+0xfc>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	d00d      	beq.n	8002700 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	2210      	movs	r2, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2201      	movs	r2, #1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e056      	b.n	80027ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fb49 	bl	8001d9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <ADC_Enable+0x100>)
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff fa6b 	bl	8001be8 <LL_ADC_GetCommonPathInternalCh>
 8002712:	0002      	movs	r2, r0
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	4013      	ands	r3, r2
 800271a:	d00f      	beq.n	800273c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <ADC_Enable+0x104>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4928      	ldr	r1, [pc, #160]	; (80027c4 <ADC_Enable+0x108>)
 8002722:	0018      	movs	r0, r3
 8002724:	f7fd fcf8 	bl	8000118 <__udivsi3>
 8002728:	0003      	movs	r3, r0
 800272a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800272c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800272e:	e002      	b.n	8002736 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3b01      	subs	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f9      	bne.n	8002730 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7e5b      	ldrb	r3, [r3, #25]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d033      	beq.n	80027ac <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002744:	f7ff fa0e 	bl	8001b64 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800274c:	e027      	b.n	800279e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	0018      	movs	r0, r3
 8002754:	f7ff fb46 	bl	8001de4 <LL_ADC_IsEnabled>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d104      	bne.n	8002766 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff fb1b 	bl	8001d9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002766:	f7ff f9fd 	bl	8001b64 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d914      	bls.n	800279e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	4013      	ands	r3, r2
 800277e:	2b01      	cmp	r3, #1
 8002780:	d00d      	beq.n	800279e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	2210      	movs	r2, #16
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2201      	movs	r2, #1
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e007      	b.n	80027ae <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d1d0      	bne.n	800274e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	80000017 	.word	0x80000017
 80027bc:	40012708 	.word	0x40012708
 80027c0:	20000008 	.word	0x20000008
 80027c4:	00030d40 	.word	0x00030d40

080027c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff fb16 	bl	8001e06 <LL_ADC_IsDisableOngoing>
 80027da:	0003      	movs	r3, r0
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7ff fafe 	bl	8001de4 <LL_ADC_IsEnabled>
 80027e8:	1e03      	subs	r3, r0, #0
 80027ea:	d046      	beq.n	800287a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d143      	bne.n	800287a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2205      	movs	r2, #5
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d10d      	bne.n	800281c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0018      	movs	r0, r3
 8002806:	f7ff fadb 	bl	8001dc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2203      	movs	r2, #3
 8002810:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002812:	f7ff f9a7 	bl	8001b64 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800281a:	e028      	b.n	800286e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	2210      	movs	r2, #16
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	2201      	movs	r2, #1
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e021      	b.n	800287c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002838:	f7ff f994 	bl	8001b64 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d913      	bls.n	800286e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d00d      	beq.n	800286e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	2210      	movs	r2, #16
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002862:	2201      	movs	r2, #1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e006      	b.n	800287c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2201      	movs	r2, #1
 8002876:	4013      	ands	r3, r2
 8002878:	d1de      	bne.n	8002838 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b004      	add	sp, #16
 8002882:	bd80      	pop	{r7, pc}

08002884 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	2250      	movs	r2, #80	; 0x50
 8002898:	4013      	ands	r3, r2
 800289a:	d141      	bne.n	8002920 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7ff f9db 	bl	8001c6a <LL_ADC_REG_IsTriggerSourceSWStart>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d02e      	beq.n	8002916 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	7e9b      	ldrb	r3, [r3, #26]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d12a      	bne.n	8002916 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2208      	movs	r2, #8
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d123      	bne.n	8002916 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7ff faba 	bl	8001e4c <LL_ADC_REG_IsConversionOngoing>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d110      	bne.n	80028fe <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	210c      	movs	r1, #12
 80028e8:	438a      	bics	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <ADC_DMAConvCplt+0xc4>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	2201      	movs	r2, #1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
 80028fc:	e00b      	b.n	8002916 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	2220      	movs	r2, #32
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2201      	movs	r2, #1
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff fcdf 	bl	80022dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800291e:	e00f      	b.n	8002940 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	2210      	movs	r2, #16
 8002926:	4013      	ands	r3, r2
 8002928:	d004      	beq.n	8002934 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff fce5 	bl	80022fc <HAL_ADC_ErrorCallback>
}
 8002932:	e005      	b.n	8002940 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	0010      	movs	r0, r2
 800293e:	4798      	blx	r3
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b004      	add	sp, #16
 8002946:	bd80      	pop	{r7, pc}
 8002948:	fffffefe 	.word	0xfffffefe

0800294c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff fcc5 	bl	80022ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}

0800296a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	431a      	orrs	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2204      	movs	r2, #4
 800298a:	431a      	orrs	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff fcb2 	bl	80022fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}

080029a0 <LL_ADC_GetCommonClock>:
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	23f0      	movs	r3, #240	; 0xf0
 80029ae:	039b      	lsls	r3, r3, #14
 80029b0:	4013      	ands	r3, r2
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b002      	add	sp, #8
 80029b8:	bd80      	pop	{r7, pc}

080029ba <LL_ADC_GetClock>:
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	0f9b      	lsrs	r3, r3, #30
 80029c8:	079b      	lsls	r3, r3, #30
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <LL_ADC_SetCalibrationFactor>:
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	22b4      	movs	r2, #180	; 0xb4
 80029e0:	589b      	ldr	r3, [r3, r2]
 80029e2:	227f      	movs	r2, #127	; 0x7f
 80029e4:	4393      	bics	r3, r2
 80029e6:	001a      	movs	r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	21b4      	movs	r1, #180	; 0xb4
 80029f0:	505a      	str	r2, [r3, r1]
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b002      	add	sp, #8
 80029f8:	bd80      	pop	{r7, pc}

080029fa <LL_ADC_GetCalibrationFactor>:
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	22b4      	movs	r2, #180	; 0xb4
 8002a06:	589b      	ldr	r3, [r3, r2]
 8002a08:	227f      	movs	r2, #127	; 0x7f
 8002a0a:	4013      	ands	r3, r2
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <LL_ADC_Enable>:
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <LL_ADC_Enable+0x20>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	2201      	movs	r2, #1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	7fffffe8 	.word	0x7fffffe8

08002a38 <LL_ADC_Disable>:
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <LL_ADC_Disable+0x20>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	2202      	movs	r2, #2
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	7fffffe8 	.word	0x7fffffe8

08002a5c <LL_ADC_IsEnabled>:
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <LL_ADC_StartCalibration>:
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <LL_ADC_StartCalibration+0x24>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0612      	lsls	r2, r2, #24
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	7fffffe8 	.word	0x7fffffe8

08002aa8 <LL_ADC_IsCalibrationOnGoing>:
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	0fdb      	lsrs	r3, r3, #31
 8002ab6:	07da      	lsls	r2, r3, #31
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b08b      	sub	sp, #44	; 0x2c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2254      	movs	r2, #84	; 0x54
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_ADCEx_Calibration_Start+0x1e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0dd      	b.n	8002caa <HAL_ADCEx_Calibration_Start+0x1da>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2254      	movs	r2, #84	; 0x54
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002af6:	231f      	movs	r3, #31
 8002af8:	18fc      	adds	r4, r7, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fe63 	bl	80027c8 <ADC_Disable>
 8002b02:	0003      	movs	r3, r0
 8002b04:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7ff ffa6 	bl	8002a5c <LL_ADC_IsEnabled>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d000      	beq.n	8002b16 <HAL_ADCEx_Calibration_Start+0x46>
 8002b14:	e0bc      	b.n	8002c90 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	4a66      	ldr	r2, [pc, #408]	; (8002cb4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2202      	movs	r2, #2
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a62      	ldr	r2, [pc, #392]	; (8002cb8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	495f      	ldr	r1, [pc, #380]	; (8002cbc <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	e02d      	b.n	8002ba4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff ff97 	bl	8002a80 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b52:	e014      	b.n	8002b7e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3301      	adds	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d90d      	bls.n	8002b7e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	2212      	movs	r2, #18
 8002b68:	4393      	bics	r3, r2
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2254      	movs	r2, #84	; 0x54
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e095      	b.n	8002caa <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f7ff ff90 	bl	8002aa8 <LL_ADC_IsCalibrationOnGoing>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d1e3      	bne.n	8002b54 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff ff32 	bl	80029fa <LL_ADC_GetCalibrationFactor>
 8002b96:	0002      	movs	r2, r0
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b07      	cmp	r3, #7
 8002ba8:	d9ce      	bls.n	8002b48 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bac:	6a38      	ldr	r0, [r7, #32]
 8002bae:	f7fd fab3 	bl	8000118 <__udivsi3>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff2a 	bl	8002a14 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff fef8 	bl	80029ba <LL_ADC_GetClock>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d11b      	bne.n	8002c06 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff fee5 	bl	80029a0 <LL_ADC_GetCommonClock>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	23e0      	movs	r3, #224	; 0xe0
 8002bde:	035b      	lsls	r3, r3, #13
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d310      	bcc.n	8002c06 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	3b03      	subs	r3, #3
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002bf8:	e002      	b.n	8002c00 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f9      	bne.n	8002bfa <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	0011      	movs	r1, r2
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff fedf 	bl	80029d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff ff0d 	bl	8002a38 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c1e:	f7fe ffa1 	bl	8001b64 <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c26:	e01b      	b.n	8002c60 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c28:	f7fe ff9c 	bl	8001b64 <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d914      	bls.n	8002c60 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7ff ff0e 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c40:	1e03      	subs	r3, r0, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	2210      	movs	r2, #16
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	2201      	movs	r2, #1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e024      	b.n	8002caa <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fef9 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d1dc      	bne.n	8002c28 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68d9      	ldr	r1, [r3, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	2203      	movs	r2, #3
 8002c84:	4393      	bics	r3, r2
 8002c86:	2201      	movs	r2, #1
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	659a      	str	r2, [r3, #88]	; 0x58
 8002c8e:	e005      	b.n	8002c9c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	2210      	movs	r2, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2254      	movs	r2, #84	; 0x54
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ca4:	231f      	movs	r3, #31
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b00b      	add	sp, #44	; 0x2c
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	fffffefd 	.word	0xfffffefd
 8002cb8:	00008003 	.word	0x00008003
 8002cbc:	ffff7ffc 	.word	0xffff7ffc
 8002cc0:	0002f1ff 	.word	0x0002f1ff
 8002cc4:	40012708 	.word	0x40012708

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	0002      	movs	r2, r0
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cda:	d809      	bhi.n	8002cf0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cdc:	1dfb      	adds	r3, r7, #7
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	231f      	movs	r3, #31
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_EnableIRQ+0x30>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4091      	lsls	r1, r2
 8002cec:	000a      	movs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002d10:	d828      	bhi.n	8002d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d12:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <__NVIC_SetPriority+0xd4>)
 8002d14:	1dfb      	adds	r3, r7, #7
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	33c0      	adds	r3, #192	; 0xc0
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	589b      	ldr	r3, [r3, r2]
 8002d22:	1dfa      	adds	r2, r7, #7
 8002d24:	7812      	ldrb	r2, [r2, #0]
 8002d26:	0011      	movs	r1, r2
 8002d28:	2203      	movs	r2, #3
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	00d2      	lsls	r2, r2, #3
 8002d2e:	21ff      	movs	r1, #255	; 0xff
 8002d30:	4091      	lsls	r1, r2
 8002d32:	000a      	movs	r2, r1
 8002d34:	43d2      	mvns	r2, r2
 8002d36:	401a      	ands	r2, r3
 8002d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	401a      	ands	r2, r3
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0018      	movs	r0, r3
 8002d48:	2303      	movs	r3, #3
 8002d4a:	4003      	ands	r3, r0
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d50:	481f      	ldr	r0, [pc, #124]	; (8002dd0 <__NVIC_SetPriority+0xd4>)
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	089b      	lsrs	r3, r3, #2
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	33c0      	adds	r3, #192	; 0xc0
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d62:	e031      	b.n	8002dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d64:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <__NVIC_SetPriority+0xd8>)
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	400b      	ands	r3, r1
 8002d70:	3b08      	subs	r3, #8
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3306      	adds	r3, #6
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	18d3      	adds	r3, r2, r3
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1dfa      	adds	r2, r7, #7
 8002d80:	7812      	ldrb	r2, [r2, #0]
 8002d82:	0011      	movs	r1, r2
 8002d84:	2203      	movs	r2, #3
 8002d86:	400a      	ands	r2, r1
 8002d88:	00d2      	lsls	r2, r2, #3
 8002d8a:	21ff      	movs	r1, #255	; 0xff
 8002d8c:	4091      	lsls	r1, r2
 8002d8e:	000a      	movs	r2, r1
 8002d90:	43d2      	mvns	r2, r2
 8002d92:	401a      	ands	r2, r3
 8002d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	0018      	movs	r0, r3
 8002da4:	2303      	movs	r3, #3
 8002da6:	4003      	ands	r3, r0
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <__NVIC_SetPriority+0xd8>)
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	001c      	movs	r4, r3
 8002db4:	230f      	movs	r3, #15
 8002db6:	4023      	ands	r3, r4
 8002db8:	3b08      	subs	r3, #8
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	18c3      	adds	r3, r0, r3
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	601a      	str	r2, [r3, #0]
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b003      	add	sp, #12
 8002dce:	bd90      	pop	{r4, r7, pc}
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	045b      	lsls	r3, r3, #17
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d301      	bcc.n	8002df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dec:	2301      	movs	r3, #1
 8002dee:	e010      	b.n	8002e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <SysTick_Config+0x44>)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	3a01      	subs	r2, #1
 8002df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df8:	2301      	movs	r3, #1
 8002dfa:	425b      	negs	r3, r3
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff ff7c 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <SysTick_Config+0x44>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0a:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <SysTick_Config+0x44>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b002      	add	sp, #8
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	1c02      	adds	r2, r0, #0
 8002e30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b25b      	sxtb	r3, r3
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7ff ff5d 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	0002      	movs	r2, r0
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f7ff ff33 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b002      	add	sp, #8
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff ffaf 	bl	8002dd8 <SysTick_Config>
 8002e7a:	0003      	movs	r3, r0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e091      	b.n	8002fba <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_DMA_Init+0x140>)
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d810      	bhi.n	8002ec4 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_DMA_Init+0x144>)
 8002ea8:	4694      	mov	ip, r2
 8002eaa:	4463      	add	r3, ip
 8002eac:	2114      	movs	r1, #20
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7fd f932 	bl	8000118 <__udivsi3>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a43      	ldr	r2, [pc, #268]	; (8002fcc <HAL_DMA_Init+0x148>)
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec2:	e00f      	b.n	8002ee4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <HAL_DMA_Init+0x14c>)
 8002eca:	4694      	mov	ip, r2
 8002ecc:	4463      	add	r3, ip
 8002ece:	2114      	movs	r1, #20
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd f921 	bl	8000118 <__udivsi3>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	009a      	lsls	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a3c      	ldr	r2, [pc, #240]	; (8002fd4 <HAL_DMA_Init+0x150>)
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2225      	movs	r2, #37	; 0x25
 8002ee8:	2102      	movs	r1, #2
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4938      	ldr	r1, [pc, #224]	; (8002fd8 <HAL_DMA_Init+0x154>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f9d7 	bl	80032e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d102      	bne.n	8002f4c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	217f      	movs	r1, #127	; 0x7f
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f62:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d011      	beq.n	8002f90 <HAL_DMA_Init+0x10c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d80d      	bhi.n	8002f90 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 fa00 	bl	800337c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e008      	b.n	8002fa2 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2225      	movs	r2, #37	; 0x25
 8002fac:	2101      	movs	r1, #1
 8002fae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40020407 	.word	0x40020407
 8002fc8:	bffdfff8 	.word	0xbffdfff8
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	bffdfbf8 	.word	0xbffdfbf8
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	ffff800f 	.word	0xffff800f

08002fdc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2317      	movs	r3, #23
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2224      	movs	r2, #36	; 0x24
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Start_IT+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e06f      	b.n	80030e0 <HAL_DMA_Start_IT+0x104>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	2101      	movs	r1, #1
 8003006:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2225      	movs	r2, #37	; 0x25
 800300c:	5c9b      	ldrb	r3, [r3, r2]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d157      	bne.n	80030c4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2225      	movs	r2, #37	; 0x25
 8003018:	2102      	movs	r1, #2
 800301a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	438a      	bics	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f919 	bl	8003270 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	210e      	movs	r1, #14
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e00f      	b.n	8003078 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2104      	movs	r1, #4
 8003064:	438a      	bics	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	210a      	movs	r1, #10
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	025b      	lsls	r3, r3, #9
 8003082:	4013      	ands	r3, r2
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	0049      	lsls	r1, r1, #1
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	0049      	lsls	r1, r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e00a      	b.n	80030da <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2224      	movs	r2, #36	; 0x24
 80030ce:	2100      	movs	r1, #0
 80030d0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80030d2:	2317      	movs	r3, #23
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80030da:	2317      	movs	r3, #23
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	781b      	ldrb	r3, [r3, #0]
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b006      	add	sp, #24
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	221c      	movs	r2, #28
 8003106:	4013      	ands	r3, r2
 8003108:	2204      	movs	r2, #4
 800310a:	409a      	lsls	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	d026      	beq.n	8003162 <HAL_DMA_IRQHandler+0x7a>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d022      	beq.n	8003162 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2220      	movs	r2, #32
 8003124:	4013      	ands	r3, r2
 8003126:	d107      	bne.n	8003138 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2104      	movs	r1, #4
 8003134:	438a      	bics	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	221c      	movs	r2, #28
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	2104      	movs	r1, #4
 8003146:	4091      	lsls	r1, r2
 8003148:	000a      	movs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b00      	cmp	r3, #0
 8003152:	d100      	bne.n	8003156 <HAL_DMA_IRQHandler+0x6e>
 8003154:	e080      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	0010      	movs	r0, r2
 800315e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003160:	e07a      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	221c      	movs	r2, #28
 8003168:	4013      	ands	r3, r2
 800316a:	2202      	movs	r2, #2
 800316c:	409a      	lsls	r2, r3
 800316e:	0013      	movs	r3, r2
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	d03c      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x108>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2202      	movs	r2, #2
 800317a:	4013      	ands	r3, r2
 800317c:	d038      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	4013      	ands	r3, r2
 8003188:	d10b      	bne.n	80031a2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	210a      	movs	r1, #10
 8003196:	438a      	bics	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2225      	movs	r2, #37	; 0x25
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <HAL_DMA_IRQHandler+0x17c>)
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d909      	bls.n	80031c2 <HAL_DMA_IRQHandler+0xda>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	221c      	movs	r2, #28
 80031b4:	401a      	ands	r2, r3
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_DMA_IRQHandler+0x180>)
 80031b8:	2102      	movs	r1, #2
 80031ba:	4091      	lsls	r1, r2
 80031bc:	000a      	movs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e008      	b.n	80031d4 <HAL_DMA_IRQHandler+0xec>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	221c      	movs	r2, #28
 80031c8:	401a      	ands	r2, r3
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <HAL_DMA_IRQHandler+0x184>)
 80031cc:	2102      	movs	r1, #2
 80031ce:	4091      	lsls	r1, r2
 80031d0:	000a      	movs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	2100      	movs	r1, #0
 80031da:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d039      	beq.n	8003258 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	0010      	movs	r0, r2
 80031ec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80031ee:	e033      	b.n	8003258 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	221c      	movs	r2, #28
 80031f6:	4013      	ands	r3, r2
 80031f8:	2208      	movs	r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	d02a      	beq.n	800325a <HAL_DMA_IRQHandler+0x172>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2208      	movs	r2, #8
 8003208:	4013      	ands	r3, r2
 800320a:	d026      	beq.n	800325a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	210e      	movs	r1, #14
 8003218:	438a      	bics	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	221c      	movs	r2, #28
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2101      	movs	r1, #1
 800322a:	4091      	lsls	r1, r2
 800322c:	000a      	movs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2225      	movs	r2, #37	; 0x25
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	0010      	movs	r0, r2
 8003256:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46c0      	nop			; (mov r8, r8)
}
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	40020080 	.word	0x40020080
 8003268:	40020400 	.word	0x40020400
 800326c:	40020000 	.word	0x40020000

08003270 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003286:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003298:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	221c      	movs	r2, #28
 80032a0:	401a      	ands	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2101      	movs	r1, #1
 80032a8:	4091      	lsls	r1, r2
 80032aa:	000a      	movs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d108      	bne.n	80032d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ce:	e007      	b.n	80032e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	001a      	movs	r2, r3
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d814      	bhi.n	8003326 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003306:	189a      	adds	r2, r3, r2
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	001a      	movs	r2, r3
 8003312:	23ff      	movs	r3, #255	; 0xff
 8003314:	4013      	ands	r3, r2
 8003316:	3b08      	subs	r3, #8
 8003318:	2114      	movs	r1, #20
 800331a:	0018      	movs	r0, r3
 800331c:	f7fc fefc 	bl	8000118 <__udivsi3>
 8003320:	0003      	movs	r3, r0
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	e014      	b.n	8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4a11      	ldr	r2, [pc, #68]	; (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003330:	189a      	adds	r2, r3, r2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	001a      	movs	r2, r3
 800333c:	23ff      	movs	r3, #255	; 0xff
 800333e:	4013      	ands	r3, r2
 8003340:	3b08      	subs	r3, #8
 8003342:	2114      	movs	r1, #20
 8003344:	0018      	movs	r0, r3
 8003346:	f7fc fee7 	bl	8000118 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	3307      	adds	r3, #7
 800334e:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003354:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	221f      	movs	r2, #31
 800335a:	4013      	ands	r3, r2
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b004      	add	sp, #16
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40020407 	.word	0x40020407
 8003370:	40020800 	.word	0x40020800
 8003374:	4002081c 	.word	0x4002081c
 8003378:	40020880 	.word	0x40020880

0800337c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	227f      	movs	r2, #127	; 0x7f
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003392:	4694      	mov	ip, r2
 8003394:	4463      	add	r3, ip
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	001a      	movs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	4013      	ands	r3, r2
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	1000823f 	.word	0x1000823f
 80033c0:	40020940 	.word	0x40020940

080033c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d2:	e14d      	b.n	8003670 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2101      	movs	r1, #1
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4091      	lsls	r1, r2
 80033de:	000a      	movs	r2, r1
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d100      	bne.n	80033ec <HAL_GPIO_Init+0x28>
 80033ea:	e13e      	b.n	800366a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d005      	beq.n	8003404 <HAL_GPIO_Init+0x40>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	4013      	ands	r3, r2
 8003400:	2b02      	cmp	r3, #2
 8003402:	d130      	bne.n	8003466 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	409a      	lsls	r2, r3
 8003412:	0013      	movs	r3, r2
 8003414:	43da      	mvns	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	0013      	movs	r3, r2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343a:	2201      	movs	r2, #1
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
 8003440:	0013      	movs	r3, r2
 8003442:	43da      	mvns	r2, r3
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	2201      	movs	r2, #1
 8003452:	401a      	ands	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	409a      	lsls	r2, r3
 8003458:	0013      	movs	r3, r2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2203      	movs	r2, #3
 800346c:	4013      	ands	r3, r2
 800346e:	2b03      	cmp	r3, #3
 8003470:	d017      	beq.n	80034a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	409a      	lsls	r2, r3
 8003480:	0013      	movs	r3, r2
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	0013      	movs	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2203      	movs	r2, #3
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d123      	bne.n	80034f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	0092      	lsls	r2, r2, #2
 80034b8:	58d3      	ldr	r3, [r2, r3]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2207      	movs	r2, #7
 80034c0:	4013      	ands	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	409a      	lsls	r2, r3
 80034c8:	0013      	movs	r3, r2
 80034ca:	43da      	mvns	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2107      	movs	r1, #7
 80034da:	400b      	ands	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	6939      	ldr	r1, [r7, #16]
 80034f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	2203      	movs	r2, #3
 8003502:	409a      	lsls	r2, r3
 8003504:	0013      	movs	r3, r2
 8003506:	43da      	mvns	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2203      	movs	r2, #3
 8003514:	401a      	ands	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	0013      	movs	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	23c0      	movs	r3, #192	; 0xc0
 8003530:	029b      	lsls	r3, r3, #10
 8003532:	4013      	ands	r3, r2
 8003534:	d100      	bne.n	8003538 <HAL_GPIO_Init+0x174>
 8003536:	e098      	b.n	800366a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003538:	4a53      	ldr	r2, [pc, #332]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3318      	adds	r3, #24
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	589b      	ldr	r3, [r3, r2]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2203      	movs	r2, #3
 800354a:	4013      	ands	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	220f      	movs	r2, #15
 8003550:	409a      	lsls	r2, r3
 8003552:	0013      	movs	r3, r2
 8003554:	43da      	mvns	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	23a0      	movs	r3, #160	; 0xa0
 8003560:	05db      	lsls	r3, r3, #23
 8003562:	429a      	cmp	r2, r3
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x1d6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_GPIO_Init+0x2c8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x1d2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a47      	ldr	r2, [pc, #284]	; (8003690 <HAL_GPIO_Init+0x2cc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x1ce>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_GPIO_Init+0x2d0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x1ca>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a45      	ldr	r2, [pc, #276]	; (8003698 <HAL_GPIO_Init+0x2d4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x1c6>
 8003586:	2304      	movs	r3, #4
 8003588:	e008      	b.n	800359c <HAL_GPIO_Init+0x1d8>
 800358a:	2305      	movs	r3, #5
 800358c:	e006      	b.n	800359c <HAL_GPIO_Init+0x1d8>
 800358e:	2303      	movs	r3, #3
 8003590:	e004      	b.n	800359c <HAL_GPIO_Init+0x1d8>
 8003592:	2302      	movs	r3, #2
 8003594:	e002      	b.n	800359c <HAL_GPIO_Init+0x1d8>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_GPIO_Init+0x1d8>
 800359a:	2300      	movs	r3, #0
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	2103      	movs	r1, #3
 80035a0:	400a      	ands	r2, r1
 80035a2:	00d2      	lsls	r2, r2, #3
 80035a4:	4093      	lsls	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80035ac:	4936      	ldr	r1, [pc, #216]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	3318      	adds	r3, #24
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	035b      	lsls	r3, r3, #13
 80035d2:	4013      	ands	r3, r2
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035de:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	039b      	lsls	r3, r3, #14
 80035fc:	4013      	ands	r3, r2
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800360e:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 8003610:	2384      	movs	r3, #132	; 0x84
 8003612:	58d3      	ldr	r3, [r2, r3]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43da      	mvns	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	4013      	ands	r3, r2
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003634:	4914      	ldr	r1, [pc, #80]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 8003636:	2284      	movs	r2, #132	; 0x84
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	58d3      	ldr	r3, [r2, r3]
 8003642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43da      	mvns	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	025b      	lsls	r3, r3, #9
 8003656:	4013      	ands	r3, r2
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003662:	4909      	ldr	r1, [pc, #36]	; (8003688 <HAL_GPIO_Init+0x2c4>)
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3301      	adds	r3, #1
 800366e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	40da      	lsrs	r2, r3
 8003678:	1e13      	subs	r3, r2, #0
 800367a:	d000      	beq.n	800367e <HAL_GPIO_Init+0x2ba>
 800367c:	e6aa      	b.n	80033d4 <HAL_GPIO_Init+0x10>
  }
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b006      	add	sp, #24
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021800 	.word	0x40021800
 800368c:	50000400 	.word	0x50000400
 8003690:	50000800 	.word	0x50000800
 8003694:	50000c00 	.word	0x50000c00
 8003698:	50001000 	.word	0x50001000

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	0008      	movs	r0, r1
 80036a6:	0011      	movs	r1, r2
 80036a8:	1cbb      	adds	r3, r7, #2
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	801a      	strh	r2, [r3, #0]
 80036ae:	1c7b      	adds	r3, r7, #1
 80036b0:	1c0a      	adds	r2, r1, #0
 80036b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b4:	1c7b      	adds	r3, r7, #1
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036bc:	1cbb      	adds	r3, r7, #2
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036c4:	e003      	b.n	80036ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036c6:	1cbb      	adds	r3, r7, #2
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d11f      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	0013      	movs	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	189b      	adds	r3, r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fc fd04 	bl	8000118 <__udivsi3>
 8003710:	0003      	movs	r3, r0
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003716:	e008      	b.n	800372a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e001      	b.n	800372a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e009      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	401a      	ands	r2, r3
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	429a      	cmp	r2, r3
 800373a:	d0ed      	beq.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	40007000 	.word	0x40007000
 800374c:	fffff9ff 	.word	0xfffff9ff
 8003750:	20000008 	.word	0x20000008
 8003754:	000f4240 	.word	0x000f4240

08003758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f000 fb50 	bl	8003e0c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	d100      	bne.n	8003778 <HAL_RCC_OscConfig+0x20>
 8003776:	e07c      	b.n	8003872 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003778:	4bc3      	ldr	r3, [pc, #780]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2238      	movs	r2, #56	; 0x38
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003782:	4bc1      	ldr	r3, [pc, #772]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2203      	movs	r2, #3
 8003788:	4013      	ands	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b10      	cmp	r3, #16
 8003790:	d102      	bne.n	8003798 <HAL_RCC_OscConfig+0x40>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d002      	beq.n	800379e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d10b      	bne.n	80037b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379e:	4bba      	ldr	r3, [pc, #744]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	029b      	lsls	r3, r3, #10
 80037a6:	4013      	ands	r3, r2
 80037a8:	d062      	beq.n	8003870 <HAL_RCC_OscConfig+0x118>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d15e      	bne.n	8003870 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e32a      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	025b      	lsls	r3, r3, #9
 80037be:	429a      	cmp	r2, r3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_OscConfig+0x7a>
 80037c2:	4bb1      	ldr	r3, [pc, #708]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4bb0      	ldr	r3, [pc, #704]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0249      	lsls	r1, r1, #9
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e020      	b.n	8003814 <HAL_RCC_OscConfig+0xbc>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	23a0      	movs	r3, #160	; 0xa0
 80037d8:	02db      	lsls	r3, r3, #11
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10e      	bne.n	80037fc <HAL_RCC_OscConfig+0xa4>
 80037de:	4baa      	ldr	r3, [pc, #680]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4ba9      	ldr	r3, [pc, #676]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	02c9      	lsls	r1, r1, #11
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	4ba6      	ldr	r3, [pc, #664]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4ba5      	ldr	r3, [pc, #660]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	0249      	lsls	r1, r1, #9
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xbc>
 80037fc:	4ba2      	ldr	r3, [pc, #648]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4ba1      	ldr	r3, [pc, #644]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003802:	49a2      	ldr	r1, [pc, #648]	; (8003a8c <HAL_RCC_OscConfig+0x334>)
 8003804:	400a      	ands	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b9f      	ldr	r3, [pc, #636]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b9e      	ldr	r3, [pc, #632]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800380e:	49a0      	ldr	r1, [pc, #640]	; (8003a90 <HAL_RCC_OscConfig+0x338>)
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d014      	beq.n	8003846 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe f9a2 	bl	8001b64 <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003826:	f7fe f99d 	bl	8001b64 <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e2e9      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003838:	4b93      	ldr	r3, [pc, #588]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	4013      	ands	r3, r2
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0xce>
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fe f98d 	bl	8001b64 <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe f988 	bl	8001b64 <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e2d4      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	029b      	lsls	r3, r3, #10
 800386a:	4013      	ands	r3, r2
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0xf8>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d100      	bne.n	800387e <HAL_RCC_OscConfig+0x126>
 800387c:	e099      	b.n	80039b2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387e:	4b82      	ldr	r3, [pc, #520]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2238      	movs	r2, #56	; 0x38
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	4b7f      	ldr	r3, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b10      	cmp	r3, #16
 8003896:	d102      	bne.n	800389e <HAL_RCC_OscConfig+0x146>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d135      	bne.n	8003910 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	4b78      	ldr	r3, [pc, #480]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4013      	ands	r3, r2
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x164>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e2a7      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a74      	ldr	r2, [pc, #464]	; (8003a94 <HAL_RCC_OscConfig+0x33c>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	021a      	lsls	r2, r3, #8
 80038cc:	4b6e      	ldr	r3, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d112      	bne.n	80038fe <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038d8:	4b6b      	ldr	r3, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_RCC_OscConfig+0x340>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	4b68      	ldr	r3, [pc, #416]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0adb      	lsrs	r3, r3, #11
 80038f2:	2207      	movs	r2, #7
 80038f4:	4013      	ands	r3, r2
 80038f6:	4a69      	ldr	r2, [pc, #420]	; (8003a9c <HAL_RCC_OscConfig+0x344>)
 80038f8:	40da      	lsrs	r2, r3
 80038fa:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <HAL_RCC_OscConfig+0x348>)
 80038fc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038fe:	4b69      	ldr	r3, [pc, #420]	; (8003aa4 <HAL_RCC_OscConfig+0x34c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	0018      	movs	r0, r3
 8003904:	f7fe f8d2 	bl	8001aac <HAL_InitTick>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d051      	beq.n	80039b0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e27d      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d030      	beq.n	800397a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003918:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_RCC_OscConfig+0x340>)
 800391e:	4013      	ands	r3, r2
 8003920:	0019      	movs	r1, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0049      	lsls	r1, r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fe f913 	bl	8001b64 <HAL_GetTick>
 800393e:	0003      	movs	r3, r0
 8003940:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003944:	f7fe f90e 	bl	8001b64 <HAL_GetTick>
 8003948:	0002      	movs	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e25a      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4013      	ands	r3, r2
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <HAL_RCC_OscConfig+0x33c>)
 8003968:	4013      	ands	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	e01b      	b.n	80039b2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003980:	4949      	ldr	r1, [pc, #292]	; (8003aa8 <HAL_RCC_OscConfig+0x350>)
 8003982:	400a      	ands	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe f8ed 	bl	8001b64 <HAL_GetTick>
 800398a:	0003      	movs	r3, r0
 800398c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003990:	f7fe f8e8 	bl	8001b64 <HAL_GetTick>
 8003994:	0002      	movs	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e234      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a2:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4013      	ands	r3, r2
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x238>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2208      	movs	r2, #8
 80039b8:	4013      	ands	r3, r2
 80039ba:	d047      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2238      	movs	r2, #56	; 0x38
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b18      	cmp	r3, #24
 80039c6:	d10a      	bne.n	80039de <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80039ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039cc:	2202      	movs	r2, #2
 80039ce:	4013      	ands	r3, r2
 80039d0:	d03c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2f4>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d138      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e216      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d019      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80039e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 80039ec:	2101      	movs	r1, #1
 80039ee:	430a      	orrs	r2, r1
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fe f8b7 	bl	8001b64 <HAL_GetTick>
 80039f6:	0003      	movs	r3, r0
 80039f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039fc:	f7fe f8b2 	bl	8001b64 <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1fe      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	2202      	movs	r2, #2
 8003a14:	4013      	ands	r3, r2
 8003a16:	d0f1      	beq.n	80039fc <HAL_RCC_OscConfig+0x2a4>
 8003a18:	e018      	b.n	8003a4c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003a1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	438a      	bics	r2, r1
 8003a24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe f89d 	bl	8001b64 <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fe f898 	bl	8001b64 <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1e4      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d1f1      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2204      	movs	r2, #4
 8003a52:	4013      	ands	r3, r2
 8003a54:	d100      	bne.n	8003a58 <HAL_RCC_OscConfig+0x300>
 8003a56:	e0c7      	b.n	8003be8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a58:	231f      	movs	r3, #31
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2238      	movs	r2, #56	; 0x38
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d11f      	bne.n	8003aac <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <HAL_RCC_OscConfig+0x330>)
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2202      	movs	r2, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d100      	bne.n	8003a78 <HAL_RCC_OscConfig+0x320>
 8003a76:	e0b7      	b.n	8003be8 <HAL_RCC_OscConfig+0x490>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d000      	beq.n	8003a82 <HAL_RCC_OscConfig+0x32a>
 8003a80:	e0b2      	b.n	8003be8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e1c2      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	fffeffff 	.word	0xfffeffff
 8003a90:	fffbffff 	.word	0xfffbffff
 8003a94:	ffff80ff 	.word	0xffff80ff
 8003a98:	ffffc7ff 	.word	0xffffc7ff
 8003a9c:	00f42400 	.word	0x00f42400
 8003aa0:	20000008 	.word	0x20000008
 8003aa4:	2000000c 	.word	0x2000000c
 8003aa8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aac:	4bb5      	ldr	r3, [pc, #724]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	055b      	lsls	r3, r3, #21
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_OscConfig+0x364>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x366>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d011      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4bb0      	ldr	r3, [pc, #704]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac6:	4baf      	ldr	r3, [pc, #700]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003ac8:	2180      	movs	r1, #128	; 0x80
 8003aca:	0549      	lsls	r1, r1, #21
 8003acc:	430a      	orrs	r2, r1
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ad0:	4bac      	ldr	r3, [pc, #688]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	055b      	lsls	r3, r3, #21
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003ade:	231f      	movs	r3, #31
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae6:	4ba8      	ldr	r3, [pc, #672]	; (8003d88 <HAL_RCC_OscConfig+0x630>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d11a      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af2:	4ba5      	ldr	r3, [pc, #660]	; (8003d88 <HAL_RCC_OscConfig+0x630>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4ba4      	ldr	r3, [pc, #656]	; (8003d88 <HAL_RCC_OscConfig+0x630>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0049      	lsls	r1, r1, #1
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b00:	f7fe f830 	bl	8001b64 <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0a:	f7fe f82b 	bl	8001b64 <HAL_GetTick>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e177      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1c:	4b9a      	ldr	r3, [pc, #616]	; (8003d88 <HAL_RCC_OscConfig+0x630>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3e6>
 8003b30:	4b94      	ldr	r3, [pc, #592]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b34:	4b93      	ldr	r3, [pc, #588]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b36:	2101      	movs	r1, #1
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCC_OscConfig+0x420>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x408>
 8003b46:	4b8f      	ldr	r3, [pc, #572]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b4a:	4b8e      	ldr	r3, [pc, #568]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b52:	4b8c      	ldr	r3, [pc, #560]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0x420>
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b64:	4b87      	ldr	r3, [pc, #540]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	438a      	bics	r2, r1
 8003b6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b6c:	4b85      	ldr	r3, [pc, #532]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b70:	4b84      	ldr	r3, [pc, #528]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003b72:	2104      	movs	r1, #4
 8003b74:	438a      	bics	r2, r1
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d014      	beq.n	8003baa <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fd fff0 	bl	8001b64 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd ffeb 	bl	8001b64 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a7d      	ldr	r2, [pc, #500]	; (8003d8c <HAL_RCC_OscConfig+0x634>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e136      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x432>
 8003ba8:	e013      	b.n	8003bd2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd ffdb 	bl	8001b64 <HAL_GetTick>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb2:	e009      	b.n	8003bc8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fd ffd6 	bl	8001b64 <HAL_GetTick>
 8003bb8:	0002      	movs	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a73      	ldr	r2, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x634>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e121      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc8:	4b6e      	ldr	r3, [pc, #440]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003bd2:	231f      	movs	r3, #31
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be0:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003be2:	496b      	ldr	r1, [pc, #428]	; (8003d90 <HAL_RCC_OscConfig+0x638>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d039      	beq.n	8003c66 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bfa:	4b62      	ldr	r3, [pc, #392]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	03c9      	lsls	r1, r1, #15
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd ffac 	bl	8001b64 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c12:	f7fd ffa7 	bl	8001b64 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0f3      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c24:	4b57      	ldr	r3, [pc, #348]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCC_OscConfig+0x4ba>
 8003c30:	e019      	b.n	8003c66 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c32:	4b54      	ldr	r3, [pc, #336]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c38:	4956      	ldr	r1, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x63c>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fd ff91 	bl	8001b64 <HAL_GetTick>
 8003c42:	0003      	movs	r3, r0
 8003c44:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c48:	f7fd ff8c 	bl	8001b64 <HAL_GetTick>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e0d8      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d100      	bne.n	8003c70 <HAL_RCC_OscConfig+0x518>
 8003c6e:	e0cc      	b.n	8003e0a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c70:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2238      	movs	r2, #56	; 0x38
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d100      	bne.n	8003c7e <HAL_RCC_OscConfig+0x526>
 8003c7c:	e07b      	b.n	8003d76 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d156      	bne.n	8003d34 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c8c:	4942      	ldr	r1, [pc, #264]	; (8003d98 <HAL_RCC_OscConfig+0x640>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd ff67 	bl	8001b64 <HAL_GetTick>
 8003c96:	0003      	movs	r3, r0
 8003c98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7fd ff62 	bl	8001b64 <HAL_GetTick>
 8003ca0:	0002      	movs	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0ae      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	049b      	lsls	r3, r3, #18
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cba:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a37      	ldr	r2, [pc, #220]	; (8003d9c <HAL_RCC_OscConfig+0x644>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003cea:	430a      	orrs	r2, r1
 8003cec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	0449      	lsls	r1, r1, #17
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d02:	2180      	movs	r1, #128	; 0x80
 8003d04:	0549      	lsls	r1, r1, #21
 8003d06:	430a      	orrs	r2, r1
 8003d08:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd ff2b 	bl	8001b64 <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd ff26 	bl	8001b64 <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e072      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	049b      	lsls	r3, r3, #18
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x5bc>
 8003d32:	e06a      	b.n	8003e0a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d3a:	4917      	ldr	r1, [pc, #92]	; (8003d98 <HAL_RCC_OscConfig+0x640>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd ff10 	bl	8001b64 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd ff0b 	bl	8001b64 <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e057      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	049b      	lsls	r3, r3, #18
 8003d64:	4013      	ands	r3, r2
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003d6e:	490c      	ldr	r1, [pc, #48]	; (8003da0 <HAL_RCC_OscConfig+0x648>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	60da      	str	r2, [r3, #12]
 8003d74:	e049      	b.n	8003e0a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d112      	bne.n	8003da4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e044      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	00001388 	.word	0x00001388
 8003d90:	efffffff 	.word	0xefffffff
 8003d94:	ffbfffff 	.word	0xffbfffff
 8003d98:	feffffff 	.word	0xfeffffff
 8003d9c:	11c1808c 	.word	0x11c1808c
 8003da0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x6bc>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2203      	movs	r2, #3
 8003dae:	401a      	ands	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d126      	bne.n	8003e06 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2270      	movs	r2, #112	; 0x70
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d11f      	bne.n	8003e06 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	23fe      	movs	r3, #254	; 0xfe
 8003dca:	01db      	lsls	r3, r3, #7
 8003dcc:	401a      	ands	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d116      	bne.n	8003e06 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	23f8      	movs	r3, #248	; 0xf8
 8003ddc:	039b      	lsls	r3, r3, #14
 8003dde:	401a      	ands	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d10e      	bne.n	8003e06 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	23e0      	movs	r3, #224	; 0xe0
 8003dec:	051b      	lsls	r3, r3, #20
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	0f5b      	lsrs	r3, r3, #29
 8003dfc:	075a      	lsls	r2, r3, #29
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b008      	add	sp, #32
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000

08003e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0e9      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b76      	ldr	r3, [pc, #472]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2207      	movs	r2, #7
 8003e32:	4013      	ands	r3, r2
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d91e      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b73      	ldr	r3, [pc, #460]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2207      	movs	r2, #7
 8003e40:	4393      	bics	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	4b70      	ldr	r3, [pc, #448]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e4c:	f7fd fe8a 	bl	8001b64 <HAL_GetTick>
 8003e50:	0003      	movs	r3, r0
 8003e52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e54:	e009      	b.n	8003e6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e56:	f7fd fe85 	bl	8001b64 <HAL_GetTick>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	4a6a      	ldr	r2, [pc, #424]	; (800400c <HAL_RCC_ClockConfig+0x1f4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0ca      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e6a:	4b67      	ldr	r3, [pc, #412]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2207      	movs	r2, #7
 8003e70:	4013      	ands	r3, r2
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d015      	beq.n	8003eae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2204      	movs	r2, #4
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d006      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e8c:	4b60      	ldr	r3, [pc, #384]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003e92:	21e0      	movs	r1, #224	; 0xe0
 8003e94:	01c9      	lsls	r1, r1, #7
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9a:	4b5d      	ldr	r3, [pc, #372]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4a5d      	ldr	r2, [pc, #372]	; (8004014 <HAL_RCC_ClockConfig+0x1fc>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d057      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec0:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	029b      	lsls	r3, r3, #10
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d12b      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e097      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	049b      	lsls	r3, r3, #18
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d11f      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e08b      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef0:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d113      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e07f      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f08:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d108      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e074      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e06d      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f24:	4b3a      	ldr	r3, [pc, #232]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2207      	movs	r2, #7
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4b37      	ldr	r3, [pc, #220]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fd fe14 	bl	8001b64 <HAL_GetTick>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f40:	e009      	b.n	8003f56 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f42:	f7fd fe0f 	bl	8001b64 <HAL_GetTick>
 8003f46:	0002      	movs	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	; (800400c <HAL_RCC_ClockConfig+0x1f4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e054      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2238      	movs	r2, #56	; 0x38
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1ec      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2207      	movs	r2, #7
 8003f6e:	4013      	ands	r3, r2
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d21e      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	4b21      	ldr	r3, [pc, #132]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f88:	f7fd fdec 	bl	8001b64 <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f90:	e009      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f92:	f7fd fde7 	bl	8001b64 <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_RCC_ClockConfig+0x1f4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e02c      	b.n	8004000 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fa6:	4b18      	ldr	r3, [pc, #96]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2207      	movs	r2, #7
 8003fac:	4013      	ands	r3, r2
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1ee      	bne.n	8003f92 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <HAL_RCC_ClockConfig+0x200>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fd2:	f000 f829 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fd6:	0001      	movs	r1, r0
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	220f      	movs	r2, #15
 8003fe0:	401a      	ands	r2, r3
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_RCC_ClockConfig+0x204>)
 8003fe4:	0092      	lsls	r2, r2, #2
 8003fe6:	58d3      	ldr	r3, [r2, r3]
 8003fe8:	221f      	movs	r2, #31
 8003fea:	4013      	ands	r3, r2
 8003fec:	000a      	movs	r2, r1
 8003fee:	40da      	lsrs	r2, r3
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_ClockConfig+0x208>)
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x20c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fd fd57 	bl	8001aac <HAL_InitTick>
 8003ffe:	0003      	movs	r3, r0
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40022000 	.word	0x40022000
 800400c:	00001388 	.word	0x00001388
 8004010:	40021000 	.word	0x40021000
 8004014:	fffff0ff 	.word	0xfffff0ff
 8004018:	ffff8fff 	.word	0xffff8fff
 800401c:	08004f70 	.word	0x08004f70
 8004020:	20000008 	.word	0x20000008
 8004024:	2000000c 	.word	0x2000000c

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2238      	movs	r2, #56	; 0x38
 8004034:	4013      	ands	r3, r2
 8004036:	d10f      	bne.n	8004058 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0adb      	lsrs	r3, r3, #11
 800403e:	2207      	movs	r2, #7
 8004040:	4013      	ands	r3, r2
 8004042:	2201      	movs	r2, #1
 8004044:	409a      	lsls	r2, r3
 8004046:	0013      	movs	r3, r2
 8004048:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	4835      	ldr	r0, [pc, #212]	; (8004124 <HAL_RCC_GetSysClockFreq+0xfc>)
 800404e:	f7fc f863 	bl	8000118 <__udivsi3>
 8004052:	0003      	movs	r3, r0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e05d      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2238      	movs	r2, #56	; 0x38
 800405e:	4013      	ands	r3, r2
 8004060:	2b08      	cmp	r3, #8
 8004062:	d102      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004064:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_RCC_GetSysClockFreq+0x100>)
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	e054      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2238      	movs	r2, #56	; 0x38
 8004070:	4013      	ands	r3, r2
 8004072:	2b10      	cmp	r3, #16
 8004074:	d138      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2203      	movs	r2, #3
 800407c:	4013      	ands	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	2207      	movs	r2, #7
 8004088:	4013      	ands	r3, r2
 800408a:	3301      	adds	r3, #1
 800408c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d10d      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4824      	ldr	r0, [pc, #144]	; (8004128 <HAL_RCC_GetSysClockFreq+0x100>)
 8004098:	f7fc f83e 	bl	8000118 <__udivsi3>
 800409c:	0003      	movs	r3, r0
 800409e:	0019      	movs	r1, r3
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	227f      	movs	r2, #127	; 0x7f
 80040a8:	4013      	ands	r3, r2
 80040aa:	434b      	muls	r3, r1
 80040ac:	617b      	str	r3, [r7, #20]
        break;
 80040ae:	e00d      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	481c      	ldr	r0, [pc, #112]	; (8004124 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040b4:	f7fc f830 	bl	8000118 <__udivsi3>
 80040b8:	0003      	movs	r3, r0
 80040ba:	0019      	movs	r1, r3
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	227f      	movs	r2, #127	; 0x7f
 80040c4:	4013      	ands	r3, r2
 80040c6:	434b      	muls	r3, r1
 80040c8:	617b      	str	r3, [r7, #20]
        break;
 80040ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0f5b      	lsrs	r3, r3, #29
 80040d2:	2207      	movs	r2, #7
 80040d4:	4013      	ands	r3, r2
 80040d6:	3301      	adds	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	6978      	ldr	r0, [r7, #20]
 80040de:	f7fc f81b 	bl	8000118 <__udivsi3>
 80040e2:	0003      	movs	r3, r0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e015      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2238      	movs	r2, #56	; 0x38
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d103      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e00b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2238      	movs	r2, #56	; 0x38
 8004102:	4013      	ands	r3, r2
 8004104:	2b18      	cmp	r3, #24
 8004106:	d103      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004108:	23fa      	movs	r3, #250	; 0xfa
 800410a:	01db      	lsls	r3, r3, #7
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e001      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004114:	693b      	ldr	r3, [r7, #16]
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b006      	add	sp, #24
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	40021000 	.word	0x40021000
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200

0800412c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004134:	2313      	movs	r3, #19
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800413c:	2312      	movs	r3, #18
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	029b      	lsls	r3, r3, #10
 800414c:	4013      	ands	r3, r2
 800414e:	d100      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004150:	e0ad      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004152:	2011      	movs	r0, #17
 8004154:	183b      	adds	r3, r7, r0
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800415c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	055b      	lsls	r3, r3, #21
 8004162:	4013      	ands	r3, r2
 8004164:	d110      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	0549      	lsls	r1, r1, #21
 8004170:	430a      	orrs	r2, r1
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	055b      	lsls	r3, r3, #21
 800417c:	4013      	ands	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	183b      	adds	r3, r7, r0
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004188:	4b3c      	ldr	r3, [pc, #240]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b3b      	ldr	r3, [pc, #236]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	0049      	lsls	r1, r1, #1
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004196:	f7fd fce5 	bl	8001b64 <HAL_GetTick>
 800419a:	0003      	movs	r3, r0
 800419c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a0:	f7fd fce0 	bl	8001b64 <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d904      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80041ae:	2313      	movs	r3, #19
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	2203      	movs	r2, #3
 80041b4:	701a      	strb	r2, [r3, #0]
        break;
 80041b6:	e005      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b8:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	d0ed      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80041c4:	2313      	movs	r3, #19
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d15e      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041d2:	23c0      	movs	r3, #192	; 0xc0
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4013      	ands	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d019      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d014      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	4a24      	ldr	r2, [pc, #144]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041f4:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	0249      	lsls	r1, r1, #9
 80041fe:	430a      	orrs	r2, r1
 8004200:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004204:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004208:	491e      	ldr	r1, [pc, #120]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800420a:	400a      	ands	r2, r1
 800420c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2201      	movs	r2, #1
 8004218:	4013      	ands	r3, r2
 800421a:	d016      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd fca2 	bl	8001b64 <HAL_GetTick>
 8004220:	0003      	movs	r3, r0
 8004222:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004224:	e00c      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fd fc9d 	bl	8001b64 <HAL_GetTick>
 800422a:	0002      	movs	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	4a15      	ldr	r2, [pc, #84]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d904      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004236:	2313      	movs	r3, #19
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2203      	movs	r2, #3
 800423c:	701a      	strb	r2, [r3, #0]
            break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2202      	movs	r2, #2
 8004246:	4013      	ands	r3, r2
 8004248:	d0ed      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800424a:	2313      	movs	r3, #19
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800425a:	4013      	ands	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004264:	430a      	orrs	r2, r1
 8004266:	65da      	str	r2, [r3, #92]	; 0x5c
 8004268:	e016      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800426a:	2312      	movs	r3, #18
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2213      	movs	r2, #19
 8004270:	18ba      	adds	r2, r7, r2
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e00f      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004278:	40021000 	.word	0x40021000
 800427c:	40007000 	.word	0x40007000
 8004280:	fffffcff 	.word	0xfffffcff
 8004284:	fffeffff 	.word	0xfffeffff
 8004288:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	2312      	movs	r3, #18
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2213      	movs	r2, #19
 8004292:	18ba      	adds	r2, r7, r2
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004298:	2311      	movs	r3, #17
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4bb6      	ldr	r3, [pc, #728]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a6:	4bb5      	ldr	r3, [pc, #724]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042a8:	49b5      	ldr	r1, [pc, #724]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b8:	4bb0      	ldr	r3, [pc, #704]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	2203      	movs	r2, #3
 80042be:	4393      	bics	r3, r2
 80042c0:	0019      	movs	r1, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4bad      	ldr	r3, [pc, #692]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042c8:	430a      	orrs	r2, r1
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2202      	movs	r2, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d6:	4ba9      	ldr	r3, [pc, #676]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	220c      	movs	r2, #12
 80042dc:	4393      	bics	r3, r2
 80042de:	0019      	movs	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	4ba5      	ldr	r3, [pc, #660]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042e6:	430a      	orrs	r2, r1
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	4013      	ands	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f4:	4ba1      	ldr	r3, [pc, #644]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	2230      	movs	r2, #48	; 0x30
 80042fa:	4393      	bics	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	4b9e      	ldr	r3, [pc, #632]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004304:	430a      	orrs	r2, r1
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2210      	movs	r2, #16
 800430e:	4013      	ands	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004312:	4b9a      	ldr	r3, [pc, #616]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	4a9b      	ldr	r2, [pc, #620]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	4b96      	ldr	r3, [pc, #600]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004322:	430a      	orrs	r2, r1
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	015b      	lsls	r3, r3, #5
 800432e:	4013      	ands	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004332:	4b92      	ldr	r3, [pc, #584]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	4a94      	ldr	r2, [pc, #592]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004342:	430a      	orrs	r2, r1
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4013      	ands	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004352:	4b8a      	ldr	r3, [pc, #552]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	4a8d      	ldr	r2, [pc, #564]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004358:	4013      	ands	r3, r2
 800435a:	0019      	movs	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004360:	4b86      	ldr	r3, [pc, #536]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004362:	430a      	orrs	r2, r1
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4013      	ands	r3, r2
 8004370:	d009      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004372:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	4a86      	ldr	r2, [pc, #536]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004378:	4013      	ands	r3, r2
 800437a:	0019      	movs	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	4b7e      	ldr	r3, [pc, #504]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004382:	430a      	orrs	r2, r1
 8004384:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2220      	movs	r2, #32
 800438c:	4013      	ands	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004390:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	4a7f      	ldr	r2, [pc, #508]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	4b77      	ldr	r3, [pc, #476]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2240      	movs	r2, #64	; 0x40
 80043aa:	4013      	ands	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ae:	4b73      	ldr	r3, [pc, #460]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	4a79      	ldr	r2, [pc, #484]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69da      	ldr	r2, [r3, #28]
 80043bc:	4b6f      	ldr	r3, [pc, #444]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043be:	430a      	orrs	r2, r1
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	01db      	lsls	r3, r3, #7
 80043ca:	4013      	ands	r3, r2
 80043cc:	d015      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ce:	4b6b      	ldr	r3, [pc, #428]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	0899      	lsrs	r1, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043da:	4b68      	ldr	r3, [pc, #416]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	05db      	lsls	r3, r3, #23
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d106      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043ec:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	4b62      	ldr	r3, [pc, #392]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043f2:	2180      	movs	r1, #128	; 0x80
 80043f4:	0249      	lsls	r1, r1, #9
 80043f6:	430a      	orrs	r2, r1
 80043f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	031b      	lsls	r3, r3, #12
 8004402:	4013      	ands	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004406:	4b5d      	ldr	r3, [pc, #372]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	4393      	bics	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004416:	430a      	orrs	r2, r1
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	039b      	lsls	r3, r3, #14
 8004422:	4013      	ands	r3, r2
 8004424:	d016      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004426:	4b55      	ldr	r3, [pc, #340]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	4a5c      	ldr	r2, [pc, #368]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800442c:	4013      	ands	r3, r2
 800442e:	0019      	movs	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004434:	4b51      	ldr	r3, [pc, #324]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004436:	430a      	orrs	r2, r1
 8004438:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	03db      	lsls	r3, r3, #15
 8004442:	429a      	cmp	r2, r3
 8004444:	d106      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004446:	4b4d      	ldr	r3, [pc, #308]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	4b4c      	ldr	r3, [pc, #304]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0449      	lsls	r1, r1, #17
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	03db      	lsls	r3, r3, #15
 800445c:	4013      	ands	r3, r2
 800445e:	d016      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004460:	4b46      	ldr	r3, [pc, #280]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	4a4e      	ldr	r2, [pc, #312]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446e:	4b43      	ldr	r3, [pc, #268]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004470:	430a      	orrs	r2, r1
 8004472:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	045b      	lsls	r3, r3, #17
 800447c:	429a      	cmp	r2, r3
 800447e:	d106      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004480:	4b3e      	ldr	r3, [pc, #248]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4b3d      	ldr	r3, [pc, #244]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	0449      	lsls	r1, r1, #17
 800448a:	430a      	orrs	r2, r1
 800448c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	4013      	ands	r3, r2
 8004498:	d014      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800449a:	4b38      	ldr	r3, [pc, #224]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	2203      	movs	r2, #3
 80044a0:	4393      	bics	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1a      	ldr	r2, [r3, #32]
 80044a8:	4b34      	ldr	r3, [pc, #208]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044aa:	430a      	orrs	r2, r1
 80044ac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d106      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	4b30      	ldr	r3, [pc, #192]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0249      	lsls	r1, r1, #9
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	019b      	lsls	r3, r3, #6
 80044cc:	4013      	ands	r3, r2
 80044ce:	d014      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80044d0:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	220c      	movs	r2, #12
 80044d6:	4393      	bics	r3, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e0:	430a      	orrs	r2, r1
 80044e2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d106      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044ec:	4b23      	ldr	r3, [pc, #140]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	0249      	lsls	r1, r1, #9
 80044f6:	430a      	orrs	r2, r1
 80044f8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	045b      	lsls	r3, r3, #17
 8004502:	4013      	ands	r3, r2
 8004504:	d016      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800450c:	4013      	ands	r3, r2
 800450e:	0019      	movs	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004516:	430a      	orrs	r2, r1
 8004518:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	429a      	cmp	r2, r3
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	0449      	lsls	r1, r1, #17
 8004530:	430a      	orrs	r2, r1
 8004532:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	049b      	lsls	r3, r3, #18
 800453c:	4013      	ands	r3, r2
 800453e:	d016      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	4a10      	ldr	r2, [pc, #64]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004546:	4013      	ands	r3, r2
 8004548:	0019      	movs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004550:	430a      	orrs	r2, r1
 8004552:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	429a      	cmp	r2, r3
 800455e:	d106      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	0449      	lsls	r1, r1, #17
 800456a:	430a      	orrs	r2, r1
 800456c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800456e:	2312      	movs	r3, #18
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	781b      	ldrb	r3, [r3, #0]
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b006      	add	sp, #24
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	efffffff 	.word	0xefffffff
 8004584:	fffff3ff 	.word	0xfffff3ff
 8004588:	fffffcff 	.word	0xfffffcff
 800458c:	fff3ffff 	.word	0xfff3ffff
 8004590:	ffcfffff 	.word	0xffcfffff
 8004594:	ffffcfff 	.word	0xffffcfff
 8004598:	ffff3fff 	.word	0xffff3fff
 800459c:	ffbfffff 	.word	0xffbfffff
 80045a0:	feffffff 	.word	0xfeffffff

080045a4 <__errno>:
 80045a4:	4b01      	ldr	r3, [pc, #4]	; (80045ac <__errno+0x8>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	4770      	bx	lr
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	20000014 	.word	0x20000014

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	2600      	movs	r6, #0
 80045b4:	4d0c      	ldr	r5, [pc, #48]	; (80045e8 <__libc_init_array+0x38>)
 80045b6:	4c0d      	ldr	r4, [pc, #52]	; (80045ec <__libc_init_array+0x3c>)
 80045b8:	1b64      	subs	r4, r4, r5
 80045ba:	10a4      	asrs	r4, r4, #2
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	2600      	movs	r6, #0
 80045c2:	f000 fc9f 	bl	8004f04 <_init>
 80045c6:	4d0a      	ldr	r5, [pc, #40]	; (80045f0 <__libc_init_array+0x40>)
 80045c8:	4c0a      	ldr	r4, [pc, #40]	; (80045f4 <__libc_init_array+0x44>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	00b3      	lsls	r3, r6, #2
 80045d6:	58eb      	ldr	r3, [r5, r3]
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	00b3      	lsls	r3, r6, #2
 80045e0:	58eb      	ldr	r3, [r5, r3]
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08004fe4 	.word	0x08004fe4
 80045ec:	08004fe4 	.word	0x08004fe4
 80045f0:	08004fe4 	.word	0x08004fe4
 80045f4:	08004fe8 	.word	0x08004fe8

080045f8 <memset>:
 80045f8:	0003      	movs	r3, r0
 80045fa:	1882      	adds	r2, r0, r2
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	7019      	strb	r1, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <sniprintf>:
 8004608:	b40c      	push	{r2, r3}
 800460a:	b530      	push	{r4, r5, lr}
 800460c:	4b17      	ldr	r3, [pc, #92]	; (800466c <sniprintf+0x64>)
 800460e:	000c      	movs	r4, r1
 8004610:	681d      	ldr	r5, [r3, #0]
 8004612:	b09d      	sub	sp, #116	; 0x74
 8004614:	2900      	cmp	r1, #0
 8004616:	da08      	bge.n	800462a <sniprintf+0x22>
 8004618:	238b      	movs	r3, #139	; 0x8b
 800461a:	2001      	movs	r0, #1
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	4240      	negs	r0, r0
 8004620:	b01d      	add	sp, #116	; 0x74
 8004622:	bc30      	pop	{r4, r5}
 8004624:	bc08      	pop	{r3}
 8004626:	b002      	add	sp, #8
 8004628:	4718      	bx	r3
 800462a:	2382      	movs	r3, #130	; 0x82
 800462c:	466a      	mov	r2, sp
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	8293      	strh	r3, [r2, #20]
 8004632:	2300      	movs	r3, #0
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	4299      	cmp	r1, r3
 800463a:	d000      	beq.n	800463e <sniprintf+0x36>
 800463c:	1e4b      	subs	r3, r1, #1
 800463e:	9304      	str	r3, [sp, #16]
 8004640:	9307      	str	r3, [sp, #28]
 8004642:	2301      	movs	r3, #1
 8004644:	466a      	mov	r2, sp
 8004646:	425b      	negs	r3, r3
 8004648:	82d3      	strh	r3, [r2, #22]
 800464a:	0028      	movs	r0, r5
 800464c:	ab21      	add	r3, sp, #132	; 0x84
 800464e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004650:	a902      	add	r1, sp, #8
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	f000 f86e 	bl	8004734 <_svfiprintf_r>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	da01      	bge.n	8004660 <sniprintf+0x58>
 800465c:	238b      	movs	r3, #139	; 0x8b
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	2c00      	cmp	r4, #0
 8004662:	d0dd      	beq.n	8004620 <sniprintf+0x18>
 8004664:	2300      	movs	r3, #0
 8004666:	9a02      	ldr	r2, [sp, #8]
 8004668:	7013      	strb	r3, [r2, #0]
 800466a:	e7d9      	b.n	8004620 <sniprintf+0x18>
 800466c:	20000014 	.word	0x20000014

08004670 <__ssputs_r>:
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	688e      	ldr	r6, [r1, #8]
 8004674:	b085      	sub	sp, #20
 8004676:	0007      	movs	r7, r0
 8004678:	000c      	movs	r4, r1
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	429e      	cmp	r6, r3
 8004680:	d83c      	bhi.n	80046fc <__ssputs_r+0x8c>
 8004682:	2390      	movs	r3, #144	; 0x90
 8004684:	898a      	ldrh	r2, [r1, #12]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	421a      	tst	r2, r3
 800468a:	d034      	beq.n	80046f6 <__ssputs_r+0x86>
 800468c:	6909      	ldr	r1, [r1, #16]
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6960      	ldr	r0, [r4, #20]
 8004692:	1a5b      	subs	r3, r3, r1
 8004694:	9302      	str	r3, [sp, #8]
 8004696:	2303      	movs	r3, #3
 8004698:	4343      	muls	r3, r0
 800469a:	0fdd      	lsrs	r5, r3, #31
 800469c:	18ed      	adds	r5, r5, r3
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	9802      	ldr	r0, [sp, #8]
 80046a2:	3301      	adds	r3, #1
 80046a4:	181b      	adds	r3, r3, r0
 80046a6:	106d      	asrs	r5, r5, #1
 80046a8:	42ab      	cmp	r3, r5
 80046aa:	d900      	bls.n	80046ae <__ssputs_r+0x3e>
 80046ac:	001d      	movs	r5, r3
 80046ae:	0553      	lsls	r3, r2, #21
 80046b0:	d532      	bpl.n	8004718 <__ssputs_r+0xa8>
 80046b2:	0029      	movs	r1, r5
 80046b4:	0038      	movs	r0, r7
 80046b6:	f000 fb53 	bl	8004d60 <_malloc_r>
 80046ba:	1e06      	subs	r6, r0, #0
 80046bc:	d109      	bne.n	80046d2 <__ssputs_r+0x62>
 80046be:	230c      	movs	r3, #12
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	2001      	movs	r0, #1
 80046c6:	89a2      	ldrh	r2, [r4, #12]
 80046c8:	4240      	negs	r0, r0
 80046ca:	4313      	orrs	r3, r2
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	b005      	add	sp, #20
 80046d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d2:	9a02      	ldr	r2, [sp, #8]
 80046d4:	6921      	ldr	r1, [r4, #16]
 80046d6:	f000 faba 	bl	8004c4e <memcpy>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <__ssputs_r+0xc0>)
 80046de:	401a      	ands	r2, r3
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	4313      	orrs	r3, r2
 80046e4:	81a3      	strh	r3, [r4, #12]
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	6126      	str	r6, [r4, #16]
 80046ea:	18f6      	adds	r6, r6, r3
 80046ec:	6026      	str	r6, [r4, #0]
 80046ee:	6165      	str	r5, [r4, #20]
 80046f0:	9e01      	ldr	r6, [sp, #4]
 80046f2:	1aed      	subs	r5, r5, r3
 80046f4:	60a5      	str	r5, [r4, #8]
 80046f6:	9b01      	ldr	r3, [sp, #4]
 80046f8:	429e      	cmp	r6, r3
 80046fa:	d900      	bls.n	80046fe <__ssputs_r+0x8e>
 80046fc:	9e01      	ldr	r6, [sp, #4]
 80046fe:	0032      	movs	r2, r6
 8004700:	9903      	ldr	r1, [sp, #12]
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	f000 faac 	bl	8004c60 <memmove>
 8004708:	68a3      	ldr	r3, [r4, #8]
 800470a:	2000      	movs	r0, #0
 800470c:	1b9b      	subs	r3, r3, r6
 800470e:	60a3      	str	r3, [r4, #8]
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	199e      	adds	r6, r3, r6
 8004714:	6026      	str	r6, [r4, #0]
 8004716:	e7da      	b.n	80046ce <__ssputs_r+0x5e>
 8004718:	002a      	movs	r2, r5
 800471a:	0038      	movs	r0, r7
 800471c:	f000 fb96 	bl	8004e4c <_realloc_r>
 8004720:	1e06      	subs	r6, r0, #0
 8004722:	d1e0      	bne.n	80046e6 <__ssputs_r+0x76>
 8004724:	0038      	movs	r0, r7
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	f000 faae 	bl	8004c88 <_free_r>
 800472c:	e7c7      	b.n	80046be <__ssputs_r+0x4e>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	fffffb7f 	.word	0xfffffb7f

08004734 <_svfiprintf_r>:
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	b0a1      	sub	sp, #132	; 0x84
 8004738:	9003      	str	r0, [sp, #12]
 800473a:	001d      	movs	r5, r3
 800473c:	898b      	ldrh	r3, [r1, #12]
 800473e:	000f      	movs	r7, r1
 8004740:	0016      	movs	r6, r2
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	d511      	bpl.n	800476a <_svfiprintf_r+0x36>
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10e      	bne.n	800476a <_svfiprintf_r+0x36>
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	f000 fb07 	bl	8004d60 <_malloc_r>
 8004752:	6038      	str	r0, [r7, #0]
 8004754:	6138      	str	r0, [r7, #16]
 8004756:	2800      	cmp	r0, #0
 8004758:	d105      	bne.n	8004766 <_svfiprintf_r+0x32>
 800475a:	230c      	movs	r3, #12
 800475c:	9a03      	ldr	r2, [sp, #12]
 800475e:	3801      	subs	r0, #1
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	b021      	add	sp, #132	; 0x84
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	ac08      	add	r4, sp, #32
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	3320      	adds	r3, #32
 8004772:	7663      	strb	r3, [r4, #25]
 8004774:	3310      	adds	r3, #16
 8004776:	76a3      	strb	r3, [r4, #26]
 8004778:	9507      	str	r5, [sp, #28]
 800477a:	0035      	movs	r5, r6
 800477c:	782b      	ldrb	r3, [r5, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <_svfiprintf_r+0x52>
 8004782:	2b25      	cmp	r3, #37	; 0x25
 8004784:	d147      	bne.n	8004816 <_svfiprintf_r+0xe2>
 8004786:	1bab      	subs	r3, r5, r6
 8004788:	9305      	str	r3, [sp, #20]
 800478a:	42b5      	cmp	r5, r6
 800478c:	d00c      	beq.n	80047a8 <_svfiprintf_r+0x74>
 800478e:	0032      	movs	r2, r6
 8004790:	0039      	movs	r1, r7
 8004792:	9803      	ldr	r0, [sp, #12]
 8004794:	f7ff ff6c 	bl	8004670 <__ssputs_r>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d100      	bne.n	800479e <_svfiprintf_r+0x6a>
 800479c:	e0ae      	b.n	80048fc <_svfiprintf_r+0x1c8>
 800479e:	6962      	ldr	r2, [r4, #20]
 80047a0:	9b05      	ldr	r3, [sp, #20]
 80047a2:	4694      	mov	ip, r2
 80047a4:	4463      	add	r3, ip
 80047a6:	6163      	str	r3, [r4, #20]
 80047a8:	782b      	ldrb	r3, [r5, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d100      	bne.n	80047b0 <_svfiprintf_r+0x7c>
 80047ae:	e0a5      	b.n	80048fc <_svfiprintf_r+0x1c8>
 80047b0:	2201      	movs	r2, #1
 80047b2:	2300      	movs	r3, #0
 80047b4:	4252      	negs	r2, r2
 80047b6:	6062      	str	r2, [r4, #4]
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	3254      	adds	r2, #84	; 0x54
 80047bc:	1852      	adds	r2, r2, r1
 80047be:	1c6e      	adds	r6, r5, #1
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	60e3      	str	r3, [r4, #12]
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	7013      	strb	r3, [r2, #0]
 80047c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80047ca:	2205      	movs	r2, #5
 80047cc:	7831      	ldrb	r1, [r6, #0]
 80047ce:	4854      	ldr	r0, [pc, #336]	; (8004920 <_svfiprintf_r+0x1ec>)
 80047d0:	f000 fa32 	bl	8004c38 <memchr>
 80047d4:	1c75      	adds	r5, r6, #1
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d11f      	bne.n	800481a <_svfiprintf_r+0xe6>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	06d3      	lsls	r3, r2, #27
 80047de:	d504      	bpl.n	80047ea <_svfiprintf_r+0xb6>
 80047e0:	2353      	movs	r3, #83	; 0x53
 80047e2:	a904      	add	r1, sp, #16
 80047e4:	185b      	adds	r3, r3, r1
 80047e6:	2120      	movs	r1, #32
 80047e8:	7019      	strb	r1, [r3, #0]
 80047ea:	0713      	lsls	r3, r2, #28
 80047ec:	d504      	bpl.n	80047f8 <_svfiprintf_r+0xc4>
 80047ee:	2353      	movs	r3, #83	; 0x53
 80047f0:	a904      	add	r1, sp, #16
 80047f2:	185b      	adds	r3, r3, r1
 80047f4:	212b      	movs	r1, #43	; 0x2b
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	7833      	ldrb	r3, [r6, #0]
 80047fa:	2b2a      	cmp	r3, #42	; 0x2a
 80047fc:	d016      	beq.n	800482c <_svfiprintf_r+0xf8>
 80047fe:	0035      	movs	r5, r6
 8004800:	2100      	movs	r1, #0
 8004802:	200a      	movs	r0, #10
 8004804:	68e3      	ldr	r3, [r4, #12]
 8004806:	782a      	ldrb	r2, [r5, #0]
 8004808:	1c6e      	adds	r6, r5, #1
 800480a:	3a30      	subs	r2, #48	; 0x30
 800480c:	2a09      	cmp	r2, #9
 800480e:	d94e      	bls.n	80048ae <_svfiprintf_r+0x17a>
 8004810:	2900      	cmp	r1, #0
 8004812:	d111      	bne.n	8004838 <_svfiprintf_r+0x104>
 8004814:	e017      	b.n	8004846 <_svfiprintf_r+0x112>
 8004816:	3501      	adds	r5, #1
 8004818:	e7b0      	b.n	800477c <_svfiprintf_r+0x48>
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <_svfiprintf_r+0x1ec>)
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	1ac0      	subs	r0, r0, r3
 8004820:	2301      	movs	r3, #1
 8004822:	4083      	lsls	r3, r0
 8004824:	4313      	orrs	r3, r2
 8004826:	002e      	movs	r6, r5
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	e7ce      	b.n	80047ca <_svfiprintf_r+0x96>
 800482c:	9b07      	ldr	r3, [sp, #28]
 800482e:	1d19      	adds	r1, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9107      	str	r1, [sp, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db01      	blt.n	800483c <_svfiprintf_r+0x108>
 8004838:	930b      	str	r3, [sp, #44]	; 0x2c
 800483a:	e004      	b.n	8004846 <_svfiprintf_r+0x112>
 800483c:	425b      	negs	r3, r3
 800483e:	60e3      	str	r3, [r4, #12]
 8004840:	2302      	movs	r3, #2
 8004842:	4313      	orrs	r3, r2
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	782b      	ldrb	r3, [r5, #0]
 8004848:	2b2e      	cmp	r3, #46	; 0x2e
 800484a:	d10a      	bne.n	8004862 <_svfiprintf_r+0x12e>
 800484c:	786b      	ldrb	r3, [r5, #1]
 800484e:	2b2a      	cmp	r3, #42	; 0x2a
 8004850:	d135      	bne.n	80048be <_svfiprintf_r+0x18a>
 8004852:	9b07      	ldr	r3, [sp, #28]
 8004854:	3502      	adds	r5, #2
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	9207      	str	r2, [sp, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db2b      	blt.n	80048b8 <_svfiprintf_r+0x184>
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	4e30      	ldr	r6, [pc, #192]	; (8004924 <_svfiprintf_r+0x1f0>)
 8004864:	2203      	movs	r2, #3
 8004866:	0030      	movs	r0, r6
 8004868:	7829      	ldrb	r1, [r5, #0]
 800486a:	f000 f9e5 	bl	8004c38 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d006      	beq.n	8004880 <_svfiprintf_r+0x14c>
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	1b80      	subs	r0, r0, r6
 8004876:	4083      	lsls	r3, r0
 8004878:	6822      	ldr	r2, [r4, #0]
 800487a:	3501      	adds	r5, #1
 800487c:	4313      	orrs	r3, r2
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	7829      	ldrb	r1, [r5, #0]
 8004882:	2206      	movs	r2, #6
 8004884:	4828      	ldr	r0, [pc, #160]	; (8004928 <_svfiprintf_r+0x1f4>)
 8004886:	1c6e      	adds	r6, r5, #1
 8004888:	7621      	strb	r1, [r4, #24]
 800488a:	f000 f9d5 	bl	8004c38 <memchr>
 800488e:	2800      	cmp	r0, #0
 8004890:	d03c      	beq.n	800490c <_svfiprintf_r+0x1d8>
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <_svfiprintf_r+0x1f8>)
 8004894:	2b00      	cmp	r3, #0
 8004896:	d125      	bne.n	80048e4 <_svfiprintf_r+0x1b0>
 8004898:	2207      	movs	r2, #7
 800489a:	9b07      	ldr	r3, [sp, #28]
 800489c:	3307      	adds	r3, #7
 800489e:	4393      	bics	r3, r2
 80048a0:	3308      	adds	r3, #8
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	6963      	ldr	r3, [r4, #20]
 80048a6:	9a04      	ldr	r2, [sp, #16]
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	6163      	str	r3, [r4, #20]
 80048ac:	e765      	b.n	800477a <_svfiprintf_r+0x46>
 80048ae:	4343      	muls	r3, r0
 80048b0:	0035      	movs	r5, r6
 80048b2:	2101      	movs	r1, #1
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	e7a6      	b.n	8004806 <_svfiprintf_r+0xd2>
 80048b8:	2301      	movs	r3, #1
 80048ba:	425b      	negs	r3, r3
 80048bc:	e7d0      	b.n	8004860 <_svfiprintf_r+0x12c>
 80048be:	2300      	movs	r3, #0
 80048c0:	200a      	movs	r0, #10
 80048c2:	001a      	movs	r2, r3
 80048c4:	3501      	adds	r5, #1
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	7829      	ldrb	r1, [r5, #0]
 80048ca:	1c6e      	adds	r6, r5, #1
 80048cc:	3930      	subs	r1, #48	; 0x30
 80048ce:	2909      	cmp	r1, #9
 80048d0:	d903      	bls.n	80048da <_svfiprintf_r+0x1a6>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0c5      	beq.n	8004862 <_svfiprintf_r+0x12e>
 80048d6:	9209      	str	r2, [sp, #36]	; 0x24
 80048d8:	e7c3      	b.n	8004862 <_svfiprintf_r+0x12e>
 80048da:	4342      	muls	r2, r0
 80048dc:	0035      	movs	r5, r6
 80048de:	2301      	movs	r3, #1
 80048e0:	1852      	adds	r2, r2, r1
 80048e2:	e7f1      	b.n	80048c8 <_svfiprintf_r+0x194>
 80048e4:	ab07      	add	r3, sp, #28
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	003a      	movs	r2, r7
 80048ea:	0021      	movs	r1, r4
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_svfiprintf_r+0x1fc>)
 80048ee:	9803      	ldr	r0, [sp, #12]
 80048f0:	e000      	b.n	80048f4 <_svfiprintf_r+0x1c0>
 80048f2:	bf00      	nop
 80048f4:	9004      	str	r0, [sp, #16]
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	3301      	adds	r3, #1
 80048fa:	d1d3      	bne.n	80048a4 <_svfiprintf_r+0x170>
 80048fc:	89bb      	ldrh	r3, [r7, #12]
 80048fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004900:	065b      	lsls	r3, r3, #25
 8004902:	d400      	bmi.n	8004906 <_svfiprintf_r+0x1d2>
 8004904:	e72d      	b.n	8004762 <_svfiprintf_r+0x2e>
 8004906:	2001      	movs	r0, #1
 8004908:	4240      	negs	r0, r0
 800490a:	e72a      	b.n	8004762 <_svfiprintf_r+0x2e>
 800490c:	ab07      	add	r3, sp, #28
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	003a      	movs	r2, r7
 8004912:	0021      	movs	r1, r4
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <_svfiprintf_r+0x1fc>)
 8004916:	9803      	ldr	r0, [sp, #12]
 8004918:	f000 f87c 	bl	8004a14 <_printf_i>
 800491c:	e7ea      	b.n	80048f4 <_svfiprintf_r+0x1c0>
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	08004fb0 	.word	0x08004fb0
 8004924:	08004fb6 	.word	0x08004fb6
 8004928:	08004fba 	.word	0x08004fba
 800492c:	00000000 	.word	0x00000000
 8004930:	08004671 	.word	0x08004671

08004934 <_printf_common>:
 8004934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004936:	0015      	movs	r5, r2
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	688a      	ldr	r2, [r1, #8]
 800493c:	690b      	ldr	r3, [r1, #16]
 800493e:	000c      	movs	r4, r1
 8004940:	9000      	str	r0, [sp, #0]
 8004942:	4293      	cmp	r3, r2
 8004944:	da00      	bge.n	8004948 <_printf_common+0x14>
 8004946:	0013      	movs	r3, r2
 8004948:	0022      	movs	r2, r4
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	3243      	adds	r2, #67	; 0x43
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	2a00      	cmp	r2, #0
 8004952:	d001      	beq.n	8004958 <_printf_common+0x24>
 8004954:	3301      	adds	r3, #1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	069b      	lsls	r3, r3, #26
 800495c:	d502      	bpl.n	8004964 <_printf_common+0x30>
 800495e:	682b      	ldr	r3, [r5, #0]
 8004960:	3302      	adds	r3, #2
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	2306      	movs	r3, #6
 8004968:	0017      	movs	r7, r2
 800496a:	401f      	ands	r7, r3
 800496c:	421a      	tst	r2, r3
 800496e:	d027      	beq.n	80049c0 <_printf_common+0x8c>
 8004970:	0023      	movs	r3, r4
 8004972:	3343      	adds	r3, #67	; 0x43
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	4193      	sbcs	r3, r2
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d430      	bmi.n	80049e2 <_printf_common+0xae>
 8004980:	0022      	movs	r2, r4
 8004982:	9901      	ldr	r1, [sp, #4]
 8004984:	9800      	ldr	r0, [sp, #0]
 8004986:	9e08      	ldr	r6, [sp, #32]
 8004988:	3243      	adds	r2, #67	; 0x43
 800498a:	47b0      	blx	r6
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d025      	beq.n	80049dc <_printf_common+0xa8>
 8004990:	2306      	movs	r3, #6
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	682a      	ldr	r2, [r5, #0]
 8004996:	68e1      	ldr	r1, [r4, #12]
 8004998:	2500      	movs	r5, #0
 800499a:	4003      	ands	r3, r0
 800499c:	2b04      	cmp	r3, #4
 800499e:	d103      	bne.n	80049a8 <_printf_common+0x74>
 80049a0:	1a8d      	subs	r5, r1, r2
 80049a2:	43eb      	mvns	r3, r5
 80049a4:	17db      	asrs	r3, r3, #31
 80049a6:	401d      	ands	r5, r3
 80049a8:	68a3      	ldr	r3, [r4, #8]
 80049aa:	6922      	ldr	r2, [r4, #16]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	dd01      	ble.n	80049b4 <_printf_common+0x80>
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	18ed      	adds	r5, r5, r3
 80049b4:	2700      	movs	r7, #0
 80049b6:	42bd      	cmp	r5, r7
 80049b8:	d120      	bne.n	80049fc <_printf_common+0xc8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e010      	b.n	80049e0 <_printf_common+0xac>
 80049be:	3701      	adds	r7, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	682a      	ldr	r2, [r5, #0]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	42bb      	cmp	r3, r7
 80049c8:	ddd2      	ble.n	8004970 <_printf_common+0x3c>
 80049ca:	0022      	movs	r2, r4
 80049cc:	2301      	movs	r3, #1
 80049ce:	9901      	ldr	r1, [sp, #4]
 80049d0:	9800      	ldr	r0, [sp, #0]
 80049d2:	9e08      	ldr	r6, [sp, #32]
 80049d4:	3219      	adds	r2, #25
 80049d6:	47b0      	blx	r6
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d1f0      	bne.n	80049be <_printf_common+0x8a>
 80049dc:	2001      	movs	r0, #1
 80049de:	4240      	negs	r0, r0
 80049e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e2:	2030      	movs	r0, #48	; 0x30
 80049e4:	18e1      	adds	r1, r4, r3
 80049e6:	3143      	adds	r1, #67	; 0x43
 80049e8:	7008      	strb	r0, [r1, #0]
 80049ea:	0021      	movs	r1, r4
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	3145      	adds	r1, #69	; 0x45
 80049f0:	7809      	ldrb	r1, [r1, #0]
 80049f2:	18a2      	adds	r2, r4, r2
 80049f4:	3243      	adds	r2, #67	; 0x43
 80049f6:	3302      	adds	r3, #2
 80049f8:	7011      	strb	r1, [r2, #0]
 80049fa:	e7c1      	b.n	8004980 <_printf_common+0x4c>
 80049fc:	0022      	movs	r2, r4
 80049fe:	2301      	movs	r3, #1
 8004a00:	9901      	ldr	r1, [sp, #4]
 8004a02:	9800      	ldr	r0, [sp, #0]
 8004a04:	9e08      	ldr	r6, [sp, #32]
 8004a06:	321a      	adds	r2, #26
 8004a08:	47b0      	blx	r6
 8004a0a:	1c43      	adds	r3, r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa8>
 8004a0e:	3701      	adds	r7, #1
 8004a10:	e7d1      	b.n	80049b6 <_printf_common+0x82>
	...

08004a14 <_printf_i>:
 8004a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a16:	b08b      	sub	sp, #44	; 0x2c
 8004a18:	9206      	str	r2, [sp, #24]
 8004a1a:	000a      	movs	r2, r1
 8004a1c:	3243      	adds	r2, #67	; 0x43
 8004a1e:	9307      	str	r3, [sp, #28]
 8004a20:	9005      	str	r0, [sp, #20]
 8004a22:	9204      	str	r2, [sp, #16]
 8004a24:	7e0a      	ldrb	r2, [r1, #24]
 8004a26:	000c      	movs	r4, r1
 8004a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a2a:	2a78      	cmp	r2, #120	; 0x78
 8004a2c:	d807      	bhi.n	8004a3e <_printf_i+0x2a>
 8004a2e:	2a62      	cmp	r2, #98	; 0x62
 8004a30:	d809      	bhi.n	8004a46 <_printf_i+0x32>
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	d100      	bne.n	8004a38 <_printf_i+0x24>
 8004a36:	e0c1      	b.n	8004bbc <_printf_i+0x1a8>
 8004a38:	2a58      	cmp	r2, #88	; 0x58
 8004a3a:	d100      	bne.n	8004a3e <_printf_i+0x2a>
 8004a3c:	e08c      	b.n	8004b58 <_printf_i+0x144>
 8004a3e:	0026      	movs	r6, r4
 8004a40:	3642      	adds	r6, #66	; 0x42
 8004a42:	7032      	strb	r2, [r6, #0]
 8004a44:	e022      	b.n	8004a8c <_printf_i+0x78>
 8004a46:	0010      	movs	r0, r2
 8004a48:	3863      	subs	r0, #99	; 0x63
 8004a4a:	2815      	cmp	r0, #21
 8004a4c:	d8f7      	bhi.n	8004a3e <_printf_i+0x2a>
 8004a4e:	f7fb fb59 	bl	8000104 <__gnu_thumb1_case_shi>
 8004a52:	0016      	.short	0x0016
 8004a54:	fff6001f 	.word	0xfff6001f
 8004a58:	fff6fff6 	.word	0xfff6fff6
 8004a5c:	001ffff6 	.word	0x001ffff6
 8004a60:	fff6fff6 	.word	0xfff6fff6
 8004a64:	fff6fff6 	.word	0xfff6fff6
 8004a68:	003600a8 	.word	0x003600a8
 8004a6c:	fff6009a 	.word	0xfff6009a
 8004a70:	00b9fff6 	.word	0x00b9fff6
 8004a74:	0036fff6 	.word	0x0036fff6
 8004a78:	fff6fff6 	.word	0xfff6fff6
 8004a7c:	009e      	.short	0x009e
 8004a7e:	0026      	movs	r6, r4
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	3642      	adds	r6, #66	; 0x42
 8004a84:	1d11      	adds	r1, r2, #4
 8004a86:	6019      	str	r1, [r3, #0]
 8004a88:	6813      	ldr	r3, [r2, #0]
 8004a8a:	7033      	strb	r3, [r6, #0]
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a7      	b.n	8004be0 <_printf_i+0x1cc>
 8004a90:	6808      	ldr	r0, [r1, #0]
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	1d0a      	adds	r2, r1, #4
 8004a96:	0605      	lsls	r5, r0, #24
 8004a98:	d50b      	bpl.n	8004ab2 <_printf_i+0x9e>
 8004a9a:	680d      	ldr	r5, [r1, #0]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	2d00      	cmp	r5, #0
 8004aa0:	da03      	bge.n	8004aaa <_printf_i+0x96>
 8004aa2:	232d      	movs	r3, #45	; 0x2d
 8004aa4:	9a04      	ldr	r2, [sp, #16]
 8004aa6:	426d      	negs	r5, r5
 8004aa8:	7013      	strb	r3, [r2, #0]
 8004aaa:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <_printf_i+0x21c>)
 8004aac:	270a      	movs	r7, #10
 8004aae:	9303      	str	r3, [sp, #12]
 8004ab0:	e01b      	b.n	8004aea <_printf_i+0xd6>
 8004ab2:	680d      	ldr	r5, [r1, #0]
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	0641      	lsls	r1, r0, #25
 8004ab8:	d5f1      	bpl.n	8004a9e <_printf_i+0x8a>
 8004aba:	b22d      	sxth	r5, r5
 8004abc:	e7ef      	b.n	8004a9e <_printf_i+0x8a>
 8004abe:	680d      	ldr	r5, [r1, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	1d08      	adds	r0, r1, #4
 8004ac4:	6018      	str	r0, [r3, #0]
 8004ac6:	062e      	lsls	r6, r5, #24
 8004ac8:	d501      	bpl.n	8004ace <_printf_i+0xba>
 8004aca:	680d      	ldr	r5, [r1, #0]
 8004acc:	e003      	b.n	8004ad6 <_printf_i+0xc2>
 8004ace:	066d      	lsls	r5, r5, #25
 8004ad0:	d5fb      	bpl.n	8004aca <_printf_i+0xb6>
 8004ad2:	680d      	ldr	r5, [r1, #0]
 8004ad4:	b2ad      	uxth	r5, r5
 8004ad6:	4b56      	ldr	r3, [pc, #344]	; (8004c30 <_printf_i+0x21c>)
 8004ad8:	2708      	movs	r7, #8
 8004ada:	9303      	str	r3, [sp, #12]
 8004adc:	2a6f      	cmp	r2, #111	; 0x6f
 8004ade:	d000      	beq.n	8004ae2 <_printf_i+0xce>
 8004ae0:	3702      	adds	r7, #2
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	3343      	adds	r3, #67	; 0x43
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db03      	blt.n	8004afa <_printf_i+0xe6>
 8004af2:	2204      	movs	r2, #4
 8004af4:	6821      	ldr	r1, [r4, #0]
 8004af6:	4391      	bics	r1, r2
 8004af8:	6021      	str	r1, [r4, #0]
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	d102      	bne.n	8004b04 <_printf_i+0xf0>
 8004afe:	9e04      	ldr	r6, [sp, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <_printf_i+0x10a>
 8004b04:	9e04      	ldr	r6, [sp, #16]
 8004b06:	0028      	movs	r0, r5
 8004b08:	0039      	movs	r1, r7
 8004b0a:	f7fb fb8b 	bl	8000224 <__aeabi_uidivmod>
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	3e01      	subs	r6, #1
 8004b12:	5c5b      	ldrb	r3, [r3, r1]
 8004b14:	7033      	strb	r3, [r6, #0]
 8004b16:	002b      	movs	r3, r5
 8004b18:	0005      	movs	r5, r0
 8004b1a:	429f      	cmp	r7, r3
 8004b1c:	d9f3      	bls.n	8004b06 <_printf_i+0xf2>
 8004b1e:	2f08      	cmp	r7, #8
 8004b20:	d109      	bne.n	8004b36 <_printf_i+0x122>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	07db      	lsls	r3, r3, #31
 8004b26:	d506      	bpl.n	8004b36 <_printf_i+0x122>
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	6922      	ldr	r2, [r4, #16]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	dc02      	bgt.n	8004b36 <_printf_i+0x122>
 8004b30:	2330      	movs	r3, #48	; 0x30
 8004b32:	3e01      	subs	r6, #1
 8004b34:	7033      	strb	r3, [r6, #0]
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	1b9b      	subs	r3, r3, r6
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	9b07      	ldr	r3, [sp, #28]
 8004b3e:	0021      	movs	r1, r4
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	9805      	ldr	r0, [sp, #20]
 8004b44:	9b06      	ldr	r3, [sp, #24]
 8004b46:	aa09      	add	r2, sp, #36	; 0x24
 8004b48:	f7ff fef4 	bl	8004934 <_printf_common>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d14c      	bne.n	8004bea <_printf_i+0x1d6>
 8004b50:	2001      	movs	r0, #1
 8004b52:	4240      	negs	r0, r0
 8004b54:	b00b      	add	sp, #44	; 0x2c
 8004b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b58:	3145      	adds	r1, #69	; 0x45
 8004b5a:	700a      	strb	r2, [r1, #0]
 8004b5c:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <_printf_i+0x21c>)
 8004b5e:	9203      	str	r2, [sp, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	ca20      	ldmia	r2!, {r5}
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	0608      	lsls	r0, r1, #24
 8004b6a:	d516      	bpl.n	8004b9a <_printf_i+0x186>
 8004b6c:	07cb      	lsls	r3, r1, #31
 8004b6e:	d502      	bpl.n	8004b76 <_printf_i+0x162>
 8004b70:	2320      	movs	r3, #32
 8004b72:	4319      	orrs	r1, r3
 8004b74:	6021      	str	r1, [r4, #0]
 8004b76:	2710      	movs	r7, #16
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	d1b2      	bne.n	8004ae2 <_printf_i+0xce>
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	439a      	bics	r2, r3
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	e7ad      	b.n	8004ae2 <_printf_i+0xce>
 8004b86:	2220      	movs	r2, #32
 8004b88:	6809      	ldr	r1, [r1, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	6022      	str	r2, [r4, #0]
 8004b8e:	0022      	movs	r2, r4
 8004b90:	2178      	movs	r1, #120	; 0x78
 8004b92:	3245      	adds	r2, #69	; 0x45
 8004b94:	7011      	strb	r1, [r2, #0]
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <_printf_i+0x220>)
 8004b98:	e7e1      	b.n	8004b5e <_printf_i+0x14a>
 8004b9a:	0648      	lsls	r0, r1, #25
 8004b9c:	d5e6      	bpl.n	8004b6c <_printf_i+0x158>
 8004b9e:	b2ad      	uxth	r5, r5
 8004ba0:	e7e4      	b.n	8004b6c <_printf_i+0x158>
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	680d      	ldr	r5, [r1, #0]
 8004ba6:	1d10      	adds	r0, r2, #4
 8004ba8:	6949      	ldr	r1, [r1, #20]
 8004baa:	6018      	str	r0, [r3, #0]
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	062e      	lsls	r6, r5, #24
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0x1a2>
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0x1a8>
 8004bb6:	066d      	lsls	r5, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0x19e>
 8004bba:	8019      	strh	r1, [r3, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9e04      	ldr	r6, [sp, #16]
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e7bb      	b.n	8004b3c <_printf_i+0x128>
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	1d11      	adds	r1, r2, #4
 8004bc8:	6019      	str	r1, [r3, #0]
 8004bca:	6816      	ldr	r6, [r2, #0]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	0030      	movs	r0, r6
 8004bd0:	6862      	ldr	r2, [r4, #4]
 8004bd2:	f000 f831 	bl	8004c38 <memchr>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d001      	beq.n	8004bde <_printf_i+0x1ca>
 8004bda:	1b80      	subs	r0, r0, r6
 8004bdc:	6060      	str	r0, [r4, #4]
 8004bde:	6863      	ldr	r3, [r4, #4]
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	7013      	strb	r3, [r2, #0]
 8004be8:	e7a8      	b.n	8004b3c <_printf_i+0x128>
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	0032      	movs	r2, r6
 8004bee:	9906      	ldr	r1, [sp, #24]
 8004bf0:	9805      	ldr	r0, [sp, #20]
 8004bf2:	9d07      	ldr	r5, [sp, #28]
 8004bf4:	47a8      	blx	r5
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d0aa      	beq.n	8004b50 <_printf_i+0x13c>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d415      	bmi.n	8004c2c <_printf_i+0x218>
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	68e0      	ldr	r0, [r4, #12]
 8004c04:	4298      	cmp	r0, r3
 8004c06:	daa5      	bge.n	8004b54 <_printf_i+0x140>
 8004c08:	0018      	movs	r0, r3
 8004c0a:	e7a3      	b.n	8004b54 <_printf_i+0x140>
 8004c0c:	0022      	movs	r2, r4
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9906      	ldr	r1, [sp, #24]
 8004c12:	9805      	ldr	r0, [sp, #20]
 8004c14:	9e07      	ldr	r6, [sp, #28]
 8004c16:	3219      	adds	r2, #25
 8004c18:	47b0      	blx	r6
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d098      	beq.n	8004b50 <_printf_i+0x13c>
 8004c1e:	3501      	adds	r5, #1
 8004c20:	68e3      	ldr	r3, [r4, #12]
 8004c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	42ab      	cmp	r3, r5
 8004c28:	dcf0      	bgt.n	8004c0c <_printf_i+0x1f8>
 8004c2a:	e7e9      	b.n	8004c00 <_printf_i+0x1ec>
 8004c2c:	2500      	movs	r5, #0
 8004c2e:	e7f7      	b.n	8004c20 <_printf_i+0x20c>
 8004c30:	08004fc1 	.word	0x08004fc1
 8004c34:	08004fd2 	.word	0x08004fd2

08004c38 <memchr>:
 8004c38:	b2c9      	uxtb	r1, r1
 8004c3a:	1882      	adds	r2, r0, r2
 8004c3c:	4290      	cmp	r0, r2
 8004c3e:	d101      	bne.n	8004c44 <memchr+0xc>
 8004c40:	2000      	movs	r0, #0
 8004c42:	4770      	bx	lr
 8004c44:	7803      	ldrb	r3, [r0, #0]
 8004c46:	428b      	cmp	r3, r1
 8004c48:	d0fb      	beq.n	8004c42 <memchr+0xa>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	e7f6      	b.n	8004c3c <memchr+0x4>

08004c4e <memcpy>:
 8004c4e:	2300      	movs	r3, #0
 8004c50:	b510      	push	{r4, lr}
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d100      	bne.n	8004c58 <memcpy+0xa>
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	5ccc      	ldrb	r4, [r1, r3]
 8004c5a:	54c4      	strb	r4, [r0, r3]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	e7f8      	b.n	8004c52 <memcpy+0x4>

08004c60 <memmove>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	4288      	cmp	r0, r1
 8004c64:	d902      	bls.n	8004c6c <memmove+0xc>
 8004c66:	188b      	adds	r3, r1, r2
 8004c68:	4298      	cmp	r0, r3
 8004c6a:	d303      	bcc.n	8004c74 <memmove+0x14>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e007      	b.n	8004c80 <memmove+0x20>
 8004c70:	5c8b      	ldrb	r3, [r1, r2]
 8004c72:	5483      	strb	r3, [r0, r2]
 8004c74:	3a01      	subs	r2, #1
 8004c76:	d2fb      	bcs.n	8004c70 <memmove+0x10>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	5ccc      	ldrb	r4, [r1, r3]
 8004c7c:	54c4      	strb	r4, [r0, r3]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1fa      	bne.n	8004c7a <memmove+0x1a>
 8004c84:	e7f8      	b.n	8004c78 <memmove+0x18>
	...

08004c88 <_free_r>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	0005      	movs	r5, r0
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	d010      	beq.n	8004cb2 <_free_r+0x2a>
 8004c90:	1f0c      	subs	r4, r1, #4
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da00      	bge.n	8004c9a <_free_r+0x12>
 8004c98:	18e4      	adds	r4, r4, r3
 8004c9a:	0028      	movs	r0, r5
 8004c9c:	f000 f918 	bl	8004ed0 <__malloc_lock>
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <_free_r+0x90>)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <_free_r+0x2c>
 8004ca8:	6063      	str	r3, [r4, #4]
 8004caa:	6014      	str	r4, [r2, #0]
 8004cac:	0028      	movs	r0, r5
 8004cae:	f000 f917 	bl	8004ee0 <__malloc_unlock>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x42>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	1860      	adds	r0, r4, r1
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	d1f3      	bne.n	8004ca8 <_free_r+0x20>
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	1841      	adds	r1, r0, r1
 8004cc6:	6021      	str	r1, [r4, #0]
 8004cc8:	e7ee      	b.n	8004ca8 <_free_r+0x20>
 8004cca:	001a      	movs	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <_free_r+0x4e>
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	d9f9      	bls.n	8004cca <_free_r+0x42>
 8004cd6:	6811      	ldr	r1, [r2, #0]
 8004cd8:	1850      	adds	r0, r2, r1
 8004cda:	42a0      	cmp	r0, r4
 8004cdc:	d10b      	bne.n	8004cf6 <_free_r+0x6e>
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	1809      	adds	r1, r1, r0
 8004ce2:	1850      	adds	r0, r2, r1
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	4283      	cmp	r3, r0
 8004ce8:	d1e0      	bne.n	8004cac <_free_r+0x24>
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	1841      	adds	r1, r0, r1
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	6053      	str	r3, [r2, #4]
 8004cf4:	e7da      	b.n	8004cac <_free_r+0x24>
 8004cf6:	42a0      	cmp	r0, r4
 8004cf8:	d902      	bls.n	8004d00 <_free_r+0x78>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	602b      	str	r3, [r5, #0]
 8004cfe:	e7d5      	b.n	8004cac <_free_r+0x24>
 8004d00:	6821      	ldr	r1, [r4, #0]
 8004d02:	1860      	adds	r0, r4, r1
 8004d04:	4283      	cmp	r3, r0
 8004d06:	d103      	bne.n	8004d10 <_free_r+0x88>
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	1841      	adds	r1, r0, r1
 8004d0e:	6021      	str	r1, [r4, #0]
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	6054      	str	r4, [r2, #4]
 8004d14:	e7ca      	b.n	8004cac <_free_r+0x24>
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	20000178 	.word	0x20000178

08004d1c <sbrk_aligned>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0f      	ldr	r6, [pc, #60]	; (8004d5c <sbrk_aligned+0x40>)
 8004d20:	000d      	movs	r5, r1
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	0004      	movs	r4, r0
 8004d26:	2900      	cmp	r1, #0
 8004d28:	d102      	bne.n	8004d30 <sbrk_aligned+0x14>
 8004d2a:	f000 f8bf 	bl	8004eac <_sbrk_r>
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	0029      	movs	r1, r5
 8004d32:	0020      	movs	r0, r4
 8004d34:	f000 f8ba 	bl	8004eac <_sbrk_r>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d00a      	beq.n	8004d52 <sbrk_aligned+0x36>
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	1cc5      	adds	r5, r0, #3
 8004d40:	439d      	bics	r5, r3
 8004d42:	42a8      	cmp	r0, r5
 8004d44:	d007      	beq.n	8004d56 <sbrk_aligned+0x3a>
 8004d46:	1a29      	subs	r1, r5, r0
 8004d48:	0020      	movs	r0, r4
 8004d4a:	f000 f8af 	bl	8004eac <_sbrk_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	d101      	bne.n	8004d56 <sbrk_aligned+0x3a>
 8004d52:	2501      	movs	r5, #1
 8004d54:	426d      	negs	r5, r5
 8004d56:	0028      	movs	r0, r5
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	2000017c 	.word	0x2000017c

08004d60 <_malloc_r>:
 8004d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d62:	2203      	movs	r2, #3
 8004d64:	1ccb      	adds	r3, r1, #3
 8004d66:	4393      	bics	r3, r2
 8004d68:	3308      	adds	r3, #8
 8004d6a:	0006      	movs	r6, r0
 8004d6c:	001f      	movs	r7, r3
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d232      	bcs.n	8004dd8 <_malloc_r+0x78>
 8004d72:	270c      	movs	r7, #12
 8004d74:	42b9      	cmp	r1, r7
 8004d76:	d831      	bhi.n	8004ddc <_malloc_r+0x7c>
 8004d78:	0030      	movs	r0, r6
 8004d7a:	f000 f8a9 	bl	8004ed0 <__malloc_lock>
 8004d7e:	4d32      	ldr	r5, [pc, #200]	; (8004e48 <_malloc_r+0xe8>)
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	001c      	movs	r4, r3
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	d12e      	bne.n	8004de6 <_malloc_r+0x86>
 8004d88:	0039      	movs	r1, r7
 8004d8a:	0030      	movs	r0, r6
 8004d8c:	f7ff ffc6 	bl	8004d1c <sbrk_aligned>
 8004d90:	0004      	movs	r4, r0
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d11e      	bne.n	8004dd4 <_malloc_r+0x74>
 8004d96:	682c      	ldr	r4, [r5, #0]
 8004d98:	0025      	movs	r5, r4
 8004d9a:	2d00      	cmp	r5, #0
 8004d9c:	d14a      	bne.n	8004e34 <_malloc_r+0xd4>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0029      	movs	r1, r5
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	0030      	movs	r0, r6
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f000 f880 	bl	8004eac <_sbrk_r>
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	4283      	cmp	r3, r0
 8004db0:	d143      	bne.n	8004e3a <_malloc_r+0xda>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	3703      	adds	r7, #3
 8004db6:	1aff      	subs	r7, r7, r3
 8004db8:	2303      	movs	r3, #3
 8004dba:	439f      	bics	r7, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	2f0c      	cmp	r7, #12
 8004dc0:	d200      	bcs.n	8004dc4 <_malloc_r+0x64>
 8004dc2:	270c      	movs	r7, #12
 8004dc4:	0039      	movs	r1, r7
 8004dc6:	0030      	movs	r0, r6
 8004dc8:	f7ff ffa8 	bl	8004d1c <sbrk_aligned>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d034      	beq.n	8004e3a <_malloc_r+0xda>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	19df      	adds	r7, r3, r7
 8004dd4:	6027      	str	r7, [r4, #0]
 8004dd6:	e013      	b.n	8004e00 <_malloc_r+0xa0>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	dacb      	bge.n	8004d74 <_malloc_r+0x14>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	2500      	movs	r5, #0
 8004de0:	6033      	str	r3, [r6, #0]
 8004de2:	0028      	movs	r0, r5
 8004de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	1bd1      	subs	r1, r2, r7
 8004dea:	d420      	bmi.n	8004e2e <_malloc_r+0xce>
 8004dec:	290b      	cmp	r1, #11
 8004dee:	d917      	bls.n	8004e20 <_malloc_r+0xc0>
 8004df0:	19e2      	adds	r2, r4, r7
 8004df2:	6027      	str	r7, [r4, #0]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d111      	bne.n	8004e1c <_malloc_r+0xbc>
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	6863      	ldr	r3, [r4, #4]
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	6053      	str	r3, [r2, #4]
 8004e00:	0030      	movs	r0, r6
 8004e02:	0025      	movs	r5, r4
 8004e04:	f000 f86c 	bl	8004ee0 <__malloc_unlock>
 8004e08:	2207      	movs	r2, #7
 8004e0a:	350b      	adds	r5, #11
 8004e0c:	1d23      	adds	r3, r4, #4
 8004e0e:	4395      	bics	r5, r2
 8004e10:	1aea      	subs	r2, r5, r3
 8004e12:	429d      	cmp	r5, r3
 8004e14:	d0e5      	beq.n	8004de2 <_malloc_r+0x82>
 8004e16:	1b5b      	subs	r3, r3, r5
 8004e18:	50a3      	str	r3, [r4, r2]
 8004e1a:	e7e2      	b.n	8004de2 <_malloc_r+0x82>
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	e7ec      	b.n	8004dfa <_malloc_r+0x9a>
 8004e20:	6862      	ldr	r2, [r4, #4]
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d101      	bne.n	8004e2a <_malloc_r+0xca>
 8004e26:	602a      	str	r2, [r5, #0]
 8004e28:	e7ea      	b.n	8004e00 <_malloc_r+0xa0>
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	e7e8      	b.n	8004e00 <_malloc_r+0xa0>
 8004e2e:	0023      	movs	r3, r4
 8004e30:	6864      	ldr	r4, [r4, #4]
 8004e32:	e7a7      	b.n	8004d84 <_malloc_r+0x24>
 8004e34:	002c      	movs	r4, r5
 8004e36:	686d      	ldr	r5, [r5, #4]
 8004e38:	e7af      	b.n	8004d9a <_malloc_r+0x3a>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	0030      	movs	r0, r6
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	f000 f84e 	bl	8004ee0 <__malloc_unlock>
 8004e44:	e7cd      	b.n	8004de2 <_malloc_r+0x82>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	20000178 	.word	0x20000178

08004e4c <_realloc_r>:
 8004e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e4e:	0007      	movs	r7, r0
 8004e50:	000e      	movs	r6, r1
 8004e52:	0014      	movs	r4, r2
 8004e54:	2900      	cmp	r1, #0
 8004e56:	d105      	bne.n	8004e64 <_realloc_r+0x18>
 8004e58:	0011      	movs	r1, r2
 8004e5a:	f7ff ff81 	bl	8004d60 <_malloc_r>
 8004e5e:	0005      	movs	r5, r0
 8004e60:	0028      	movs	r0, r5
 8004e62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d103      	bne.n	8004e70 <_realloc_r+0x24>
 8004e68:	f7ff ff0e 	bl	8004c88 <_free_r>
 8004e6c:	0025      	movs	r5, r4
 8004e6e:	e7f7      	b.n	8004e60 <_realloc_r+0x14>
 8004e70:	f000 f83e 	bl	8004ef0 <_malloc_usable_size_r>
 8004e74:	9001      	str	r0, [sp, #4]
 8004e76:	4284      	cmp	r4, r0
 8004e78:	d803      	bhi.n	8004e82 <_realloc_r+0x36>
 8004e7a:	0035      	movs	r5, r6
 8004e7c:	0843      	lsrs	r3, r0, #1
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	d3ee      	bcc.n	8004e60 <_realloc_r+0x14>
 8004e82:	0021      	movs	r1, r4
 8004e84:	0038      	movs	r0, r7
 8004e86:	f7ff ff6b 	bl	8004d60 <_malloc_r>
 8004e8a:	1e05      	subs	r5, r0, #0
 8004e8c:	d0e8      	beq.n	8004e60 <_realloc_r+0x14>
 8004e8e:	9b01      	ldr	r3, [sp, #4]
 8004e90:	0022      	movs	r2, r4
 8004e92:	429c      	cmp	r4, r3
 8004e94:	d900      	bls.n	8004e98 <_realloc_r+0x4c>
 8004e96:	001a      	movs	r2, r3
 8004e98:	0031      	movs	r1, r6
 8004e9a:	0028      	movs	r0, r5
 8004e9c:	f7ff fed7 	bl	8004c4e <memcpy>
 8004ea0:	0031      	movs	r1, r6
 8004ea2:	0038      	movs	r0, r7
 8004ea4:	f7ff fef0 	bl	8004c88 <_free_r>
 8004ea8:	e7da      	b.n	8004e60 <_realloc_r+0x14>
	...

08004eac <_sbrk_r>:
 8004eac:	2300      	movs	r3, #0
 8004eae:	b570      	push	{r4, r5, r6, lr}
 8004eb0:	4d06      	ldr	r5, [pc, #24]	; (8004ecc <_sbrk_r+0x20>)
 8004eb2:	0004      	movs	r4, r0
 8004eb4:	0008      	movs	r0, r1
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	f7fc fd72 	bl	80019a0 <_sbrk>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d103      	bne.n	8004ec8 <_sbrk_r+0x1c>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d000      	beq.n	8004ec8 <_sbrk_r+0x1c>
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000180 	.word	0x20000180

08004ed0 <__malloc_lock>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4802      	ldr	r0, [pc, #8]	; (8004edc <__malloc_lock+0xc>)
 8004ed4:	f000 f814 	bl	8004f00 <__retarget_lock_acquire_recursive>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	20000184 	.word	0x20000184

08004ee0 <__malloc_unlock>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4802      	ldr	r0, [pc, #8]	; (8004eec <__malloc_unlock+0xc>)
 8004ee4:	f000 f80d 	bl	8004f02 <__retarget_lock_release_recursive>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	20000184 	.word	0x20000184

08004ef0 <_malloc_usable_size_r>:
 8004ef0:	1f0b      	subs	r3, r1, #4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1f18      	subs	r0, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da01      	bge.n	8004efe <_malloc_usable_size_r+0xe>
 8004efa:	580b      	ldr	r3, [r1, r0]
 8004efc:	18c0      	adds	r0, r0, r3
 8004efe:	4770      	bx	lr

08004f00 <__retarget_lock_acquire_recursive>:
 8004f00:	4770      	bx	lr

08004f02 <__retarget_lock_release_recursive>:
 8004f02:	4770      	bx	lr

08004f04 <_init>:
 8004f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0a:	bc08      	pop	{r3}
 8004f0c:	469e      	mov	lr, r3
 8004f0e:	4770      	bx	lr

08004f10 <_fini>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr
