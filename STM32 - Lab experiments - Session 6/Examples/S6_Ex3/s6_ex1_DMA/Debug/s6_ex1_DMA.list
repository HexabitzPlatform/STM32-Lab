
s6_ex1_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004328  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004478  08004478  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004478  08004478  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004478  08004478  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  0800448c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800448c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f7  00000000  00000000  0002dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00030cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c33d  00000000  00000000  00031a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8ad  00000000  00000000  0004ddbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbf45  00000000  00000000  0005d66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001195af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  00119600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080043cc 	.word	0x080043cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080043cc 	.word	0x080043cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);


int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000220:	f000 fb00 	bl	8000824 <HAL_Init>
    SystemClock_Config();
 8000224:	f000 f832 	bl	800028c <SystemClock_Config>
    MX_GPIO_Init();
 8000228:	f000 f982 	bl	8000530 <MX_GPIO_Init>
    MX_DMA_Init();
 800022c:	f000 f962 	bl	80004f4 <MX_DMA_Init>
    MX_ADC1_Init();
 8000230:	f000 f874 	bl	800031c <MX_ADC1_Init>
    MX_TIM2_Init();
 8000234:	f000 f8de 	bl	80003f4 <MX_TIM2_Init>


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x44>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f003 f941 	bl	80034c4 <HAL_TIM_PWM_Start>
    // Calibrate The ADC On Power-Up For Better Accuracy

    HAL_ADCEx_Calibration_Start(&hadc1);
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <main+0x48>)
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fb39 	bl	80018bc <HAL_ADCEx_Calibration_Start>

    while (1)
    {
        // Start ADC Conversion
        // Pass (The ADC Instance, Result Buffer Address,      Buffer Length)
        HAL_ADC_Start_DMA(&hadc1,(uint32_t)&AD_RES, 1);
 800024a:	4907      	ldr	r1, [pc, #28]	; (8000268 <main+0x4c>)
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <main+0x48>)
 800024e:	2201      	movs	r2, #1
 8000250:	0018      	movs	r0, r3
 8000252:	f000 feb3 	bl	8000fbc <HAL_ADC_Start_DMA>
        HAL_Delay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f000 fb6a 	bl	8000930 <HAL_Delay>
        HAL_ADC_Start_DMA(&hadc1,(uint32_t)&AD_RES, 1);
 800025c:	e7f5      	b.n	800024a <main+0x2e>
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	200000f0 	.word	0x200000f0
 8000264:	2000002c 	.word	0x2000002c
 8000268:	20000028 	.word	0x20000028

0800026c <HAL_ADC_ConvCpltCallback>:
    }
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
    TIM2->CCR1 = (AD_RES<<4);
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	011a      	lsls	r2, r3, #4
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b095      	sub	sp, #84	; 0x54
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2414      	movs	r4, #20
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	233c      	movs	r3, #60	; 0x3c
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f004 f88d 	bl	80043bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f004 f886 	bl	80043bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 f8e7 	bl	8002488 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2240      	movs	r2, #64	; 0x40
 80002d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2200      	movs	r2, #0
 80002d8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	0018      	movs	r0, r3
 80002de:	f002 f913 	bl	8002508 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002e6:	f000 f939 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	0018      	movs	r0, r3
 8000308:	f002 fc5e 	bl	8002bc8 <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000310:	f000 f924 	bl	800055c <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b015      	add	sp, #84	; 0x54
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	0018      	movs	r0, r3
 8000326:	230c      	movs	r3, #12
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f004 f846 	bl	80043bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000330:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000332:	4a2e      	ldr	r2, [pc, #184]	; (80003ec <MX_ADC1_Init+0xd0>)
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000336:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	05d2      	lsls	r2, r2, #23
 800033c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033e:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <MX_ADC1_Init+0xcc>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000352:	2204      	movs	r2, #4
 8000354:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000358:	2200      	movs	r2, #0
 800035a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <MX_ADC1_Init+0xcc>)
 800035e:	2200      	movs	r2, #0
 8000360:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000362:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000364:	2200      	movs	r2, #0
 8000366:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_ADC1_Init+0xcc>)
 800036a:	2201      	movs	r2, #1
 800036c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000370:	2220      	movs	r2, #32
 8000372:	2100      	movs	r1, #0
 8000374:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_ADC1_Init+0xcc>)
 800037e:	2200      	movs	r2, #0
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000382:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000384:	222c      	movs	r2, #44	; 0x2c
 8000386:	2100      	movs	r1, #0
 8000388:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_ADC1_Init+0xcc>)
 800038c:	2200      	movs	r2, #0
 800038e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000392:	2200      	movs	r2, #0
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_ADC1_Init+0xcc>)
 8000398:	2200      	movs	r2, #0
 800039a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_ADC1_Init+0xcc>)
 800039e:	223c      	movs	r2, #60	; 0x3c
 80003a0:	2100      	movs	r1, #0
 80003a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_ADC1_Init+0xcc>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_ADC1_Init+0xcc>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fc5d 	bl	8000c6c <HAL_ADC_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003b6:	f000 f8d1 	bl	800055c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <MX_ADC1_Init+0xd4>)
 80003be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003cc:	1d3a      	adds	r2, r7, #4
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_ADC1_Init+0xcc>)
 80003d0:	0011      	movs	r1, r2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 fe90 	bl	80010f8 <HAL_ADC_ConfigChannel>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80003dc:	f000 f8be 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b004      	add	sp, #16
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000002c 	.word	0x2000002c
 80003ec:	40012400 	.word	0x40012400
 80003f0:	1c000080 	.word	0x1c000080

080003f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08e      	sub	sp, #56	; 0x38
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	2328      	movs	r3, #40	; 0x28
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	0018      	movs	r0, r3
 8000400:	2310      	movs	r3, #16
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f003 ffd9 	bl	80043bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040a:	231c      	movs	r3, #28
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	0018      	movs	r0, r3
 8000410:	230c      	movs	r3, #12
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f003 ffd1 	bl	80043bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041a:	003b      	movs	r3, r7
 800041c:	0018      	movs	r0, r3
 800041e:	231c      	movs	r3, #28
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f003 ffca 	bl	80043bc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000428:	4b30      	ldr	r3, [pc, #192]	; (80004ec <MX_TIM2_Init+0xf8>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	05d2      	lsls	r2, r2, #23
 800042e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000430:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000432:	2201      	movs	r2, #1
 8000434:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <MX_TIM2_Init+0xf8>)
 800043e:	4a2c      	ldr	r2, [pc, #176]	; (80004f0 <MX_TIM2_Init+0xfc>)
 8000440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <MX_TIM2_Init+0xf8>)
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800044e:	4b27      	ldr	r3, [pc, #156]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000450:	0018      	movs	r0, r3
 8000452:	f002 ff7f 	bl	8003354 <HAL_TIM_Base_Init>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800045a:	f000 f87f 	bl	800055c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	2128      	movs	r1, #40	; 0x28
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	0152      	lsls	r2, r2, #5
 8000466:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000468:	187a      	adds	r2, r7, r1
 800046a:	4b20      	ldr	r3, [pc, #128]	; (80004ec <MX_TIM2_Init+0xf8>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f003 fa18 	bl	80038a4 <HAL_TIM_ConfigClockSource>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000478:	f000 f870 	bl	800055c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_TIM2_Init+0xf8>)
 800047e:	0018      	movs	r0, r3
 8000480:	f002 ffc0 	bl	8003404 <HAL_TIM_PWM_Init>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000488:	f000 f868 	bl	800055c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048c:	211c      	movs	r1, #28
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049a:	187a      	adds	r2, r7, r1
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_TIM2_Init+0xf8>)
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f003 fef1 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004aa:	f000 f857 	bl	800055c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2260      	movs	r2, #96	; 0x60
 80004b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c6:	0039      	movs	r1, r7
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_TIM2_Init+0xf8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f003 f8e9 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80004d6:	f000 f841 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <MX_TIM2_Init+0xf8>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 f911 	bl	8000704 <HAL_TIM_MspPostInit>

}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b00e      	add	sp, #56	; 0x38
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	200000f0 	.word	0x200000f0
 80004f0:	0000ffff 	.word	0x0000ffff

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_DMA_Init+0x38>)
 80004fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_DMA_Init+0x38>)
 8000500:	2101      	movs	r1, #1
 8000502:	430a      	orrs	r2, r1
 8000504:	639a      	str	r2, [r3, #56]	; 0x38
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_DMA_Init+0x38>)
 8000508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800050a:	2201      	movs	r2, #1
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2009      	movs	r0, #9
 8000518:	f001 fb78 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800051c:	2009      	movs	r0, #9
 800051e:	f001 fb8a 	bl	8001c36 <HAL_NVIC_EnableIRQ>

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_GPIO_Init+0x28>)
 8000538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <MX_GPIO_Init+0x28>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_GPIO_Init+0x28>)
 8000544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	e7fe      	b.n	8000564 <Error_Handler+0x8>
	...

08000568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_MspInit+0x4c>)
 8000570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_MspInit+0x4c>)
 8000574:	2101      	movs	r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	641a      	str	r2, [r3, #64]	; 0x40
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_MspInit+0x4c>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	2201      	movs	r2, #1
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_MspInit+0x4c>)
 8000588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_MspInit+0x4c>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0549      	lsls	r1, r1, #21
 8000590:	430a      	orrs	r2, r1
 8000592:	63da      	str	r2, [r3, #60]	; 0x3c
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <HAL_MspInit+0x4c>)
 8000596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	055b      	lsls	r3, r3, #21
 800059c:	4013      	ands	r3, r2
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80005a2:	f000 f9fd 	bl	80009a0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f000 f9e6 	bl	8000978 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b09d      	sub	sp, #116	; 0x74
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	235c      	movs	r3, #92	; 0x5c
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	0018      	movs	r0, r3
 80005c6:	2314      	movs	r3, #20
 80005c8:	001a      	movs	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	f003 fef6 	bl	80043bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	2410      	movs	r4, #16
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	0018      	movs	r0, r3
 80005d6:	234c      	movs	r3, #76	; 0x4c
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f003 feee 	bl	80043bc <memset>
  if(hadc->Instance==ADC1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a35      	ldr	r2, [pc, #212]	; (80006bc <HAL_ADC_MspInit+0x104>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d164      	bne.n	80006b4 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	01d2      	lsls	r2, r2, #7
 80005f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 fc6e 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000604:	f7ff ffaa 	bl	800055c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <HAL_ADC_MspInit+0x108>)
 800060a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <HAL_ADC_MspInit+0x108>)
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0349      	lsls	r1, r1, #13
 8000612:	430a      	orrs	r2, r1
 8000614:	641a      	str	r2, [r3, #64]	; 0x40
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <HAL_ADC_MspInit+0x108>)
 8000618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	035b      	lsls	r3, r3, #13
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <HAL_ADC_MspInit+0x108>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <HAL_ADC_MspInit+0x108>)
 800062a:	2101      	movs	r1, #1
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <HAL_ADC_MspInit+0x108>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2201      	movs	r2, #1
 8000636:	4013      	ands	r3, r2
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800063c:	215c      	movs	r1, #92	; 0x5c
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2203      	movs	r2, #3
 8000648:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	187a      	adds	r2, r7, r1
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fda9 	bl	80021b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <HAL_ADC_MspInit+0x110>)
 8000662:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 8000666:	2205      	movs	r2, #5
 8000668:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	00d2      	lsls	r2, r2, #3
 800068a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fae8 	bl	8001c70 <HAL_DMA_Init>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80006a4:	f7ff ff5a 	bl	800055c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 80006ac:	651a      	str	r2, [r3, #80]	; 0x50
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_ADC_MspInit+0x10c>)
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b01d      	add	sp, #116	; 0x74
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	40012400 	.word	0x40012400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	20000090 	.word	0x20000090
 80006c8:	40020008 	.word	0x40020008

080006cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	429a      	cmp	r2, r3
 80006de:	d10b      	bne.n	80006f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_TIM_Base_MspInit+0x34>)
 80006e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_TIM_Base_MspInit+0x34>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	430a      	orrs	r2, r1
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_TIM_Base_MspInit+0x34>)
 80006ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f0:	2201      	movs	r2, #1
 80006f2:	4013      	ands	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b089      	sub	sp, #36	; 0x24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	240c      	movs	r4, #12
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	2314      	movs	r3, #20
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f003 fe50 	bl	80043bc <memset>
  if(htim->Instance==TIM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	429a      	cmp	r2, r3
 8000726:	d122      	bne.n	800076e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <HAL_TIM_MspPostInit+0x74>)
 800072a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_TIM_MspPostInit+0x74>)
 800072e:	2101      	movs	r1, #1
 8000730:	430a      	orrs	r2, r1
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_TIM_MspPostInit+0x74>)
 8000736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000738:	2201      	movs	r2, #1
 800073a:	4013      	ands	r3, r2
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000740:	0021      	movs	r1, r4
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2202      	movs	r2, #2
 800074c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	187a      	adds	r2, r7, r1
 8000762:	23a0      	movs	r3, #160	; 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f001 fd21 	bl	80021b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b009      	add	sp, #36	; 0x24
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f8aa 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <DMA1_Channel1_IRQHandler+0x14>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fb8e 	bl	8001ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000090 	.word	0x20000090

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f7ff fff6 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	; (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	; (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007fe:	f003 fdb9 	bl	8004374 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000802:	f7ff fd0b 	bl	800021c <main>

08000806 <LoopForever>:

LoopForever:
  b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000814:	08004480 	.word	0x08004480
  ldr r2, =_sbss
 8000818:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800081c:	20000140 	.word	0x20000140

08000820 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_COMP_IRQHandler>
	...

08000824 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_Init+0x3c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_Init+0x3c>)
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	0049      	lsls	r1, r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800083e:	2003      	movs	r0, #3
 8000840:	f000 f810 	bl	8000864 <HAL_InitTick>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d003      	beq.n	8000850 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e001      	b.n	8000854 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff fe8a 	bl	8000568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <HAL_InitTick+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d02b      	beq.n	80008d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_InitTick+0x8c>)
 800087e:	681c      	ldr	r4, [r3, #0]
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_InitTick+0x88>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0019      	movs	r1, r3
 8000886:	23fa      	movs	r3, #250	; 0xfa
 8000888:	0098      	lsls	r0, r3, #2
 800088a:	f7ff fc3b 	bl	8000104 <__udivsi3>
 800088e:	0003      	movs	r3, r0
 8000890:	0019      	movs	r1, r3
 8000892:	0020      	movs	r0, r4
 8000894:	f7ff fc36 	bl	8000104 <__udivsi3>
 8000898:	0003      	movs	r3, r0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 f9db 	bl	8001c56 <HAL_SYSTICK_Config>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d112      	bne.n	80008ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d80a      	bhi.n	80008c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f9aa 	bl	8001c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_InitTick+0x90>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e00d      	b.n	80008dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e008      	b.n	80008dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ca:	230f      	movs	r3, #15
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e003      	b.n	80008dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d4:	230f      	movs	r3, #15
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b005      	add	sp, #20
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	18d2      	adds	r2, r2, r3
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000008 	.word	0x20000008
 8000918:	2000013c 	.word	0x2000013c

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000013c 	.word	0x2000013c

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	0003      	movs	r3, r0
 800093e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	001a      	movs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	189b      	adds	r3, r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	f7ff ffe0 	bl	800091c <HAL_GetTick>
 800095c:	0002      	movs	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2202      	movs	r2, #2
 8000986:	4393      	bics	r3, r2
 8000988:	0019      	movs	r1, r3
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40010030 	.word	0x40010030

080009a0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	438a      	bics	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40010030 	.word	0x40010030

080009bc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80009cc:	401a      	ands	r2, r3
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	fe3fffff 	.word	0xfe3fffff

080009e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	23e0      	movs	r3, #224	; 0xe0
 80009f2:	045b      	lsls	r3, r3, #17
 80009f4:	4013      	ands	r3, r2
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}

080009fe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	2104      	movs	r1, #4
 8000a12:	400a      	ands	r2, r1
 8000a14:	2107      	movs	r1, #7
 8000a16:	4091      	lsls	r1, r2
 8000a18:	000a      	movs	r2, r1
 8000a1a:	43d2      	mvns	r2, r2
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	2104      	movs	r1, #4
 8000a22:	400b      	ands	r3, r1
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4099      	lsls	r1, r3
 8000a28:	000b      	movs	r3, r1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b004      	add	sp, #16
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	2104      	movs	r1, #4
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	000a      	movs	r2, r1
 8000a52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	2104      	movs	r1, #4
 8000a58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a5a:	40da      	lsrs	r2, r3
 8000a5c:	0013      	movs	r3, r2
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	23c0      	movs	r3, #192	; 0xc0
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	4013      	ands	r3, r2
 8000a78:	d101      	bne.n	8000a7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	211f      	movs	r1, #31
 8000a9c:	400a      	ands	r2, r1
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	0e9b      	lsrs	r3, r3, #26
 8000aac:	210f      	movs	r1, #15
 8000aae:	4019      	ands	r1, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	201f      	movs	r0, #31
 8000ab4:	4003      	ands	r3, r0
 8000ab6:	4099      	lsls	r1, r3
 8000ab8:	000b      	movs	r3, r1
 8000aba:	431a      	orrs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b004      	add	sp, #16
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	035b      	lsls	r3, r3, #13
 8000ada:	0b5b      	lsrs	r3, r3, #13
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	0352      	lsls	r2, r2, #13
 8000afc:	0b52      	lsrs	r2, r2, #13
 8000afe:	43d2      	mvns	r2, r2
 8000b00:	401a      	ands	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	43d2      	mvns	r2, r2
 8000b26:	401a      	ands	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
 8000b30:	4904      	ldr	r1, [pc, #16]	; (8000b44 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000b32:	400b      	ands	r3, r1
 8000b34:	431a      	orrs	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	07ffff00 	.word	0x07ffff00

08000b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <LL_ADC_EnableInternalRegulator+0x24>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	0552      	lsls	r2, r2, #21
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	6fffffe8 	.word	0x6fffffe8

08000b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	055b      	lsls	r3, r3, #21
 8000b80:	401a      	ands	r2, r3
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	055b      	lsls	r3, r3, #21
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d101      	bne.n	8000b8e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <LL_ADC_Enable+0x20>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2201      	movs	r2, #1
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	7fffffe8 	.word	0x7fffffe8

08000bbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <LL_ADC_Disable+0x20>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2202      	movs	r2, #2
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	7fffffe8 	.word	0x7fffffe8

08000be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2201      	movs	r2, #1
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <LL_ADC_IsEnabled+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <LL_ADC_IsEnabled+0x1a>
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d101      	bne.n	8000c1a <LL_ADC_IsDisableOngoing+0x18>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <LL_ADC_IsDisableOngoing+0x1a>
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <LL_ADC_REG_StartConversion+0x20>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	2204      	movs	r2, #4
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	7fffffe8 	.word	0x7fffffe8

08000c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2204      	movs	r2, #4
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d101      	bne.n	8000c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	231f      	movs	r3, #31
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e17f      	b.n	8000f92 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10a      	bne.n	8000cb0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fc8b 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2254      	movs	r2, #84	; 0x54
 8000cac:	2100      	movs	r1, #0
 8000cae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff5b 	bl	8000b70 <LL_ADC_IsInternalRegulatorEnabled>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d115      	bne.n	8000cea <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff ff40 	bl	8000b48 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000cc8:	4bb4      	ldr	r3, [pc, #720]	; (8000f9c <HAL_ADC_Init+0x330>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	49b4      	ldr	r1, [pc, #720]	; (8000fa0 <HAL_ADC_Init+0x334>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fa18 	bl	8000104 <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cdc:	e002      	b.n	8000ce4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f9      	bne.n	8000cde <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff ff3e 	bl	8000b70 <LL_ADC_IsInternalRegulatorEnabled>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d10f      	bne.n	8000d18 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d08:	2201      	movs	r2, #1
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d10:	231f      	movs	r3, #31
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff93 	bl	8000c48 <LL_ADC_REG_IsConversionOngoing>
 8000d22:	0003      	movs	r3, r0
 8000d24:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	2210      	movs	r2, #16
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d000      	beq.n	8000d32 <HAL_ADC_Init+0xc6>
 8000d30:	e122      	b.n	8000f78 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d000      	beq.n	8000d3a <HAL_ADC_Init+0xce>
 8000d38:	e11e      	b.n	8000f78 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a99      	ldr	r2, [pc, #612]	; (8000fa4 <HAL_ADC_Init+0x338>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	2202      	movs	r2, #2
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff ff46 	bl	8000be0 <LL_ADC_IsEnabled>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d000      	beq.n	8000d5a <HAL_ADC_Init+0xee>
 8000d58:	e0ad      	b.n	8000eb6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7e1b      	ldrb	r3, [r3, #24]
 8000d62:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000d64:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7e5b      	ldrb	r3, [r3, #25]
 8000d6a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	7e9b      	ldrb	r3, [r3, #26]
 8000d72:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d74:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <HAL_ADC_Init+0x118>
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	e000      	b.n	8000d86 <HAL_ADC_Init+0x11a>
 8000d84:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d86:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d8c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da04      	bge.n	8000da0 <HAL_ADC_Init+0x134>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	085b      	lsrs	r3, r3, #1
 8000d9e:	e001      	b.n	8000da4 <HAL_ADC_Init+0x138>
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000da4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	212c      	movs	r1, #44	; 0x2c
 8000daa:	5c5b      	ldrb	r3, [r3, r1]
 8000dac:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000dae:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d115      	bne.n	8000dec <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e9b      	ldrb	r3, [r3, #26]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	0252      	lsls	r2, r2, #9
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	e00b      	b.n	8000dec <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	2220      	movs	r2, #32
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de4:	2201      	movs	r2, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00a      	beq.n	8000e0a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df8:	23e0      	movs	r3, #224	; 0xe0
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e02:	4313      	orrs	r3, r2
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	4a65      	ldr	r2, [pc, #404]	; (8000fa8 <HAL_ADC_Init+0x33c>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	0019      	movs	r1, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	0f9b      	lsrs	r3, r3, #30
 8000e26:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	223c      	movs	r2, #60	; 0x3c
 8000e38:	5c9b      	ldrb	r3, [r3, r2]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d111      	bne.n	8000e62 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	0f9b      	lsrs	r3, r3, #30
 8000e44:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e4a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000e50:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000e56:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a50      	ldr	r2, [pc, #320]	; (8000fac <HAL_ADC_Init+0x340>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	23c0      	movs	r3, #192	; 0xc0
 8000e7e:	061b      	lsls	r3, r3, #24
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d018      	beq.n	8000eb6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d012      	beq.n	8000eb6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	061b      	lsls	r3, r3, #24
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e9c:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <HAL_ADC_Init+0x344>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <HAL_ADC_Init+0x348>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	23f0      	movs	r3, #240	; 0xf0
 8000eac:	039b      	lsls	r3, r3, #14
 8000eae:	401a      	ands	r2, r3
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <HAL_ADC_Init+0x344>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f7ff fd9c 	bl	80009fe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ece:	493a      	ldr	r1, [pc, #232]	; (8000fb8 <HAL_ADC_Init+0x34c>)
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	f7ff fd94 	bl	80009fe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d109      	bne.n	8000ef2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4249      	negs	r1, r1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
 8000ef0:	e018      	b.n	8000f24 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	039b      	lsls	r3, r3, #14
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d112      	bne.n	8000f24 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	221c      	movs	r2, #28
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2210      	movs	r2, #16
 8000f12:	4252      	negs	r2, r2
 8000f14:	409a      	lsls	r2, r3
 8000f16:	0011      	movs	r1, r2
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff fd84 	bl	8000a38 <LL_ADC_GetSamplingTimeCommonChannels>
 8000f30:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10b      	bne.n	8000f52 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f44:	2203      	movs	r2, #3
 8000f46:	4393      	bics	r3, r2
 8000f48:	2201      	movs	r2, #1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f50:	e01c      	b.n	8000f8c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	2212      	movs	r2, #18
 8000f58:	4393      	bics	r3, r2
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f66:	2201      	movs	r2, #1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000f6e:	231f      	movs	r3, #31
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f76:	e009      	b.n	8000f8c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f84:	231f      	movs	r3, #31
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f8c:	231f      	movs	r3, #31
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	781b      	ldrb	r3, [r3, #0]
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b008      	add	sp, #32
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	00030d40 	.word	0x00030d40
 8000fa4:	fffffefd 	.word	0xfffffefd
 8000fa8:	ffde0201 	.word	0xffde0201
 8000fac:	1ffffc02 	.word	0x1ffffc02
 8000fb0:	40012708 	.word	0x40012708
 8000fb4:	ffc3ffff 	.word	0xffc3ffff
 8000fb8:	07ffff04 	.word	0x07ffff04

08000fbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fe3b 	bl	8000c48 <LL_ADC_REG_IsConversionOngoing>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d16c      	bne.n	80010b0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2254      	movs	r2, #84	; 0x54
 8000fda:	5c9b      	ldrb	r3, [r3, r2]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_Start_DMA+0x28>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e06c      	b.n	80010be <HAL_ADC_Start_DMA+0x102>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2254      	movs	r2, #84	; 0x54
 8000fe8:	2101      	movs	r1, #1
 8000fea:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d113      	bne.n	8001020 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fdef 	bl	8000be0 <LL_ADC_IsEnabled>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d004      	beq.n	8001010 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff fdd6 	bl	8000bbc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001020:	2517      	movs	r5, #23
 8001022:	197c      	adds	r4, r7, r5
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	0018      	movs	r0, r3
 8001028:	f000 fa3e 	bl	80014a8 <ADC_Enable>
 800102c:	0003      	movs	r3, r0
 800102e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001030:	002c      	movs	r4, r5
 8001032:	193b      	adds	r3, r7, r4
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d13e      	bne.n	80010b8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <HAL_ADC_Start_DMA+0x10c>)
 8001040:	4013      	ands	r3, r2
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0052      	lsls	r2, r2, #1
 8001046:	431a      	orrs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001056:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <HAL_ADC_Start_DMA+0x110>)
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_ADC_Start_DMA+0x114>)
 8001060:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_ADC_Start_DMA+0x118>)
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	221c      	movs	r2, #28
 8001070:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2254      	movs	r2, #84	; 0x54
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2110      	movs	r1, #16
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3340      	adds	r3, #64	; 0x40
 8001094:	0019      	movs	r1, r3
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	193c      	adds	r4, r7, r4
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f000 fe94 	bl	8001dc8 <HAL_DMA_Start_IT>
 80010a0:	0003      	movs	r3, r0
 80010a2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fdbb 	bl	8000c24 <LL_ADC_REG_StartConversion>
 80010ae:	e003      	b.n	80010b8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010b0:	2317      	movs	r3, #23
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80010b8:	2317      	movs	r3, #23
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b006      	add	sp, #24
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	fffff0fe 	.word	0xfffff0fe
 80010cc:	08001671 	.word	0x08001671
 80010d0:	08001739 	.word	0x08001739
 80010d4:	08001757 	.word	0x08001757

080010d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001102:	2317      	movs	r3, #23
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2254      	movs	r2, #84	; 0x54
 8001112:	5c9b      	ldrb	r3, [r3, r2]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x24>
 8001118:	2302      	movs	r3, #2
 800111a:	e1c0      	b.n	800149e <HAL_ADC_ConfigChannel+0x3a6>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2254      	movs	r2, #84	; 0x54
 8001120:	2101      	movs	r1, #1
 8001122:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fd8d 	bl	8000c48 <LL_ADC_REG_IsConversionOngoing>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d000      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x3c>
 8001132:	e1a3      	b.n	800147c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d100      	bne.n	800113e <HAL_ADC_ConfigChannel+0x46>
 800113c:	e143      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	061b      	lsls	r3, r3, #24
 8001146:	429a      	cmp	r2, r3
 8001148:	d004      	beq.n	8001154 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800114e:	4ac1      	ldr	r2, [pc, #772]	; (8001454 <HAL_ADC_ConfigChannel+0x35c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d108      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0019      	movs	r1, r3
 800115e:	0010      	movs	r0, r2
 8001160:	f7ff fcb2 	bl	8000ac8 <LL_ADC_REG_SetSequencerChAdd>
 8001164:	e0c9      	b.n	80012fa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	211f      	movs	r1, #31
 8001170:	400b      	ands	r3, r1
 8001172:	210f      	movs	r1, #15
 8001174:	4099      	lsls	r1, r3
 8001176:	000b      	movs	r3, r1
 8001178:	43db      	mvns	r3, r3
 800117a:	4013      	ands	r3, r2
 800117c:	0019      	movs	r1, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	035b      	lsls	r3, r3, #13
 8001184:	0b5b      	lsrs	r3, r3, #13
 8001186:	d105      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x9c>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e9b      	lsrs	r3, r3, #26
 800118e:	221f      	movs	r2, #31
 8001190:	4013      	ands	r3, r2
 8001192:	e098      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	d000      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0xa8>
 800119e:	e091      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x1cc>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d000      	beq.n	80011ac <HAL_ADC_ConfigChannel+0xb4>
 80011aa:	e089      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1c8>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2204      	movs	r2, #4
 80011b2:	4013      	ands	r3, r2
 80011b4:	d000      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0xc0>
 80011b6:	e081      	b.n	80012bc <HAL_ADC_ConfigChannel+0x1c4>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2208      	movs	r2, #8
 80011be:	4013      	ands	r3, r2
 80011c0:	d000      	beq.n	80011c4 <HAL_ADC_ConfigChannel+0xcc>
 80011c2:	e079      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x1c0>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2210      	movs	r2, #16
 80011ca:	4013      	ands	r3, r2
 80011cc:	d000      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0xd8>
 80011ce:	e071      	b.n	80012b4 <HAL_ADC_ConfigChannel+0x1bc>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2220      	movs	r2, #32
 80011d6:	4013      	ands	r3, r2
 80011d8:	d000      	beq.n	80011dc <HAL_ADC_ConfigChannel+0xe4>
 80011da:	e069      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1b8>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2240      	movs	r2, #64	; 0x40
 80011e2:	4013      	ands	r3, r2
 80011e4:	d000      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0xf0>
 80011e6:	e061      	b.n	80012ac <HAL_ADC_ConfigChannel+0x1b4>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	4013      	ands	r3, r2
 80011f0:	d000      	beq.n	80011f4 <HAL_ADC_ConfigChannel+0xfc>
 80011f2:	e059      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x1b0>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	d151      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1ac>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d149      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1a8>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4013      	ands	r3, r2
 8001216:	d141      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1a4>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4013      	ands	r3, r2
 8001222:	d139      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x1a0>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	4013      	ands	r3, r2
 800122e:	d131      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x19c>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	019b      	lsls	r3, r3, #6
 8001238:	4013      	ands	r3, r2
 800123a:	d129      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x198>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	01db      	lsls	r3, r3, #7
 8001244:	4013      	ands	r3, r2
 8001246:	d121      	bne.n	800128c <HAL_ADC_ConfigChannel+0x194>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	4013      	ands	r3, r2
 8001252:	d119      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x190>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	4013      	ands	r3, r2
 800125e:	d111      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x18c>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d109      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x188>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	02db      	lsls	r3, r3, #11
 8001274:	4013      	ands	r3, r2
 8001276:	d001      	beq.n	800127c <HAL_ADC_ConfigChannel+0x184>
 8001278:	2312      	movs	r3, #18
 800127a:	e024      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2300      	movs	r3, #0
 800127e:	e022      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2311      	movs	r3, #17
 8001282:	e020      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2310      	movs	r3, #16
 8001286:	e01e      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	230f      	movs	r3, #15
 800128a:	e01c      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 800128c:	230e      	movs	r3, #14
 800128e:	e01a      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001290:	230d      	movs	r3, #13
 8001292:	e018      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001294:	230c      	movs	r3, #12
 8001296:	e016      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 8001298:	230b      	movs	r3, #11
 800129a:	e014      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 800129c:	230a      	movs	r3, #10
 800129e:	e012      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a0:	2309      	movs	r3, #9
 80012a2:	e010      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a4:	2308      	movs	r3, #8
 80012a6:	e00e      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012a8:	2307      	movs	r3, #7
 80012aa:	e00c      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012ac:	2306      	movs	r3, #6
 80012ae:	e00a      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012b0:	2305      	movs	r3, #5
 80012b2:	e008      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e006      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012b8:	2303      	movs	r3, #3
 80012ba:	e004      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x1ce>
 80012c4:	2300      	movs	r3, #0
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	6852      	ldr	r2, [r2, #4]
 80012ca:	201f      	movs	r0, #31
 80012cc:	4002      	ands	r2, r0
 80012ce:	4093      	lsls	r3, r2
 80012d0:	000a      	movs	r2, r1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d808      	bhi.n	80012fa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	001a      	movs	r2, r3
 80012f6:	f7ff fbc7 	bl	8000a88 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	001a      	movs	r2, r3
 8001308:	f7ff fc02 	bl	8000b10 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db00      	blt.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
 8001314:	e0bc      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001316:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fb63 	bl	80009e4 <LL_ADC_GetCommonPathInternalCh>
 800131e:	0003      	movs	r3, r0
 8001320:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a4d      	ldr	r2, [pc, #308]	; (800145c <HAL_ADC_ConfigChannel+0x364>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d122      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	041b      	lsls	r3, r3, #16
 8001332:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001334:	d11d      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0412      	lsls	r2, r2, #16
 800133c:	4313      	orrs	r3, r2
 800133e:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001340:	0019      	movs	r1, r3
 8001342:	0010      	movs	r0, r2
 8001344:	f7ff fb3a 	bl	80009bc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_ADC_ConfigChannel+0x368>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4945      	ldr	r1, [pc, #276]	; (8001464 <HAL_ADC_ConfigChannel+0x36c>)
 800134e:	0018      	movs	r0, r3
 8001350:	f7fe fed8 	bl	8000104 <__udivsi3>
 8001354:	0003      	movs	r3, r0
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	0013      	movs	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	189b      	adds	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001362:	e002      	b.n	800136a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3b01      	subs	r3, #1
 8001368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f9      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001370:	e08e      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a3c      	ldr	r2, [pc, #240]	; (8001468 <HAL_ADC_ConfigChannel+0x370>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10e      	bne.n	800139a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	045b      	lsls	r3, r3, #17
 8001382:	4013      	ands	r3, r2
 8001384:	d109      	bne.n	800139a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	0452      	lsls	r2, r2, #17
 800138c:	4313      	orrs	r3, r2
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001390:	0019      	movs	r1, r3
 8001392:	0010      	movs	r0, r2
 8001394:	f7ff fb12 	bl	80009bc <LL_ADC_SetCommonPathInternalCh>
 8001398:	e07a      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a33      	ldr	r2, [pc, #204]	; (800146c <HAL_ADC_ConfigChannel+0x374>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d000      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x2ae>
 80013a4:	e074      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	03db      	lsls	r3, r3, #15
 80013ac:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013ae:	d000      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x2ba>
 80013b0:	e06e      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	03d2      	lsls	r2, r2, #15
 80013b8:	4313      	orrs	r3, r2
 80013ba:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 80013bc:	0019      	movs	r1, r3
 80013be:	0010      	movs	r0, r2
 80013c0:	f7ff fafc 	bl	80009bc <LL_ADC_SetCommonPathInternalCh>
 80013c4:	e064      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691a      	ldr	r2, [r3, #16]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d004      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013d6:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <HAL_ADC_ConfigChannel+0x35c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d107      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0019      	movs	r1, r3
 80013e6:	0010      	movs	r0, r2
 80013e8:	f7ff fb7f 	bl	8000aea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da4d      	bge.n	8001490 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff faf4 	bl	80009e4 <LL_ADC_GetCommonPathInternalCh>
 80013fc:	0003      	movs	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <HAL_ADC_ConfigChannel+0x364>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d108      	bne.n	800141c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <HAL_ADC_ConfigChannel+0x378>)
 800140e:	4013      	ands	r3, r2
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f7ff fad1 	bl	80009bc <LL_ADC_SetCommonPathInternalCh>
 800141a:	e039      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_ADC_ConfigChannel+0x370>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d108      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_ADC_ConfigChannel+0x37c>)
 800142a:	4013      	ands	r3, r2
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 800142e:	0019      	movs	r1, r3
 8001430:	0010      	movs	r0, r2
 8001432:	f7ff fac3 	bl	80009bc <LL_ADC_SetCommonPathInternalCh>
 8001436:	e02b      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_ADC_ConfigChannel+0x374>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d126      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_ADC_ConfigChannel+0x380>)
 8001446:	4013      	ands	r3, r2
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_ADC_ConfigChannel+0x360>)
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f7ff fab5 	bl	80009bc <LL_ADC_SetCommonPathInternalCh>
 8001452:	e01d      	b.n	8001490 <HAL_ADC_ConfigChannel+0x398>
 8001454:	80000004 	.word	0x80000004
 8001458:	40012708 	.word	0x40012708
 800145c:	b0001000 	.word	0xb0001000
 8001460:	20000000 	.word	0x20000000
 8001464:	00030d40 	.word	0x00030d40
 8001468:	b8004000 	.word	0xb8004000
 800146c:	b4002000 	.word	0xb4002000
 8001470:	ff7fffff 	.word	0xff7fffff
 8001474:	feffffff 	.word	0xfeffffff
 8001478:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	2220      	movs	r2, #32
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001488:	2317      	movs	r3, #23
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2254      	movs	r2, #84	; 0x54
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001498:	2317      	movs	r3, #23
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b006      	add	sp, #24
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)

080014a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fb91 	bl	8000be0 <LL_ADC_IsEnabled>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d000      	beq.n	80014c4 <ADC_Enable+0x1c>
 80014c2:	e069      	b.n	8001598 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	4a36      	ldr	r2, [pc, #216]	; (80015a4 <ADC_Enable+0xfc>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	d00d      	beq.n	80014ec <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	2210      	movs	r2, #16
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2201      	movs	r2, #1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e056      	b.n	800159a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff fb51 	bl	8000b98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <ADC_Enable+0x100>)
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff fa73 	bl	80009e4 <LL_ADC_GetCommonPathInternalCh>
 80014fe:	0002      	movs	r2, r0
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	4013      	ands	r3, r2
 8001506:	d00f      	beq.n	8001528 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <ADC_Enable+0x104>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4928      	ldr	r1, [pc, #160]	; (80015b0 <ADC_Enable+0x108>)
 800150e:	0018      	movs	r0, r3
 8001510:	f7fe fdf8 	bl	8000104 <__udivsi3>
 8001514:	0003      	movs	r3, r0
 8001516:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001518:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800151a:	e002      	b.n	8001522 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3b01      	subs	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f9      	bne.n	800151c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7e5b      	ldrb	r3, [r3, #25]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d033      	beq.n	8001598 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001530:	f7ff f9f4 	bl	800091c <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001538:	e027      	b.n	800158a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fb4e 	bl	8000be0 <LL_ADC_IsEnabled>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d104      	bne.n	8001552 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fb23 	bl	8000b98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001552:	f7ff f9e3 	bl	800091c <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d914      	bls.n	800158a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	4013      	ands	r3, r2
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00d      	beq.n	800158a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	2210      	movs	r2, #16
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2201      	movs	r2, #1
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e007      	b.n	800159a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	2b01      	cmp	r3, #1
 8001596:	d1d0      	bne.n	800153a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	80000017 	.word	0x80000017
 80015a8:	40012708 	.word	0x40012708
 80015ac:	20000000 	.word	0x20000000
 80015b0:	00030d40 	.word	0x00030d40

080015b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff fb1e 	bl	8000c02 <LL_ADC_IsDisableOngoing>
 80015c6:	0003      	movs	r3, r0
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7ff fb06 	bl	8000be0 <LL_ADC_IsEnabled>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d046      	beq.n	8001666 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d143      	bne.n	8001666 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2205      	movs	r2, #5
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10d      	bne.n	8001608 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fae3 	bl	8000bbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2203      	movs	r2, #3
 80015fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015fe:	f7ff f98d 	bl	800091c <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001606:	e028      	b.n	800165a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	2210      	movs	r2, #16
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2201      	movs	r2, #1
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e021      	b.n	8001668 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001624:	f7ff f97a 	bl	800091c <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d913      	bls.n	800165a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2201      	movs	r2, #1
 800163a:	4013      	ands	r3, r2
 800163c:	d00d      	beq.n	800165a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	2210      	movs	r2, #16
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2201      	movs	r2, #1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e006      	b.n	8001668 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	d1de      	bne.n	8001624 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bd80      	pop	{r7, pc}

08001670 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	2250      	movs	r2, #80	; 0x50
 8001684:	4013      	ands	r3, r2
 8001686:	d141      	bne.n	800170c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff f9e3 	bl	8000a66 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d02e      	beq.n	8001702 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	7e9b      	ldrb	r3, [r3, #26]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d12a      	bne.n	8001702 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d123      	bne.n	8001702 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff fac2 	bl	8000c48 <LL_ADC_REG_IsConversionOngoing>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d110      	bne.n	80016ea <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	210c      	movs	r1, #12
 80016d4:	438a      	bics	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <ADC_DMAConvCplt+0xc4>)
 80016de:	4013      	ands	r3, r2
 80016e0:	2201      	movs	r2, #1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
 80016e8:	e00b      	b.n	8001702 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	2220      	movs	r2, #32
 80016f0:	431a      	orrs	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0018      	movs	r0, r3
 8001706:	f7fe fdb1 	bl	800026c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800170a:	e00f      	b.n	800172c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	2210      	movs	r2, #16
 8001712:	4013      	ands	r3, r2
 8001714:	d004      	beq.n	8001720 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fce5 	bl	80010e8 <HAL_ADC_ErrorCallback>
}
 800171e:	e005      	b.n	800172c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	0010      	movs	r0, r2
 800172a:	4798      	blx	r3
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}
 8001734:	fffffefe 	.word	0xfffffefe

08001738 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff fcc5 	bl	80010d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	431a      	orrs	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	2204      	movs	r2, #4
 8001776:	431a      	orrs	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff fcb2 	bl	80010e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}

0800178c <LL_ADC_GetCommonClock>:
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	23f0      	movs	r3, #240	; 0xf0
 800179a:	039b      	lsls	r3, r3, #14
 800179c:	4013      	ands	r3, r2
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <LL_ADC_GetClock>:
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	0f9b      	lsrs	r3, r3, #30
 80017b4:	079b      	lsls	r3, r3, #30
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <LL_ADC_SetCalibrationFactor>:
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	22b4      	movs	r2, #180	; 0xb4
 80017cc:	589b      	ldr	r3, [r3, r2]
 80017ce:	227f      	movs	r2, #127	; 0x7f
 80017d0:	4393      	bics	r3, r2
 80017d2:	001a      	movs	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	21b4      	movs	r1, #180	; 0xb4
 80017dc:	505a      	str	r2, [r3, r1]
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LL_ADC_GetCalibrationFactor>:
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	22b4      	movs	r2, #180	; 0xb4
 80017f2:	589b      	ldr	r3, [r3, r2]
 80017f4:	227f      	movs	r2, #127	; 0x7f
 80017f6:	4013      	ands	r3, r2
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}

08001800 <LL_ADC_Enable>:
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <LL_ADC_Enable+0x20>)
 800180e:	4013      	ands	r3, r2
 8001810:	2201      	movs	r2, #1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}
 8001820:	7fffffe8 	.word	0x7fffffe8

08001824 <LL_ADC_Disable>:
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <LL_ADC_Disable+0x20>)
 8001832:	4013      	ands	r3, r2
 8001834:	2202      	movs	r2, #2
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	7fffffe8 	.word	0x7fffffe8

08001848 <LL_ADC_IsEnabled>:
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <LL_ADC_IsEnabled+0x18>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_ADC_IsEnabled+0x1a>
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <LL_ADC_StartCalibration>:
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <LL_ADC_StartCalibration+0x24>)
 800187a:	4013      	ands	r3, r2
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	0612      	lsls	r2, r2, #24
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	7fffffe8 	.word	0x7fffffe8

08001894 <LL_ADC_IsCalibrationOnGoing>:
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	0fdb      	lsrs	r3, r3, #31
 80018a2:	07da      	lsls	r2, r3, #31
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	061b      	lsls	r3, r3, #24
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d101      	bne.n	80018b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2254      	movs	r2, #84	; 0x54
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADCEx_Calibration_Start+0x1e>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0dd      	b.n	8001a96 <HAL_ADCEx_Calibration_Start+0x1da>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2254      	movs	r2, #84	; 0x54
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80018e2:	231f      	movs	r3, #31
 80018e4:	18fc      	adds	r4, r7, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fe63 	bl	80015b4 <ADC_Disable>
 80018ee:	0003      	movs	r3, r0
 80018f0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff ffa6 	bl	8001848 <LL_ADC_IsEnabled>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d000      	beq.n	8001902 <HAL_ADCEx_Calibration_Start+0x46>
 8001900:	e0bc      	b.n	8001a7c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a66      	ldr	r2, [pc, #408]	; (8001aa0 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001908:	4013      	ands	r3, r2
 800190a:	2202      	movs	r2, #2
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a62      	ldr	r2, [pc, #392]	; (8001aa4 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	495f      	ldr	r1, [pc, #380]	; (8001aa8 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800192a:	400a      	ands	r2, r1
 800192c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	e02d      	b.n	8001990 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff ff97 	bl	800186c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800193e:	e014      	b.n	800196a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_ADCEx_Calibration_Start+0x1f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d90d      	bls.n	800196a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	2212      	movs	r2, #18
 8001954:	4393      	bics	r3, r2
 8001956:	2210      	movs	r2, #16
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2254      	movs	r2, #84	; 0x54
 8001962:	2100      	movs	r1, #0
 8001964:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e095      	b.n	8001a96 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	f7ff ff90 	bl	8001894 <LL_ADC_IsCalibrationOnGoing>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d1e3      	bne.n	8001940 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff32 	bl	80017e6 <LL_ADC_GetCalibrationFactor>
 8001982:	0002      	movs	r2, r0
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	189b      	adds	r3, r3, r2
 8001988:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	2b07      	cmp	r3, #7
 8001994:	d9ce      	bls.n	8001934 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001998:	6a38      	ldr	r0, [r7, #32]
 800199a:	f7fe fbb3 	bl	8000104 <__udivsi3>
 800199e:	0003      	movs	r3, r0
 80019a0:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff ff2a 	bl	8001800 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fef8 	bl	80017a6 <LL_ADC_GetClock>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d11b      	bne.n	80019f2 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80019bc:	0018      	movs	r0, r3
 80019be:	f7ff fee5 	bl	800178c <LL_ADC_GetCommonClock>
 80019c2:	0003      	movs	r3, r0
 80019c4:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	23e0      	movs	r3, #224	; 0xe0
 80019ca:	035b      	lsls	r3, r3, #13
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d310      	bcc.n	80019f2 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	3b03      	subs	r3, #3
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	0013      	movs	r3, r2
 80019dc:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80019e4:	e002      	b.n	80019ec <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a3a      	ldr	r2, [r7, #32]
 80019f8:	0011      	movs	r1, r2
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7ff fedf 	bl	80017be <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff ff0d 	bl	8001824 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a0a:	f7fe ff87 	bl	800091c <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a12:	e01b      	b.n	8001a4c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a14:	f7fe ff82 	bl	800091c <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d914      	bls.n	8001a4c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff ff0e 	bl	8001848 <LL_ADC_IsEnabled>
 8001a2c:	1e03      	subs	r3, r0, #0
 8001a2e:	d00d      	beq.n	8001a4c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	2210      	movs	r2, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2201      	movs	r2, #1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e024      	b.n	8001a96 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fef9 	bl	8001848 <LL_ADC_IsEnabled>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d1dc      	bne.n	8001a14 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68d9      	ldr	r1, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	2203      	movs	r2, #3
 8001a70:	4393      	bics	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	659a      	str	r2, [r3, #88]	; 0x58
 8001a7a:	e005      	b.n	8001a88 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	2210      	movs	r2, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2254      	movs	r2, #84	; 0x54
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001a90:	231f      	movs	r3, #31
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	781b      	ldrb	r3, [r3, #0]
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b00b      	add	sp, #44	; 0x2c
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	fffffefd 	.word	0xfffffefd
 8001aa4:	00008003 	.word	0x00008003
 8001aa8:	ffff7ffc 	.word	0xffff7ffc
 8001aac:	0002f1ff 	.word	0x0002f1ff
 8001ab0:	40012708 	.word	0x40012708

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac6:	d809      	bhi.n	8001adc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	231f      	movs	r3, #31
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_EnableIRQ+0x30>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4091      	lsls	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7f      	cmp	r3, #127	; 0x7f
 8001afc:	d828      	bhi.n	8001b50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	33c0      	adds	r3, #192	; 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	589b      	ldr	r3, [r3, r2]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	0011      	movs	r1, r2
 8001b14:	2203      	movs	r2, #3
 8001b16:	400a      	ands	r2, r1
 8001b18:	00d2      	lsls	r2, r2, #3
 8001b1a:	21ff      	movs	r1, #255	; 0xff
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	43d2      	mvns	r2, r2
 8001b22:	401a      	ands	r2, r3
 8001b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	2303      	movs	r3, #3
 8001b36:	4003      	ands	r3, r0
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	481f      	ldr	r0, [pc, #124]	; (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	430a      	orrs	r2, r1
 8001b48:	33c0      	adds	r3, #192	; 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b4e:	e031      	b.n	8001bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	0019      	movs	r1, r3
 8001b58:	230f      	movs	r3, #15
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	3b08      	subs	r3, #8
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3306      	adds	r3, #6
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	; 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	4023      	ands	r3, r4
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	3306      	adds	r3, #6
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18c3      	adds	r3, r0, r3
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1e5a      	subs	r2, r3, #1
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	045b      	lsls	r3, r3, #17
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d301      	bcc.n	8001bdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e010      	b.n	8001bfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <SysTick_Config+0x44>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	3a01      	subs	r2, #1
 8001be2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be4:	2301      	movs	r3, #1
 8001be6:	425b      	negs	r3, r3
 8001be8:	2103      	movs	r1, #3
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7ff ff7c 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x44>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x44>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	210f      	movs	r1, #15
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff33 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ffaf 	bl	8001bc4 <SysTick_Config>
 8001c66:	0003      	movs	r3, r0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e091      	b.n	8001da6 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	001a      	movs	r2, r3
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_DMA_Init+0x140>)
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d810      	bhi.n	8001cb0 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_DMA_Init+0x144>)
 8001c94:	4694      	mov	ip, r2
 8001c96:	4463      	add	r3, ip
 8001c98:	2114      	movs	r1, #20
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7fe fa32 	bl	8000104 <__udivsi3>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	009a      	lsls	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a43      	ldr	r2, [pc, #268]	; (8001db8 <HAL_DMA_Init+0x148>)
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
 8001cae:	e00f      	b.n	8001cd0 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a41      	ldr	r2, [pc, #260]	; (8001dbc <HAL_DMA_Init+0x14c>)
 8001cb6:	4694      	mov	ip, r2
 8001cb8:	4463      	add	r3, ip
 8001cba:	2114      	movs	r1, #20
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7fe fa21 	bl	8000104 <__udivsi3>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	009a      	lsls	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a3c      	ldr	r2, [pc, #240]	; (8001dc0 <HAL_DMA_Init+0x150>)
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2225      	movs	r2, #37	; 0x25
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4938      	ldr	r1, [pc, #224]	; (8001dc4 <HAL_DMA_Init+0x154>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6819      	ldr	r1, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f9d7 	bl	80020d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	01db      	lsls	r3, r3, #7
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d102      	bne.n	8001d38 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d40:	217f      	movs	r1, #127	; 0x7f
 8001d42:	400a      	ands	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d011      	beq.n	8001d7c <HAL_DMA_Init+0x10c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d80d      	bhi.n	8001d7c <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 fa00 	bl	8002168 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	e008      	b.n	8001d8e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2225      	movs	r2, #37	; 0x25
 8001d98:	2101      	movs	r1, #1
 8001d9a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2224      	movs	r2, #36	; 0x24
 8001da0:	2100      	movs	r1, #0
 8001da2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40020407 	.word	0x40020407
 8001db4:	bffdfff8 	.word	0xbffdfff8
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	bffdfbf8 	.word	0xbffdfbf8
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	ffff800f 	.word	0xffff800f

08001dc8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2317      	movs	r3, #23
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2224      	movs	r2, #36	; 0x24
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Start_IT+0x24>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e06f      	b.n	8001ecc <HAL_DMA_Start_IT+0x104>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	2101      	movs	r1, #1
 8001df2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2225      	movs	r2, #37	; 0x25
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d157      	bne.n	8001eb0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2225      	movs	r2, #37	; 0x25
 8001e04:	2102      	movs	r1, #2
 8001e06:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f919 	bl	800205c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	210e      	movs	r1, #14
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00f      	b.n	8001e64 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2104      	movs	r1, #4
 8001e50:	438a      	bics	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	210a      	movs	r1, #10
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	025b      	lsls	r3, r3, #9
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d008      	beq.n	8001e84 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0049      	lsls	r1, r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e00a      	b.n	8001ec6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2224      	movs	r2, #36	; 0x24
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001ebe:	2317      	movs	r3, #23
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001ec6:	2317      	movs	r3, #23
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	781b      	ldrb	r3, [r3, #0]
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b006      	add	sp, #24
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	221c      	movs	r2, #28
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	d026      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x7a>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d022      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	4013      	ands	r3, r2
 8001f12:	d107      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2104      	movs	r1, #4
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	221c      	movs	r2, #28
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2104      	movs	r1, #4
 8001f32:	4091      	lsls	r1, r2
 8001f34:	000a      	movs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d100      	bne.n	8001f42 <HAL_DMA_IRQHandler+0x6e>
 8001f40:	e080      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	0010      	movs	r0, r2
 8001f4a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f4c:	e07a      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	221c      	movs	r2, #28
 8001f54:	4013      	ands	r3, r2
 8001f56:	2202      	movs	r2, #2
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	0013      	movs	r3, r2
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d03c      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x108>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d038      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2220      	movs	r2, #32
 8001f72:	4013      	ands	r3, r2
 8001f74:	d10b      	bne.n	8001f8e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	210a      	movs	r1, #10
 8001f82:	438a      	bics	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2225      	movs	r2, #37	; 0x25
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	001a      	movs	r2, r3
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_DMA_IRQHandler+0x17c>)
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d909      	bls.n	8001fae <HAL_DMA_IRQHandler+0xda>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	221c      	movs	r2, #28
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_DMA_IRQHandler+0x180>)
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4091      	lsls	r1, r2
 8001fa8:	000a      	movs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	e008      	b.n	8001fc0 <HAL_DMA_IRQHandler+0xec>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	221c      	movs	r2, #28
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_DMA_IRQHandler+0x184>)
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4091      	lsls	r1, r2
 8001fbc:	000a      	movs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d039      	beq.n	8002044 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001fda:	e033      	b.n	8002044 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	221c      	movs	r2, #28
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	d02a      	beq.n	8002046 <HAL_DMA_IRQHandler+0x172>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d026      	beq.n	8002046 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	210e      	movs	r1, #14
 8002004:	438a      	bics	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	221c      	movs	r2, #28
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2101      	movs	r1, #1
 8002016:	4091      	lsls	r1, r2
 8002018:	000a      	movs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2225      	movs	r2, #37	; 0x25
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2224      	movs	r2, #36	; 0x24
 800202e:	2100      	movs	r1, #0
 8002030:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	0010      	movs	r0, r2
 8002042:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46c0      	nop			; (mov r8, r8)
}
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	40020080 	.word	0x40020080
 8002054:	40020400 	.word	0x40020400
 8002058:	40020000 	.word	0x40020000

0800205c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002072:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002084:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	221c      	movs	r2, #28
 800208c:	401a      	ands	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2101      	movs	r1, #1
 8002094:	4091      	lsls	r1, r2
 8002096:	000a      	movs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d108      	bne.n	80020bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ba:	e007      	b.n	80020cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	60da      	str	r2, [r3, #12]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d814      	bhi.n	8002112 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80020f2:	189a      	adds	r2, r3, r2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	001a      	movs	r2, r3
 80020fe:	23ff      	movs	r3, #255	; 0xff
 8002100:	4013      	ands	r3, r2
 8002102:	3b08      	subs	r3, #8
 8002104:	2114      	movs	r1, #20
 8002106:	0018      	movs	r0, r3
 8002108:	f7fd fffc 	bl	8000104 <__udivsi3>
 800210c:	0003      	movs	r3, r0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e014      	b.n	800213c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4a11      	ldr	r2, [pc, #68]	; (8002160 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800211c:	189a      	adds	r2, r3, r2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	001a      	movs	r2, r3
 8002128:	23ff      	movs	r3, #255	; 0xff
 800212a:	4013      	ands	r3, r2
 800212c:	3b08      	subs	r3, #8
 800212e:	2114      	movs	r1, #20
 8002130:	0018      	movs	r0, r3
 8002132:	f7fd ffe7 	bl	8000104 <__udivsi3>
 8002136:	0003      	movs	r3, r0
 8002138:	3307      	adds	r3, #7
 800213a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002140:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	221f      	movs	r2, #31
 8002146:	4013      	ands	r3, r2
 8002148:	2201      	movs	r2, #1
 800214a:	409a      	lsls	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b004      	add	sp, #16
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40020407 	.word	0x40020407
 800215c:	40020800 	.word	0x40020800
 8002160:	4002081c 	.word	0x4002081c
 8002164:	40020880 	.word	0x40020880

08002168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	227f      	movs	r2, #127	; 0x7f
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800217e:	4694      	mov	ip, r2
 8002180:	4463      	add	r3, ip
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	001a      	movs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800218e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3b01      	subs	r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	4013      	ands	r3, r2
 8002198:	2201      	movs	r2, #1
 800219a:	409a      	lsls	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	1000823f 	.word	0x1000823f
 80021ac:	40020940 	.word	0x40020940

080021b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e14d      	b.n	800245c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4091      	lsls	r1, r2
 80021ca:	000a      	movs	r2, r1
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d100      	bne.n	80021d8 <HAL_GPIO_Init+0x28>
 80021d6:	e13e      	b.n	8002456 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d005      	beq.n	80021f0 <HAL_GPIO_Init+0x40>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d130      	bne.n	8002252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	409a      	lsls	r2, r3
 80021fe:	0013      	movs	r3, r2
 8002200:	43da      	mvns	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002226:	2201      	movs	r2, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
 800222c:	0013      	movs	r3, r2
 800222e:	43da      	mvns	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	2201      	movs	r2, #1
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	4013      	ands	r3, r2
 800225a:	2b03      	cmp	r3, #3
 800225c:	d017      	beq.n	800228e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	409a      	lsls	r2, r3
 800226c:	0013      	movs	r3, r2
 800226e:	43da      	mvns	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	409a      	lsls	r2, r3
 8002280:	0013      	movs	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2203      	movs	r2, #3
 8002294:	4013      	ands	r3, r2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d123      	bne.n	80022e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	58d3      	ldr	r3, [r2, r3]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2207      	movs	r2, #7
 80022ac:	4013      	ands	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	409a      	lsls	r2, r3
 80022b4:	0013      	movs	r3, r2
 80022b6:	43da      	mvns	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2107      	movs	r1, #7
 80022c6:	400b      	ands	r3, r1
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	6939      	ldr	r1, [r7, #16]
 80022e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	409a      	lsls	r2, r3
 80022f0:	0013      	movs	r3, r2
 80022f2:	43da      	mvns	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2203      	movs	r2, #3
 8002300:	401a      	ands	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	409a      	lsls	r2, r3
 8002308:	0013      	movs	r3, r2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	23c0      	movs	r3, #192	; 0xc0
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d100      	bne.n	8002324 <HAL_GPIO_Init+0x174>
 8002322:	e098      	b.n	8002456 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002324:	4a53      	ldr	r2, [pc, #332]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3318      	adds	r3, #24
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	589b      	ldr	r3, [r3, r2]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2203      	movs	r2, #3
 8002336:	4013      	ands	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	220f      	movs	r2, #15
 800233c:	409a      	lsls	r2, r3
 800233e:	0013      	movs	r3, r2
 8002340:	43da      	mvns	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	23a0      	movs	r3, #160	; 0xa0
 800234c:	05db      	lsls	r3, r3, #23
 800234e:	429a      	cmp	r2, r3
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x1d6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a48      	ldr	r2, [pc, #288]	; (8002478 <HAL_GPIO_Init+0x2c8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x1d2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a47      	ldr	r2, [pc, #284]	; (800247c <HAL_GPIO_Init+0x2cc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x1ce>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_GPIO_Init+0x2d0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x1ca>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a45      	ldr	r2, [pc, #276]	; (8002484 <HAL_GPIO_Init+0x2d4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x1c6>
 8002372:	2304      	movs	r3, #4
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x1d8>
 8002376:	2305      	movs	r3, #5
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x1d8>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x1d8>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x1d8>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x1d8>
 8002386:	2300      	movs	r3, #0
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	2103      	movs	r1, #3
 800238c:	400a      	ands	r2, r1
 800238e:	00d2      	lsls	r2, r2, #3
 8002390:	4093      	lsls	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002398:	4936      	ldr	r1, [pc, #216]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3318      	adds	r3, #24
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43da      	mvns	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	035b      	lsls	r3, r3, #13
 80023be:	4013      	ands	r3, r2
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43da      	mvns	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	039b      	lsls	r3, r3, #14
 80023e8:	4013      	ands	r3, r2
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 80023fc:	2384      	movs	r3, #132	; 0x84
 80023fe:	58d3      	ldr	r3, [r2, r3]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	43da      	mvns	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	4013      	ands	r3, r2
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002420:	4914      	ldr	r1, [pc, #80]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 8002422:	2284      	movs	r2, #132	; 0x84
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002428:	4a12      	ldr	r2, [pc, #72]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	58d3      	ldr	r3, [r2, r3]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43da      	mvns	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	025b      	lsls	r3, r3, #9
 8002442:	4013      	ands	r3, r2
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800244e:	4909      	ldr	r1, [pc, #36]	; (8002474 <HAL_GPIO_Init+0x2c4>)
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	40da      	lsrs	r2, r3
 8002464:	1e13      	subs	r3, r2, #0
 8002466:	d000      	beq.n	800246a <HAL_GPIO_Init+0x2ba>
 8002468:	e6aa      	b.n	80021c0 <HAL_GPIO_Init+0x10>
  }
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b006      	add	sp, #24
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021800 	.word	0x40021800
 8002478:	50000400 	.word	0x50000400
 800247c:	50000800 	.word	0x50000800
 8002480:	50000c00 	.word	0x50000c00
 8002484:	50001000 	.word	0x50001000

08002488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d11f      	bne.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	0013      	movs	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	189b      	adds	r3, r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7fd fe22 	bl	8000104 <__udivsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c6:	e008      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e001      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e009      	b.n	80024ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	401a      	ands	r2, r3
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d0ed      	beq.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	40007000 	.word	0x40007000
 80024fc:	fffff9ff 	.word	0xfffff9ff
 8002500:	20000000 	.word	0x20000000
 8002504:	000f4240 	.word	0x000f4240

08002508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f000 fb50 	bl	8002bbc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d100      	bne.n	8002528 <HAL_RCC_OscConfig+0x20>
 8002526:	e07c      	b.n	8002622 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002528:	4bc3      	ldr	r3, [pc, #780]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2238      	movs	r2, #56	; 0x38
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002532:	4bc1      	ldr	r3, [pc, #772]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2203      	movs	r2, #3
 8002538:	4013      	ands	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b10      	cmp	r3, #16
 8002540:	d102      	bne.n	8002548 <HAL_RCC_OscConfig+0x40>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d002      	beq.n	800254e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d10b      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	4bba      	ldr	r3, [pc, #744]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	029b      	lsls	r3, r3, #10
 8002556:	4013      	ands	r3, r2
 8002558:	d062      	beq.n	8002620 <HAL_RCC_OscConfig+0x118>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d15e      	bne.n	8002620 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e32a      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	025b      	lsls	r3, r3, #9
 800256e:	429a      	cmp	r2, r3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_OscConfig+0x7a>
 8002572:	4bb1      	ldr	r3, [pc, #708]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4bb0      	ldr	r3, [pc, #704]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	0249      	lsls	r1, r1, #9
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e020      	b.n	80025c4 <HAL_RCC_OscConfig+0xbc>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	23a0      	movs	r3, #160	; 0xa0
 8002588:	02db      	lsls	r3, r3, #11
 800258a:	429a      	cmp	r2, r3
 800258c:	d10e      	bne.n	80025ac <HAL_RCC_OscConfig+0xa4>
 800258e:	4baa      	ldr	r3, [pc, #680]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4ba9      	ldr	r3, [pc, #676]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	02c9      	lsls	r1, r1, #11
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	4ba6      	ldr	r3, [pc, #664]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4ba5      	ldr	r3, [pc, #660]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0249      	lsls	r1, r1, #9
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xbc>
 80025ac:	4ba2      	ldr	r3, [pc, #648]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4ba1      	ldr	r3, [pc, #644]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80025b2:	49a2      	ldr	r1, [pc, #648]	; (800283c <HAL_RCC_OscConfig+0x334>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b9f      	ldr	r3, [pc, #636]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80025be:	49a0      	ldr	r1, [pc, #640]	; (8002840 <HAL_RCC_OscConfig+0x338>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d014      	beq.n	80025f6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe f9a6 	bl	800091c <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d6:	f7fe f9a1 	bl	800091c <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b64      	cmp	r3, #100	; 0x64
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2e9      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e8:	4b93      	ldr	r3, [pc, #588]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0xce>
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe f991 	bl	800091c <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe f98c 	bl	800091c <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2d4      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	029b      	lsls	r3, r3, #10
 800261a:	4013      	ands	r3, r2
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0xf8>
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x126>
 800262c:	e099      	b.n	8002762 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2238      	movs	r2, #56	; 0x38
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	4b7f      	ldr	r3, [pc, #508]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2203      	movs	r2, #3
 800263e:	4013      	ands	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b10      	cmp	r3, #16
 8002646:	d102      	bne.n	800264e <HAL_RCC_OscConfig+0x146>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d002      	beq.n	8002654 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d135      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4013      	ands	r3, r2
 800265e:	d005      	beq.n	800266c <HAL_RCC_OscConfig+0x164>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e2a7      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b72      	ldr	r3, [pc, #456]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a74      	ldr	r2, [pc, #464]	; (8002844 <HAL_RCC_OscConfig+0x33c>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	021a      	lsls	r2, r3, #8
 800267c:	4b6e      	ldr	r3, [pc, #440]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d112      	bne.n	80026ae <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002688:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6e      	ldr	r2, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x340>)
 800268e:	4013      	ands	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0adb      	lsrs	r3, r3, #11
 80026a2:	2207      	movs	r2, #7
 80026a4:	4013      	ands	r3, r2
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x344>)
 80026a8:	40da      	lsrs	r2, r3
 80026aa:	4b69      	ldr	r3, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x348>)
 80026ac:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026ae:	4b69      	ldr	r3, [pc, #420]	; (8002854 <HAL_RCC_OscConfig+0x34c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fe f8d6 	bl	8000864 <HAL_InitTick>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d051      	beq.n	8002760 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e27d      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d030      	beq.n	800272a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026c8:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <HAL_RCC_OscConfig+0x340>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026dc:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b55      	ldr	r3, [pc, #340]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0049      	lsls	r1, r1, #1
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe f917 	bl	800091c <HAL_GetTick>
 80026ee:	0003      	movs	r3, r0
 80026f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f4:	f7fe f912 	bl	800091c <HAL_GetTick>
 80026f8:	0002      	movs	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e25a      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002706:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4013      	ands	r3, r2
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_RCC_OscConfig+0x33c>)
 8002718:	4013      	ands	r3, r2
 800271a:	0019      	movs	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	021a      	lsls	r2, r3, #8
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	e01b      	b.n	8002762 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002730:	4949      	ldr	r1, [pc, #292]	; (8002858 <HAL_RCC_OscConfig+0x350>)
 8002732:	400a      	ands	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe f8f1 	bl	800091c <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe f8ec 	bl	800091c <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e234      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4013      	ands	r3, r2
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x238>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2208      	movs	r2, #8
 8002768:	4013      	ands	r3, r2
 800276a:	d047      	beq.n	80027fc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2238      	movs	r2, #56	; 0x38
 8002772:	4013      	ands	r3, r2
 8002774:	2b18      	cmp	r3, #24
 8002776:	d10a      	bne.n	800278e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
 8002780:	d03c      	beq.n	80027fc <HAL_RCC_OscConfig+0x2f4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d138      	bne.n	80027fc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e216      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d019      	beq.n	80027ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002796:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002798:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279a:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe f8bb 	bl	800091c <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe f8b6 	bl	800091c <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1fe      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	2202      	movs	r2, #2
 80027c4:	4013      	ands	r3, r2
 80027c6:	d0f1      	beq.n	80027ac <HAL_RCC_OscConfig+0x2a4>
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80027cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	438a      	bics	r2, r1
 80027d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe f8a1 	bl	800091c <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e0:	f7fe f89c 	bl	800091c <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1e4      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d1f1      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2204      	movs	r2, #4
 8002802:	4013      	ands	r3, r2
 8002804:	d100      	bne.n	8002808 <HAL_RCC_OscConfig+0x300>
 8002806:	e0c7      	b.n	8002998 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002808:	231f      	movs	r3, #31
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2238      	movs	r2, #56	; 0x38
 8002816:	4013      	ands	r3, r2
 8002818:	2b20      	cmp	r3, #32
 800281a:	d11f      	bne.n	800285c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x330>)
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2202      	movs	r2, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d100      	bne.n	8002828 <HAL_RCC_OscConfig+0x320>
 8002826:	e0b7      	b.n	8002998 <HAL_RCC_OscConfig+0x490>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d000      	beq.n	8002832 <HAL_RCC_OscConfig+0x32a>
 8002830:	e0b2      	b.n	8002998 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1c2      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	40021000 	.word	0x40021000
 800283c:	fffeffff 	.word	0xfffeffff
 8002840:	fffbffff 	.word	0xfffbffff
 8002844:	ffff80ff 	.word	0xffff80ff
 8002848:	ffffc7ff 	.word	0xffffc7ff
 800284c:	00f42400 	.word	0x00f42400
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004
 8002858:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800285c:	4bb5      	ldr	r3, [pc, #724]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 800285e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	055b      	lsls	r3, r3, #21
 8002864:	4013      	ands	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_RCC_OscConfig+0x364>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x366>
 800286c:	2300      	movs	r3, #0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4bb0      	ldr	r3, [pc, #704]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002876:	4baf      	ldr	r3, [pc, #700]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0549      	lsls	r1, r1, #21
 800287c:	430a      	orrs	r2, r1
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002880:	4bac      	ldr	r3, [pc, #688]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	055b      	lsls	r3, r3, #21
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800288e:	231f      	movs	r3, #31
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	4ba8      	ldr	r3, [pc, #672]	; (8002b38 <HAL_RCC_OscConfig+0x630>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a2:	4ba5      	ldr	r3, [pc, #660]	; (8002b38 <HAL_RCC_OscConfig+0x630>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4ba4      	ldr	r3, [pc, #656]	; (8002b38 <HAL_RCC_OscConfig+0x630>)
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	0049      	lsls	r1, r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80028b0:	f7fe f834 	bl	800091c <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7fe f82f 	bl	800091c <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e177      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028cc:	4b9a      	ldr	r3, [pc, #616]	; (8002b38 <HAL_RCC_OscConfig+0x630>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x3e6>
 80028e0:	4b94      	ldr	r3, [pc, #592]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80028e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028e4:	4b93      	ldr	r3, [pc, #588]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	430a      	orrs	r2, r1
 80028ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ec:	e01c      	b.n	8002928 <HAL_RCC_OscConfig+0x420>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x408>
 80028f6:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80028f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028fa:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80028fc:	2104      	movs	r1, #4
 80028fe:	430a      	orrs	r2, r1
 8002900:	65da      	str	r2, [r3, #92]	; 0x5c
 8002902:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002906:	4b8b      	ldr	r3, [pc, #556]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	65da      	str	r2, [r3, #92]	; 0x5c
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x420>
 8002910:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002912:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002914:	4b87      	ldr	r3, [pc, #540]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002916:	2101      	movs	r1, #1
 8002918:	438a      	bics	r2, r1
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
 800291c:	4b85      	ldr	r3, [pc, #532]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 800291e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002920:	4b84      	ldr	r3, [pc, #528]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002922:	2104      	movs	r1, #4
 8002924:	438a      	bics	r2, r1
 8002926:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d014      	beq.n	800295a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fd fff4 	bl	800091c <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002938:	e009      	b.n	800294e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7fd ffef 	bl	800091c <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	4a7d      	ldr	r2, [pc, #500]	; (8002b3c <HAL_RCC_OscConfig+0x634>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e136      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	4b79      	ldr	r3, [pc, #484]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2202      	movs	r2, #2
 8002954:	4013      	ands	r3, r2
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x432>
 8002958:	e013      	b.n	8002982 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fd ffdf 	bl	800091c <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002962:	e009      	b.n	8002978 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fd ffda 	bl	800091c <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x634>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e121      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002978:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002982:	231f      	movs	r3, #31
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b69      	ldr	r3, [pc, #420]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 800298e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002992:	496b      	ldr	r1, [pc, #428]	; (8002b40 <HAL_RCC_OscConfig+0x638>)
 8002994:	400a      	ands	r2, r1
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2220      	movs	r2, #32
 800299e:	4013      	ands	r3, r2
 80029a0:	d039      	beq.n	8002a16 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029aa:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	03c9      	lsls	r1, r1, #15
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fd ffb0 	bl	800091c <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c2:	f7fd ffab 	bl	800091c <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0f3      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029d4:	4b57      	ldr	r3, [pc, #348]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	4013      	ands	r3, r2
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4ba>
 80029e0:	e019      	b.n	8002a16 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 80029e8:	4956      	ldr	r1, [pc, #344]	; (8002b44 <HAL_RCC_OscConfig+0x63c>)
 80029ea:	400a      	ands	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fd ff95 	bl	800091c <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f8:	f7fd ff90 	bl	800091c <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0d8      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	4013      	ands	r3, r2
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d100      	bne.n	8002a20 <HAL_RCC_OscConfig+0x518>
 8002a1e:	e0cc      	b.n	8002bba <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a20:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2238      	movs	r2, #56	; 0x38
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x526>
 8002a2c:	e07b      	b.n	8002b26 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d156      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a3c:	4942      	ldr	r1, [pc, #264]	; (8002b48 <HAL_RCC_OscConfig+0x640>)
 8002a3e:	400a      	ands	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fd ff6b 	bl	800091c <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fd ff66 	bl	800091c <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0ae      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5e:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	049b      	lsls	r3, r3, #18
 8002a66:	4013      	ands	r3, r2
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a37      	ldr	r2, [pc, #220]	; (8002b4c <HAL_RCC_OscConfig+0x644>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	431a      	orrs	r2, r3
 8002a98:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9e:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	0449      	lsls	r1, r1, #17
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	0549      	lsls	r1, r1, #21
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fd ff2f 	bl	800091c <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fd ff2a 	bl	800091c <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e072      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	049b      	lsls	r3, r3, #18
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x5bc>
 8002ae2:	e06a      	b.n	8002bba <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002aea:	4917      	ldr	r1, [pc, #92]	; (8002b48 <HAL_RCC_OscConfig+0x640>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fd ff14 	bl	800091c <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fd ff0f 	bl	800091c <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e057      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	049b      	lsls	r3, r3, #18
 8002b14:	4013      	ands	r3, r2
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_OscConfig+0x62c>)
 8002b1e:	490c      	ldr	r1, [pc, #48]	; (8002b50 <HAL_RCC_OscConfig+0x648>)
 8002b20:	400a      	ands	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]
 8002b24:	e049      	b.n	8002bba <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e044      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	00001388 	.word	0x00001388
 8002b40:	efffffff 	.word	0xefffffff
 8002b44:	ffbfffff 	.word	0xffbfffff
 8002b48:	feffffff 	.word	0xfeffffff
 8002b4c:	11c1808c 	.word	0x11c1808c
 8002b50:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <HAL_RCC_OscConfig+0x6bc>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d126      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2270      	movs	r2, #112	; 0x70
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d11f      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	23fe      	movs	r3, #254	; 0xfe
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d116      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	23f8      	movs	r3, #248	; 0xf8
 8002b8c:	039b      	lsls	r3, r3, #14
 8002b8e:	401a      	ands	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d10e      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	23e0      	movs	r3, #224	; 0xe0
 8002b9c:	051b      	lsls	r3, r3, #20
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	0f5b      	lsrs	r3, r3, #29
 8002bac:	075a      	lsls	r2, r3, #29
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b008      	add	sp, #32
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0e9      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b76      	ldr	r3, [pc, #472]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2207      	movs	r2, #7
 8002be2:	4013      	ands	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d91e      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b73      	ldr	r3, [pc, #460]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bfc:	f7fd fe8e 	bl	800091c <HAL_GetTick>
 8002c00:	0003      	movs	r3, r0
 8002c02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c04:	e009      	b.n	8002c1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c06:	f7fd fe89 	bl	800091c <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCC_ClockConfig+0x1f4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0ca      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c1a:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4013      	ands	r3, r2
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d015      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2204      	movs	r2, #4
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d006      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c3c:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	21e0      	movs	r1, #224	; 0xe0
 8002c44:	01c9      	lsls	r1, r1, #7
 8002c46:	430a      	orrs	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4a:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <HAL_RCC_ClockConfig+0x1fc>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d057      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	029b      	lsls	r3, r3, #10
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d12b      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e097      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c88:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	049b      	lsls	r3, r3, #18
 8002c90:	4013      	ands	r3, r2
 8002c92:	d11f      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e08b      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d113      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e07f      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb8:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d108      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e074      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e06d      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2207      	movs	r2, #7
 8002cda:	4393      	bics	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fd fe18 	bl	800091c <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf0:	e009      	b.n	8002d06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fd fe13 	bl	800091c <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <HAL_RCC_ClockConfig+0x1f4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e054      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2238      	movs	r2, #56	; 0x38
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1ec      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4013      	ands	r3, r2
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d21e      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d38:	f7fd fdf0 	bl	800091c <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d40:	e009      	b.n	8002d56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d42:	f7fd fdeb 	bl	800091c <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_RCC_ClockConfig+0x1f4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e02c      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_RCC_ClockConfig+0x200>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d82:	f000 f829 	bl	8002dd8 <HAL_RCC_GetSysClockFreq>
 8002d86:	0001      	movs	r1, r0
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	220f      	movs	r2, #15
 8002d90:	401a      	ands	r2, r3
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x204>)
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	58d3      	ldr	r3, [r2, r3]
 8002d98:	221f      	movs	r2, #31
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	000a      	movs	r2, r1
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_ClockConfig+0x208>)
 8002da2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_ClockConfig+0x20c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fd fd5b 	bl	8000864 <HAL_InitTick>
 8002dae:	0003      	movs	r3, r0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b004      	add	sp, #16
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	00001388 	.word	0x00001388
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	fffff0ff 	.word	0xfffff0ff
 8002dc8:	ffff8fff 	.word	0xffff8fff
 8002dcc:	080043e4 	.word	0x080043e4
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dde:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2238      	movs	r2, #56	; 0x38
 8002de4:	4013      	ands	r3, r2
 8002de6:	d10f      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002de8:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0adb      	lsrs	r3, r3, #11
 8002dee:	2207      	movs	r2, #7
 8002df0:	4013      	ands	r3, r2
 8002df2:	2201      	movs	r2, #1
 8002df4:	409a      	lsls	r2, r3
 8002df6:	0013      	movs	r3, r2
 8002df8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	4835      	ldr	r0, [pc, #212]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dfe:	f7fd f981 	bl	8000104 <__udivsi3>
 8002e02:	0003      	movs	r3, r0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	e05d      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e08:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2238      	movs	r2, #56	; 0x38
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e054      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2238      	movs	r2, #56	; 0x38
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d138      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e26:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	2207      	movs	r2, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	4824      	ldr	r0, [pc, #144]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e48:	f7fd f95c 	bl	8000104 <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	0019      	movs	r1, r3
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	227f      	movs	r2, #127	; 0x7f
 8002e58:	4013      	ands	r3, r2
 8002e5a:	434b      	muls	r3, r1
 8002e5c:	617b      	str	r3, [r7, #20]
        break;
 8002e5e:	e00d      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	481c      	ldr	r0, [pc, #112]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e64:	f7fd f94e 	bl	8000104 <__udivsi3>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	227f      	movs	r2, #127	; 0x7f
 8002e74:	4013      	ands	r3, r2
 8002e76:	434b      	muls	r3, r1
 8002e78:	617b      	str	r3, [r7, #20]
        break;
 8002e7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0f5b      	lsrs	r3, r3, #29
 8002e82:	2207      	movs	r2, #7
 8002e84:	4013      	ands	r3, r2
 8002e86:	3301      	adds	r3, #1
 8002e88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	6978      	ldr	r0, [r7, #20]
 8002e8e:	f7fd f939 	bl	8000104 <__udivsi3>
 8002e92:	0003      	movs	r3, r0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e015      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2238      	movs	r2, #56	; 0x38
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d103      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2238      	movs	r2, #56	; 0x38
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b18      	cmp	r3, #24
 8002eb6:	d103      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002eb8:	23fa      	movs	r3, #250	; 0xfa
 8002eba:	01db      	lsls	r3, r3, #7
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e001      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ec4:	693b      	ldr	r3, [r7, #16]
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b006      	add	sp, #24
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	00f42400 	.word	0x00f42400
 8002ed8:	007a1200 	.word	0x007a1200

08002edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ee4:	2313      	movs	r3, #19
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eec:	2312      	movs	r3, #18
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	4013      	ands	r3, r2
 8002efe:	d100      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f00:	e0ad      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2011      	movs	r0, #17
 8002f04:	183b      	adds	r3, r7, r0
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	055b      	lsls	r3, r3, #21
 8002f12:	4013      	ands	r3, r2
 8002f14:	d110      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1a:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	0549      	lsls	r1, r1, #21
 8002f20:	430a      	orrs	r2, r1
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f24:	4b40      	ldr	r3, [pc, #256]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	055b      	lsls	r3, r3, #21
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f38:	4b3c      	ldr	r3, [pc, #240]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	0049      	lsls	r1, r1, #1
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f46:	f7fd fce9 	bl	800091c <HAL_GetTick>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fd fce4 	bl	800091c <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d904      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f5e:	2313      	movs	r3, #19
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2203      	movs	r2, #3
 8002f64:	701a      	strb	r2, [r3, #0]
        break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f68:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4013      	ands	r3, r2
 8002f72:	d0ed      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f74:	2313      	movs	r3, #19
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d15e      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f82:	23c0      	movs	r3, #192	; 0xc0
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d019      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d014      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f9a:	4b23      	ldr	r3, [pc, #140]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	0249      	lsls	r1, r1, #9
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fb8:	491e      	ldr	r1, [pc, #120]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002fba:	400a      	ands	r2, r1
 8002fbc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d016      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fca6 	bl	800091c <HAL_GetTick>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd4:	e00c      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fd fca1 	bl	800091c <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d904      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002fe6:	2313      	movs	r3, #19
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2203      	movs	r2, #3
 8002fec:	701a      	strb	r2, [r3, #0]
            break;
 8002fee:	e004      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d0ed      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ffa:	2313      	movs	r3, #19
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003014:	430a      	orrs	r2, r1
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c
 8003018:	e016      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800301a:	2312      	movs	r3, #18
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2213      	movs	r2, #19
 8003020:	18ba      	adds	r2, r7, r2
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	e00f      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
 8003030:	fffffcff 	.word	0xfffffcff
 8003034:	fffeffff 	.word	0xfffeffff
 8003038:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	2312      	movs	r3, #18
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2213      	movs	r2, #19
 8003042:	18ba      	adds	r2, r7, r2
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003048:	2311      	movs	r3, #17
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4bb6      	ldr	r3, [pc, #728]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003056:	4bb5      	ldr	r3, [pc, #724]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003058:	49b5      	ldr	r1, [pc, #724]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800305a:	400a      	ands	r2, r1
 800305c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2201      	movs	r2, #1
 8003064:	4013      	ands	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003068:	4bb0      	ldr	r3, [pc, #704]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	2203      	movs	r2, #3
 800306e:	4393      	bics	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4bad      	ldr	r3, [pc, #692]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003078:	430a      	orrs	r2, r1
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2202      	movs	r2, #2
 8003082:	4013      	ands	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003086:	4ba9      	ldr	r3, [pc, #676]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	220c      	movs	r2, #12
 800308c:	4393      	bics	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4ba5      	ldr	r3, [pc, #660]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003096:	430a      	orrs	r2, r1
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a4:	4ba1      	ldr	r3, [pc, #644]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	2230      	movs	r2, #48	; 0x30
 80030aa:	4393      	bics	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4b9e      	ldr	r3, [pc, #632]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b4:	430a      	orrs	r2, r1
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2210      	movs	r2, #16
 80030be:	4013      	ands	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c2:	4b9a      	ldr	r3, [pc, #616]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	4a9b      	ldr	r2, [pc, #620]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	4b96      	ldr	r3, [pc, #600]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030d2:	430a      	orrs	r2, r1
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	4013      	ands	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80030e2:	4b92      	ldr	r3, [pc, #584]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	4a94      	ldr	r2, [pc, #592]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	4b8e      	ldr	r3, [pc, #568]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f2:	430a      	orrs	r2, r1
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4013      	ands	r3, r2
 8003100:	d009      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003102:	4b8a      	ldr	r3, [pc, #552]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	4a8d      	ldr	r2, [pc, #564]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003110:	4b86      	ldr	r3, [pc, #536]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003112:	430a      	orrs	r2, r1
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4013      	ands	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003122:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	4a86      	ldr	r2, [pc, #536]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003132:	430a      	orrs	r2, r1
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2220      	movs	r2, #32
 800313c:	4013      	ands	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003140:	4b7a      	ldr	r3, [pc, #488]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	4a7f      	ldr	r2, [pc, #508]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	4b77      	ldr	r3, [pc, #476]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003150:	430a      	orrs	r2, r1
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2240      	movs	r2, #64	; 0x40
 800315a:	4013      	ands	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	4a79      	ldr	r2, [pc, #484]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003164:	4013      	ands	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	4b6f      	ldr	r3, [pc, #444]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800316e:	430a      	orrs	r2, r1
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	4013      	ands	r3, r2
 800317c:	d015      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800317e:	4b6b      	ldr	r3, [pc, #428]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	0899      	lsrs	r1, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318a:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800318c:	430a      	orrs	r2, r1
 800318e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	05db      	lsls	r3, r3, #23
 8003198:	429a      	cmp	r2, r3
 800319a:	d106      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800319c:	4b63      	ldr	r3, [pc, #396]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0249      	lsls	r1, r1, #9
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	031b      	lsls	r3, r3, #12
 80031b2:	4013      	ands	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031b6:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	4393      	bics	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031c6:	430a      	orrs	r2, r1
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	039b      	lsls	r3, r3, #14
 80031d2:	4013      	ands	r3, r2
 80031d4:	d016      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031d6:	4b55      	ldr	r3, [pc, #340]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e4:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e6:	430a      	orrs	r2, r1
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	03db      	lsls	r3, r3, #15
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d106      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031f6:	4b4d      	ldr	r3, [pc, #308]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	0449      	lsls	r1, r1, #17
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	03db      	lsls	r3, r3, #15
 800320c:	4013      	ands	r3, r2
 800320e:	d016      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	4a4e      	ldr	r2, [pc, #312]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003220:	430a      	orrs	r2, r1
 8003222:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	045b      	lsls	r3, r3, #17
 800322c:	429a      	cmp	r2, r3
 800322e:	d106      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	0449      	lsls	r1, r1, #17
 800323a:	430a      	orrs	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4013      	ands	r3, r2
 8003248:	d014      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	2203      	movs	r2, #3
 8003250:	4393      	bics	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800325a:	430a      	orrs	r2, r1
 800325c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d106      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	0249      	lsls	r1, r1, #9
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	019b      	lsls	r3, r3, #6
 800327c:	4013      	ands	r3, r2
 800327e:	d014      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	220c      	movs	r2, #12
 8003286:	4393      	bics	r3, r2
 8003288:	0019      	movs	r1, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328e:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003290:	430a      	orrs	r2, r1
 8003292:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b04      	cmp	r3, #4
 800329a:	d106      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a2:	2180      	movs	r1, #128	; 0x80
 80032a4:	0249      	lsls	r1, r1, #9
 80032a6:	430a      	orrs	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	045b      	lsls	r3, r3, #17
 80032b2:	4013      	ands	r3, r2
 80032b4:	d016      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	4a22      	ldr	r2, [pc, #136]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d106      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	0449      	lsls	r1, r1, #17
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	049b      	lsls	r3, r3, #18
 80032ec:	4013      	ands	r3, r2
 80032ee:	d016      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	4a10      	ldr	r2, [pc, #64]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003300:	430a      	orrs	r2, r1
 8003302:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	429a      	cmp	r2, r3
 800330e:	d106      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0449      	lsls	r1, r1, #17
 800331a:	430a      	orrs	r2, r1
 800331c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800331e:	2312      	movs	r3, #18
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b006      	add	sp, #24
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	efffffff 	.word	0xefffffff
 8003334:	fffff3ff 	.word	0xfffff3ff
 8003338:	fffffcff 	.word	0xfffffcff
 800333c:	fff3ffff 	.word	0xfff3ffff
 8003340:	ffcfffff 	.word	0xffcfffff
 8003344:	ffffcfff 	.word	0xffffcfff
 8003348:	ffff3fff 	.word	0xffff3fff
 800334c:	ffbfffff 	.word	0xffbfffff
 8003350:	feffffff 	.word	0xfeffffff

08003354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e04a      	b.n	80033fc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	223d      	movs	r2, #61	; 0x3d
 800336a:	5c9b      	ldrb	r3, [r3, r2]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223c      	movs	r2, #60	; 0x3c
 8003376:	2100      	movs	r1, #0
 8003378:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f7fd f9a5 	bl	80006cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	223d      	movs	r2, #61	; 0x3d
 8003386:	2102      	movs	r1, #2
 8003388:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	0019      	movs	r1, r3
 8003394:	0010      	movs	r0, r2
 8003396:	f000 fb5b 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2248      	movs	r2, #72	; 0x48
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	223e      	movs	r2, #62	; 0x3e
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223f      	movs	r2, #63	; 0x3f
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2241      	movs	r2, #65	; 0x41
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2242      	movs	r2, #66	; 0x42
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2243      	movs	r2, #67	; 0x43
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2244      	movs	r2, #68	; 0x44
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2245      	movs	r2, #69	; 0x45
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2246      	movs	r2, #70	; 0x46
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2247      	movs	r2, #71	; 0x47
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223d      	movs	r2, #61	; 0x3d
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e04a      	b.n	80034ac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223d      	movs	r2, #61	; 0x3d
 800341a:	5c9b      	ldrb	r3, [r3, r2]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	223c      	movs	r2, #60	; 0x3c
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f841 	bl	80034b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223d      	movs	r2, #61	; 0x3d
 8003436:	2102      	movs	r1, #2
 8003438:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	0019      	movs	r1, r3
 8003444:	0010      	movs	r0, r2
 8003446:	f000 fb03 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2248      	movs	r2, #72	; 0x48
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223e      	movs	r2, #62	; 0x3e
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223f      	movs	r2, #63	; 0x3f
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2240      	movs	r2, #64	; 0x40
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2241      	movs	r2, #65	; 0x41
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2242      	movs	r2, #66	; 0x42
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2243      	movs	r2, #67	; 0x43
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2244      	movs	r2, #68	; 0x44
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2245      	movs	r2, #69	; 0x45
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2246      	movs	r2, #70	; 0x46
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2247      	movs	r2, #71	; 0x47
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	223d      	movs	r2, #61	; 0x3d
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d108      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x22>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	223e      	movs	r2, #62	; 0x3e
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	4193      	sbcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e037      	b.n	8003556 <HAL_TIM_PWM_Start+0x92>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d108      	bne.n	80034fe <HAL_TIM_PWM_Start+0x3a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	223f      	movs	r2, #63	; 0x3f
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	4193      	sbcs	r3, r2
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e02b      	b.n	8003556 <HAL_TIM_PWM_Start+0x92>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d108      	bne.n	8003516 <HAL_TIM_PWM_Start+0x52>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	1e5a      	subs	r2, r3, #1
 8003510:	4193      	sbcs	r3, r2
 8003512:	b2db      	uxtb	r3, r3
 8003514:	e01f      	b.n	8003556 <HAL_TIM_PWM_Start+0x92>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d108      	bne.n	800352e <HAL_TIM_PWM_Start+0x6a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2241      	movs	r2, #65	; 0x41
 8003520:	5c9b      	ldrb	r3, [r3, r2]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	1e5a      	subs	r2, r3, #1
 8003528:	4193      	sbcs	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e013      	b.n	8003556 <HAL_TIM_PWM_Start+0x92>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b10      	cmp	r3, #16
 8003532:	d108      	bne.n	8003546 <HAL_TIM_PWM_Start+0x82>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2242      	movs	r2, #66	; 0x42
 8003538:	5c9b      	ldrb	r3, [r3, r2]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	4193      	sbcs	r3, r2
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e007      	b.n	8003556 <HAL_TIM_PWM_Start+0x92>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2243      	movs	r2, #67	; 0x43
 800354a:	5c9b      	ldrb	r3, [r3, r2]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	1e5a      	subs	r2, r3, #1
 8003552:	4193      	sbcs	r3, r2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e090      	b.n	8003680 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0xaa>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	223e      	movs	r2, #62	; 0x3e
 8003568:	2102      	movs	r1, #2
 800356a:	5499      	strb	r1, [r3, r2]
 800356c:	e023      	b.n	80035b6 <HAL_TIM_PWM_Start+0xf2>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0xba>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	223f      	movs	r2, #63	; 0x3f
 8003578:	2102      	movs	r1, #2
 800357a:	5499      	strb	r1, [r3, r2]
 800357c:	e01b      	b.n	80035b6 <HAL_TIM_PWM_Start+0xf2>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_PWM_Start+0xca>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	2102      	movs	r1, #2
 800358a:	5499      	strb	r1, [r3, r2]
 800358c:	e013      	b.n	80035b6 <HAL_TIM_PWM_Start+0xf2>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b0c      	cmp	r3, #12
 8003592:	d104      	bne.n	800359e <HAL_TIM_PWM_Start+0xda>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2241      	movs	r2, #65	; 0x41
 8003598:	2102      	movs	r1, #2
 800359a:	5499      	strb	r1, [r3, r2]
 800359c:	e00b      	b.n	80035b6 <HAL_TIM_PWM_Start+0xf2>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0xea>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2242      	movs	r2, #66	; 0x42
 80035a8:	2102      	movs	r1, #2
 80035aa:	5499      	strb	r1, [r3, r2]
 80035ac:	e003      	b.n	80035b6 <HAL_TIM_PWM_Start+0xf2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2243      	movs	r2, #67	; 0x43
 80035b2:	2102      	movs	r1, #2
 80035b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6839      	ldr	r1, [r7, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fe3e 	bl	8004240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <HAL_TIM_PWM_Start+0x1c4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_PWM_Start+0x128>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2e      	ldr	r2, [pc, #184]	; (800368c <HAL_TIM_PWM_Start+0x1c8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_PWM_Start+0x128>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_TIM_PWM_Start+0x1cc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_PWM_Start+0x128>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_TIM_PWM_Start+0x1d0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_PWM_Start+0x12c>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_TIM_PWM_Start+0x12e>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0209      	lsls	r1, r1, #8
 8003604:	430a      	orrs	r2, r1
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <HAL_TIM_PWM_Start+0x1c4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d014      	beq.n	800363c <HAL_TIM_PWM_Start+0x178>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	429a      	cmp	r2, r3
 800361c:	d00e      	beq.n	800363c <HAL_TIM_PWM_Start+0x178>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_TIM_PWM_Start+0x1d4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d009      	beq.n	800363c <HAL_TIM_PWM_Start+0x178>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1b      	ldr	r2, [pc, #108]	; (800369c <HAL_TIM_PWM_Start+0x1d8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_PWM_Start+0x178>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <HAL_TIM_PWM_Start+0x1c8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d116      	bne.n	800366a <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <HAL_TIM_PWM_Start+0x1dc>)
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d016      	beq.n	800367c <HAL_TIM_PWM_Start+0x1b8>
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	025b      	lsls	r3, r3, #9
 8003654:	429a      	cmp	r2, r3
 8003656:	d011      	beq.n	800367c <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2101      	movs	r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003668:	e008      	b.n	800367c <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e000      	b.n	800367e <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	00010007 	.word	0x00010007

080036a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2317      	movs	r3, #23
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	223c      	movs	r2, #60	; 0x3c
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0e5      	b.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	223c      	movs	r2, #60	; 0x3c
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b14      	cmp	r3, #20
 80036d2:	d900      	bls.n	80036d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036d4:	e0d1      	b.n	800387a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	009a      	lsls	r2, r3, #2
 80036da:	4b70      	ldr	r3, [pc, #448]	; (800389c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	0011      	movs	r1, r2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 fa48 	bl	8003b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2108      	movs	r1, #8
 80036fc:	430a      	orrs	r2, r1
 80036fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2104      	movs	r1, #4
 800370c:	438a      	bics	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	619a      	str	r2, [r3, #24]
      break;
 8003722:	e0af      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f000 fab1 	bl	8003c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0109      	lsls	r1, r1, #4
 8003740:	430a      	orrs	r2, r1
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4954      	ldr	r1, [pc, #336]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003750:	400a      	ands	r2, r1
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]
      break;
 8003768:	e08c      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f000 fb12 	bl	8003d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2108      	movs	r1, #8
 8003784:	430a      	orrs	r2, r1
 8003786:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2104      	movs	r1, #4
 8003794:	438a      	bics	r2, r1
 8003796:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69d9      	ldr	r1, [r3, #28]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	61da      	str	r2, [r3, #28]
      break;
 80037aa:	e06b      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 fb79 	bl	8003eac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0109      	lsls	r1, r1, #4
 80037c8:	430a      	orrs	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4932      	ldr	r1, [pc, #200]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037d8:	400a      	ands	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69d9      	ldr	r1, [r3, #28]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
      break;
 80037f0:	e048      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	0011      	movs	r1, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 fbc0 	bl	8003f80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2108      	movs	r1, #8
 800380c:	430a      	orrs	r2, r1
 800380e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2104      	movs	r1, #4
 800381c:	438a      	bics	r2, r1
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003832:	e027      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fbff 	bl	8004040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	0109      	lsls	r1, r1, #4
 8003850:	430a      	orrs	r2, r1
 8003852:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4910      	ldr	r1, [pc, #64]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003860:	400a      	ands	r2, r1
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003878:	e004      	b.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800387a:	2317      	movs	r3, #23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
      break;
 8003882:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	223c      	movs	r2, #60	; 0x3c
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]

  return status;
 800388c:	2317      	movs	r3, #23
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b006      	add	sp, #24
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	08004424 	.word	0x08004424
 80038a0:	fffffbff 	.word	0xfffffbff

080038a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	230f      	movs	r3, #15
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223c      	movs	r2, #60	; 0x3c
 80038ba:	5c9b      	ldrb	r3, [r3, r2]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_ConfigClockSource+0x20>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0bc      	b.n	8003a3e <HAL_TIM_ConfigClockSource+0x19a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	223c      	movs	r2, #60	; 0x3c
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	223d      	movs	r2, #61	; 0x3d
 80038d0:	2102      	movs	r1, #2
 80038d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4a5a      	ldr	r2, [pc, #360]	; (8003a48 <HAL_TIM_ConfigClockSource+0x1a4>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a59      	ldr	r2, [pc, #356]	; (8003a4c <HAL_TIM_ConfigClockSource+0x1a8>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	0192      	lsls	r2, r2, #6
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0xde>
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0192      	lsls	r2, r2, #6
 8003904:	4293      	cmp	r3, r2
 8003906:	d900      	bls.n	800390a <HAL_TIM_ConfigClockSource+0x66>
 8003908:	e088      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	0152      	lsls	r2, r2, #5
 800390e:	4293      	cmp	r3, r2
 8003910:	d100      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x70>
 8003912:	e088      	b.n	8003a26 <HAL_TIM_ConfigClockSource+0x182>
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	0152      	lsls	r2, r2, #5
 8003918:	4293      	cmp	r3, r2
 800391a:	d900      	bls.n	800391e <HAL_TIM_ConfigClockSource+0x7a>
 800391c:	e07e      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800391e:	2b70      	cmp	r3, #112	; 0x70
 8003920:	d018      	beq.n	8003954 <HAL_TIM_ConfigClockSource+0xb0>
 8003922:	d900      	bls.n	8003926 <HAL_TIM_ConfigClockSource+0x82>
 8003924:	e07a      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 8003926:	2b60      	cmp	r3, #96	; 0x60
 8003928:	d04f      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x126>
 800392a:	d900      	bls.n	800392e <HAL_TIM_ConfigClockSource+0x8a>
 800392c:	e076      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800392e:	2b50      	cmp	r3, #80	; 0x50
 8003930:	d03b      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x106>
 8003932:	d900      	bls.n	8003936 <HAL_TIM_ConfigClockSource+0x92>
 8003934:	e072      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d057      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x146>
 800393a:	d900      	bls.n	800393e <HAL_TIM_ConfigClockSource+0x9a>
 800393c:	e06e      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800393e:	2b30      	cmp	r3, #48	; 0x30
 8003940:	d063      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 8003942:	d86b      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d060      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 8003948:	d868      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d05d      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 800394e:	2b10      	cmp	r3, #16
 8003950:	d05b      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x166>
 8003952:	e063      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f000 fc4c 	bl	8004200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2277      	movs	r2, #119	; 0x77
 8003974:	4313      	orrs	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	609a      	str	r2, [r3, #8]
      break;
 8003980:	e052      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f000 fc35 	bl	8004200 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	01c9      	lsls	r1, r1, #7
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
      break;
 80039a8:	e03e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	001a      	movs	r2, r3
 80039b8:	f000 fba6 	bl	8004108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2150      	movs	r1, #80	; 0x50
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fc00 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e02e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	001a      	movs	r2, r3
 80039d8:	f000 fbc4 	bl	8004164 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2160      	movs	r1, #96	; 0x60
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 fbf0 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e01e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	001a      	movs	r2, r3
 80039f8:	f000 fb86 	bl	8004108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 fbe0 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 8003a08:	e00e      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	0019      	movs	r1, r3
 8003a14:	0010      	movs	r0, r2
 8003a16:	f000 fbd7 	bl	80041c8 <TIM_ITRx_SetConfig>
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
      break;
 8003a24:	e000      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	223d      	movs	r2, #61	; 0x3d
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	223c      	movs	r2, #60	; 0x3c
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

  return status;
 8003a38:	230f      	movs	r3, #15
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	ffceff88 	.word	0xffceff88
 8003a4c:	ffff00ff 	.word	0xffff00ff

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3f      	ldr	r2, [pc, #252]	; (8003b60 <TIM_Base_SetConfig+0x110>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00c      	beq.n	8003a82 <TIM_Base_SetConfig+0x32>
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x32>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x32>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	; (8003b68 <TIM_Base_SetConfig+0x118>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2270      	movs	r2, #112	; 0x70
 8003a86:	4393      	bics	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <TIM_Base_SetConfig+0x110>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d01c      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	05db      	lsls	r3, r3, #23
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d017      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <TIM_Base_SetConfig+0x118>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_Base_SetConfig+0x86>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	4393      	bics	r3, r2
 8003aee:	001a      	movs	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <TIM_Base_SetConfig+0x110>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0xde>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0xde>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0xde>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d103      	bne.n	8003b36 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2201      	movs	r2, #1
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d106      	bne.n	8003b56 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4393      	bics	r3, r2
 8003b50:	001a      	movs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	611a      	str	r2, [r3, #16]
  }
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40002000 	.word	0x40002000
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800
 8003b7c:	fffffcff 	.word	0xfffffcff

08003b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	2201      	movs	r2, #1
 8003b96:	4393      	bics	r3, r2
 8003b98:	001a      	movs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a32      	ldr	r2, [pc, #200]	; (8003c78 <TIM_OC1_SetConfig+0xf8>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4393      	bics	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <TIM_OC1_SetConfig+0xfc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_OC1_SetConfig+0x76>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a27      	ldr	r2, [pc, #156]	; (8003c80 <TIM_OC1_SetConfig+0x100>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_OC1_SetConfig+0x76>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a26      	ldr	r2, [pc, #152]	; (8003c84 <TIM_OC1_SetConfig+0x104>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC1_SetConfig+0x76>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <TIM_OC1_SetConfig+0x108>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10c      	bne.n	8003c10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	4393      	bics	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4393      	bics	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <TIM_OC1_SetConfig+0xfc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_OC1_SetConfig+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <TIM_OC1_SetConfig+0x100>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC1_SetConfig+0xb0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <TIM_OC1_SetConfig+0x104>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC1_SetConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <TIM_OC1_SetConfig+0x108>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <TIM_OC1_SetConfig+0x10c>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <TIM_OC1_SetConfig+0x110>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b006      	add	sp, #24
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	fffeff8f 	.word	0xfffeff8f
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800
 8003c8c:	fffffeff 	.word	0xfffffeff
 8003c90:	fffffdff 	.word	0xfffffdff

08003c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	2210      	movs	r2, #16
 8003caa:	4393      	bics	r3, r2
 8003cac:	001a      	movs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <TIM_OC2_SetConfig+0xe8>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <TIM_OC2_SetConfig+0xec>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	4393      	bics	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <TIM_OC2_SetConfig+0xf0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10d      	bne.n	8003d12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	4393      	bics	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1b      	ldr	r2, [pc, #108]	; (8003d84 <TIM_OC2_SetConfig+0xf0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_OC2_SetConfig+0x9e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <TIM_OC2_SetConfig+0xf4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <TIM_OC2_SetConfig+0x9e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <TIM_OC2_SetConfig+0xf8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_OC2_SetConfig+0x9e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <TIM_OC2_SetConfig+0xfc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d113      	bne.n	8003d5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <TIM_OC2_SetConfig+0x100>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <TIM_OC2_SetConfig+0x104>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b006      	add	sp, #24
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	feff8fff 	.word	0xfeff8fff
 8003d80:	fffffcff 	.word	0xfffffcff
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800
 8003d94:	fffffbff 	.word	0xfffffbff
 8003d98:	fffff7ff 	.word	0xfffff7ff

08003d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4a33      	ldr	r2, [pc, #204]	; (8003e80 <TIM_OC3_SetConfig+0xe4>)
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <TIM_OC3_SetConfig+0xe8>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <TIM_OC3_SetConfig+0xec>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <TIM_OC3_SetConfig+0xf0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10d      	bne.n	8003e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <TIM_OC3_SetConfig+0xf4>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <TIM_OC3_SetConfig+0xf8>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <TIM_OC3_SetConfig+0xf0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_OC3_SetConfig+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC3_SetConfig+0xfc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_OC3_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC3_SetConfig+0x100>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_OC3_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <TIM_OC3_SetConfig+0x104>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d113      	bne.n	8003e5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <TIM_OC3_SetConfig+0x108>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <TIM_OC3_SetConfig+0x10c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	621a      	str	r2, [r3, #32]
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b006      	add	sp, #24
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	fffffeff 	.word	0xfffffeff
 8003e84:	fffeff8f 	.word	0xfffeff8f
 8003e88:	fffffdff 	.word	0xfffffdff
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	fffff7ff 	.word	0xfffff7ff
 8003e94:	fffffbff 	.word	0xfffffbff
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800
 8003ea4:	ffffefff 	.word	0xffffefff
 8003ea8:	ffffdfff 	.word	0xffffdfff

08003eac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <TIM_OC4_SetConfig+0xb0>)
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <TIM_OC4_SetConfig+0xb4>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <TIM_OC4_SetConfig+0xb8>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <TIM_OC4_SetConfig+0xbc>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	031b      	lsls	r3, r3, #12
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <TIM_OC4_SetConfig+0xc0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_OC4_SetConfig+0x78>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <TIM_OC4_SetConfig+0xc4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_OC4_SetConfig+0x78>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <TIM_OC4_SetConfig+0xc8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC4_SetConfig+0x78>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC4_SetConfig+0xcc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d109      	bne.n	8003f38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC4_SetConfig+0xd0>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b006      	add	sp, #24
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	ffffefff 	.word	0xffffefff
 8003f60:	feff8fff 	.word	0xfeff8fff
 8003f64:	fffffcff 	.word	0xfffffcff
 8003f68:	ffffdfff 	.word	0xffffdfff
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800
 8003f7c:	ffffbfff 	.word	0xffffbfff

08003f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <TIM_OC5_SetConfig+0xa4>)
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <TIM_OC5_SetConfig+0xa8>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <TIM_OC5_SetConfig+0xac>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <TIM_OC5_SetConfig+0xb0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00b      	beq.n	8003fee <TIM_OC5_SetConfig+0x6e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a16      	ldr	r2, [pc, #88]	; (8004034 <TIM_OC5_SetConfig+0xb4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d007      	beq.n	8003fee <TIM_OC5_SetConfig+0x6e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <TIM_OC5_SetConfig+0xb8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d003      	beq.n	8003fee <TIM_OC5_SetConfig+0x6e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <TIM_OC5_SetConfig+0xbc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d109      	bne.n	8004002 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <TIM_OC5_SetConfig+0xa4>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	b006      	add	sp, #24
 8004022:	bd80      	pop	{r7, pc}
 8004024:	fffeffff 	.word	0xfffeffff
 8004028:	fffeff8f 	.word	0xfffeff8f
 800402c:	fffdffff 	.word	0xfffdffff
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800

08004040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	4a24      	ldr	r2, [pc, #144]	; (80040e8 <TIM_OC6_SetConfig+0xa8>)
 8004056:	401a      	ands	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a20      	ldr	r2, [pc, #128]	; (80040ec <TIM_OC6_SetConfig+0xac>)
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <TIM_OC6_SetConfig+0xb0>)
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	051b      	lsls	r3, r3, #20
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <TIM_OC6_SetConfig+0xb4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_OC6_SetConfig+0x70>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <TIM_OC6_SetConfig+0xb8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_OC6_SetConfig+0x70>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <TIM_OC6_SetConfig+0xbc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC6_SetConfig+0x70>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a15      	ldr	r2, [pc, #84]	; (8004100 <TIM_OC6_SetConfig+0xc0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d109      	bne.n	80040c4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4a14      	ldr	r2, [pc, #80]	; (8004104 <TIM_OC6_SetConfig+0xc4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	029b      	lsls	r3, r3, #10
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b006      	add	sp, #24
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	ffefffff 	.word	0xffefffff
 80040ec:	feff8fff 	.word	0xfeff8fff
 80040f0:	ffdfffff 	.word	0xffdfffff
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	fffbffff 	.word	0xfffbffff

08004108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	2201      	movs	r2, #1
 8004120:	4393      	bics	r3, r2
 8004122:	001a      	movs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	22f0      	movs	r2, #240	; 0xf0
 8004132:	4393      	bics	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	220a      	movs	r2, #10
 8004144:	4393      	bics	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b006      	add	sp, #24
 8004162:	bd80      	pop	{r7, pc}

08004164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	2210      	movs	r2, #16
 800417c:	4393      	bics	r3, r2
 800417e:	001a      	movs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <TIM_TI2_ConfigInputStage+0x60>)
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	22a0      	movs	r2, #160	; 0xa0
 80041a0:	4393      	bics	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	ffff0fff 	.word	0xffff0fff

080041c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a08      	ldr	r2, [pc, #32]	; (80041fc <TIM_ITRx_SetConfig+0x34>)
 80041dc:	4013      	ands	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	2207      	movs	r2, #7
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	ffcfff8f 	.word	0xffcfff8f

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <TIM_ETR_SetConfig+0x3c>)
 8004218:	4013      	ands	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b006      	add	sp, #24
 800423a:	bd80      	pop	{r7, pc}
 800423c:	ffff00ff 	.word	0xffff00ff

08004240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	221f      	movs	r2, #31
 8004250:	4013      	ands	r3, r2
 8004252:	2201      	movs	r2, #1
 8004254:	409a      	lsls	r2, r3
 8004256:	0013      	movs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	43d2      	mvns	r2, r2
 8004262:	401a      	ands	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	211f      	movs	r1, #31
 8004270:	400b      	ands	r3, r1
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4099      	lsls	r1, r3
 8004276:	000b      	movs	r3, r1
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b006      	add	sp, #24
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	223c      	movs	r2, #60	; 0x3c
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e05a      	b.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	223c      	movs	r2, #60	; 0x3c
 80042a4:	2101      	movs	r1, #1
 80042a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223d      	movs	r2, #61	; 0x3d
 80042ac:	2102      	movs	r1, #2
 80042ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a25      	ldr	r2, [pc, #148]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2270      	movs	r2, #112	; 0x70
 80042e0:	4393      	bics	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d014      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	05db      	lsls	r3, r3, #23
 8004308:	429a      	cmp	r2, r3
 800430a:	d00e      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10c      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2280      	movs	r2, #128	; 0x80
 800432e:	4393      	bics	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	223d      	movs	r2, #61	; 0x3d
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	223c      	movs	r2, #60	; 0x3c
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	40012c00 	.word	0x40012c00
 8004364:	ff0fffff 	.word	0xff0fffff
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40014000 	.word	0x40014000

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	2600      	movs	r6, #0
 8004378:	4d0c      	ldr	r5, [pc, #48]	; (80043ac <__libc_init_array+0x38>)
 800437a:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	2600      	movs	r6, #0
 8004386:	f000 f821 	bl	80043cc <_init>
 800438a:	4d0a      	ldr	r5, [pc, #40]	; (80043b4 <__libc_init_array+0x40>)
 800438c:	4c0a      	ldr	r4, [pc, #40]	; (80043b8 <__libc_init_array+0x44>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	00b3      	lsls	r3, r6, #2
 800439a:	58eb      	ldr	r3, [r5, r3]
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	00b3      	lsls	r3, r6, #2
 80043a4:	58eb      	ldr	r3, [r5, r3]
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08004478 	.word	0x08004478
 80043b0:	08004478 	.word	0x08004478
 80043b4:	08004478 	.word	0x08004478
 80043b8:	0800447c 	.word	0x0800447c

080043bc <memset>:
 80043bc:	0003      	movs	r3, r0
 80043be:	1882      	adds	r2, r0, r2
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d100      	bne.n	80043c6 <memset+0xa>
 80043c4:	4770      	bx	lr
 80043c6:	7019      	strb	r1, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	e7f9      	b.n	80043c0 <memset+0x4>

080043cc <_init>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr

080043d8 <_fini>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr
