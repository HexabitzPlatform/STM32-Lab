
s6_ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004428  08004428  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004428  08004428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000070  080044a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080044a0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009224  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a16  00000000  00000000  000292bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002b548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b163  00000000  00000000  0002bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007dce  00000000  00000000  00046e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b1114  00000000  00000000  0004ec01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffd15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002028  00000000  00000000  000ffd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004310 	.word	0x08004310

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004310 	.word	0x08004310

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_fmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	464e      	mov	r6, r9
 8000220:	4657      	mov	r7, sl
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	0243      	lsls	r3, r0, #9
 800022a:	0a5b      	lsrs	r3, r3, #9
 800022c:	0045      	lsls	r5, r0, #1
 800022e:	b083      	sub	sp, #12
 8000230:	1c0f      	adds	r7, r1, #0
 8000232:	4699      	mov	r9, r3
 8000234:	0e2d      	lsrs	r5, r5, #24
 8000236:	0fc6      	lsrs	r6, r0, #31
 8000238:	2d00      	cmp	r5, #0
 800023a:	d057      	beq.n	80002ec <__aeabi_fmul+0xd0>
 800023c:	2dff      	cmp	r5, #255	; 0xff
 800023e:	d024      	beq.n	800028a <__aeabi_fmul+0x6e>
 8000240:	2080      	movs	r0, #128	; 0x80
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	04c0      	lsls	r0, r0, #19
 8000246:	4318      	orrs	r0, r3
 8000248:	2300      	movs	r3, #0
 800024a:	4681      	mov	r9, r0
 800024c:	469a      	mov	sl, r3
 800024e:	469b      	mov	fp, r3
 8000250:	3d7f      	subs	r5, #127	; 0x7f
 8000252:	027c      	lsls	r4, r7, #9
 8000254:	007a      	lsls	r2, r7, #1
 8000256:	0ffb      	lsrs	r3, r7, #31
 8000258:	0a64      	lsrs	r4, r4, #9
 800025a:	0e12      	lsrs	r2, r2, #24
 800025c:	4698      	mov	r8, r3
 800025e:	d023      	beq.n	80002a8 <__aeabi_fmul+0x8c>
 8000260:	2aff      	cmp	r2, #255	; 0xff
 8000262:	d04b      	beq.n	80002fc <__aeabi_fmul+0xe0>
 8000264:	00e3      	lsls	r3, r4, #3
 8000266:	2480      	movs	r4, #128	; 0x80
 8000268:	2000      	movs	r0, #0
 800026a:	04e4      	lsls	r4, r4, #19
 800026c:	3a7f      	subs	r2, #127	; 0x7f
 800026e:	431c      	orrs	r4, r3
 8000270:	18ad      	adds	r5, r5, r2
 8000272:	1c6b      	adds	r3, r5, #1
 8000274:	4647      	mov	r7, r8
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	4653      	mov	r3, sl
 800027a:	4077      	eors	r7, r6
 800027c:	003a      	movs	r2, r7
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d848      	bhi.n	8000314 <__aeabi_fmul+0xf8>
 8000282:	497d      	ldr	r1, [pc, #500]	; (8000478 <__aeabi_fmul+0x25c>)
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	58cb      	ldr	r3, [r1, r3]
 8000288:	469f      	mov	pc, r3
 800028a:	2b00      	cmp	r3, #0
 800028c:	d000      	beq.n	8000290 <__aeabi_fmul+0x74>
 800028e:	e085      	b.n	800039c <__aeabi_fmul+0x180>
 8000290:	3308      	adds	r3, #8
 8000292:	469a      	mov	sl, r3
 8000294:	3b06      	subs	r3, #6
 8000296:	469b      	mov	fp, r3
 8000298:	027c      	lsls	r4, r7, #9
 800029a:	007a      	lsls	r2, r7, #1
 800029c:	0ffb      	lsrs	r3, r7, #31
 800029e:	25ff      	movs	r5, #255	; 0xff
 80002a0:	0a64      	lsrs	r4, r4, #9
 80002a2:	0e12      	lsrs	r2, r2, #24
 80002a4:	4698      	mov	r8, r3
 80002a6:	d1db      	bne.n	8000260 <__aeabi_fmul+0x44>
 80002a8:	2c00      	cmp	r4, #0
 80002aa:	d000      	beq.n	80002ae <__aeabi_fmul+0x92>
 80002ac:	e090      	b.n	80003d0 <__aeabi_fmul+0x1b4>
 80002ae:	4652      	mov	r2, sl
 80002b0:	2301      	movs	r3, #1
 80002b2:	431a      	orrs	r2, r3
 80002b4:	4692      	mov	sl, r2
 80002b6:	2001      	movs	r0, #1
 80002b8:	e7db      	b.n	8000272 <__aeabi_fmul+0x56>
 80002ba:	464c      	mov	r4, r9
 80002bc:	4658      	mov	r0, fp
 80002be:	0017      	movs	r7, r2
 80002c0:	2802      	cmp	r0, #2
 80002c2:	d024      	beq.n	800030e <__aeabi_fmul+0xf2>
 80002c4:	2803      	cmp	r0, #3
 80002c6:	d100      	bne.n	80002ca <__aeabi_fmul+0xae>
 80002c8:	e0cf      	b.n	800046a <__aeabi_fmul+0x24e>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	2801      	cmp	r0, #1
 80002d0:	d14d      	bne.n	800036e <__aeabi_fmul+0x152>
 80002d2:	0258      	lsls	r0, r3, #9
 80002d4:	05d2      	lsls	r2, r2, #23
 80002d6:	0a40      	lsrs	r0, r0, #9
 80002d8:	07ff      	lsls	r7, r7, #31
 80002da:	4310      	orrs	r0, r2
 80002dc:	4338      	orrs	r0, r7
 80002de:	b003      	add	sp, #12
 80002e0:	bc3c      	pop	{r2, r3, r4, r5}
 80002e2:	4690      	mov	r8, r2
 80002e4:	4699      	mov	r9, r3
 80002e6:	46a2      	mov	sl, r4
 80002e8:	46ab      	mov	fp, r5
 80002ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d15b      	bne.n	80003a8 <__aeabi_fmul+0x18c>
 80002f0:	2304      	movs	r3, #4
 80002f2:	469a      	mov	sl, r3
 80002f4:	3b03      	subs	r3, #3
 80002f6:	2500      	movs	r5, #0
 80002f8:	469b      	mov	fp, r3
 80002fa:	e7aa      	b.n	8000252 <__aeabi_fmul+0x36>
 80002fc:	35ff      	adds	r5, #255	; 0xff
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d160      	bne.n	80003c4 <__aeabi_fmul+0x1a8>
 8000302:	4652      	mov	r2, sl
 8000304:	2302      	movs	r3, #2
 8000306:	431a      	orrs	r2, r3
 8000308:	4692      	mov	sl, r2
 800030a:	2002      	movs	r0, #2
 800030c:	e7b1      	b.n	8000272 <__aeabi_fmul+0x56>
 800030e:	22ff      	movs	r2, #255	; 0xff
 8000310:	2300      	movs	r3, #0
 8000312:	e7de      	b.n	80002d2 <__aeabi_fmul+0xb6>
 8000314:	464b      	mov	r3, r9
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	469c      	mov	ip, r3
 800031a:	464b      	mov	r3, r9
 800031c:	0426      	lsls	r6, r4, #16
 800031e:	0c36      	lsrs	r6, r6, #16
 8000320:	0418      	lsls	r0, r3, #16
 8000322:	4661      	mov	r1, ip
 8000324:	0033      	movs	r3, r6
 8000326:	0c22      	lsrs	r2, r4, #16
 8000328:	4664      	mov	r4, ip
 800032a:	0c00      	lsrs	r0, r0, #16
 800032c:	4343      	muls	r3, r0
 800032e:	434e      	muls	r6, r1
 8000330:	4350      	muls	r0, r2
 8000332:	4354      	muls	r4, r2
 8000334:	1980      	adds	r0, r0, r6
 8000336:	0c1a      	lsrs	r2, r3, #16
 8000338:	1812      	adds	r2, r2, r0
 800033a:	4296      	cmp	r6, r2
 800033c:	d903      	bls.n	8000346 <__aeabi_fmul+0x12a>
 800033e:	2180      	movs	r1, #128	; 0x80
 8000340:	0249      	lsls	r1, r1, #9
 8000342:	468c      	mov	ip, r1
 8000344:	4464      	add	r4, ip
 8000346:	041b      	lsls	r3, r3, #16
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	0410      	lsls	r0, r2, #16
 800034c:	18c0      	adds	r0, r0, r3
 800034e:	0183      	lsls	r3, r0, #6
 8000350:	1e5e      	subs	r6, r3, #1
 8000352:	41b3      	sbcs	r3, r6
 8000354:	0e80      	lsrs	r0, r0, #26
 8000356:	4318      	orrs	r0, r3
 8000358:	0c13      	lsrs	r3, r2, #16
 800035a:	191b      	adds	r3, r3, r4
 800035c:	019b      	lsls	r3, r3, #6
 800035e:	4303      	orrs	r3, r0
 8000360:	001c      	movs	r4, r3
 8000362:	0123      	lsls	r3, r4, #4
 8000364:	d579      	bpl.n	800045a <__aeabi_fmul+0x23e>
 8000366:	2301      	movs	r3, #1
 8000368:	0862      	lsrs	r2, r4, #1
 800036a:	401c      	ands	r4, r3
 800036c:	4314      	orrs	r4, r2
 800036e:	9a01      	ldr	r2, [sp, #4]
 8000370:	327f      	adds	r2, #127	; 0x7f
 8000372:	2a00      	cmp	r2, #0
 8000374:	dd4d      	ble.n	8000412 <__aeabi_fmul+0x1f6>
 8000376:	0763      	lsls	r3, r4, #29
 8000378:	d004      	beq.n	8000384 <__aeabi_fmul+0x168>
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	2b04      	cmp	r3, #4
 8000380:	d000      	beq.n	8000384 <__aeabi_fmul+0x168>
 8000382:	3404      	adds	r4, #4
 8000384:	0123      	lsls	r3, r4, #4
 8000386:	d503      	bpl.n	8000390 <__aeabi_fmul+0x174>
 8000388:	4b3c      	ldr	r3, [pc, #240]	; (800047c <__aeabi_fmul+0x260>)
 800038a:	9a01      	ldr	r2, [sp, #4]
 800038c:	401c      	ands	r4, r3
 800038e:	3280      	adds	r2, #128	; 0x80
 8000390:	2afe      	cmp	r2, #254	; 0xfe
 8000392:	dcbc      	bgt.n	800030e <__aeabi_fmul+0xf2>
 8000394:	01a3      	lsls	r3, r4, #6
 8000396:	0a5b      	lsrs	r3, r3, #9
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	e79a      	b.n	80002d2 <__aeabi_fmul+0xb6>
 800039c:	230c      	movs	r3, #12
 800039e:	469a      	mov	sl, r3
 80003a0:	3b09      	subs	r3, #9
 80003a2:	25ff      	movs	r5, #255	; 0xff
 80003a4:	469b      	mov	fp, r3
 80003a6:	e754      	b.n	8000252 <__aeabi_fmul+0x36>
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fbeb 	bl	8000b84 <__clzsi2>
 80003ae:	464a      	mov	r2, r9
 80003b0:	1f43      	subs	r3, r0, #5
 80003b2:	2576      	movs	r5, #118	; 0x76
 80003b4:	409a      	lsls	r2, r3
 80003b6:	2300      	movs	r3, #0
 80003b8:	426d      	negs	r5, r5
 80003ba:	4691      	mov	r9, r2
 80003bc:	1a2d      	subs	r5, r5, r0
 80003be:	469a      	mov	sl, r3
 80003c0:	469b      	mov	fp, r3
 80003c2:	e746      	b.n	8000252 <__aeabi_fmul+0x36>
 80003c4:	4652      	mov	r2, sl
 80003c6:	2303      	movs	r3, #3
 80003c8:	431a      	orrs	r2, r3
 80003ca:	4692      	mov	sl, r2
 80003cc:	2003      	movs	r0, #3
 80003ce:	e750      	b.n	8000272 <__aeabi_fmul+0x56>
 80003d0:	0020      	movs	r0, r4
 80003d2:	f000 fbd7 	bl	8000b84 <__clzsi2>
 80003d6:	1f43      	subs	r3, r0, #5
 80003d8:	1a2d      	subs	r5, r5, r0
 80003da:	409c      	lsls	r4, r3
 80003dc:	3d76      	subs	r5, #118	; 0x76
 80003de:	2000      	movs	r0, #0
 80003e0:	e747      	b.n	8000272 <__aeabi_fmul+0x56>
 80003e2:	2380      	movs	r3, #128	; 0x80
 80003e4:	2700      	movs	r7, #0
 80003e6:	03db      	lsls	r3, r3, #15
 80003e8:	22ff      	movs	r2, #255	; 0xff
 80003ea:	e772      	b.n	80002d2 <__aeabi_fmul+0xb6>
 80003ec:	4642      	mov	r2, r8
 80003ee:	e766      	b.n	80002be <__aeabi_fmul+0xa2>
 80003f0:	464c      	mov	r4, r9
 80003f2:	0032      	movs	r2, r6
 80003f4:	4658      	mov	r0, fp
 80003f6:	e762      	b.n	80002be <__aeabi_fmul+0xa2>
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	464a      	mov	r2, r9
 80003fc:	03db      	lsls	r3, r3, #15
 80003fe:	421a      	tst	r2, r3
 8000400:	d022      	beq.n	8000448 <__aeabi_fmul+0x22c>
 8000402:	421c      	tst	r4, r3
 8000404:	d120      	bne.n	8000448 <__aeabi_fmul+0x22c>
 8000406:	4323      	orrs	r3, r4
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	0a5b      	lsrs	r3, r3, #9
 800040c:	4647      	mov	r7, r8
 800040e:	22ff      	movs	r2, #255	; 0xff
 8000410:	e75f      	b.n	80002d2 <__aeabi_fmul+0xb6>
 8000412:	2301      	movs	r3, #1
 8000414:	1a9a      	subs	r2, r3, r2
 8000416:	2a1b      	cmp	r2, #27
 8000418:	dc21      	bgt.n	800045e <__aeabi_fmul+0x242>
 800041a:	0023      	movs	r3, r4
 800041c:	9901      	ldr	r1, [sp, #4]
 800041e:	40d3      	lsrs	r3, r2
 8000420:	319e      	adds	r1, #158	; 0x9e
 8000422:	408c      	lsls	r4, r1
 8000424:	001a      	movs	r2, r3
 8000426:	0023      	movs	r3, r4
 8000428:	1e5c      	subs	r4, r3, #1
 800042a:	41a3      	sbcs	r3, r4
 800042c:	4313      	orrs	r3, r2
 800042e:	075a      	lsls	r2, r3, #29
 8000430:	d004      	beq.n	800043c <__aeabi_fmul+0x220>
 8000432:	220f      	movs	r2, #15
 8000434:	401a      	ands	r2, r3
 8000436:	2a04      	cmp	r2, #4
 8000438:	d000      	beq.n	800043c <__aeabi_fmul+0x220>
 800043a:	3304      	adds	r3, #4
 800043c:	015a      	lsls	r2, r3, #5
 800043e:	d411      	bmi.n	8000464 <__aeabi_fmul+0x248>
 8000440:	019b      	lsls	r3, r3, #6
 8000442:	0a5b      	lsrs	r3, r3, #9
 8000444:	2200      	movs	r2, #0
 8000446:	e744      	b.n	80002d2 <__aeabi_fmul+0xb6>
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	464a      	mov	r2, r9
 800044c:	03db      	lsls	r3, r3, #15
 800044e:	4313      	orrs	r3, r2
 8000450:	025b      	lsls	r3, r3, #9
 8000452:	0a5b      	lsrs	r3, r3, #9
 8000454:	0037      	movs	r7, r6
 8000456:	22ff      	movs	r2, #255	; 0xff
 8000458:	e73b      	b.n	80002d2 <__aeabi_fmul+0xb6>
 800045a:	9501      	str	r5, [sp, #4]
 800045c:	e787      	b.n	800036e <__aeabi_fmul+0x152>
 800045e:	2200      	movs	r2, #0
 8000460:	2300      	movs	r3, #0
 8000462:	e736      	b.n	80002d2 <__aeabi_fmul+0xb6>
 8000464:	2201      	movs	r2, #1
 8000466:	2300      	movs	r3, #0
 8000468:	e733      	b.n	80002d2 <__aeabi_fmul+0xb6>
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	03db      	lsls	r3, r3, #15
 800046e:	4323      	orrs	r3, r4
 8000470:	025b      	lsls	r3, r3, #9
 8000472:	0a5b      	lsrs	r3, r3, #9
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	e72c      	b.n	80002d2 <__aeabi_fmul+0xb6>
 8000478:	08004334 	.word	0x08004334
 800047c:	f7ffffff 	.word	0xf7ffffff

08000480 <__aeabi_dmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4657      	mov	r7, sl
 8000484:	46de      	mov	lr, fp
 8000486:	464e      	mov	r6, r9
 8000488:	4645      	mov	r5, r8
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	4683      	mov	fp, r0
 800048e:	0006      	movs	r6, r0
 8000490:	030f      	lsls	r7, r1, #12
 8000492:	0048      	lsls	r0, r1, #1
 8000494:	b087      	sub	sp, #28
 8000496:	4692      	mov	sl, r2
 8000498:	001d      	movs	r5, r3
 800049a:	0b3f      	lsrs	r7, r7, #12
 800049c:	0d40      	lsrs	r0, r0, #21
 800049e:	0fcc      	lsrs	r4, r1, #31
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d100      	bne.n	80004a6 <__aeabi_dmul+0x26>
 80004a4:	e06f      	b.n	8000586 <__aeabi_dmul+0x106>
 80004a6:	4bde      	ldr	r3, [pc, #888]	; (8000820 <__aeabi_dmul+0x3a0>)
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d038      	beq.n	800051e <__aeabi_dmul+0x9e>
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	00ff      	lsls	r7, r7, #3
 80004b0:	041b      	lsls	r3, r3, #16
 80004b2:	431f      	orrs	r7, r3
 80004b4:	0f73      	lsrs	r3, r6, #29
 80004b6:	433b      	orrs	r3, r7
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	4bda      	ldr	r3, [pc, #872]	; (8000824 <__aeabi_dmul+0x3a4>)
 80004bc:	2700      	movs	r7, #0
 80004be:	4699      	mov	r9, r3
 80004c0:	2300      	movs	r3, #0
 80004c2:	469b      	mov	fp, r3
 80004c4:	00f6      	lsls	r6, r6, #3
 80004c6:	4481      	add	r9, r0
 80004c8:	032b      	lsls	r3, r5, #12
 80004ca:	0069      	lsls	r1, r5, #1
 80004cc:	0b1b      	lsrs	r3, r3, #12
 80004ce:	4652      	mov	r2, sl
 80004d0:	4698      	mov	r8, r3
 80004d2:	0d49      	lsrs	r1, r1, #21
 80004d4:	0fed      	lsrs	r5, r5, #31
 80004d6:	2900      	cmp	r1, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_dmul+0x5c>
 80004da:	e085      	b.n	80005e8 <__aeabi_dmul+0x168>
 80004dc:	4bd0      	ldr	r3, [pc, #832]	; (8000820 <__aeabi_dmul+0x3a0>)
 80004de:	4299      	cmp	r1, r3
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dmul+0x64>
 80004e2:	e073      	b.n	80005cc <__aeabi_dmul+0x14c>
 80004e4:	4643      	mov	r3, r8
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	041b      	lsls	r3, r3, #16
 80004ec:	4313      	orrs	r3, r2
 80004ee:	4652      	mov	r2, sl
 80004f0:	48cc      	ldr	r0, [pc, #816]	; (8000824 <__aeabi_dmul+0x3a4>)
 80004f2:	0f52      	lsrs	r2, r2, #29
 80004f4:	4684      	mov	ip, r0
 80004f6:	4313      	orrs	r3, r2
 80004f8:	4652      	mov	r2, sl
 80004fa:	2000      	movs	r0, #0
 80004fc:	4461      	add	r1, ip
 80004fe:	00d2      	lsls	r2, r2, #3
 8000500:	4489      	add	r9, r1
 8000502:	0021      	movs	r1, r4
 8000504:	4069      	eors	r1, r5
 8000506:	9100      	str	r1, [sp, #0]
 8000508:	468c      	mov	ip, r1
 800050a:	2101      	movs	r1, #1
 800050c:	4449      	add	r1, r9
 800050e:	468a      	mov	sl, r1
 8000510:	2f0f      	cmp	r7, #15
 8000512:	d900      	bls.n	8000516 <__aeabi_dmul+0x96>
 8000514:	e090      	b.n	8000638 <__aeabi_dmul+0x1b8>
 8000516:	49c4      	ldr	r1, [pc, #784]	; (8000828 <__aeabi_dmul+0x3a8>)
 8000518:	00bf      	lsls	r7, r7, #2
 800051a:	59cf      	ldr	r7, [r1, r7]
 800051c:	46bf      	mov	pc, r7
 800051e:	465b      	mov	r3, fp
 8000520:	433b      	orrs	r3, r7
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	d000      	beq.n	8000528 <__aeabi_dmul+0xa8>
 8000526:	e16a      	b.n	80007fe <__aeabi_dmul+0x37e>
 8000528:	2302      	movs	r3, #2
 800052a:	2708      	movs	r7, #8
 800052c:	2600      	movs	r6, #0
 800052e:	4681      	mov	r9, r0
 8000530:	469b      	mov	fp, r3
 8000532:	e7c9      	b.n	80004c8 <__aeabi_dmul+0x48>
 8000534:	0032      	movs	r2, r6
 8000536:	4658      	mov	r0, fp
 8000538:	9b01      	ldr	r3, [sp, #4]
 800053a:	4661      	mov	r1, ip
 800053c:	9100      	str	r1, [sp, #0]
 800053e:	2802      	cmp	r0, #2
 8000540:	d100      	bne.n	8000544 <__aeabi_dmul+0xc4>
 8000542:	e075      	b.n	8000630 <__aeabi_dmul+0x1b0>
 8000544:	2803      	cmp	r0, #3
 8000546:	d100      	bne.n	800054a <__aeabi_dmul+0xca>
 8000548:	e1fe      	b.n	8000948 <__aeabi_dmul+0x4c8>
 800054a:	2801      	cmp	r0, #1
 800054c:	d000      	beq.n	8000550 <__aeabi_dmul+0xd0>
 800054e:	e12c      	b.n	80007aa <__aeabi_dmul+0x32a>
 8000550:	2300      	movs	r3, #0
 8000552:	2700      	movs	r7, #0
 8000554:	2600      	movs	r6, #0
 8000556:	2500      	movs	r5, #0
 8000558:	033f      	lsls	r7, r7, #12
 800055a:	0d2a      	lsrs	r2, r5, #20
 800055c:	0b3f      	lsrs	r7, r7, #12
 800055e:	48b3      	ldr	r0, [pc, #716]	; (800082c <__aeabi_dmul+0x3ac>)
 8000560:	0512      	lsls	r2, r2, #20
 8000562:	433a      	orrs	r2, r7
 8000564:	4002      	ands	r2, r0
 8000566:	051b      	lsls	r3, r3, #20
 8000568:	4313      	orrs	r3, r2
 800056a:	9a00      	ldr	r2, [sp, #0]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	07d1      	lsls	r1, r2, #31
 8000570:	085b      	lsrs	r3, r3, #1
 8000572:	430b      	orrs	r3, r1
 8000574:	0030      	movs	r0, r6
 8000576:	0019      	movs	r1, r3
 8000578:	b007      	add	sp, #28
 800057a:	bc3c      	pop	{r2, r3, r4, r5}
 800057c:	4690      	mov	r8, r2
 800057e:	4699      	mov	r9, r3
 8000580:	46a2      	mov	sl, r4
 8000582:	46ab      	mov	fp, r5
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	465b      	mov	r3, fp
 8000588:	433b      	orrs	r3, r7
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	d100      	bne.n	8000590 <__aeabi_dmul+0x110>
 800058e:	e12f      	b.n	80007f0 <__aeabi_dmul+0x370>
 8000590:	2f00      	cmp	r7, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_dmul+0x116>
 8000594:	e1a5      	b.n	80008e2 <__aeabi_dmul+0x462>
 8000596:	0038      	movs	r0, r7
 8000598:	f000 faf4 	bl	8000b84 <__clzsi2>
 800059c:	0003      	movs	r3, r0
 800059e:	3b0b      	subs	r3, #11
 80005a0:	2b1c      	cmp	r3, #28
 80005a2:	dd00      	ble.n	80005a6 <__aeabi_dmul+0x126>
 80005a4:	e196      	b.n	80008d4 <__aeabi_dmul+0x454>
 80005a6:	221d      	movs	r2, #29
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	465a      	mov	r2, fp
 80005ac:	0001      	movs	r1, r0
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	465e      	mov	r6, fp
 80005b2:	3908      	subs	r1, #8
 80005b4:	408f      	lsls	r7, r1
 80005b6:	0013      	movs	r3, r2
 80005b8:	408e      	lsls	r6, r1
 80005ba:	433b      	orrs	r3, r7
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	4b9c      	ldr	r3, [pc, #624]	; (8000830 <__aeabi_dmul+0x3b0>)
 80005c0:	2700      	movs	r7, #0
 80005c2:	1a1b      	subs	r3, r3, r0
 80005c4:	4699      	mov	r9, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	469b      	mov	fp, r3
 80005ca:	e77d      	b.n	80004c8 <__aeabi_dmul+0x48>
 80005cc:	4641      	mov	r1, r8
 80005ce:	4653      	mov	r3, sl
 80005d0:	430b      	orrs	r3, r1
 80005d2:	4993      	ldr	r1, [pc, #588]	; (8000820 <__aeabi_dmul+0x3a0>)
 80005d4:	468c      	mov	ip, r1
 80005d6:	44e1      	add	r9, ip
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d000      	beq.n	80005de <__aeabi_dmul+0x15e>
 80005dc:	e11a      	b.n	8000814 <__aeabi_dmul+0x394>
 80005de:	2202      	movs	r2, #2
 80005e0:	2002      	movs	r0, #2
 80005e2:	4317      	orrs	r7, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	e78c      	b.n	8000502 <__aeabi_dmul+0x82>
 80005e8:	4313      	orrs	r3, r2
 80005ea:	d100      	bne.n	80005ee <__aeabi_dmul+0x16e>
 80005ec:	e10d      	b.n	800080a <__aeabi_dmul+0x38a>
 80005ee:	4643      	mov	r3, r8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x176>
 80005f4:	e181      	b.n	80008fa <__aeabi_dmul+0x47a>
 80005f6:	4640      	mov	r0, r8
 80005f8:	f000 fac4 	bl	8000b84 <__clzsi2>
 80005fc:	0002      	movs	r2, r0
 80005fe:	3a0b      	subs	r2, #11
 8000600:	2a1c      	cmp	r2, #28
 8000602:	dd00      	ble.n	8000606 <__aeabi_dmul+0x186>
 8000604:	e172      	b.n	80008ec <__aeabi_dmul+0x46c>
 8000606:	0001      	movs	r1, r0
 8000608:	4643      	mov	r3, r8
 800060a:	3908      	subs	r1, #8
 800060c:	408b      	lsls	r3, r1
 800060e:	4698      	mov	r8, r3
 8000610:	231d      	movs	r3, #29
 8000612:	1a9a      	subs	r2, r3, r2
 8000614:	4653      	mov	r3, sl
 8000616:	40d3      	lsrs	r3, r2
 8000618:	001a      	movs	r2, r3
 800061a:	4643      	mov	r3, r8
 800061c:	4313      	orrs	r3, r2
 800061e:	4652      	mov	r2, sl
 8000620:	408a      	lsls	r2, r1
 8000622:	4649      	mov	r1, r9
 8000624:	1a08      	subs	r0, r1, r0
 8000626:	4982      	ldr	r1, [pc, #520]	; (8000830 <__aeabi_dmul+0x3b0>)
 8000628:	4689      	mov	r9, r1
 800062a:	4481      	add	r9, r0
 800062c:	2000      	movs	r0, #0
 800062e:	e768      	b.n	8000502 <__aeabi_dmul+0x82>
 8000630:	4b7b      	ldr	r3, [pc, #492]	; (8000820 <__aeabi_dmul+0x3a0>)
 8000632:	2700      	movs	r7, #0
 8000634:	2600      	movs	r6, #0
 8000636:	e78e      	b.n	8000556 <__aeabi_dmul+0xd6>
 8000638:	0c14      	lsrs	r4, r2, #16
 800063a:	0412      	lsls	r2, r2, #16
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	0011      	movs	r1, r2
 8000640:	0c37      	lsrs	r7, r6, #16
 8000642:	0436      	lsls	r6, r6, #16
 8000644:	0c35      	lsrs	r5, r6, #16
 8000646:	4379      	muls	r1, r7
 8000648:	0028      	movs	r0, r5
 800064a:	468c      	mov	ip, r1
 800064c:	002e      	movs	r6, r5
 800064e:	4360      	muls	r0, r4
 8000650:	4460      	add	r0, ip
 8000652:	4683      	mov	fp, r0
 8000654:	4356      	muls	r6, r2
 8000656:	0021      	movs	r1, r4
 8000658:	0c30      	lsrs	r0, r6, #16
 800065a:	4680      	mov	r8, r0
 800065c:	4658      	mov	r0, fp
 800065e:	4379      	muls	r1, r7
 8000660:	4440      	add	r0, r8
 8000662:	9102      	str	r1, [sp, #8]
 8000664:	4584      	cmp	ip, r0
 8000666:	d906      	bls.n	8000676 <__aeabi_dmul+0x1f6>
 8000668:	4688      	mov	r8, r1
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	0249      	lsls	r1, r1, #9
 800066e:	468c      	mov	ip, r1
 8000670:	44e0      	add	r8, ip
 8000672:	4641      	mov	r1, r8
 8000674:	9102      	str	r1, [sp, #8]
 8000676:	0436      	lsls	r6, r6, #16
 8000678:	0c01      	lsrs	r1, r0, #16
 800067a:	0c36      	lsrs	r6, r6, #16
 800067c:	0400      	lsls	r0, r0, #16
 800067e:	468b      	mov	fp, r1
 8000680:	1981      	adds	r1, r0, r6
 8000682:	0c1e      	lsrs	r6, r3, #16
 8000684:	041b      	lsls	r3, r3, #16
 8000686:	0c1b      	lsrs	r3, r3, #16
 8000688:	9103      	str	r1, [sp, #12]
 800068a:	0019      	movs	r1, r3
 800068c:	4379      	muls	r1, r7
 800068e:	468c      	mov	ip, r1
 8000690:	0028      	movs	r0, r5
 8000692:	4375      	muls	r5, r6
 8000694:	4465      	add	r5, ip
 8000696:	46a8      	mov	r8, r5
 8000698:	4358      	muls	r0, r3
 800069a:	0c05      	lsrs	r5, r0, #16
 800069c:	4445      	add	r5, r8
 800069e:	4377      	muls	r7, r6
 80006a0:	42a9      	cmp	r1, r5
 80006a2:	d903      	bls.n	80006ac <__aeabi_dmul+0x22c>
 80006a4:	2180      	movs	r1, #128	; 0x80
 80006a6:	0249      	lsls	r1, r1, #9
 80006a8:	468c      	mov	ip, r1
 80006aa:	4467      	add	r7, ip
 80006ac:	0c29      	lsrs	r1, r5, #16
 80006ae:	468c      	mov	ip, r1
 80006b0:	0039      	movs	r1, r7
 80006b2:	0400      	lsls	r0, r0, #16
 80006b4:	0c00      	lsrs	r0, r0, #16
 80006b6:	042d      	lsls	r5, r5, #16
 80006b8:	182d      	adds	r5, r5, r0
 80006ba:	4461      	add	r1, ip
 80006bc:	44ab      	add	fp, r5
 80006be:	9105      	str	r1, [sp, #20]
 80006c0:	4659      	mov	r1, fp
 80006c2:	9104      	str	r1, [sp, #16]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	040f      	lsls	r7, r1, #16
 80006c8:	0c3f      	lsrs	r7, r7, #16
 80006ca:	0c08      	lsrs	r0, r1, #16
 80006cc:	0039      	movs	r1, r7
 80006ce:	4351      	muls	r1, r2
 80006d0:	4342      	muls	r2, r0
 80006d2:	4690      	mov	r8, r2
 80006d4:	0002      	movs	r2, r0
 80006d6:	468c      	mov	ip, r1
 80006d8:	0c09      	lsrs	r1, r1, #16
 80006da:	468b      	mov	fp, r1
 80006dc:	4362      	muls	r2, r4
 80006de:	437c      	muls	r4, r7
 80006e0:	4444      	add	r4, r8
 80006e2:	445c      	add	r4, fp
 80006e4:	45a0      	cmp	r8, r4
 80006e6:	d903      	bls.n	80006f0 <__aeabi_dmul+0x270>
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0249      	lsls	r1, r1, #9
 80006ec:	4688      	mov	r8, r1
 80006ee:	4442      	add	r2, r8
 80006f0:	0c21      	lsrs	r1, r4, #16
 80006f2:	4688      	mov	r8, r1
 80006f4:	4661      	mov	r1, ip
 80006f6:	0409      	lsls	r1, r1, #16
 80006f8:	0c09      	lsrs	r1, r1, #16
 80006fa:	468c      	mov	ip, r1
 80006fc:	0039      	movs	r1, r7
 80006fe:	4359      	muls	r1, r3
 8000700:	4343      	muls	r3, r0
 8000702:	4370      	muls	r0, r6
 8000704:	437e      	muls	r6, r7
 8000706:	0c0f      	lsrs	r7, r1, #16
 8000708:	18f6      	adds	r6, r6, r3
 800070a:	0424      	lsls	r4, r4, #16
 800070c:	19be      	adds	r6, r7, r6
 800070e:	4464      	add	r4, ip
 8000710:	4442      	add	r2, r8
 8000712:	468c      	mov	ip, r1
 8000714:	42b3      	cmp	r3, r6
 8000716:	d903      	bls.n	8000720 <__aeabi_dmul+0x2a0>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	025b      	lsls	r3, r3, #9
 800071c:	4698      	mov	r8, r3
 800071e:	4440      	add	r0, r8
 8000720:	9b02      	ldr	r3, [sp, #8]
 8000722:	4661      	mov	r1, ip
 8000724:	4698      	mov	r8, r3
 8000726:	9b04      	ldr	r3, [sp, #16]
 8000728:	0437      	lsls	r7, r6, #16
 800072a:	4443      	add	r3, r8
 800072c:	469b      	mov	fp, r3
 800072e:	45ab      	cmp	fp, r5
 8000730:	41ad      	sbcs	r5, r5
 8000732:	426b      	negs	r3, r5
 8000734:	040d      	lsls	r5, r1, #16
 8000736:	9905      	ldr	r1, [sp, #20]
 8000738:	0c2d      	lsrs	r5, r5, #16
 800073a:	468c      	mov	ip, r1
 800073c:	197f      	adds	r7, r7, r5
 800073e:	4467      	add	r7, ip
 8000740:	18fd      	adds	r5, r7, r3
 8000742:	46a8      	mov	r8, r5
 8000744:	465d      	mov	r5, fp
 8000746:	192d      	adds	r5, r5, r4
 8000748:	42a5      	cmp	r5, r4
 800074a:	41a4      	sbcs	r4, r4
 800074c:	4693      	mov	fp, r2
 800074e:	4264      	negs	r4, r4
 8000750:	46a4      	mov	ip, r4
 8000752:	44c3      	add	fp, r8
 8000754:	44dc      	add	ip, fp
 8000756:	428f      	cmp	r7, r1
 8000758:	41bf      	sbcs	r7, r7
 800075a:	4598      	cmp	r8, r3
 800075c:	419b      	sbcs	r3, r3
 800075e:	4593      	cmp	fp, r2
 8000760:	4192      	sbcs	r2, r2
 8000762:	45a4      	cmp	ip, r4
 8000764:	41a4      	sbcs	r4, r4
 8000766:	425b      	negs	r3, r3
 8000768:	427f      	negs	r7, r7
 800076a:	431f      	orrs	r7, r3
 800076c:	0c36      	lsrs	r6, r6, #16
 800076e:	4252      	negs	r2, r2
 8000770:	4264      	negs	r4, r4
 8000772:	19bf      	adds	r7, r7, r6
 8000774:	4322      	orrs	r2, r4
 8000776:	18bf      	adds	r7, r7, r2
 8000778:	4662      	mov	r2, ip
 800077a:	1838      	adds	r0, r7, r0
 800077c:	0243      	lsls	r3, r0, #9
 800077e:	0dd2      	lsrs	r2, r2, #23
 8000780:	9903      	ldr	r1, [sp, #12]
 8000782:	4313      	orrs	r3, r2
 8000784:	026a      	lsls	r2, r5, #9
 8000786:	430a      	orrs	r2, r1
 8000788:	1e50      	subs	r0, r2, #1
 800078a:	4182      	sbcs	r2, r0
 800078c:	4661      	mov	r1, ip
 800078e:	0ded      	lsrs	r5, r5, #23
 8000790:	432a      	orrs	r2, r5
 8000792:	024e      	lsls	r6, r1, #9
 8000794:	4332      	orrs	r2, r6
 8000796:	01d9      	lsls	r1, r3, #7
 8000798:	d400      	bmi.n	800079c <__aeabi_dmul+0x31c>
 800079a:	e0b3      	b.n	8000904 <__aeabi_dmul+0x484>
 800079c:	2601      	movs	r6, #1
 800079e:	0850      	lsrs	r0, r2, #1
 80007a0:	4032      	ands	r2, r6
 80007a2:	4302      	orrs	r2, r0
 80007a4:	07de      	lsls	r6, r3, #31
 80007a6:	4332      	orrs	r2, r6
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	4c22      	ldr	r4, [pc, #136]	; (8000834 <__aeabi_dmul+0x3b4>)
 80007ac:	4454      	add	r4, sl
 80007ae:	2c00      	cmp	r4, #0
 80007b0:	dd62      	ble.n	8000878 <__aeabi_dmul+0x3f8>
 80007b2:	0751      	lsls	r1, r2, #29
 80007b4:	d009      	beq.n	80007ca <__aeabi_dmul+0x34a>
 80007b6:	200f      	movs	r0, #15
 80007b8:	4010      	ands	r0, r2
 80007ba:	2804      	cmp	r0, #4
 80007bc:	d005      	beq.n	80007ca <__aeabi_dmul+0x34a>
 80007be:	1d10      	adds	r0, r2, #4
 80007c0:	4290      	cmp	r0, r2
 80007c2:	4192      	sbcs	r2, r2
 80007c4:	4252      	negs	r2, r2
 80007c6:	189b      	adds	r3, r3, r2
 80007c8:	0002      	movs	r2, r0
 80007ca:	01d9      	lsls	r1, r3, #7
 80007cc:	d504      	bpl.n	80007d8 <__aeabi_dmul+0x358>
 80007ce:	2480      	movs	r4, #128	; 0x80
 80007d0:	4819      	ldr	r0, [pc, #100]	; (8000838 <__aeabi_dmul+0x3b8>)
 80007d2:	00e4      	lsls	r4, r4, #3
 80007d4:	4003      	ands	r3, r0
 80007d6:	4454      	add	r4, sl
 80007d8:	4818      	ldr	r0, [pc, #96]	; (800083c <__aeabi_dmul+0x3bc>)
 80007da:	4284      	cmp	r4, r0
 80007dc:	dd00      	ble.n	80007e0 <__aeabi_dmul+0x360>
 80007de:	e727      	b.n	8000630 <__aeabi_dmul+0x1b0>
 80007e0:	075e      	lsls	r6, r3, #29
 80007e2:	025b      	lsls	r3, r3, #9
 80007e4:	08d2      	lsrs	r2, r2, #3
 80007e6:	0b1f      	lsrs	r7, r3, #12
 80007e8:	0563      	lsls	r3, r4, #21
 80007ea:	4316      	orrs	r6, r2
 80007ec:	0d5b      	lsrs	r3, r3, #21
 80007ee:	e6b2      	b.n	8000556 <__aeabi_dmul+0xd6>
 80007f0:	2300      	movs	r3, #0
 80007f2:	4699      	mov	r9, r3
 80007f4:	3301      	adds	r3, #1
 80007f6:	2704      	movs	r7, #4
 80007f8:	2600      	movs	r6, #0
 80007fa:	469b      	mov	fp, r3
 80007fc:	e664      	b.n	80004c8 <__aeabi_dmul+0x48>
 80007fe:	2303      	movs	r3, #3
 8000800:	9701      	str	r7, [sp, #4]
 8000802:	4681      	mov	r9, r0
 8000804:	270c      	movs	r7, #12
 8000806:	469b      	mov	fp, r3
 8000808:	e65e      	b.n	80004c8 <__aeabi_dmul+0x48>
 800080a:	2201      	movs	r2, #1
 800080c:	2001      	movs	r0, #1
 800080e:	4317      	orrs	r7, r2
 8000810:	2200      	movs	r2, #0
 8000812:	e676      	b.n	8000502 <__aeabi_dmul+0x82>
 8000814:	2303      	movs	r3, #3
 8000816:	2003      	movs	r0, #3
 8000818:	431f      	orrs	r7, r3
 800081a:	4643      	mov	r3, r8
 800081c:	e671      	b.n	8000502 <__aeabi_dmul+0x82>
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	000007ff 	.word	0x000007ff
 8000824:	fffffc01 	.word	0xfffffc01
 8000828:	08004374 	.word	0x08004374
 800082c:	800fffff 	.word	0x800fffff
 8000830:	fffffc0d 	.word	0xfffffc0d
 8000834:	000003ff 	.word	0x000003ff
 8000838:	feffffff 	.word	0xfeffffff
 800083c:	000007fe 	.word	0x000007fe
 8000840:	2300      	movs	r3, #0
 8000842:	2780      	movs	r7, #128	; 0x80
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	033f      	lsls	r7, r7, #12
 8000848:	2600      	movs	r6, #0
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <__aeabi_dmul+0x4d8>)
 800084c:	e683      	b.n	8000556 <__aeabi_dmul+0xd6>
 800084e:	9b01      	ldr	r3, [sp, #4]
 8000850:	0032      	movs	r2, r6
 8000852:	46a4      	mov	ip, r4
 8000854:	4658      	mov	r0, fp
 8000856:	e670      	b.n	800053a <__aeabi_dmul+0xba>
 8000858:	46ac      	mov	ip, r5
 800085a:	e66e      	b.n	800053a <__aeabi_dmul+0xba>
 800085c:	2780      	movs	r7, #128	; 0x80
 800085e:	9901      	ldr	r1, [sp, #4]
 8000860:	033f      	lsls	r7, r7, #12
 8000862:	4239      	tst	r1, r7
 8000864:	d02d      	beq.n	80008c2 <__aeabi_dmul+0x442>
 8000866:	423b      	tst	r3, r7
 8000868:	d12b      	bne.n	80008c2 <__aeabi_dmul+0x442>
 800086a:	431f      	orrs	r7, r3
 800086c:	033f      	lsls	r7, r7, #12
 800086e:	0b3f      	lsrs	r7, r7, #12
 8000870:	9500      	str	r5, [sp, #0]
 8000872:	0016      	movs	r6, r2
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <__aeabi_dmul+0x4d8>)
 8000876:	e66e      	b.n	8000556 <__aeabi_dmul+0xd6>
 8000878:	2501      	movs	r5, #1
 800087a:	1b2d      	subs	r5, r5, r4
 800087c:	2d38      	cmp	r5, #56	; 0x38
 800087e:	dd00      	ble.n	8000882 <__aeabi_dmul+0x402>
 8000880:	e666      	b.n	8000550 <__aeabi_dmul+0xd0>
 8000882:	2d1f      	cmp	r5, #31
 8000884:	dc40      	bgt.n	8000908 <__aeabi_dmul+0x488>
 8000886:	4835      	ldr	r0, [pc, #212]	; (800095c <__aeabi_dmul+0x4dc>)
 8000888:	001c      	movs	r4, r3
 800088a:	4450      	add	r0, sl
 800088c:	0016      	movs	r6, r2
 800088e:	4082      	lsls	r2, r0
 8000890:	4084      	lsls	r4, r0
 8000892:	40ee      	lsrs	r6, r5
 8000894:	1e50      	subs	r0, r2, #1
 8000896:	4182      	sbcs	r2, r0
 8000898:	4334      	orrs	r4, r6
 800089a:	4314      	orrs	r4, r2
 800089c:	40eb      	lsrs	r3, r5
 800089e:	0762      	lsls	r2, r4, #29
 80008a0:	d009      	beq.n	80008b6 <__aeabi_dmul+0x436>
 80008a2:	220f      	movs	r2, #15
 80008a4:	4022      	ands	r2, r4
 80008a6:	2a04      	cmp	r2, #4
 80008a8:	d005      	beq.n	80008b6 <__aeabi_dmul+0x436>
 80008aa:	0022      	movs	r2, r4
 80008ac:	1d14      	adds	r4, r2, #4
 80008ae:	4294      	cmp	r4, r2
 80008b0:	4180      	sbcs	r0, r0
 80008b2:	4240      	negs	r0, r0
 80008b4:	181b      	adds	r3, r3, r0
 80008b6:	021a      	lsls	r2, r3, #8
 80008b8:	d53e      	bpl.n	8000938 <__aeabi_dmul+0x4b8>
 80008ba:	2301      	movs	r3, #1
 80008bc:	2700      	movs	r7, #0
 80008be:	2600      	movs	r6, #0
 80008c0:	e649      	b.n	8000556 <__aeabi_dmul+0xd6>
 80008c2:	2780      	movs	r7, #128	; 0x80
 80008c4:	9b01      	ldr	r3, [sp, #4]
 80008c6:	033f      	lsls	r7, r7, #12
 80008c8:	431f      	orrs	r7, r3
 80008ca:	033f      	lsls	r7, r7, #12
 80008cc:	0b3f      	lsrs	r7, r7, #12
 80008ce:	9400      	str	r4, [sp, #0]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <__aeabi_dmul+0x4d8>)
 80008d2:	e640      	b.n	8000556 <__aeabi_dmul+0xd6>
 80008d4:	0003      	movs	r3, r0
 80008d6:	465a      	mov	r2, fp
 80008d8:	3b28      	subs	r3, #40	; 0x28
 80008da:	409a      	lsls	r2, r3
 80008dc:	2600      	movs	r6, #0
 80008de:	9201      	str	r2, [sp, #4]
 80008e0:	e66d      	b.n	80005be <__aeabi_dmul+0x13e>
 80008e2:	4658      	mov	r0, fp
 80008e4:	f000 f94e 	bl	8000b84 <__clzsi2>
 80008e8:	3020      	adds	r0, #32
 80008ea:	e657      	b.n	800059c <__aeabi_dmul+0x11c>
 80008ec:	0003      	movs	r3, r0
 80008ee:	4652      	mov	r2, sl
 80008f0:	3b28      	subs	r3, #40	; 0x28
 80008f2:	409a      	lsls	r2, r3
 80008f4:	0013      	movs	r3, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	e693      	b.n	8000622 <__aeabi_dmul+0x1a2>
 80008fa:	4650      	mov	r0, sl
 80008fc:	f000 f942 	bl	8000b84 <__clzsi2>
 8000900:	3020      	adds	r0, #32
 8000902:	e67b      	b.n	80005fc <__aeabi_dmul+0x17c>
 8000904:	46ca      	mov	sl, r9
 8000906:	e750      	b.n	80007aa <__aeabi_dmul+0x32a>
 8000908:	201f      	movs	r0, #31
 800090a:	001e      	movs	r6, r3
 800090c:	4240      	negs	r0, r0
 800090e:	1b04      	subs	r4, r0, r4
 8000910:	40e6      	lsrs	r6, r4
 8000912:	2d20      	cmp	r5, #32
 8000914:	d003      	beq.n	800091e <__aeabi_dmul+0x49e>
 8000916:	4c12      	ldr	r4, [pc, #72]	; (8000960 <__aeabi_dmul+0x4e0>)
 8000918:	4454      	add	r4, sl
 800091a:	40a3      	lsls	r3, r4
 800091c:	431a      	orrs	r2, r3
 800091e:	1e50      	subs	r0, r2, #1
 8000920:	4182      	sbcs	r2, r0
 8000922:	4332      	orrs	r2, r6
 8000924:	2607      	movs	r6, #7
 8000926:	2700      	movs	r7, #0
 8000928:	4016      	ands	r6, r2
 800092a:	d009      	beq.n	8000940 <__aeabi_dmul+0x4c0>
 800092c:	200f      	movs	r0, #15
 800092e:	2300      	movs	r3, #0
 8000930:	4010      	ands	r0, r2
 8000932:	0014      	movs	r4, r2
 8000934:	2804      	cmp	r0, #4
 8000936:	d1b9      	bne.n	80008ac <__aeabi_dmul+0x42c>
 8000938:	0022      	movs	r2, r4
 800093a:	075e      	lsls	r6, r3, #29
 800093c:	025b      	lsls	r3, r3, #9
 800093e:	0b1f      	lsrs	r7, r3, #12
 8000940:	08d2      	lsrs	r2, r2, #3
 8000942:	4316      	orrs	r6, r2
 8000944:	2300      	movs	r3, #0
 8000946:	e606      	b.n	8000556 <__aeabi_dmul+0xd6>
 8000948:	2780      	movs	r7, #128	; 0x80
 800094a:	033f      	lsls	r7, r7, #12
 800094c:	431f      	orrs	r7, r3
 800094e:	033f      	lsls	r7, r7, #12
 8000950:	0b3f      	lsrs	r7, r7, #12
 8000952:	0016      	movs	r6, r2
 8000954:	4b00      	ldr	r3, [pc, #0]	; (8000958 <__aeabi_dmul+0x4d8>)
 8000956:	e5fe      	b.n	8000556 <__aeabi_dmul+0xd6>
 8000958:	000007ff 	.word	0x000007ff
 800095c:	0000041e 	.word	0x0000041e
 8000960:	0000043e 	.word	0x0000043e

08000964 <__aeabi_i2d>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	2800      	cmp	r0, #0
 8000968:	d02d      	beq.n	80009c6 <__aeabi_i2d+0x62>
 800096a:	17c3      	asrs	r3, r0, #31
 800096c:	18c5      	adds	r5, r0, r3
 800096e:	405d      	eors	r5, r3
 8000970:	0fc4      	lsrs	r4, r0, #31
 8000972:	0028      	movs	r0, r5
 8000974:	f000 f906 	bl	8000b84 <__clzsi2>
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <__aeabi_i2d+0x6c>)
 800097a:	1a1b      	subs	r3, r3, r0
 800097c:	055b      	lsls	r3, r3, #21
 800097e:	0d5b      	lsrs	r3, r3, #21
 8000980:	280a      	cmp	r0, #10
 8000982:	dd15      	ble.n	80009b0 <__aeabi_i2d+0x4c>
 8000984:	380b      	subs	r0, #11
 8000986:	4085      	lsls	r5, r0
 8000988:	2200      	movs	r2, #0
 800098a:	032d      	lsls	r5, r5, #12
 800098c:	0b2d      	lsrs	r5, r5, #12
 800098e:	2100      	movs	r1, #0
 8000990:	0010      	movs	r0, r2
 8000992:	032d      	lsls	r5, r5, #12
 8000994:	0d0a      	lsrs	r2, r1, #20
 8000996:	0b2d      	lsrs	r5, r5, #12
 8000998:	0512      	lsls	r2, r2, #20
 800099a:	432a      	orrs	r2, r5
 800099c:	4d0d      	ldr	r5, [pc, #52]	; (80009d4 <__aeabi_i2d+0x70>)
 800099e:	051b      	lsls	r3, r3, #20
 80009a0:	402a      	ands	r2, r5
 80009a2:	4313      	orrs	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	07e4      	lsls	r4, r4, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	4323      	orrs	r3, r4
 80009ac:	0019      	movs	r1, r3
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	0002      	movs	r2, r0
 80009b2:	0029      	movs	r1, r5
 80009b4:	3215      	adds	r2, #21
 80009b6:	4091      	lsls	r1, r2
 80009b8:	000a      	movs	r2, r1
 80009ba:	210b      	movs	r1, #11
 80009bc:	1a08      	subs	r0, r1, r0
 80009be:	40c5      	lsrs	r5, r0
 80009c0:	032d      	lsls	r5, r5, #12
 80009c2:	0b2d      	lsrs	r5, r5, #12
 80009c4:	e7e3      	b.n	800098e <__aeabi_i2d+0x2a>
 80009c6:	2400      	movs	r4, #0
 80009c8:	2300      	movs	r3, #0
 80009ca:	2500      	movs	r5, #0
 80009cc:	2200      	movs	r2, #0
 80009ce:	e7de      	b.n	800098e <__aeabi_i2d+0x2a>
 80009d0:	0000041e 	.word	0x0000041e
 80009d4:	800fffff 	.word	0x800fffff

080009d8 <__aeabi_f2d>:
 80009d8:	0041      	lsls	r1, r0, #1
 80009da:	0e09      	lsrs	r1, r1, #24
 80009dc:	1c4b      	adds	r3, r1, #1
 80009de:	b570      	push	{r4, r5, r6, lr}
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	0246      	lsls	r6, r0, #9
 80009e4:	0a75      	lsrs	r5, r6, #9
 80009e6:	0fc4      	lsrs	r4, r0, #31
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	dd14      	ble.n	8000a16 <__aeabi_f2d+0x3e>
 80009ec:	23e0      	movs	r3, #224	; 0xe0
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	076d      	lsls	r5, r5, #29
 80009f2:	0b36      	lsrs	r6, r6, #12
 80009f4:	18cb      	adds	r3, r1, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	0d0a      	lsrs	r2, r1, #20
 80009fa:	0028      	movs	r0, r5
 80009fc:	0512      	lsls	r2, r2, #20
 80009fe:	4d1c      	ldr	r5, [pc, #112]	; (8000a70 <__aeabi_f2d+0x98>)
 8000a00:	4332      	orrs	r2, r6
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	402a      	ands	r2, r5
 8000a06:	085b      	lsrs	r3, r3, #1
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	07e4      	lsls	r4, r4, #31
 8000a0e:	085b      	lsrs	r3, r3, #1
 8000a10:	4323      	orrs	r3, r4
 8000a12:	0019      	movs	r1, r3
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d114      	bne.n	8000a44 <__aeabi_f2d+0x6c>
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d01e      	beq.n	8000a5c <__aeabi_f2d+0x84>
 8000a1e:	0028      	movs	r0, r5
 8000a20:	f000 f8b0 	bl	8000b84 <__clzsi2>
 8000a24:	280a      	cmp	r0, #10
 8000a26:	dc1c      	bgt.n	8000a62 <__aeabi_f2d+0x8a>
 8000a28:	230b      	movs	r3, #11
 8000a2a:	002a      	movs	r2, r5
 8000a2c:	1a1b      	subs	r3, r3, r0
 8000a2e:	40da      	lsrs	r2, r3
 8000a30:	0003      	movs	r3, r0
 8000a32:	3315      	adds	r3, #21
 8000a34:	409d      	lsls	r5, r3
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <__aeabi_f2d+0x9c>)
 8000a38:	0312      	lsls	r2, r2, #12
 8000a3a:	1a1b      	subs	r3, r3, r0
 8000a3c:	055b      	lsls	r3, r3, #21
 8000a3e:	0b16      	lsrs	r6, r2, #12
 8000a40:	0d5b      	lsrs	r3, r3, #21
 8000a42:	e7d8      	b.n	80009f6 <__aeabi_f2d+0x1e>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d006      	beq.n	8000a56 <__aeabi_f2d+0x7e>
 8000a48:	0b32      	lsrs	r2, r6, #12
 8000a4a:	2680      	movs	r6, #128	; 0x80
 8000a4c:	0336      	lsls	r6, r6, #12
 8000a4e:	076d      	lsls	r5, r5, #29
 8000a50:	4316      	orrs	r6, r2
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <__aeabi_f2d+0xa0>)
 8000a54:	e7cf      	b.n	80009f6 <__aeabi_f2d+0x1e>
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <__aeabi_f2d+0xa0>)
 8000a58:	2600      	movs	r6, #0
 8000a5a:	e7cc      	b.n	80009f6 <__aeabi_f2d+0x1e>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2600      	movs	r6, #0
 8000a60:	e7c9      	b.n	80009f6 <__aeabi_f2d+0x1e>
 8000a62:	0003      	movs	r3, r0
 8000a64:	002a      	movs	r2, r5
 8000a66:	3b0b      	subs	r3, #11
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	e7e3      	b.n	8000a36 <__aeabi_f2d+0x5e>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	800fffff 	.word	0x800fffff
 8000a74:	00000389 	.word	0x00000389
 8000a78:	000007ff 	.word	0x000007ff

08000a7c <__aeabi_d2f>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	004c      	lsls	r4, r1, #1
 8000a80:	0d64      	lsrs	r4, r4, #21
 8000a82:	030b      	lsls	r3, r1, #12
 8000a84:	1c62      	adds	r2, r4, #1
 8000a86:	0a5b      	lsrs	r3, r3, #9
 8000a88:	0f46      	lsrs	r6, r0, #29
 8000a8a:	0552      	lsls	r2, r2, #21
 8000a8c:	0fc9      	lsrs	r1, r1, #31
 8000a8e:	431e      	orrs	r6, r3
 8000a90:	00c5      	lsls	r5, r0, #3
 8000a92:	0d52      	lsrs	r2, r2, #21
 8000a94:	2a01      	cmp	r2, #1
 8000a96:	dd29      	ble.n	8000aec <__aeabi_d2f+0x70>
 8000a98:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <__aeabi_d2f+0xfc>)
 8000a9a:	18e7      	adds	r7, r4, r3
 8000a9c:	2ffe      	cmp	r7, #254	; 0xfe
 8000a9e:	dc1c      	bgt.n	8000ada <__aeabi_d2f+0x5e>
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	dd3b      	ble.n	8000b1c <__aeabi_d2f+0xa0>
 8000aa4:	0180      	lsls	r0, r0, #6
 8000aa6:	1e43      	subs	r3, r0, #1
 8000aa8:	4198      	sbcs	r0, r3
 8000aaa:	2207      	movs	r2, #7
 8000aac:	00f3      	lsls	r3, r6, #3
 8000aae:	0f6d      	lsrs	r5, r5, #29
 8000ab0:	4303      	orrs	r3, r0
 8000ab2:	432b      	orrs	r3, r5
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_d2f+0x48>
 8000aba:	220f      	movs	r2, #15
 8000abc:	401a      	ands	r2, r3
 8000abe:	2a04      	cmp	r2, #4
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_d2f+0x48>
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	04d2      	lsls	r2, r2, #19
 8000ac8:	401a      	ands	r2, r3
 8000aca:	d024      	beq.n	8000b16 <__aeabi_d2f+0x9a>
 8000acc:	3701      	adds	r7, #1
 8000ace:	b2fa      	uxtb	r2, r7
 8000ad0:	2fff      	cmp	r7, #255	; 0xff
 8000ad2:	d002      	beq.n	8000ada <__aeabi_d2f+0x5e>
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	0a58      	lsrs	r0, r3, #9
 8000ad8:	e001      	b.n	8000ade <__aeabi_d2f+0x62>
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	2000      	movs	r0, #0
 8000ade:	0240      	lsls	r0, r0, #9
 8000ae0:	05d2      	lsls	r2, r2, #23
 8000ae2:	0a40      	lsrs	r0, r0, #9
 8000ae4:	07c9      	lsls	r1, r1, #31
 8000ae6:	4310      	orrs	r0, r2
 8000ae8:	4308      	orrs	r0, r1
 8000aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aec:	4335      	orrs	r5, r6
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d104      	bne.n	8000afc <__aeabi_d2f+0x80>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d10a      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000af6:	2200      	movs	r2, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7f0      	b.n	8000ade <__aeabi_d2f+0x62>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d0ec      	beq.n	8000ada <__aeabi_d2f+0x5e>
 8000b00:	2080      	movs	r0, #128	; 0x80
 8000b02:	03c0      	lsls	r0, r0, #15
 8000b04:	4330      	orrs	r0, r6
 8000b06:	22ff      	movs	r2, #255	; 0xff
 8000b08:	e7e9      	b.n	8000ade <__aeabi_d2f+0x62>
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	025b      	lsls	r3, r3, #9
 8000b10:	0a58      	lsrs	r0, r3, #9
 8000b12:	b2e2      	uxtb	r2, r4
 8000b14:	e7e3      	b.n	8000ade <__aeabi_d2f+0x62>
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	003c      	movs	r4, r7
 8000b1a:	e7f8      	b.n	8000b0e <__aeabi_d2f+0x92>
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	3317      	adds	r3, #23
 8000b20:	dbf3      	blt.n	8000b0a <__aeabi_d2f+0x8e>
 8000b22:	2380      	movs	r3, #128	; 0x80
 8000b24:	041b      	lsls	r3, r3, #16
 8000b26:	4333      	orrs	r3, r6
 8000b28:	261e      	movs	r6, #30
 8000b2a:	1bf6      	subs	r6, r6, r7
 8000b2c:	2e1f      	cmp	r6, #31
 8000b2e:	dd14      	ble.n	8000b5a <__aeabi_d2f+0xde>
 8000b30:	2202      	movs	r2, #2
 8000b32:	4252      	negs	r2, r2
 8000b34:	1bd7      	subs	r7, r2, r7
 8000b36:	001a      	movs	r2, r3
 8000b38:	40fa      	lsrs	r2, r7
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	2e20      	cmp	r6, #32
 8000b3e:	d004      	beq.n	8000b4a <__aeabi_d2f+0xce>
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <__aeabi_d2f+0x100>)
 8000b42:	4694      	mov	ip, r2
 8000b44:	4464      	add	r4, ip
 8000b46:	40a3      	lsls	r3, r4
 8000b48:	431d      	orrs	r5, r3
 8000b4a:	002b      	movs	r3, r5
 8000b4c:	1e5d      	subs	r5, r3, #1
 8000b4e:	41ab      	sbcs	r3, r5
 8000b50:	2207      	movs	r2, #7
 8000b52:	433b      	orrs	r3, r7
 8000b54:	401a      	ands	r2, r3
 8000b56:	2700      	movs	r7, #0
 8000b58:	e7ad      	b.n	8000ab6 <__aeabi_d2f+0x3a>
 8000b5a:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <__aeabi_d2f+0x104>)
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	18a2      	adds	r2, r4, r2
 8000b60:	4095      	lsls	r5, r2
 8000b62:	4093      	lsls	r3, r2
 8000b64:	1e6c      	subs	r4, r5, #1
 8000b66:	41a5      	sbcs	r5, r4
 8000b68:	40f0      	lsrs	r0, r6
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	432b      	orrs	r3, r5
 8000b6e:	4303      	orrs	r3, r0
 8000b70:	401a      	ands	r2, r3
 8000b72:	2700      	movs	r7, #0
 8000b74:	e79f      	b.n	8000ab6 <__aeabi_d2f+0x3a>
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	fffffc80 	.word	0xfffffc80
 8000b7c:	fffffca2 	.word	0xfffffca2
 8000b80:	fffffc82 	.word	0xfffffc82

08000b84 <__clzsi2>:
 8000b84:	211c      	movs	r1, #28
 8000b86:	2301      	movs	r3, #1
 8000b88:	041b      	lsls	r3, r3, #16
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d301      	bcc.n	8000b92 <__clzsi2+0xe>
 8000b8e:	0c00      	lsrs	r0, r0, #16
 8000b90:	3910      	subs	r1, #16
 8000b92:	0a1b      	lsrs	r3, r3, #8
 8000b94:	4298      	cmp	r0, r3
 8000b96:	d301      	bcc.n	8000b9c <__clzsi2+0x18>
 8000b98:	0a00      	lsrs	r0, r0, #8
 8000b9a:	3908      	subs	r1, #8
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d301      	bcc.n	8000ba6 <__clzsi2+0x22>
 8000ba2:	0900      	lsrs	r0, r0, #4
 8000ba4:	3904      	subs	r1, #4
 8000ba6:	a202      	add	r2, pc, #8	; (adr r2, 8000bb0 <__clzsi2+0x2c>)
 8000ba8:	5c10      	ldrb	r0, [r2, r0]
 8000baa:	1840      	adds	r0, r0, r1
 8000bac:	4770      	bx	lr
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	02020304 	.word	0x02020304
 8000bb4:	01010101 	.word	0x01010101
	...

08000bc0 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000bc4:	201e      	movs	r0, #30
 8000bc6:	f000 fc93 	bl	80014f0 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	4821      	ldr	r0, [pc, #132]	; (8000c54 <lcd_init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	f001 ffc4 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	481d      	ldr	r0, [pc, #116]	; (8000c54 <lcd_init+0x94>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	0019      	movs	r1, r3
 8000be2:	f001 ffbd 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	481a      	ldr	r0, [pc, #104]	; (8000c54 <lcd_init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	0019      	movs	r1, r3
 8000bf0:	f001 ffb6 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4816      	ldr	r0, [pc, #88]	; (8000c54 <lcd_init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	f001 ffaf 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	4813      	ldr	r0, [pc, #76]	; (8000c54 <lcd_init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f001 ffa8 	bl	8002b60 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	01db      	lsls	r3, r3, #7
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <lcd_init+0x94>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	0019      	movs	r1, r3
 8000c1a:	f001 ffa1 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	01db      	lsls	r3, r3, #7
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <lcd_init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	0019      	movs	r1, r3
 8000c28:	f001 ff9a 	bl	8002b60 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000c2c:	2128      	movs	r1, #40	; 0x28
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f812 	bl	8000c58 <lcd_write>
	lcd_write(0,0x0c);
 8000c34:	210c      	movs	r1, #12
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f80e 	bl	8000c58 <lcd_write>
	lcd_write(0,0x06);
 8000c3c:	2106      	movs	r1, #6
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f80a 	bl	8000c58 <lcd_write>
	lcd_write(0,0x01);
 8000c44:	2101      	movs	r1, #1
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f806 	bl	8000c58 <lcd_write>
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	50000400 	.word	0x50000400

08000c58 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	1c0a      	adds	r2, r1, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f000 fc40 	bl	80014f0 <HAL_Delay>
	if(type)
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d007      	beq.n	8000c88 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	4866      	ldr	r0, [pc, #408]	; (8000e18 <lcd_write+0x1c0>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	0019      	movs	r1, r3
 8000c82:	f001 ff6d 	bl	8002b60 <HAL_GPIO_WritePin>
 8000c86:	e006      	b.n	8000c96 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	4862      	ldr	r0, [pc, #392]	; (8000e18 <lcd_write+0x1c0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	0019      	movs	r1, r3
 8000c92:	f001 ff65 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8000c96:	1dbb      	adds	r3, r7, #6
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da07      	bge.n	8000cb0 <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	485c      	ldr	r0, [pc, #368]	; (8000e18 <lcd_write+0x1c0>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	0019      	movs	r1, r3
 8000caa:	f001 ff59 	bl	8002b60 <HAL_GPIO_WritePin>
 8000cae:	e006      	b.n	8000cbe <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4858      	ldr	r0, [pc, #352]	; (8000e18 <lcd_write+0x1c0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	0019      	movs	r1, r3
 8000cba:	f001 ff51 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8000cbe:	1dbb      	adds	r3, r7, #6
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	4852      	ldr	r0, [pc, #328]	; (8000e18 <lcd_write+0x1c0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	f001 ff45 	bl	8002b60 <HAL_GPIO_WritePin>
 8000cd6:	e006      	b.n	8000ce6 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	484e      	ldr	r0, [pc, #312]	; (8000e18 <lcd_write+0x1c0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	f001 ff3d 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8000ce6:	1dbb      	adds	r3, r7, #6
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2220      	movs	r2, #32
 8000cec:	4013      	ands	r3, r2
 8000cee:	d007      	beq.n	8000d00 <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	015b      	lsls	r3, r3, #5
 8000cf4:	4848      	ldr	r0, [pc, #288]	; (8000e18 <lcd_write+0x1c0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	f001 ff31 	bl	8002b60 <HAL_GPIO_WritePin>
 8000cfe:	e006      	b.n	8000d0e <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	4844      	ldr	r0, [pc, #272]	; (8000e18 <lcd_write+0x1c0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	0019      	movs	r1, r3
 8000d0a:	f001 ff29 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8000d0e:	1dbb      	adds	r3, r7, #6
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2210      	movs	r2, #16
 8000d14:	4013      	ands	r3, r2
 8000d16:	d007      	beq.n	8000d28 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	483e      	ldr	r0, [pc, #248]	; (8000e18 <lcd_write+0x1c0>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	0019      	movs	r1, r3
 8000d22:	f001 ff1d 	bl	8002b60 <HAL_GPIO_WritePin>
 8000d26:	e006      	b.n	8000d36 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	019b      	lsls	r3, r3, #6
 8000d2c:	483a      	ldr	r0, [pc, #232]	; (8000e18 <lcd_write+0x1c0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	0019      	movs	r1, r3
 8000d32:	f001 ff15 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	01db      	lsls	r3, r3, #7
 8000d3a:	4837      	ldr	r0, [pc, #220]	; (8000e18 <lcd_write+0x1c0>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	0019      	movs	r1, r3
 8000d40:	f001 ff0e 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4833      	ldr	r0, [pc, #204]	; (8000e18 <lcd_write+0x1c0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	f001 ff07 	bl	8002b60 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2208      	movs	r2, #8
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	482d      	ldr	r0, [pc, #180]	; (8000e18 <lcd_write+0x1c0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	0019      	movs	r1, r3
 8000d66:	f001 fefb 	bl	8002b60 <HAL_GPIO_WritePin>
 8000d6a:	e006      	b.n	8000d7a <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4829      	ldr	r0, [pc, #164]	; (8000e18 <lcd_write+0x1c0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	0019      	movs	r1, r3
 8000d76:	f001 fef3 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8000d7a:	1dbb      	adds	r3, r7, #6
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4013      	ands	r3, r2
 8000d82:	d007      	beq.n	8000d94 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	4823      	ldr	r0, [pc, #140]	; (8000e18 <lcd_write+0x1c0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	f001 fee7 	bl	8002b60 <HAL_GPIO_WritePin>
 8000d92:	e006      	b.n	8000da2 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <lcd_write+0x1c0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	f001 fedf 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	d007      	beq.n	8000dbc <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	015b      	lsls	r3, r3, #5
 8000db0:	4819      	ldr	r0, [pc, #100]	; (8000e18 <lcd_write+0x1c0>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	0019      	movs	r1, r3
 8000db6:	f001 fed3 	bl	8002b60 <HAL_GPIO_WritePin>
 8000dba:	e006      	b.n	8000dca <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <lcd_write+0x1c0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	f001 fecb 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000dca:	1dbb      	adds	r3, r7, #6
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d007      	beq.n	8000de4 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <lcd_write+0x1c0>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	0019      	movs	r1, r3
 8000dde:	f001 febf 	bl	8002b60 <HAL_GPIO_WritePin>
 8000de2:	e006      	b.n	8000df2 <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	019b      	lsls	r3, r3, #6
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <lcd_write+0x1c0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	0019      	movs	r1, r3
 8000dee:	f001 feb7 	bl	8002b60 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	01db      	lsls	r3, r3, #7
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <lcd_write+0x1c0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	f001 feb0 	bl	8002b60 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	01db      	lsls	r3, r3, #7
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <lcd_write+0x1c0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	f001 fea9 	bl	8002b60 <HAL_GPIO_WritePin>
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	50000400 	.word	0x50000400

08000e1c <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	603a      	str	r2, [r7, #0]
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	1c02      	adds	r2, r0, #0
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	1dbb      	adds	r3, r7, #6
 8000e2c:	1c0a      	adds	r2, r1, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d011      	beq.n	8000e5c <lcd_puts+0x40>
 8000e38:	dc02      	bgt.n	8000e40 <lcd_puts+0x24>
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d005      	beq.n	8000e4a <lcd_puts+0x2e>
 8000e3e:	e028      	b.n	8000e92 <lcd_puts+0x76>
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d014      	beq.n	8000e6e <lcd_puts+0x52>
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d01b      	beq.n	8000e80 <lcd_puts+0x64>
 8000e48:	e023      	b.n	8000e92 <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000e4a:	1dbb      	adds	r3, r7, #6
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	3b80      	subs	r3, #128	; 0x80
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	0019      	movs	r1, r3
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff feff 	bl	8000c58 <lcd_write>
			break;
 8000e5a:	e01a      	b.n	8000e92 <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000e5c:	1dbb      	adds	r3, r7, #6
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	3b40      	subs	r3, #64	; 0x40
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	0019      	movs	r1, r3
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fef6 	bl	8000c58 <lcd_write>
			break;
 8000e6c:	e011      	b.n	8000e92 <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000e6e:	1dbb      	adds	r3, r7, #6
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b70      	subs	r3, #112	; 0x70
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	0019      	movs	r1, r3
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff feed 	bl	8000c58 <lcd_write>
			break;
 8000e7e:	e008      	b.n	8000e92 <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	3b30      	subs	r3, #48	; 0x30
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	0019      	movs	r1, r3
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fee4 	bl	8000c58 <lcd_write>
			break;
 8000e90:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8000e92:	e00a      	b.n	8000eaa <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff feda 	bl	8000c58 <lcd_write>
		string++;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	603b      	str	r3, [r7, #0]
	while(*string)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1ef      	bne.n	8000e94 <lcd_puts+0x78>
	}
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <lcd_clear>:
void lcd_clear(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fec8 	bl	8000c58 <lcd_write>
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <main>:
ADC_HandleTypeDef hadc1;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
int main(void)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
    uint16_t  adc_value= 0;
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
float voltage=0.f;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
float  temp=0.f;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
unsigned char buffer ;
    HAL_Init();
 8000ee6:	f000 fa7d 	bl	80013e4 <HAL_Init>
    SystemClock_Config();
 8000eea:	f000 f861 	bl	8000fb0 <SystemClock_Config>
    MX_GPIO_Init();
 8000eee:	f000 f92b 	bl	8001148 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000ef2:	f000 f8bd 	bl	8001070 <MX_ADC1_Init>
    lcd_init();
 8000ef6:	f7ff fe63 	bl	8000bc0 <lcd_init>
    lcd_clear();
 8000efa:	f7ff ffdf 	bl	8000ebc <lcd_clear>
    // Calibrate The ADC On Power-Up For Better Accuracy
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <main+0xc8>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fb41 	bl	8002588 <HAL_ADCEx_Calibration_Start>
    while (1)
    {
       // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <main+0xc8>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 fe51 	bl	8001bb0 <HAL_ADC_Start>
       // Poll ADC1 Perihperal & TimeOut = 1mSec
        HAL_ADC_PollForConversion(&hadc1, 1);
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <main+0xc8>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fe9a 	bl	8001c4c <HAL_ADC_PollForConversion>
       // Read The ADC Conversion Result & Map It To PWM DutyCycle
adc_value = HAL_ADC_GetValue(&hadc1);
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <main+0xc8>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 ff24 	bl	8001d68 <HAL_ADC_GetValue>
 8000f20:	0002      	movs	r2, r0
 8000f22:	210e      	movs	r1, #14
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	801a      	strh	r2, [r3, #0]
voltage= adc_value*(3.3/4096);
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fd19 	bl	8000964 <__aeabi_i2d>
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <main+0xcc>)
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <main+0xd0>)
 8000f36:	f7ff faa3 	bl	8000480 <__aeabi_dmul>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	0018      	movs	r0, r3
 8000f40:	0021      	movs	r1, r4
 8000f42:	f7ff fd9b 	bl	8000a7c <__aeabi_d2f>
 8000f46:	1c03      	adds	r3, r0, #0
 8000f48:	60bb      	str	r3, [r7, #8]
temp=voltage*100;
 8000f4a:	4916      	ldr	r1, [pc, #88]	; (8000fa4 <main+0xd4>)
 8000f4c:	68b8      	ldr	r0, [r7, #8]
 8000f4e:	f7ff f965 	bl	800021c <__aeabi_fmul>
 8000f52:	1c03      	adds	r3, r0, #0
 8000f54:	607b      	str	r3, [r7, #4]
  snprintf(buffer, 10, "%d", temp);
 8000f56:	1cfb      	adds	r3, r7, #3
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	001d      	movs	r5, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fd3b 	bl	80009d8 <__aeabi_f2d>
 8000f62:	0003      	movs	r3, r0
 8000f64:	000c      	movs	r4, r1
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <main+0xd8>)
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	9401      	str	r4, [sp, #4]
 8000f6c:	210a      	movs	r1, #10
 8000f6e:	0028      	movs	r0, r5
 8000f70:	f002 fdb4 	bl	8003adc <sniprintf>
	  lcd_puts(0,0,"temp=");
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <main+0xdc>)
 8000f76:	001a      	movs	r2, r3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff ff4e 	bl	8000e1c <lcd_puts>
	  lcd_puts(0,10,buffer);
 8000f80:	1cfb      	adds	r3, r7, #3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	001a      	movs	r2, r3
 8000f86:	210a      	movs	r1, #10
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff ff47 	bl	8000e1c <lcd_puts>
        HAL_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 faae 	bl	80014f0 <HAL_Delay>
    {
 8000f94:	e7b7      	b.n	8000f06 <main+0x36>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000098 	.word	0x20000098
 8000f9c:	66666666 	.word	0x66666666
 8000fa0:	3f4a6666 	.word	0x3f4a6666
 8000fa4:	42c80000 	.word	0x42c80000
 8000fa8:	08004328 	.word	0x08004328
 8000fac:	0800432c 	.word	0x0800432c

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b0a7      	sub	sp, #156	; 0x9c
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	245c      	movs	r4, #92	; 0x5c
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	0018      	movs	r0, r3
 8000fbc:	233c      	movs	r3, #60	; 0x3c
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f002 fd83 	bl	8003acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc6:	234c      	movs	r3, #76	; 0x4c
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2310      	movs	r3, #16
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f002 fd7b 	bl	8003acc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	0018      	movs	r0, r3
 8000fda:	234c      	movs	r3, #76	; 0x4c
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f002 fd74 	bl	8003acc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f001 fdd7 	bl	8002b9c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	0052      	lsls	r2, r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2240      	movs	r2, #64	; 0x40
 8001006:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001008:	193b      	adds	r3, r7, r4
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	193b      	adds	r3, r7, r4
 8001010:	0018      	movs	r0, r3
 8001012:	f001 fe03 	bl	8002c1c <HAL_RCC_OscConfig>
 8001016:	1e03      	subs	r3, r0, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800101a:	f000 f8db 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	214c      	movs	r1, #76	; 0x4c
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2207      	movs	r2, #7
 8001024:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2100      	movs	r1, #0
 800103c:	0018      	movs	r0, r3
 800103e:	f002 f953 	bl	80032e8 <HAL_RCC_ClockConfig>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001046:	f000 f8c5 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800104a:	003b      	movs	r3, r7
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	01d2      	lsls	r2, r2, #7
 8001050:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001052:	003b      	movs	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	003b      	movs	r3, r7
 800105a:	0018      	movs	r0, r3
 800105c:	f002 face 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001064:	f000 f8b6 	bl	80011d4 <Error_Handler>
  }
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b027      	add	sp, #156	; 0x9c
 800106e:	bd90      	pop	{r4, r7, pc}

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	0018      	movs	r0, r3
 800107a:	230c      	movs	r3, #12
 800107c:	001a      	movs	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	f002 fd24 	bl	8003acc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_ADC1_Init+0xcc>)
 8001086:	4a2e      	ldr	r2, [pc, #184]	; (8001140 <MX_ADC1_Init+0xd0>)
 8001088:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <MX_ADC1_Init+0xcc>)
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	05d2      	lsls	r2, r2, #23
 8001090:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_ADC1_Init+0xcc>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <MX_ADC1_Init+0xcc>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_ADC1_Init+0xcc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <MX_ADC1_Init+0xcc>)
 80010a6:	2204      	movs	r2, #4
 80010a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_ADC1_Init+0xcc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <MX_ADC1_Init+0xcc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_ADC1_Init+0xcc>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_ADC1_Init+0xcc>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_ADC1_Init+0xcc>)
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_ADC1_Init+0xcc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_ADC1_Init+0xcc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_ADC1_Init+0xcc>)
 80010d8:	222c      	movs	r2, #44	; 0x2c
 80010da:	2100      	movs	r1, #0
 80010dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_ADC1_Init+0xcc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_ADC1_Init+0xcc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_ADC1_Init+0xcc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_ADC1_Init+0xcc>)
 80010f2:	223c      	movs	r2, #60	; 0x3c
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_ADC1_Init+0xcc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_ADC1_Init+0xcc>)
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fb79 	bl	80017f8 <HAL_ADC_Init>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800110a:	f000 f863 	bl	80011d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <MX_ADC1_Init+0xd4>)
 8001112:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_ADC1_Init+0xcc>)
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f000 ff5a 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001130:	f000 f850 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000098 	.word	0x20000098
 8001140:	40012400 	.word	0x40012400
 8001144:	1c000080 	.word	0x1c000080

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	240c      	movs	r4, #12
 8001150:	193b      	adds	r3, r7, r4
 8001152:	0018      	movs	r0, r3
 8001154:	2314      	movs	r3, #20
 8001156:	001a      	movs	r2, r3
 8001158:	2100      	movs	r1, #0
 800115a:	f002 fcb7 	bl	8003acc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_GPIO_Init+0x84>)
 8001160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_GPIO_Init+0x84>)
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_GPIO_Init+0x84>)
 800116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_GPIO_Init+0x84>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_GPIO_Init+0x84>)
 800117c:	2102      	movs	r1, #2
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	; 0x34
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_GPIO_Init+0x84>)
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800118e:	23fc      	movs	r3, #252	; 0xfc
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <MX_GPIO_Init+0x88>)
 8001194:	2200      	movs	r2, #0
 8001196:	0019      	movs	r1, r3
 8001198:	f001 fce2 	bl	8002b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800119c:	193b      	adds	r3, r7, r4
 800119e:	22fc      	movs	r2, #252	; 0xfc
 80011a0:	0212      	lsls	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	2201      	movs	r2, #1
 80011a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	193b      	adds	r3, r7, r4
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	193b      	adds	r3, r7, r4
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <MX_GPIO_Init+0x88>)
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f001 fb63 	bl	8002888 <HAL_GPIO_Init>

}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b009      	add	sp, #36	; 0x24
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	40021000 	.word	0x40021000
 80011d0:	50000400 	.word	0x50000400

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011da:	e7fe      	b.n	80011da <Error_Handler+0x6>

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_MspInit+0x4c>)
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2201      	movs	r2, #1
 80011f4:	4013      	ands	r3, r2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_MspInit+0x4c>)
 80011fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_MspInit+0x4c>)
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	0549      	lsls	r1, r1, #21
 8001204:	430a      	orrs	r2, r1
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_MspInit+0x4c>)
 800120a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	055b      	lsls	r3, r3, #21
 8001210:	4013      	ands	r3, r2
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001216:	23c0      	movs	r3, #192	; 0xc0
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	0018      	movs	r0, r3
 800121c:	f000 f98a 	bl	8001534 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	2314      	movs	r3, #20
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	0018      	movs	r0, r3
 800123a:	2314      	movs	r3, #20
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f002 fc44 	bl	8003acc <memset>
  if(hadc->Instance==ADC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <HAL_ADC_MspInit+0x90>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d132      	bne.n	80012b4 <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_ADC_MspInit+0x94>)
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <HAL_ADC_MspInit+0x94>)
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	0349      	lsls	r1, r1, #13
 8001258:	430a      	orrs	r2, r1
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_ADC_MspInit+0x94>)
 800125e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	035b      	lsls	r3, r3, #13
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_ADC_MspInit+0x94>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_ADC_MspInit+0x94>)
 8001270:	2101      	movs	r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_ADC_MspInit+0x94>)
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001282:	2114      	movs	r1, #20
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2203      	movs	r2, #3
 800128e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	187a      	adds	r2, r7, r1
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	0011      	movs	r1, r2
 800129e:	0018      	movs	r0, r3
 80012a0:	f001 faf2 	bl	8002888 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	200c      	movs	r0, #12
 80012aa:	f001 fabb 	bl	8002824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80012ae:	200c      	movs	r0, #12
 80012b0:	f001 facd 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b00a      	add	sp, #40	; 0x28
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40012400 	.word	0x40012400
 80012c0:	40021000 	.word	0x40021000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 f8e6 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <ADC1_COMP_IRQHandler+0x14>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 fd40 	bl	8001d80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	20000098 	.word	0x20000098

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f002 fb9c 	bl	8003a78 <__errno>
 8001340:	0003      	movs	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	2301      	movs	r3, #1
 8001348:	425b      	negs	r3, r3
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	18d2      	adds	r2, r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20024000 	.word	0x20024000
 800136c:	00000400 	.word	0x00000400
 8001370:	2000008c 	.word	0x2000008c
 8001374:	20000108 	.word	0x20000108

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <SystemInit+0x14>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	0512      	lsls	r2, r2, #20
 8001382:	609a      	str	r2, [r3, #8]
#endif
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001394:	f7ff fff0 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013be:	f002 fb61 	bl	8003a84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013c2:	f7ff fd85 	bl	8000ed0 <main>

080013c6 <LoopForever>:

LoopForever:
  b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013d4:	08004430 	.word	0x08004430
  ldr r2, =_sbss
 80013d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013dc:	20000104 	.word	0x20000104

080013e0 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <CEC_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_Init+0x3c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Init+0x3c>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0049      	lsls	r1, r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f810 	bl	8001424 <HAL_InitTick>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d003      	beq.n	8001410 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fee4 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_InitTick+0x88>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d02b      	beq.n	8001494 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_InitTick+0x8c>)
 800143e:	681c      	ldr	r4, [r3, #0]
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_InitTick+0x88>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	0019      	movs	r1, r3
 8001446:	23fa      	movs	r3, #250	; 0xfa
 8001448:	0098      	lsls	r0, r3, #2
 800144a:	f7fe fe5b 	bl	8000104 <__udivsi3>
 800144e:	0003      	movs	r3, r0
 8001450:	0019      	movs	r1, r3
 8001452:	0020      	movs	r0, r4
 8001454:	f7fe fe56 	bl	8000104 <__udivsi3>
 8001458:	0003      	movs	r3, r0
 800145a:	0018      	movs	r0, r3
 800145c:	f001 fa07 	bl	800286e <HAL_SYSTICK_Config>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d112      	bne.n	800148a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d80a      	bhi.n	8001480 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	2200      	movs	r2, #0
 8001472:	0018      	movs	r0, r3
 8001474:	f001 f9d6 	bl	8002824 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_InitTick+0x90>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	e00d      	b.n	800149c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	230f      	movs	r3, #15
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e008      	b.n	800149c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148a:	230f      	movs	r3, #15
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e003      	b.n	800149c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001494:	230f      	movs	r3, #15
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800149c:	230f      	movs	r3, #15
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	781b      	ldrb	r3, [r3, #0]
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b005      	add	sp, #20
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x1c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	001a      	movs	r2, r3
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x20>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	18d2      	adds	r2, r2, r3
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_IncTick+0x20>)
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	20000008 	.word	0x20000008
 80014d8:	200000fc 	.word	0x200000fc

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_GetTick+0x10>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	200000fc 	.word	0x200000fc

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff fff0 	bl	80014dc <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3301      	adds	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_Delay+0x40>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	001a      	movs	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	189b      	adds	r3, r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	f7ff ffe0 	bl	80014dc <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000008 	.word	0x20000008

08001534 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	40010000 	.word	0x40010000
 800155c:	fffff9ff 	.word	0xfffff9ff

08001560 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001570:	401a      	ands	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	fe3fffff 	.word	0xfe3fffff

08001588 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	23e0      	movs	r3, #224	; 0xe0
 8001596:	045b      	lsls	r3, r3, #17
 8001598:	4013      	ands	r3, r2
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	2104      	movs	r1, #4
 80015b6:	400a      	ands	r2, r1
 80015b8:	2107      	movs	r1, #7
 80015ba:	4091      	lsls	r1, r2
 80015bc:	000a      	movs	r2, r1
 80015be:	43d2      	mvns	r2, r2
 80015c0:	401a      	ands	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2104      	movs	r1, #4
 80015c6:	400b      	ands	r3, r1
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4099      	lsls	r1, r3
 80015cc:	000b      	movs	r3, r1
 80015ce:	431a      	orrs	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bd80      	pop	{r7, pc}

080015dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	23c0      	movs	r3, #192	; 0xc0
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d101      	bne.n	80015f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}

080015fe <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	211f      	movs	r1, #31
 8001612:	400a      	ands	r2, r1
 8001614:	210f      	movs	r1, #15
 8001616:	4091      	lsls	r1, r2
 8001618:	000a      	movs	r2, r1
 800161a:	43d2      	mvns	r2, r2
 800161c:	401a      	ands	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0e9b      	lsrs	r3, r3, #26
 8001622:	210f      	movs	r1, #15
 8001624:	4019      	ands	r1, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	201f      	movs	r0, #31
 800162a:	4003      	ands	r3, r0
 800162c:	4099      	lsls	r1, r3
 800162e:	000b      	movs	r3, r1
 8001630:	431a      	orrs	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}

0800163e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	035b      	lsls	r3, r3, #13
 8001650:	0b5b      	lsrs	r3, r3, #13
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	0352      	lsls	r2, r2, #13
 8001672:	0b52      	lsrs	r2, r2, #13
 8001674:	43d2      	mvns	r2, r2
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}

08001684 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}

0800169c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	0212      	lsls	r2, r2, #8
 80016b0:	43d2      	mvns	r2, r2
 80016b2:	401a      	ands	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	400b      	ands	r3, r1
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80016be:	400b      	ands	r3, r1
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	07ffff00 	.word	0x07ffff00

080016d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	0552      	lsls	r2, r2, #21
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	6fffffe8 	.word	0x6fffffe8

080016fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	055b      	lsls	r3, r3, #21
 800170c:	401a      	ands	r2, r3
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	055b      	lsls	r3, r3, #21
 8001712:	429a      	cmp	r2, r3
 8001714:	d101      	bne.n	800171a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800171a:	2300      	movs	r3, #0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <LL_ADC_Enable+0x20>)
 8001732:	4013      	ands	r3, r2
 8001734:	2201      	movs	r2, #1
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	7fffffe8 	.word	0x7fffffe8

08001748 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <LL_ADC_Disable+0x20>)
 8001756:	4013      	ands	r3, r2
 8001758:	2202      	movs	r2, #2
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b002      	add	sp, #8
 8001766:	bd80      	pop	{r7, pc}
 8001768:	7fffffe8 	.word	0x7fffffe8

0800176c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2201      	movs	r2, #1
 800177a:	4013      	ands	r3, r2
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <LL_ADC_IsEnabled+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_ADC_IsEnabled+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}

0800178e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2202      	movs	r2, #2
 800179c:	4013      	ands	r3, r2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d101      	bne.n	80017a6 <LL_ADC_IsDisableOngoing+0x18>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_ADC_IsDisableOngoing+0x1a>
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <LL_ADC_REG_StartConversion+0x20>)
 80017be:	4013      	ands	r3, r2
 80017c0:	2204      	movs	r2, #4
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	7fffffe8 	.word	0x7fffffe8

080017d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2204      	movs	r2, #4
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d101      	bne.n	80017ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	231f      	movs	r3, #31
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1ad      	b.n	8001b7a <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10a      	bne.n	800183c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff fcff 	bl	800122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2254      	movs	r2, #84	; 0x54
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff ff5b 	bl	80016fc <LL_ADC_IsInternalRegulatorEnabled>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d114      	bne.n	8001874 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff ff40 	bl	80016d4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001854:	4bcb      	ldr	r3, [pc, #812]	; (8001b84 <HAL_ADC_Init+0x38c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	49cb      	ldr	r1, [pc, #812]	; (8001b88 <HAL_ADC_Init+0x390>)
 800185a:	0018      	movs	r0, r3
 800185c:	f7fe fc52 	bl	8000104 <__udivsi3>
 8001860:	0003      	movs	r3, r0
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001866:	e002      	b.n	800186e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3b01      	subs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f9      	bne.n	8001868 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff ff3f 	bl	80016fc <LL_ADC_IsInternalRegulatorEnabled>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	2210      	movs	r2, #16
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	2201      	movs	r2, #1
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800189a:	231f      	movs	r3, #31
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff ff94 	bl	80017d4 <LL_ADC_REG_IsConversionOngoing>
 80018ac:	0003      	movs	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	2210      	movs	r2, #16
 80018b6:	4013      	ands	r3, r2
 80018b8:	d000      	beq.n	80018bc <HAL_ADC_Init+0xc4>
 80018ba:	e151      	b.n	8001b60 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d000      	beq.n	80018c4 <HAL_ADC_Init+0xcc>
 80018c2:	e14d      	b.n	8001b60 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4ab0      	ldr	r2, [pc, #704]	; (8001b8c <HAL_ADC_Init+0x394>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	2202      	movs	r2, #2
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff ff47 	bl	800176c <LL_ADC_IsEnabled>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d151      	bne.n	8001986 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2218      	movs	r2, #24
 80018ea:	4393      	bics	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	0f9b      	lsrs	r3, r3, #30
 8001900:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001906:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 800190c:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8001912:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8001918:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	223c      	movs	r2, #60	; 0x3c
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d103      	bne.n	8001932 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2201      	movs	r2, #1
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	4a95      	ldr	r2, [pc, #596]	; (8001b90 <HAL_ADC_Init+0x398>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	430a      	orrs	r2, r1
 8001946:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	061b      	lsls	r3, r3, #24
 8001950:	429a      	cmp	r2, r3
 8001952:	d018      	beq.n	8001986 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	05db      	lsls	r3, r3, #23
 800195c:	429a      	cmp	r2, r3
 800195e:	d012      	beq.n	8001986 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	061b      	lsls	r3, r3, #24
 8001968:	429a      	cmp	r2, r3
 800196a:	d00c      	beq.n	8001986 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800196c:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_ADC_Init+0x39c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a89      	ldr	r2, [pc, #548]	; (8001b98 <HAL_ADC_Init+0x3a0>)
 8001972:	4013      	ands	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	23f0      	movs	r3, #240	; 0xf0
 800197c:	039b      	lsls	r3, r3, #14
 800197e:	401a      	ands	r2, r3
 8001980:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_ADC_Init+0x39c>)
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7e1b      	ldrb	r3, [r3, #24]
 800198a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e5b      	ldrb	r3, [r3, #25]
 8001990:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001992:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e9b      	ldrb	r3, [r3, #26]
 8001998:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800199a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_ADC_Init+0x1b2>
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	e000      	b.n	80019ac <HAL_ADC_Init+0x1b4>
 80019aa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019ac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019b2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da04      	bge.n	80019c6 <HAL_ADC_Init+0x1ce>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	e001      	b.n	80019ca <HAL_ADC_Init+0x1d2>
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80019ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	5c5b      	ldrb	r3, [r3, r1]
 80019d2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019d4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d115      	bne.n	8001a12 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7e9b      	ldrb	r3, [r3, #26]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0252      	lsls	r2, r2, #9
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	e00b      	b.n	8001a12 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	2220      	movs	r2, #32
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1e:	23e0      	movs	r3, #224	; 0xe0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <HAL_ADC_Init+0x3a4>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4a54      	ldr	r2, [pc, #336]	; (8001ba0 <HAL_ADC_Init+0x3a8>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a64:	001a      	movs	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	f7ff fd9b 	bl	80015a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	494b      	ldr	r1, [pc, #300]	; (8001ba4 <HAL_ADC_Init+0x3ac>)
 8001a76:	001a      	movs	r2, r3
 8001a78:	f7ff fd93 	bl	80015a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2110      	movs	r1, #16
 8001a90:	4249      	negs	r1, r1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28
 8001a96:	e03c      	b.n	8001b12 <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	039b      	lsls	r3, r3, #14
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d136      	bne.n	8001b12 <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e00c      	b.n	8001ac4 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	40da      	lsrs	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d006      	beq.n	8001acc <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d9ef      	bls.n	8001aaa <HAL_ADC_Init+0x2b2>
 8001aca:	e000      	b.n	8001ace <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8001acc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d109      	bne.n	8001ae8 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4249      	negs	r1, r1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ae6:	e014      	b.n	8001b12 <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <HAL_ADC_Init+0x3b0>)
 8001af4:	4694      	mov	ip, r2
 8001af6:	4463      	add	r3, ip
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	221c      	movs	r2, #28
 8001afc:	4013      	ands	r3, r2
 8001afe:	2210      	movs	r2, #16
 8001b00:	4252      	negs	r2, r2
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0011      	movs	r1, r2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a24      	ldr	r2, [pc, #144]	; (8001bac <HAL_ADC_Init+0x3b4>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d10b      	bne.n	8001b3a <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	4393      	bics	r3, r2
 8001b30:	2201      	movs	r2, #1
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b38:	e01c      	b.n	8001b74 <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	2212      	movs	r2, #18
 8001b40:	4393      	bics	r3, r2
 8001b42:	2210      	movs	r2, #16
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	2201      	movs	r2, #1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b56:	231f      	movs	r3, #31
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b5e:	e009      	b.n	8001b74 <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	2210      	movs	r2, #16
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b6c:	231f      	movs	r3, #31
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b74:	231f      	movs	r3, #31
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
}
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b008      	add	sp, #32
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	20000000 	.word	0x20000000
 8001b88:	00030d40 	.word	0x00030d40
 8001b8c:	fffffefd 	.word	0xfffffefd
 8001b90:	1ffffc02 	.word	0x1ffffc02
 8001b94:	40012708 	.word	0x40012708
 8001b98:	ffc3ffff 	.word	0xffc3ffff
 8001b9c:	fffe0219 	.word	0xfffe0219
 8001ba0:	dffffc02 	.word	0xdffffc02
 8001ba4:	07ffff04 	.word	0x07ffff04
 8001ba8:	3fffffff 	.word	0x3fffffff
 8001bac:	833fffe7 	.word	0x833fffe7

08001bb0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fe09 	bl	80017d4 <LL_ADC_REG_IsConversionOngoing>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d135      	bne.n	8001c32 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2254      	movs	r2, #84	; 0x54
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_Start+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e035      	b.n	8001c40 <HAL_ADC_Start+0x90>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2254      	movs	r2, #84	; 0x54
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bdc:	250f      	movs	r5, #15
 8001bde:	197c      	adds	r4, r7, r5
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 fbd6 	bl	8002394 <ADC_Enable>
 8001be8:	0003      	movs	r3, r0
 8001bea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bec:	197b      	adds	r3, r7, r5
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d119      	bne.n	8001c28 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <HAL_ADC_Start+0x98>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0052      	lsls	r2, r2, #1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	221c      	movs	r2, #28
 8001c12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2254      	movs	r2, #84	; 0x54
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fdc5 	bl	80017b0 <LL_ADC_REG_StartConversion>
 8001c26:	e008      	b.n	8001c3a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2254      	movs	r2, #84	; 0x54
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]
 8001c30:	e003      	b.n	8001c3a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c32:	230f      	movs	r3, #15
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2202      	movs	r2, #2
 8001c38:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b004      	add	sp, #16
 8001c46:	bdb0      	pop	{r4, r5, r7, pc}
 8001c48:	fffff0fe 	.word	0xfffff0fe

08001c4c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d102      	bne.n	8001c64 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e00f      	b.n	8001c84 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d007      	beq.n	8001c80 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	2220      	movs	r2, #32
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e06c      	b.n	8001d5a <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c80:	2304      	movs	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c84:	f7ff fc2a 	bl	80014dc <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c8c:	e019      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3301      	adds	r3, #1
 8001c92:	d016      	beq.n	8001cc2 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c94:	f7ff fc22 	bl	80014dc <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d302      	bcc.n	8001caa <HAL_ADC_PollForConversion+0x5e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	2204      	movs	r2, #4
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2254      	movs	r2, #84	; 0x54
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04b      	b.n	8001d5a <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0df      	beq.n	8001c8e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff fc7b 	bl	80015dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d02e      	beq.n	8001d48 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7e9b      	ldrb	r3, [r3, #26]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d12a      	bne.n	8001d48 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d123      	bne.n	8001d48 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7ff fd65 	bl	80017d4 <LL_ADC_REG_IsConversionOngoing>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d110      	bne.n	8001d30 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	210c      	movs	r1, #12
 8001d1a:	438a      	bics	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_ADC_PollForConversion+0x118>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	2201      	movs	r2, #1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d2e:	e00b      	b.n	8001d48 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	2220      	movs	r2, #32
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2201      	movs	r2, #1
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d103      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	220c      	movs	r2, #12
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	fffffefe 	.word	0xfffffefe

08001d68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d017      	beq.n	8001dd4 <HAL_ADC_IRQHandler+0x54>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	2210      	movs	r2, #16
 8001db2:	4013      	ands	r3, r2
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fc70 	bl	80026ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d003      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x64>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2204      	movs	r2, #4
 8001de0:	4013      	ands	r3, r2
 8001de2:	d107      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2208      	movs	r2, #8
 8001de8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001dea:	d04d      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2208      	movs	r2, #8
 8001df0:	4013      	ands	r3, r2
 8001df2:	d049      	beq.n	8001e88 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d106      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fbe3 	bl	80015dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d02e      	beq.n	8001e78 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7e9b      	ldrb	r3, [r3, #26]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12a      	bne.n	8001e78 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d123      	bne.n	8001e78 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fccd 	bl	80017d4 <LL_ADC_REG_IsConversionOngoing>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d110      	bne.n	8001e60 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	210c      	movs	r1, #12
 8001e4a:	438a      	bics	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_ADC_IRQHandler+0x22c>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	2201      	movs	r2, #1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e5e:	e00b      	b.n	8001e78 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	2220      	movs	r2, #32
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2201      	movs	r2, #1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 f898 	bl	8001fb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	220c      	movs	r2, #12
 8001e86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d012      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x136>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	4013      	ands	r3, r2
 8001e96:	d00e      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	0252      	lsls	r2, r2, #9
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f889 	bl	8001fc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d014      	beq.n	8001eea <HAL_ADC_IRQHandler+0x16a>
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	0292      	lsls	r2, r2, #10
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 fbd6 	bl	800268c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d014      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x19e>
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	02d2      	lsls	r2, r2, #11
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 fbc4 	bl	800269c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2210      	movs	r2, #16
 8001f22:	4013      	ands	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x1fe>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d027      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e008      	b.n	8001f4e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff fb9f 	bl	8001684 <LL_ADC_REG_GetDMATransfer>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d110      	bne.n	8001f76 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	00d2      	lsls	r2, r2, #3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2202      	movs	r2, #2
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 f82d 	bl	8001fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	4013      	ands	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0x224>
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d008      	beq.n	8001fa4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f000 fb91 	bl	80026bc <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0192      	lsls	r2, r2, #6
 8001fa2:	601a      	str	r2, [r3, #0]
  }
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b006      	add	sp, #24
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	fffffefe 	.word	0xfffffefe

08001fb0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fea:	2317      	movs	r3, #23
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2254      	movs	r2, #84	; 0x54
 8001ffa:	5c9b      	ldrb	r3, [r3, r2]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x24>
 8002000:	2302      	movs	r3, #2
 8002002:	e1c2      	b.n	800238a <HAL_ADC_ConfigChannel+0x3aa>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2254      	movs	r2, #84	; 0x54
 8002008:	2101      	movs	r1, #1
 800200a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff fbdf 	bl	80017d4 <LL_ADC_REG_IsConversionOngoing>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d000      	beq.n	800201c <HAL_ADC_ConfigChannel+0x3c>
 800201a:	e1a5      	b.n	8002368 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d100      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x46>
 8002024:	e144      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	429a      	cmp	r2, r3
 8002030:	d004      	beq.n	800203c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002036:	4ac2      	ldr	r2, [pc, #776]	; (8002340 <HAL_ADC_ConfigChannel+0x360>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0019      	movs	r1, r3
 8002046:	0010      	movs	r0, r2
 8002048:	f7ff faf9 	bl	800163e <LL_ADC_REG_SetSequencerChAdd>
 800204c:	e0c9      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	211f      	movs	r1, #31
 8002058:	400b      	ands	r3, r1
 800205a:	210f      	movs	r1, #15
 800205c:	4099      	lsls	r1, r3
 800205e:	000b      	movs	r3, r1
 8002060:	43db      	mvns	r3, r3
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	035b      	lsls	r3, r3, #13
 800206c:	0b5b      	lsrs	r3, r3, #13
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x9c>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	221f      	movs	r2, #31
 8002078:	4013      	ands	r3, r2
 800207a:	e098      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	d000      	beq.n	8002088 <HAL_ADC_ConfigChannel+0xa8>
 8002086:	e091      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1cc>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d000      	beq.n	8002094 <HAL_ADC_ConfigChannel+0xb4>
 8002092:	e089      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1c8>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2204      	movs	r2, #4
 800209a:	4013      	ands	r3, r2
 800209c:	d000      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0xc0>
 800209e:	e081      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x1c4>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2208      	movs	r2, #8
 80020a6:	4013      	ands	r3, r2
 80020a8:	d000      	beq.n	80020ac <HAL_ADC_ConfigChannel+0xcc>
 80020aa:	e079      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1c0>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	4013      	ands	r3, r2
 80020b4:	d000      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0xd8>
 80020b6:	e071      	b.n	800219c <HAL_ADC_ConfigChannel+0x1bc>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2220      	movs	r2, #32
 80020be:	4013      	ands	r3, r2
 80020c0:	d000      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0xe4>
 80020c2:	e069      	b.n	8002198 <HAL_ADC_ConfigChannel+0x1b8>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	4013      	ands	r3, r2
 80020cc:	d000      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0xf0>
 80020ce:	e061      	b.n	8002194 <HAL_ADC_ConfigChannel+0x1b4>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	4013      	ands	r3, r2
 80020d8:	d000      	beq.n	80020dc <HAL_ADC_ConfigChannel+0xfc>
 80020da:	e059      	b.n	8002190 <HAL_ADC_ConfigChannel+0x1b0>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	d151      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1ac>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	d149      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1a8>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4013      	ands	r3, r2
 80020fe:	d141      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1a4>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d139      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1a0>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	015b      	lsls	r3, r3, #5
 8002114:	4013      	ands	r3, r2
 8002116:	d131      	bne.n	800217c <HAL_ADC_ConfigChannel+0x19c>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	019b      	lsls	r3, r3, #6
 8002120:	4013      	ands	r3, r2
 8002122:	d129      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x198>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	4013      	ands	r3, r2
 800212e:	d121      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x194>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	4013      	ands	r3, r2
 800213a:	d119      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x190>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	025b      	lsls	r3, r3, #9
 8002144:	4013      	ands	r3, r2
 8002146:	d111      	bne.n	800216c <HAL_ADC_ConfigChannel+0x18c>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	4013      	ands	r3, r2
 8002152:	d109      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x188>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	02db      	lsls	r3, r3, #11
 800215c:	4013      	ands	r3, r2
 800215e:	d001      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x184>
 8002160:	2312      	movs	r3, #18
 8002162:	e024      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002164:	2300      	movs	r3, #0
 8002166:	e022      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002168:	2311      	movs	r3, #17
 800216a:	e020      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 800216c:	2310      	movs	r3, #16
 800216e:	e01e      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002170:	230f      	movs	r3, #15
 8002172:	e01c      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002174:	230e      	movs	r3, #14
 8002176:	e01a      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002178:	230d      	movs	r3, #13
 800217a:	e018      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 800217c:	230c      	movs	r3, #12
 800217e:	e016      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002180:	230b      	movs	r3, #11
 8002182:	e014      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002184:	230a      	movs	r3, #10
 8002186:	e012      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002188:	2309      	movs	r3, #9
 800218a:	e010      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 800218c:	2308      	movs	r3, #8
 800218e:	e00e      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002190:	2307      	movs	r3, #7
 8002192:	e00c      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002194:	2306      	movs	r3, #6
 8002196:	e00a      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 8002198:	2305      	movs	r3, #5
 800219a:	e008      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 800219c:	2304      	movs	r3, #4
 800219e:	e006      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 80021a0:	2303      	movs	r3, #3
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e002      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1ce>
 80021ac:	2300      	movs	r3, #0
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	6852      	ldr	r2, [r2, #4]
 80021b2:	201f      	movs	r0, #31
 80021b4:	4002      	ands	r2, r0
 80021b6:	4093      	lsls	r3, r2
 80021b8:	000a      	movs	r2, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d808      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	001a      	movs	r2, r3
 80021de:	f7ff fa0e 	bl	80015fe <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	001a      	movs	r2, r3
 80021f0:	f7ff fa54 	bl	800169c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db00      	blt.n	80021fe <HAL_ADC_ConfigChannel+0x21e>
 80021fc:	e0be      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021fe:	4b51      	ldr	r3, [pc, #324]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff f9c1 	bl	8001588 <LL_ADC_GetCommonPathInternalCh>
 8002206:	0003      	movs	r3, r0
 8002208:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a4e      	ldr	r2, [pc, #312]	; (8002348 <HAL_ADC_ConfigChannel+0x368>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d123      	bne.n	800225c <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800221c:	d11e      	bne.n	800225c <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	0412      	lsls	r2, r2, #16
 8002224:	4313      	orrs	r3, r2
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 8002228:	0019      	movs	r1, r3
 800222a:	0010      	movs	r0, r2
 800222c:	f7ff f998 	bl	8001560 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002230:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_ADC_ConfigChannel+0x36c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4946      	ldr	r1, [pc, #280]	; (8002350 <HAL_ADC_ConfigChannel+0x370>)
 8002236:	0018      	movs	r0, r3
 8002238:	f7fd ff64 	bl	8000104 <__udivsi3>
 800223c:	0003      	movs	r3, r0
 800223e:	001a      	movs	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	189b      	adds	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800224c:	e002      	b.n	8002254 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b01      	subs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800225a:	e08f      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <HAL_ADC_ConfigChannel+0x374>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10e      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x2a4>
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	045b      	lsls	r3, r3, #17
 800226c:	4013      	ands	r3, r2
 800226e:	d109      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	0452      	lsls	r2, r2, #17
 8002276:	4313      	orrs	r3, r2
 8002278:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 800227a:	0019      	movs	r1, r3
 800227c:	0010      	movs	r0, r2
 800227e:	f7ff f96f 	bl	8001560 <LL_ADC_SetCommonPathInternalCh>
 8002282:	e07b      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a33      	ldr	r2, [pc, #204]	; (8002358 <HAL_ADC_ConfigChannel+0x378>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d000      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x2b0>
 800228e:	e075      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	03db      	lsls	r3, r3, #15
 8002296:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002298:	d000      	beq.n	800229c <HAL_ADC_ConfigChannel+0x2bc>
 800229a:	e06f      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	03d2      	lsls	r2, r2, #15
 80022a2:	4313      	orrs	r3, r2
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 80022a6:	0019      	movs	r1, r3
 80022a8:	0010      	movs	r0, r2
 80022aa:	f7ff f959 	bl	8001560 <LL_ADC_SetCommonPathInternalCh>
 80022ae:	e065      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	061b      	lsls	r3, r3, #24
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022c0:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_ADC_ConfigChannel+0x360>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d107      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0019      	movs	r1, r3
 80022d0:	0010      	movs	r0, r2
 80022d2:	f7ff f9c5 	bl	8001660 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da4e      	bge.n	800237c <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7ff f951 	bl	8001588 <LL_ADC_GetCommonPathInternalCh>
 80022e6:	0003      	movs	r3, r0
 80022e8:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_ADC_ConfigChannel+0x368>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d108      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_ADC_ConfigChannel+0x37c>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 80022fc:	0019      	movs	r1, r3
 80022fe:	0010      	movs	r0, r2
 8002300:	f7ff f92e 	bl	8001560 <LL_ADC_SetCommonPathInternalCh>
 8002304:	e03a      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_ADC_ConfigChannel+0x374>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_ADC_ConfigChannel+0x380>)
 8002314:	4013      	ands	r3, r2
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 8002318:	0019      	movs	r1, r3
 800231a:	0010      	movs	r0, r2
 800231c:	f7ff f920 	bl	8001560 <LL_ADC_SetCommonPathInternalCh>
 8002320:	e02c      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_ADC_ConfigChannel+0x378>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d127      	bne.n	800237c <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <HAL_ADC_ConfigChannel+0x384>)
 8002330:	4013      	ands	r3, r2
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_ADC_ConfigChannel+0x364>)
 8002334:	0019      	movs	r1, r3
 8002336:	0010      	movs	r0, r2
 8002338:	f7ff f912 	bl	8001560 <LL_ADC_SetCommonPathInternalCh>
 800233c:	e01e      	b.n	800237c <HAL_ADC_ConfigChannel+0x39c>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	80000004 	.word	0x80000004
 8002344:	40012708 	.word	0x40012708
 8002348:	b0001000 	.word	0xb0001000
 800234c:	20000000 	.word	0x20000000
 8002350:	00030d40 	.word	0x00030d40
 8002354:	b8004000 	.word	0xb8004000
 8002358:	b4002000 	.word	0xb4002000
 800235c:	ff7fffff 	.word	0xff7fffff
 8002360:	feffffff 	.word	0xfeffffff
 8002364:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	2220      	movs	r2, #32
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002374:	2317      	movs	r3, #23
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2254      	movs	r2, #84	; 0x54
 8002380:	2100      	movs	r1, #0
 8002382:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002384:	2317      	movs	r3, #23
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b006      	add	sp, #24
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)

08002394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7ff f9e1 	bl	800176c <LL_ADC_IsEnabled>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d162      	bne.n	8002474 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a32      	ldr	r2, [pc, #200]	; (8002480 <ADC_Enable+0xec>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	2210      	movs	r2, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	2201      	movs	r2, #1
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e04f      	b.n	8002476 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	f7ff f9a2 	bl	8001724 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <ADC_Enable+0xf0>)
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff f8d0 	bl	8001588 <LL_ADC_GetCommonPathInternalCh>
 80023e8:	0002      	movs	r2, r0
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00f      	beq.n	8002412 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <ADC_Enable+0xf4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4925      	ldr	r1, [pc, #148]	; (800248c <ADC_Enable+0xf8>)
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7fd fe83 	bl	8000104 <__udivsi3>
 80023fe:	0003      	movs	r3, r0
 8002400:	3301      	adds	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002404:	e002      	b.n	800240c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7e5b      	ldrb	r3, [r3, #25]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d02c      	beq.n	8002474 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800241a:	f7ff f85f 	bl	80014dc <HAL_GetTick>
 800241e:	0003      	movs	r3, r0
 8002420:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002422:	e020      	b.n	8002466 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff f99f 	bl	800176c <LL_ADC_IsEnabled>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d104      	bne.n	800243c <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff f974 	bl	8001724 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800243c:	f7ff f84e 	bl	80014dc <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d90d      	bls.n	8002466 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	2210      	movs	r2, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2201      	movs	r2, #1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e007      	b.n	8002476 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	2b01      	cmp	r3, #1
 8002472:	d1d7      	bne.n	8002424 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	80000017 	.word	0x80000017
 8002484:	40012708 	.word	0x40012708
 8002488:	20000000 	.word	0x20000000
 800248c:	00030d40 	.word	0x00030d40

08002490 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff f976 	bl	800178e <LL_ADC_IsDisableOngoing>
 80024a2:	0003      	movs	r3, r0
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff f95e 	bl	800176c <LL_ADC_IsEnabled>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d040      	beq.n	8002536 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d13d      	bne.n	8002536 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2205      	movs	r2, #5
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10d      	bne.n	80024e4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff f93b 	bl	8001748 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2203      	movs	r2, #3
 80024d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024da:	f7fe ffff 	bl	80014dc <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024e2:	e022      	b.n	800252a <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	2210      	movs	r2, #16
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	2201      	movs	r2, #1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e01b      	b.n	8002538 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002500:	f7fe ffec 	bl	80014dc <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d90d      	bls.n	800252a <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	2210      	movs	r2, #16
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2201      	movs	r2, #1
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e006      	b.n	8002538 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2201      	movs	r2, #1
 8002532:	4013      	ands	r3, r2
 8002534:	d1e4      	bne.n	8002500 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b004      	add	sp, #16
 800253e:	bd80      	pop	{r7, pc}

08002540 <LL_ADC_IsEnabled>:
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <LL_ADC_IsEnabled+0x18>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <LL_ADC_IsEnabled+0x1a>
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}

08002562 <LL_ADC_IsCalibrationOnGoing>:
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0fdb      	lsrs	r3, r3, #31
 8002570:	07da      	lsls	r2, r3, #31
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	429a      	cmp	r2, r3
 8002578:	d101      	bne.n	800257e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800257e:	2300      	movs	r3, #0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2254      	movs	r2, #84	; 0x54
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADCEx_Calibration_Start+0x1a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e06c      	b.n	800267c <HAL_ADCEx_Calibration_Start+0xf4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2254      	movs	r2, #84	; 0x54
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fc      	adds	r4, r7, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff ff6d 	bl	8002490 <ADC_Disable>
 80025b6:	0003      	movs	r3, r0
 80025b8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff ffbe 	bl	8002540 <LL_ADC_IsEnabled>
 80025c4:	1e03      	subs	r3, r0, #0
 80025c6:	d14c      	bne.n	8002662 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_ADCEx_Calibration_Start+0xfc>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	2202      	movs	r2, #2
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2203      	movs	r2, #3
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2103      	movs	r1, #3
 80025f0:	438a      	bics	r2, r1
 80025f2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0609      	lsls	r1, r1, #24
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002606:	e014      	b.n	8002632 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_ADCEx_Calibration_Start+0x100>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d90d      	bls.n	8002632 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	2212      	movs	r2, #18
 800261c:	4393      	bics	r3, r2
 800261e:	2210      	movs	r2, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2254      	movs	r2, #84	; 0x54
 800262a:	2100      	movs	r1, #0
 800262c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e024      	b.n	800267c <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0018      	movs	r0, r3
 8002638:	f7ff ff93 	bl	8002562 <LL_ADC_IsCalibrationOnGoing>
 800263c:	1e03      	subs	r3, r0, #0
 800263e:	d1e3      	bne.n	8002608 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	430a      	orrs	r2, r1
 800264e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	2203      	movs	r2, #3
 8002656:	4393      	bics	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	; 0x58
 8002660:	e005      	b.n	800266e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	2210      	movs	r2, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2254      	movs	r2, #84	; 0x54
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002676:	2317      	movs	r3, #23
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b007      	add	sp, #28
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	fffffefd 	.word	0xfffffefd
 8002688:	0002f1ff 	.word	0x0002f1ff

0800268c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	0002      	movs	r2, r0
 80026d4:	1dfb      	adds	r3, r7, #7
 80026d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b7f      	cmp	r3, #127	; 0x7f
 80026de:	d809      	bhi.n	80026f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	001a      	movs	r2, r3
 80026e6:	231f      	movs	r3, #31
 80026e8:	401a      	ands	r2, r3
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_EnableIRQ+0x30>)
 80026ec:	2101      	movs	r1, #1
 80026ee:	4091      	lsls	r1, r2
 80026f0:	000a      	movs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	0002      	movs	r2, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	1dfb      	adds	r3, r7, #7
 800270c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b7f      	cmp	r3, #127	; 0x7f
 8002714:	d828      	bhi.n	8002768 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <__NVIC_SetPriority+0xd4>)
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b25b      	sxtb	r3, r3
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	33c0      	adds	r3, #192	; 0xc0
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	589b      	ldr	r3, [r3, r2]
 8002726:	1dfa      	adds	r2, r7, #7
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	0011      	movs	r1, r2
 800272c:	2203      	movs	r2, #3
 800272e:	400a      	ands	r2, r1
 8002730:	00d2      	lsls	r2, r2, #3
 8002732:	21ff      	movs	r1, #255	; 0xff
 8002734:	4091      	lsls	r1, r2
 8002736:	000a      	movs	r2, r1
 8002738:	43d2      	mvns	r2, r2
 800273a:	401a      	ands	r2, r3
 800273c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	401a      	ands	r2, r3
 8002746:	1dfb      	adds	r3, r7, #7
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	0018      	movs	r0, r3
 800274c:	2303      	movs	r3, #3
 800274e:	4003      	ands	r3, r0
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002754:	481f      	ldr	r0, [pc, #124]	; (80027d4 <__NVIC_SetPriority+0xd4>)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b25b      	sxtb	r3, r3
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	430a      	orrs	r2, r1
 8002760:	33c0      	adds	r3, #192	; 0xc0
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002766:	e031      	b.n	80027cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <__NVIC_SetPriority+0xd8>)
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	0019      	movs	r1, r3
 8002770:	230f      	movs	r3, #15
 8002772:	400b      	ands	r3, r1
 8002774:	3b08      	subs	r3, #8
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3306      	adds	r3, #6
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	3304      	adds	r3, #4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1dfa      	adds	r2, r7, #7
 8002784:	7812      	ldrb	r2, [r2, #0]
 8002786:	0011      	movs	r1, r2
 8002788:	2203      	movs	r2, #3
 800278a:	400a      	ands	r2, r1
 800278c:	00d2      	lsls	r2, r2, #3
 800278e:	21ff      	movs	r1, #255	; 0xff
 8002790:	4091      	lsls	r1, r2
 8002792:	000a      	movs	r2, r1
 8002794:	43d2      	mvns	r2, r2
 8002796:	401a      	ands	r2, r3
 8002798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	019b      	lsls	r3, r3, #6
 800279e:	22ff      	movs	r2, #255	; 0xff
 80027a0:	401a      	ands	r2, r3
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	0018      	movs	r0, r3
 80027a8:	2303      	movs	r3, #3
 80027aa:	4003      	ands	r3, r0
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <__NVIC_SetPriority+0xd8>)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	001c      	movs	r4, r3
 80027b8:	230f      	movs	r3, #15
 80027ba:	4023      	ands	r3, r4
 80027bc:	3b08      	subs	r3, #8
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	430a      	orrs	r2, r1
 80027c2:	3306      	adds	r3, #6
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	18c3      	adds	r3, r0, r3
 80027c8:	3304      	adds	r3, #4
 80027ca:	601a      	str	r2, [r3, #0]
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b003      	add	sp, #12
 80027d2:	bd90      	pop	{r4, r7, pc}
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <SysTick_Config+0x40>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e010      	b.n	8002814 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <SysTick_Config+0x44>)
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	3a01      	subs	r2, #1
 80027f8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	2301      	movs	r3, #1
 80027fc:	425b      	negs	r3, r3
 80027fe:	2103      	movs	r1, #3
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff ff7d 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <SysTick_Config+0x44>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x44>)
 800280e:	2207      	movs	r2, #7
 8002810:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}
 800281c:	00ffffff 	.word	0x00ffffff
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	210f      	movs	r1, #15
 8002830:	187b      	adds	r3, r7, r1
 8002832:	1c02      	adds	r2, r0, #0
 8002834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	187b      	adds	r3, r7, r1
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b25b      	sxtb	r3, r3
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	0002      	movs	r2, r0
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b25b      	sxtb	r3, r3
 8002860:	0018      	movs	r0, r3
 8002862:	f7ff ff33 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f7ff ffaf 	bl	80027dc <SysTick_Config>
 800287e:	0003      	movs	r3, r0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e14d      	b.n	8002b34 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4091      	lsls	r1, r2
 80028a2:	000a      	movs	r2, r1
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d100      	bne.n	80028b0 <HAL_GPIO_Init+0x28>
 80028ae:	e13e      	b.n	8002b2e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d00b      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	409a      	lsls	r2, r3
 80028de:	0013      	movs	r3, r2
 80028e0:	43da      	mvns	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	0013      	movs	r3, r2
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	43da      	mvns	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	2201      	movs	r2, #1
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0xea>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b12      	cmp	r3, #18
 8002970:	d123      	bne.n	80029ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	58d3      	ldr	r3, [r2, r3]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	409a      	lsls	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	43da      	mvns	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2107      	movs	r1, #7
 800299e:	400b      	ands	r3, r1
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	0092      	lsls	r2, r2, #2
 80029b6:	6939      	ldr	r1, [r7, #16]
 80029b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	43da      	mvns	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2203      	movs	r2, #3
 80029d8:	401a      	ands	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	0013      	movs	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	055b      	lsls	r3, r3, #21
 80029f6:	4013      	ands	r3, r2
 80029f8:	d100      	bne.n	80029fc <HAL_GPIO_Init+0x174>
 80029fa:	e098      	b.n	8002b2e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80029fc:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3318      	adds	r3, #24
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	589b      	ldr	r3, [r3, r2]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4013      	ands	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	220f      	movs	r2, #15
 8002a14:	409a      	lsls	r2, r3
 8002a16:	0013      	movs	r3, r2
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	23a0      	movs	r3, #160	; 0xa0
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x1d6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <HAL_GPIO_Init+0x2c8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x1d2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_GPIO_Init+0x2cc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x1ce>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a46      	ldr	r2, [pc, #280]	; (8002b58 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x1ca>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <HAL_GPIO_Init+0x2d4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x1c6>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e008      	b.n	8002a60 <HAL_GPIO_Init+0x1d8>
 8002a4e:	2305      	movs	r3, #5
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x1d8>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e004      	b.n	8002a60 <HAL_GPIO_Init+0x1d8>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_Init+0x1d8>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x1d8>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	2103      	movs	r1, #3
 8002a64:	400a      	ands	r2, r1
 8002a66:	00d2      	lsls	r2, r2, #3
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a70:	4936      	ldr	r1, [pc, #216]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3318      	adds	r3, #24
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a7e:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	58d3      	ldr	r3, [r2, r3]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	025b      	lsls	r3, r3, #9
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aa4:	4929      	ldr	r1, [pc, #164]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002aae:	2384      	movs	r3, #132	; 0x84
 8002ab0:	58d3      	ldr	r3, [r2, r3]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad2:	491e      	ldr	r1, [pc, #120]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002ad4:	2284      	movs	r2, #132	; 0x84
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	035b      	lsls	r3, r3, #13
 8002af2:	4013      	ands	r3, r2
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	039b      	lsls	r3, r3, #14
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_GPIO_Init+0x2c4>)
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	40da      	lsrs	r2, r3
 8002b3c:	1e13      	subs	r3, r2, #0
 8002b3e:	d000      	beq.n	8002b42 <HAL_GPIO_Init+0x2ba>
 8002b40:	e6aa      	b.n	8002898 <HAL_GPIO_Init+0x10>
  }
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b006      	add	sp, #24
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	40021800 	.word	0x40021800
 8002b50:	50000400 	.word	0x50000400
 8002b54:	50000800 	.word	0x50000800
 8002b58:	50000c00 	.word	0x50000c00
 8002b5c:	50001000 	.word	0x50001000

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	0008      	movs	r0, r1
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	1cbb      	adds	r3, r7, #2
 8002b6e:	1c02      	adds	r2, r0, #0
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	1c7b      	adds	r3, r7, #1
 8002b74:	1c0a      	adds	r2, r1, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	1c7b      	adds	r3, r7, #1
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b80:	1cbb      	adds	r3, r7, #2
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8a:	1cbb      	adds	r3, r7, #2
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11f      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	189b      	adds	r3, r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fd fa98 	bl	8000104 <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bda:	e008      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e001      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e009      	b.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d0ed      	beq.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	fffff9ff 	.word	0xfffff9ff
 8002c14:	20000000 	.word	0x20000000
 8002c18:	000f4240 	.word	0x000f4240

08002c1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f000 fb56 	bl	80032dc <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	d100      	bne.n	8002c3c <HAL_RCC_OscConfig+0x20>
 8002c3a:	e07d      	b.n	8002d38 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3c:	4bc3      	ldr	r3, [pc, #780]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2238      	movs	r2, #56	; 0x38
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c46:	4bc1      	ldr	r3, [pc, #772]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_OscConfig+0x40>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d002      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	4bba      	ldr	r3, [pc, #744]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	029b      	lsls	r3, r3, #10
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x11a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d15f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f000 fb30 	bl	80032dc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	025b      	lsls	r3, r3, #9
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x7c>
 8002c88:	4bb0      	ldr	r3, [pc, #704]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4baf      	ldr	r3, [pc, #700]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	0249      	lsls	r1, r1, #9
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e020      	b.n	8002cda <HAL_RCC_OscConfig+0xbe>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	23a0      	movs	r3, #160	; 0xa0
 8002c9e:	02db      	lsls	r3, r3, #11
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xa6>
 8002ca4:	4ba9      	ldr	r3, [pc, #676]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4ba8      	ldr	r3, [pc, #672]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	02c9      	lsls	r1, r1, #11
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	4ba6      	ldr	r3, [pc, #664]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4ba5      	ldr	r3, [pc, #660]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	0249      	lsls	r1, r1, #9
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e00b      	b.n	8002cda <HAL_RCC_OscConfig+0xbe>
 8002cc2:	4ba2      	ldr	r3, [pc, #648]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4ba1      	ldr	r3, [pc, #644]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cc8:	49a1      	ldr	r1, [pc, #644]	; (8002f50 <HAL_RCC_OscConfig+0x334>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	4b9f      	ldr	r3, [pc, #636]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002cd4:	499f      	ldr	r1, [pc, #636]	; (8002f54 <HAL_RCC_OscConfig+0x338>)
 8002cd6:	400a      	ands	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d014      	beq.n	8002d0c <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fbfb 	bl	80014dc <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fbf6 	bl	80014dc <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e2ee      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	4b93      	ldr	r3, [pc, #588]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	029b      	lsls	r3, r3, #10
 8002d06:	4013      	ands	r3, r2
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xd0>
 8002d0a:	e015      	b.n	8002d38 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fbe6 	bl	80014dc <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d16:	f7fe fbe1 	bl	80014dc <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e2d9      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	4013      	ands	r3, r2
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0xfa>
 8002d34:	e000      	b.n	8002d38 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d100      	bne.n	8002d44 <HAL_RCC_OscConfig+0x128>
 8002d42:	e099      	b.n	8002e78 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d44:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2238      	movs	r2, #56	; 0x38
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4e:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2203      	movs	r2, #3
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCC_OscConfig+0x148>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d002      	beq.n	8002d6a <HAL_RCC_OscConfig+0x14e>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d135      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d6a:	4b78      	ldr	r3, [pc, #480]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4013      	ands	r3, r2
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x166>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e2ac      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a74      	ldr	r2, [pc, #464]	; (8002f58 <HAL_RCC_OscConfig+0x33c>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	4b6e      	ldr	r3, [pc, #440]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d112      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x340>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002db2:	4b66      	ldr	r3, [pc, #408]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	0adb      	lsrs	r3, r3, #11
 8002db8:	2207      	movs	r2, #7
 8002dba:	4013      	ands	r3, r2
 8002dbc:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x344>)
 8002dbe:	40da      	lsrs	r2, r3
 8002dc0:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_RCC_OscConfig+0x348>)
 8002dc2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_OscConfig+0x34c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7fe fb2b 	bl	8001424 <HAL_InitTick>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d051      	beq.n	8002e76 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e282      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d030      	beq.n	8002e40 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5e      	ldr	r2, [pc, #376]	; (8002f5c <HAL_RCC_OscConfig+0x340>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002df2:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0049      	lsls	r1, r1, #1
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fb6c 	bl	80014dc <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fb67 	bl	80014dc <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e25f      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1c:	4b4b      	ldr	r3, [pc, #300]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4013      	ands	r3, r2
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b48      	ldr	r3, [pc, #288]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a4a      	ldr	r2, [pc, #296]	; (8002f58 <HAL_RCC_OscConfig+0x33c>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	4b44      	ldr	r3, [pc, #272]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e46:	4949      	ldr	r1, [pc, #292]	; (8002f6c <HAL_RCC_OscConfig+0x350>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fb46 	bl	80014dc <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e56:	f7fe fb41 	bl	80014dc <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e239      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e68:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x23a>
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d047      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2238      	movs	r2, #56	; 0x38
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b18      	cmp	r3, #24
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	2202      	movs	r2, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	d03c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2f6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d138      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e21b      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d019      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002eae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fb10 	bl	80014dc <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fb0b 	bl	80014dc <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e203      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0f1      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2a6>
 8002ede:	e018      	b.n	8002f12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002ee2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe faf6 	bl	80014dc <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe faf1 	bl	80014dc <HAL_GetTick>
 8002efa:	0002      	movs	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1e9      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d1f1      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x302>
 8002f1c:	e0c6      	b.n	80030ac <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	231f      	movs	r3, #31
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2238      	movs	r2, #56	; 0x38
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d11e      	bne.n	8002f70 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_OscConfig+0x330>)
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <HAL_RCC_OscConfig+0x322>
 8002f3c:	e0b6      	b.n	80030ac <HAL_RCC_OscConfig+0x490>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d000      	beq.n	8002f48 <HAL_RCC_OscConfig+0x32c>
 8002f46:	e0b1      	b.n	80030ac <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e1c7      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	fffeffff 	.word	0xfffeffff
 8002f54:	fffbffff 	.word	0xfffbffff
 8002f58:	ffff80ff 	.word	0xffff80ff
 8002f5c:	ffffc7ff 	.word	0xffffc7ff
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004
 8002f6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f70:	4bb8      	ldr	r3, [pc, #736]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8002f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	055b      	lsls	r3, r3, #21
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_OscConfig+0x364>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x366>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d011      	beq.n	8002faa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4bb3      	ldr	r3, [pc, #716]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8002f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8a:	4bb2      	ldr	r3, [pc, #712]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	0549      	lsls	r1, r1, #21
 8002f90:	430a      	orrs	r2, r1
 8002f92:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f94:	4baf      	ldr	r3, [pc, #700]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8002f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	055b      	lsls	r3, r3, #21
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002fa2:	231f      	movs	r3, #31
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4bab      	ldr	r3, [pc, #684]	; (8003258 <HAL_RCC_OscConfig+0x63c>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d11a      	bne.n	8002fec <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb6:	4ba8      	ldr	r3, [pc, #672]	; (8003258 <HAL_RCC_OscConfig+0x63c>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4ba7      	ldr	r3, [pc, #668]	; (8003258 <HAL_RCC_OscConfig+0x63c>)
 8002fbc:	2180      	movs	r1, #128	; 0x80
 8002fbe:	0049      	lsls	r1, r1, #1
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fa8a 	bl	80014dc <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fce:	f7fe fa85 	bl	80014dc <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e17d      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	4b9d      	ldr	r3, [pc, #628]	; (8003258 <HAL_RCC_OscConfig+0x63c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x3e6>
 8002ff4:	4b97      	ldr	r3, [pc, #604]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8002ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ff8:	4b96      	ldr	r3, [pc, #600]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003000:	e01c      	b.n	800303c <HAL_RCC_OscConfig+0x420>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x408>
 800300a:	4b92      	ldr	r3, [pc, #584]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800300c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300e:	4b91      	ldr	r3, [pc, #580]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003010:	2104      	movs	r1, #4
 8003012:	430a      	orrs	r2, r1
 8003014:	65da      	str	r2, [r3, #92]	; 0x5c
 8003016:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800301a:	4b8e      	ldr	r3, [pc, #568]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	65da      	str	r2, [r3, #92]	; 0x5c
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x420>
 8003024:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003028:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003030:	4b88      	ldr	r3, [pc, #544]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003032:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003034:	4b87      	ldr	r3, [pc, #540]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003036:	2104      	movs	r1, #4
 8003038:	438a      	bics	r2, r1
 800303a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d014      	beq.n	800306e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fa4a 	bl	80014dc <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304c:	e009      	b.n	8003062 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fa45 	bl	80014dc <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a80      	ldr	r2, [pc, #512]	; (800325c <HAL_RCC_OscConfig+0x640>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e13c      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003062:	4b7c      	ldr	r3, [pc, #496]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2202      	movs	r2, #2
 8003068:	4013      	ands	r3, r2
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x432>
 800306c:	e013      	b.n	8003096 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fa35 	bl	80014dc <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003076:	e009      	b.n	800308c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe fa30 	bl	80014dc <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	4a76      	ldr	r2, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x640>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e127      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308c:	4b71      	ldr	r3, [pc, #452]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	2202      	movs	r2, #2
 8003092:	4013      	ands	r3, r2
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003096:	231f      	movs	r3, #31
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a4:	4b6b      	ldr	r3, [pc, #428]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030a6:	496e      	ldr	r1, [pc, #440]	; (8003260 <HAL_RCC_OscConfig+0x644>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2220      	movs	r2, #32
 80030b2:	4013      	ands	r3, r2
 80030b4:	d039      	beq.n	800312a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01b      	beq.n	80030f6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b64      	ldr	r3, [pc, #400]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	03c9      	lsls	r1, r1, #15
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe fa06 	bl	80014dc <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d6:	f7fe fa01 	bl	80014dc <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0f9      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030e8:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	4013      	ands	r3, r2
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4ba>
 80030f4:	e019      	b.n	800312a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f6:	4b57      	ldr	r3, [pc, #348]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80030fc:	4959      	ldr	r1, [pc, #356]	; (8003264 <HAL_RCC_OscConfig+0x648>)
 80030fe:	400a      	ands	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fe f9eb 	bl	80014dc <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310c:	f7fe f9e6 	bl	80014dc <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0de      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800311e:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	4013      	ands	r3, r2
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d100      	bne.n	8003134 <HAL_RCC_OscConfig+0x518>
 8003132:	e0d2      	b.n	80032da <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2238      	movs	r2, #56	; 0x38
 800313a:	4013      	ands	r3, r2
 800313c:	2b10      	cmp	r3, #16
 800313e:	d100      	bne.n	8003142 <HAL_RCC_OscConfig+0x526>
 8003140:	e081      	b.n	8003246 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d156      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003150:	4945      	ldr	r1, [pc, #276]	; (8003268 <HAL_RCC_OscConfig+0x64c>)
 8003152:	400a      	ands	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe f9c1 	bl	80014dc <HAL_GetTick>
 800315a:	0003      	movs	r3, r0
 800315c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe f9bc 	bl	80014dc <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0b4      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	049b      	lsls	r3, r3, #18
 800317a:	4013      	ands	r3, r2
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317e:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x650>)
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	431a      	orrs	r2, r3
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b2:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0449      	lsls	r1, r1, #17
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	0549      	lsls	r1, r1, #21
 80031ca:	430a      	orrs	r2, r1
 80031cc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe f985 	bl	80014dc <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe f980 	bl	80014dc <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e078      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	049b      	lsls	r3, r3, #18
 80031f2:	4013      	ands	r3, r2
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x5bc>
 80031f6:	e070      	b.n	80032da <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 80031fe:	491a      	ldr	r1, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x64c>)
 8003200:	400a      	ands	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800320a:	2103      	movs	r1, #3
 800320c:	438a      	bics	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 8003216:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_OscConfig+0x654>)
 8003218:	400a      	ands	r2, r1
 800321a:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe f95e 	bl	80014dc <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe f959 	bl	80014dc <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e051      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_OscConfig+0x638>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	049b      	lsls	r3, r3, #18
 8003240:	4013      	ands	r3, r2
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x60a>
 8003244:	e049      	b.n	80032da <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d112      	bne.n	8003274 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e044      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	40021000 	.word	0x40021000
 8003258:	40007000 	.word	0x40007000
 800325c:	00001388 	.word	0x00001388
 8003260:	efffffff 	.word	0xefffffff
 8003264:	ffbfffff 	.word	0xffbfffff
 8003268:	feffffff 	.word	0xfeffffff
 800326c:	11c1808c 	.word	0x11c1808c
 8003270:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x6c8>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2203      	movs	r2, #3
 800327e:	401a      	ands	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	429a      	cmp	r2, r3
 8003286:	d126      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2270      	movs	r2, #112	; 0x70
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d11f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	23fe      	movs	r3, #254	; 0xfe
 800329a:	01db      	lsls	r3, r3, #7
 800329c:	401a      	ands	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d116      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	23f8      	movs	r3, #248	; 0xf8
 80032ac:	039b      	lsls	r3, r3, #14
 80032ae:	401a      	ands	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d10e      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	23e0      	movs	r3, #224	; 0xe0
 80032bc:	051b      	lsls	r3, r3, #20
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	0f5b      	lsrs	r3, r3, #29
 80032cc:	075a      	lsls	r2, r3, #29
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b008      	add	sp, #32
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0e9      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2207      	movs	r2, #7
 8003302:	4013      	ands	r3, r2
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d91e      	bls.n	8003348 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2207      	movs	r2, #7
 8003310:	4393      	bics	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	4b70      	ldr	r3, [pc, #448]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800331c:	f7fe f8de 	bl	80014dc <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003324:	e009      	b.n	800333a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003326:	f7fe f8d9 	bl	80014dc <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <HAL_RCC_ClockConfig+0x1f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0ca      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800333a:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2207      	movs	r2, #7
 8003340:	4013      	ands	r3, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d1ee      	bne.n	8003326 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d015      	beq.n	800337e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2204      	movs	r2, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d006      	beq.n	800336a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800335c:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003362:	21e0      	movs	r1, #224	; 0xe0
 8003364:	01c9      	lsls	r1, r1, #7
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336a:	4b5d      	ldr	r3, [pc, #372]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4a5d      	ldr	r2, [pc, #372]	; (80034e4 <HAL_RCC_ClockConfig+0x1fc>)
 8003370:	4013      	ands	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2201      	movs	r2, #1
 8003384:	4013      	ands	r3, r2
 8003386:	d057      	beq.n	8003438 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	4013      	ands	r3, r2
 800339a:	d12b      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e097      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a8:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	049b      	lsls	r3, r3, #18
 80033b0:	4013      	ands	r3, r2
 80033b2:	d11f      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e08b      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4013      	ands	r3, r2
 80033ca:	d113      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e07f      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d8:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	2202      	movs	r2, #2
 80033de:	4013      	ands	r3, r2
 80033e0:	d108      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e074      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b3e      	ldr	r3, [pc, #248]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2202      	movs	r2, #2
 80033ec:	4013      	ands	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e06d      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033f4:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2207      	movs	r2, #7
 80033fa:	4393      	bics	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003408:	f7fe f868 	bl	80014dc <HAL_GetTick>
 800340c:	0003      	movs	r3, r0
 800340e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003410:	e009      	b.n	8003426 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f7fe f863 	bl	80014dc <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <HAL_RCC_ClockConfig+0x1f4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e054      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2238      	movs	r2, #56	; 0x38
 800342c:	401a      	ands	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	429a      	cmp	r2, r3
 8003436:	d1ec      	bne.n	8003412 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2207      	movs	r2, #7
 800343e:	4013      	ands	r3, r2
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d21e      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2207      	movs	r2, #7
 800344c:	4393      	bics	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003458:	f7fe f840 	bl	80014dc <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003460:	e009      	b.n	8003476 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003462:	f7fe f83b 	bl	80014dc <HAL_GetTick>
 8003466:	0002      	movs	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_RCC_ClockConfig+0x1f4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e02c      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2207      	movs	r2, #7
 800347c:	4013      	ands	r3, r2
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d1ee      	bne.n	8003462 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2204      	movs	r2, #4
 800348a:	4013      	ands	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <HAL_RCC_ClockConfig+0x200>)
 8003494:	4013      	ands	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80034a2:	f000 f829 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80034a6:	0001      	movs	r1, r0
 80034a8:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_RCC_ClockConfig+0x1f8>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	220f      	movs	r2, #15
 80034b0:	401a      	ands	r2, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x204>)
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	58d3      	ldr	r3, [r2, r3]
 80034b8:	221f      	movs	r2, #31
 80034ba:	4013      	ands	r3, r2
 80034bc:	000a      	movs	r2, r1
 80034be:	40da      	lsrs	r2, r3
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_ClockConfig+0x208>)
 80034c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_ClockConfig+0x20c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fd ffab 	bl	8001424 <HAL_InitTick>
 80034ce:	0003      	movs	r3, r0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b004      	add	sp, #16
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40022000 	.word	0x40022000
 80034dc:	00001388 	.word	0x00001388
 80034e0:	40021000 	.word	0x40021000
 80034e4:	fffff0ff 	.word	0xfffff0ff
 80034e8:	ffff8fff 	.word	0xffff8fff
 80034ec:	080043b4 	.word	0x080043b4
 80034f0:	20000000 	.word	0x20000000
 80034f4:	20000004 	.word	0x20000004

080034f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2238      	movs	r2, #56	; 0x38
 8003504:	4013      	ands	r3, r2
 8003506:	d10f      	bne.n	8003528 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0adb      	lsrs	r3, r3, #11
 800350e:	2207      	movs	r2, #7
 8003510:	4013      	ands	r3, r2
 8003512:	2201      	movs	r2, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	0013      	movs	r3, r2
 8003518:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	4835      	ldr	r0, [pc, #212]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800351e:	f7fc fdf1 	bl	8000104 <__udivsi3>
 8003522:	0003      	movs	r3, r0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e05d      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003528:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2238      	movs	r2, #56	; 0x38
 800352e:	4013      	ands	r3, r2
 8003530:	2b08      	cmp	r3, #8
 8003532:	d102      	bne.n	800353a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003534:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e054      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2238      	movs	r2, #56	; 0x38
 8003540:	4013      	ands	r3, r2
 8003542:	2b10      	cmp	r3, #16
 8003544:	d138      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2203      	movs	r2, #3
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	2207      	movs	r2, #7
 8003558:	4013      	ands	r3, r2
 800355a:	3301      	adds	r3, #1
 800355c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d10d      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4824      	ldr	r0, [pc, #144]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003568:	f7fc fdcc 	bl	8000104 <__udivsi3>
 800356c:	0003      	movs	r3, r0
 800356e:	0019      	movs	r1, r3
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	227f      	movs	r2, #127	; 0x7f
 8003578:	4013      	ands	r3, r2
 800357a:	434b      	muls	r3, r1
 800357c:	617b      	str	r3, [r7, #20]
        break;
 800357e:	e00d      	b.n	800359c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	481c      	ldr	r0, [pc, #112]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003584:	f7fc fdbe 	bl	8000104 <__udivsi3>
 8003588:	0003      	movs	r3, r0
 800358a:	0019      	movs	r1, r3
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	227f      	movs	r2, #127	; 0x7f
 8003594:	4013      	ands	r3, r2
 8003596:	434b      	muls	r3, r1
 8003598:	617b      	str	r3, [r7, #20]
        break;
 800359a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0f5b      	lsrs	r3, r3, #29
 80035a2:	2207      	movs	r2, #7
 80035a4:	4013      	ands	r3, r2
 80035a6:	3301      	adds	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6978      	ldr	r0, [r7, #20]
 80035ae:	f7fc fda9 	bl	8000104 <__udivsi3>
 80035b2:	0003      	movs	r3, r0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e015      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2238      	movs	r2, #56	; 0x38
 80035be:	4013      	ands	r3, r2
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d103      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2238      	movs	r2, #56	; 0x38
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b18      	cmp	r3, #24
 80035d6:	d103      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80035d8:	23fa      	movs	r3, #250	; 0xfa
 80035da:	01db      	lsls	r3, r3, #7
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e001      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035e4:	693b      	ldr	r3, [r7, #16]
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b006      	add	sp, #24
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40021000 	.word	0x40021000
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200

080035fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003604:	2313      	movs	r3, #19
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800360c:	2312      	movs	r3, #18
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	029b      	lsls	r3, r3, #10
 800361c:	4013      	ands	r3, r2
 800361e:	d100      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003620:	e0af      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2311      	movs	r3, #17
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b48      	ldr	r3, [pc, #288]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800362c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	055b      	lsls	r3, r3, #21
 8003632:	4013      	ands	r3, r2
 8003634:	d111      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b45      	ldr	r3, [pc, #276]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800363a:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	0549      	lsls	r1, r1, #21
 8003640:	430a      	orrs	r2, r1
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	055b      	lsls	r3, r3, #21
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2311      	movs	r3, #17
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365a:	4b3d      	ldr	r3, [pc, #244]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	0049      	lsls	r1, r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003668:	f7fd ff38 	bl	80014dc <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003670:	e00b      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fd ff33 	bl	80014dc <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d904      	bls.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003680:	2313      	movs	r3, #19
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2203      	movs	r2, #3
 8003686:	701a      	strb	r2, [r3, #0]
        break;
 8003688:	e005      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4013      	ands	r3, r2
 8003694:	d0ed      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003696:	2313      	movs	r3, #19
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d15f      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a4:	23c0      	movs	r3, #192	; 0xc0
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4013      	ands	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d019      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d014      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	4a24      	ldr	r2, [pc, #144]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0249      	lsls	r1, r1, #9
 80036d0:	430a      	orrs	r2, r1
 80036d2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036da:	491f      	ldr	r1, [pc, #124]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036dc:	400a      	ands	r2, r1
 80036de:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	d016      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7fd fef5 	bl	80014dc <HAL_GetTick>
 80036f2:	0003      	movs	r3, r0
 80036f4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	e00c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fef0 	bl	80014dc <HAL_GetTick>
 80036fc:	0002      	movs	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d904      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003708:	2313      	movs	r3, #19
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2203      	movs	r2, #3
 800370e:	701a      	strb	r2, [r3, #0]
            break;
 8003710:	e004      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	d0ed      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800371c:	2313      	movs	r3, #19
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003736:	430a      	orrs	r2, r1
 8003738:	65da      	str	r2, [r3, #92]	; 0x5c
 800373a:	e017      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800373c:	2312      	movs	r3, #18
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2213      	movs	r2, #19
 8003742:	18ba      	adds	r2, r7, r2
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e010      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x170>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
 8003754:	fffffcff 	.word	0xfffffcff
 8003758:	fffeffff 	.word	0xfffeffff
 800375c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	2312      	movs	r3, #18
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	2213      	movs	r2, #19
 8003766:	18ba      	adds	r2, r7, r2
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800376c:	2311      	movs	r3, #17
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4bb6      	ldr	r3, [pc, #728]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800377a:	4bb5      	ldr	r3, [pc, #724]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800377c:	49b5      	ldr	r1, [pc, #724]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800377e:	400a      	ands	r2, r1
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	4013      	ands	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800378c:	4bb0      	ldr	r3, [pc, #704]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	2203      	movs	r2, #3
 8003792:	4393      	bics	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	4bad      	ldr	r3, [pc, #692]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800379c:	430a      	orrs	r2, r1
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2202      	movs	r2, #2
 80037a6:	4013      	ands	r3, r2
 80037a8:	d009      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037aa:	4ba9      	ldr	r3, [pc, #676]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	220c      	movs	r2, #12
 80037b0:	4393      	bics	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	4ba5      	ldr	r3, [pc, #660]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037ba:	430a      	orrs	r2, r1
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2204      	movs	r2, #4
 80037c4:	4013      	ands	r3, r2
 80037c6:	d009      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c8:	4ba1      	ldr	r3, [pc, #644]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	2230      	movs	r2, #48	; 0x30
 80037ce:	4393      	bics	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	4b9e      	ldr	r3, [pc, #632]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2210      	movs	r2, #16
 80037e2:	4013      	ands	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037e6:	4b9a      	ldr	r3, [pc, #616]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	4a9b      	ldr	r2, [pc, #620]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	4b96      	ldr	r3, [pc, #600]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80037f6:	430a      	orrs	r2, r1
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	015b      	lsls	r3, r3, #5
 8003802:	4013      	ands	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003806:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	4a94      	ldr	r2, [pc, #592]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	4b8e      	ldr	r3, [pc, #568]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003816:	430a      	orrs	r2, r1
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4013      	ands	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003826:	4b8a      	ldr	r3, [pc, #552]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	4a8d      	ldr	r2, [pc, #564]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003836:	430a      	orrs	r2, r1
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4013      	ands	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003846:	4b82      	ldr	r3, [pc, #520]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	4a86      	ldr	r2, [pc, #536]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800384c:	4013      	ands	r3, r2
 800384e:	0019      	movs	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4b7e      	ldr	r3, [pc, #504]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003856:	430a      	orrs	r2, r1
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2220      	movs	r2, #32
 8003860:	4013      	ands	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003864:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	4a7f      	ldr	r2, [pc, #508]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	4b77      	ldr	r3, [pc, #476]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003874:	430a      	orrs	r2, r1
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	4013      	ands	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	4a79      	ldr	r2, [pc, #484]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003888:	4013      	ands	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003892:	430a      	orrs	r2, r1
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	01db      	lsls	r3, r3, #7
 800389e:	4013      	ands	r3, r2
 80038a0:	d015      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a2:	4b6b      	ldr	r3, [pc, #428]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	0899      	lsrs	r1, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	05db      	lsls	r3, r3, #23
 80038bc:	429a      	cmp	r2, r3
 80038be:	d106      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038c0:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	0249      	lsls	r1, r1, #9
 80038ca:	430a      	orrs	r2, r1
 80038cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	4013      	ands	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	4393      	bics	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038ea:	430a      	orrs	r2, r1
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	039b      	lsls	r3, r3, #14
 80038f6:	4013      	ands	r3, r2
 80038f8:	d016      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038fa:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	4a5c      	ldr	r2, [pc, #368]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003900:	4013      	ands	r3, r2
 8003902:	0019      	movs	r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003908:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800390a:	430a      	orrs	r2, r1
 800390c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	03db      	lsls	r3, r3, #15
 8003916:	429a      	cmp	r2, r3
 8003918:	d106      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800391a:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0449      	lsls	r1, r1, #17
 8003924:	430a      	orrs	r2, r1
 8003926:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	03db      	lsls	r3, r3, #15
 8003930:	4013      	ands	r3, r2
 8003932:	d016      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003934:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	4a4e      	ldr	r2, [pc, #312]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003944:	430a      	orrs	r2, r1
 8003946:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	045b      	lsls	r3, r3, #17
 8003950:	429a      	cmp	r2, r3
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0449      	lsls	r1, r1, #17
 800395e:	430a      	orrs	r2, r1
 8003960:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4013      	ands	r3, r2
 800396c:	d014      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	2203      	movs	r2, #3
 8003974:	4393      	bics	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800397e:	430a      	orrs	r2, r1
 8003980:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d106      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	0249      	lsls	r1, r1, #9
 8003994:	430a      	orrs	r2, r1
 8003996:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	019b      	lsls	r3, r3, #6
 80039a0:	4013      	ands	r3, r2
 80039a2:	d014      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	220c      	movs	r2, #12
 80039aa:	4393      	bics	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039b4:	430a      	orrs	r2, r1
 80039b6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d106      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	0249      	lsls	r1, r1, #9
 80039ca:	430a      	orrs	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	045b      	lsls	r3, r3, #17
 80039d6:	4013      	ands	r3, r2
 80039d8:	d016      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	0019      	movs	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039ea:	430a      	orrs	r2, r1
 80039ec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	019b      	lsls	r3, r3, #6
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d106      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0449      	lsls	r1, r1, #17
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	049b      	lsls	r3, r3, #18
 8003a10:	4013      	ands	r3, r2
 8003a12:	d016      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4a10      	ldr	r2, [pc, #64]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0449      	lsls	r1, r1, #17
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003a42:	2312      	movs	r3, #18
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	781b      	ldrb	r3, [r3, #0]
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b006      	add	sp, #24
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	efffffff 	.word	0xefffffff
 8003a58:	fffff3ff 	.word	0xfffff3ff
 8003a5c:	fffffcff 	.word	0xfffffcff
 8003a60:	fff3ffff 	.word	0xfff3ffff
 8003a64:	ffcfffff 	.word	0xffcfffff
 8003a68:	ffffcfff 	.word	0xffffcfff
 8003a6c:	ffff3fff 	.word	0xffff3fff
 8003a70:	ffbfffff 	.word	0xffbfffff
 8003a74:	feffffff 	.word	0xfeffffff

08003a78 <__errno>:
 8003a78:	4b01      	ldr	r3, [pc, #4]	; (8003a80 <__errno+0x8>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	4770      	bx	lr
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	2000000c 	.word	0x2000000c

08003a84 <__libc_init_array>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	2600      	movs	r6, #0
 8003a88:	4d0c      	ldr	r5, [pc, #48]	; (8003abc <__libc_init_array+0x38>)
 8003a8a:	4c0d      	ldr	r4, [pc, #52]	; (8003ac0 <__libc_init_array+0x3c>)
 8003a8c:	1b64      	subs	r4, r4, r5
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	42a6      	cmp	r6, r4
 8003a92:	d109      	bne.n	8003aa8 <__libc_init_array+0x24>
 8003a94:	2600      	movs	r6, #0
 8003a96:	f000 fc3b 	bl	8004310 <_init>
 8003a9a:	4d0a      	ldr	r5, [pc, #40]	; (8003ac4 <__libc_init_array+0x40>)
 8003a9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ac8 <__libc_init_array+0x44>)
 8003a9e:	1b64      	subs	r4, r4, r5
 8003aa0:	10a4      	asrs	r4, r4, #2
 8003aa2:	42a6      	cmp	r6, r4
 8003aa4:	d105      	bne.n	8003ab2 <__libc_init_array+0x2e>
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	00b3      	lsls	r3, r6, #2
 8003aaa:	58eb      	ldr	r3, [r5, r3]
 8003aac:	4798      	blx	r3
 8003aae:	3601      	adds	r6, #1
 8003ab0:	e7ee      	b.n	8003a90 <__libc_init_array+0xc>
 8003ab2:	00b3      	lsls	r3, r6, #2
 8003ab4:	58eb      	ldr	r3, [r5, r3]
 8003ab6:	4798      	blx	r3
 8003ab8:	3601      	adds	r6, #1
 8003aba:	e7f2      	b.n	8003aa2 <__libc_init_array+0x1e>
 8003abc:	08004428 	.word	0x08004428
 8003ac0:	08004428 	.word	0x08004428
 8003ac4:	08004428 	.word	0x08004428
 8003ac8:	0800442c 	.word	0x0800442c

08003acc <memset>:
 8003acc:	0003      	movs	r3, r0
 8003ace:	1812      	adds	r2, r2, r0
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <memset+0xa>
 8003ad4:	4770      	bx	lr
 8003ad6:	7019      	strb	r1, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	e7f9      	b.n	8003ad0 <memset+0x4>

08003adc <sniprintf>:
 8003adc:	b40c      	push	{r2, r3}
 8003ade:	b530      	push	{r4, r5, lr}
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <sniprintf+0x60>)
 8003ae2:	b09d      	sub	sp, #116	; 0x74
 8003ae4:	1e0c      	subs	r4, r1, #0
 8003ae6:	681d      	ldr	r5, [r3, #0]
 8003ae8:	da08      	bge.n	8003afc <sniprintf+0x20>
 8003aea:	238b      	movs	r3, #139	; 0x8b
 8003aec:	2001      	movs	r0, #1
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	4240      	negs	r0, r0
 8003af2:	b01d      	add	sp, #116	; 0x74
 8003af4:	bc30      	pop	{r4, r5}
 8003af6:	bc08      	pop	{r3}
 8003af8:	b002      	add	sp, #8
 8003afa:	4718      	bx	r3
 8003afc:	2382      	movs	r3, #130	; 0x82
 8003afe:	a902      	add	r1, sp, #8
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	818b      	strh	r3, [r1, #12]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9002      	str	r0, [sp, #8]
 8003b08:	6108      	str	r0, [r1, #16]
 8003b0a:	429c      	cmp	r4, r3
 8003b0c:	d000      	beq.n	8003b10 <sniprintf+0x34>
 8003b0e:	1e63      	subs	r3, r4, #1
 8003b10:	608b      	str	r3, [r1, #8]
 8003b12:	614b      	str	r3, [r1, #20]
 8003b14:	2301      	movs	r3, #1
 8003b16:	425b      	negs	r3, r3
 8003b18:	81cb      	strh	r3, [r1, #14]
 8003b1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b1c:	ab21      	add	r3, sp, #132	; 0x84
 8003b1e:	0028      	movs	r0, r5
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	f000 f86f 	bl	8003c04 <_svfiprintf_r>
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	da01      	bge.n	8003b2e <sniprintf+0x52>
 8003b2a:	238b      	movs	r3, #139	; 0x8b
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	2c00      	cmp	r4, #0
 8003b30:	d0df      	beq.n	8003af2 <sniprintf+0x16>
 8003b32:	2300      	movs	r3, #0
 8003b34:	9a02      	ldr	r2, [sp, #8]
 8003b36:	7013      	strb	r3, [r2, #0]
 8003b38:	e7db      	b.n	8003af2 <sniprintf+0x16>
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	2000000c 	.word	0x2000000c

08003b40 <__ssputs_r>:
 8003b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b42:	688e      	ldr	r6, [r1, #8]
 8003b44:	b085      	sub	sp, #20
 8003b46:	0007      	movs	r7, r0
 8003b48:	000c      	movs	r4, r1
 8003b4a:	9203      	str	r2, [sp, #12]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	429e      	cmp	r6, r3
 8003b50:	d83c      	bhi.n	8003bcc <__ssputs_r+0x8c>
 8003b52:	2390      	movs	r3, #144	; 0x90
 8003b54:	898a      	ldrh	r2, [r1, #12]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	421a      	tst	r2, r3
 8003b5a:	d034      	beq.n	8003bc6 <__ssputs_r+0x86>
 8003b5c:	2503      	movs	r5, #3
 8003b5e:	6909      	ldr	r1, [r1, #16]
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	1a5b      	subs	r3, r3, r1
 8003b64:	9302      	str	r3, [sp, #8]
 8003b66:	6963      	ldr	r3, [r4, #20]
 8003b68:	9802      	ldr	r0, [sp, #8]
 8003b6a:	435d      	muls	r5, r3
 8003b6c:	0feb      	lsrs	r3, r5, #31
 8003b6e:	195d      	adds	r5, r3, r5
 8003b70:	9b01      	ldr	r3, [sp, #4]
 8003b72:	106d      	asrs	r5, r5, #1
 8003b74:	3301      	adds	r3, #1
 8003b76:	181b      	adds	r3, r3, r0
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	d900      	bls.n	8003b7e <__ssputs_r+0x3e>
 8003b7c:	001d      	movs	r5, r3
 8003b7e:	0553      	lsls	r3, r2, #21
 8003b80:	d532      	bpl.n	8003be8 <__ssputs_r+0xa8>
 8003b82:	0029      	movs	r1, r5
 8003b84:	0038      	movs	r0, r7
 8003b86:	f000 fb23 	bl	80041d0 <_malloc_r>
 8003b8a:	1e06      	subs	r6, r0, #0
 8003b8c:	d109      	bne.n	8003ba2 <__ssputs_r+0x62>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	2340      	movs	r3, #64	; 0x40
 8003b94:	2001      	movs	r0, #1
 8003b96:	89a2      	ldrh	r2, [r4, #12]
 8003b98:	4240      	negs	r0, r0
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	81a3      	strh	r3, [r4, #12]
 8003b9e:	b005      	add	sp, #20
 8003ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba2:	9a02      	ldr	r2, [sp, #8]
 8003ba4:	6921      	ldr	r1, [r4, #16]
 8003ba6:	f000 faac 	bl	8004102 <memcpy>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <__ssputs_r+0xc0>)
 8003bae:	401a      	ands	r2, r3
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	9b02      	ldr	r3, [sp, #8]
 8003bb8:	6126      	str	r6, [r4, #16]
 8003bba:	18f6      	adds	r6, r6, r3
 8003bbc:	6026      	str	r6, [r4, #0]
 8003bbe:	6165      	str	r5, [r4, #20]
 8003bc0:	9e01      	ldr	r6, [sp, #4]
 8003bc2:	1aed      	subs	r5, r5, r3
 8003bc4:	60a5      	str	r5, [r4, #8]
 8003bc6:	9b01      	ldr	r3, [sp, #4]
 8003bc8:	429e      	cmp	r6, r3
 8003bca:	d900      	bls.n	8003bce <__ssputs_r+0x8e>
 8003bcc:	9e01      	ldr	r6, [sp, #4]
 8003bce:	0032      	movs	r2, r6
 8003bd0:	9903      	ldr	r1, [sp, #12]
 8003bd2:	6820      	ldr	r0, [r4, #0]
 8003bd4:	f000 fa9e 	bl	8004114 <memmove>
 8003bd8:	68a3      	ldr	r3, [r4, #8]
 8003bda:	2000      	movs	r0, #0
 8003bdc:	1b9b      	subs	r3, r3, r6
 8003bde:	60a3      	str	r3, [r4, #8]
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	199e      	adds	r6, r3, r6
 8003be4:	6026      	str	r6, [r4, #0]
 8003be6:	e7da      	b.n	8003b9e <__ssputs_r+0x5e>
 8003be8:	002a      	movs	r2, r5
 8003bea:	0038      	movs	r0, r7
 8003bec:	f000 fb4e 	bl	800428c <_realloc_r>
 8003bf0:	1e06      	subs	r6, r0, #0
 8003bf2:	d1e0      	bne.n	8003bb6 <__ssputs_r+0x76>
 8003bf4:	6921      	ldr	r1, [r4, #16]
 8003bf6:	0038      	movs	r0, r7
 8003bf8:	f000 faa0 	bl	800413c <_free_r>
 8003bfc:	e7c7      	b.n	8003b8e <__ssputs_r+0x4e>
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	fffffb7f 	.word	0xfffffb7f

08003c04 <_svfiprintf_r>:
 8003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c06:	b0a1      	sub	sp, #132	; 0x84
 8003c08:	9003      	str	r0, [sp, #12]
 8003c0a:	001d      	movs	r5, r3
 8003c0c:	898b      	ldrh	r3, [r1, #12]
 8003c0e:	000f      	movs	r7, r1
 8003c10:	0016      	movs	r6, r2
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	d511      	bpl.n	8003c3a <_svfiprintf_r+0x36>
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10e      	bne.n	8003c3a <_svfiprintf_r+0x36>
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	f000 fad7 	bl	80041d0 <_malloc_r>
 8003c22:	6038      	str	r0, [r7, #0]
 8003c24:	6138      	str	r0, [r7, #16]
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d105      	bne.n	8003c36 <_svfiprintf_r+0x32>
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	9a03      	ldr	r2, [sp, #12]
 8003c2e:	3801      	subs	r0, #1
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	b021      	add	sp, #132	; 0x84
 8003c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c36:	2340      	movs	r3, #64	; 0x40
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	ac08      	add	r4, sp, #32
 8003c3e:	6163      	str	r3, [r4, #20]
 8003c40:	3320      	adds	r3, #32
 8003c42:	7663      	strb	r3, [r4, #25]
 8003c44:	3310      	adds	r3, #16
 8003c46:	76a3      	strb	r3, [r4, #26]
 8003c48:	9507      	str	r5, [sp, #28]
 8003c4a:	0035      	movs	r5, r6
 8003c4c:	782b      	ldrb	r3, [r5, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <_svfiprintf_r+0x52>
 8003c52:	2b25      	cmp	r3, #37	; 0x25
 8003c54:	d146      	bne.n	8003ce4 <_svfiprintf_r+0xe0>
 8003c56:	1bab      	subs	r3, r5, r6
 8003c58:	9305      	str	r3, [sp, #20]
 8003c5a:	d00c      	beq.n	8003c76 <_svfiprintf_r+0x72>
 8003c5c:	0032      	movs	r2, r6
 8003c5e:	0039      	movs	r1, r7
 8003c60:	9803      	ldr	r0, [sp, #12]
 8003c62:	f7ff ff6d 	bl	8003b40 <__ssputs_r>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	d100      	bne.n	8003c6c <_svfiprintf_r+0x68>
 8003c6a:	e0ae      	b.n	8003dca <_svfiprintf_r+0x1c6>
 8003c6c:	6962      	ldr	r2, [r4, #20]
 8003c6e:	9b05      	ldr	r3, [sp, #20]
 8003c70:	4694      	mov	ip, r2
 8003c72:	4463      	add	r3, ip
 8003c74:	6163      	str	r3, [r4, #20]
 8003c76:	782b      	ldrb	r3, [r5, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d100      	bne.n	8003c7e <_svfiprintf_r+0x7a>
 8003c7c:	e0a5      	b.n	8003dca <_svfiprintf_r+0x1c6>
 8003c7e:	2201      	movs	r2, #1
 8003c80:	2300      	movs	r3, #0
 8003c82:	4252      	negs	r2, r2
 8003c84:	6062      	str	r2, [r4, #4]
 8003c86:	a904      	add	r1, sp, #16
 8003c88:	3254      	adds	r2, #84	; 0x54
 8003c8a:	1852      	adds	r2, r2, r1
 8003c8c:	1c6e      	adds	r6, r5, #1
 8003c8e:	6023      	str	r3, [r4, #0]
 8003c90:	60e3      	str	r3, [r4, #12]
 8003c92:	60a3      	str	r3, [r4, #8]
 8003c94:	7013      	strb	r3, [r2, #0]
 8003c96:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c98:	7831      	ldrb	r1, [r6, #0]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	4853      	ldr	r0, [pc, #332]	; (8003dec <_svfiprintf_r+0x1e8>)
 8003c9e:	f000 fa25 	bl	80040ec <memchr>
 8003ca2:	1c75      	adds	r5, r6, #1
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d11f      	bne.n	8003ce8 <_svfiprintf_r+0xe4>
 8003ca8:	6822      	ldr	r2, [r4, #0]
 8003caa:	06d3      	lsls	r3, r2, #27
 8003cac:	d504      	bpl.n	8003cb8 <_svfiprintf_r+0xb4>
 8003cae:	2353      	movs	r3, #83	; 0x53
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	185b      	adds	r3, r3, r1
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	7019      	strb	r1, [r3, #0]
 8003cb8:	0713      	lsls	r3, r2, #28
 8003cba:	d504      	bpl.n	8003cc6 <_svfiprintf_r+0xc2>
 8003cbc:	2353      	movs	r3, #83	; 0x53
 8003cbe:	a904      	add	r1, sp, #16
 8003cc0:	185b      	adds	r3, r3, r1
 8003cc2:	212b      	movs	r1, #43	; 0x2b
 8003cc4:	7019      	strb	r1, [r3, #0]
 8003cc6:	7833      	ldrb	r3, [r6, #0]
 8003cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cca:	d016      	beq.n	8003cfa <_svfiprintf_r+0xf6>
 8003ccc:	0035      	movs	r5, r6
 8003cce:	2100      	movs	r1, #0
 8003cd0:	200a      	movs	r0, #10
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	782a      	ldrb	r2, [r5, #0]
 8003cd6:	1c6e      	adds	r6, r5, #1
 8003cd8:	3a30      	subs	r2, #48	; 0x30
 8003cda:	2a09      	cmp	r2, #9
 8003cdc:	d94e      	bls.n	8003d7c <_svfiprintf_r+0x178>
 8003cde:	2900      	cmp	r1, #0
 8003ce0:	d018      	beq.n	8003d14 <_svfiprintf_r+0x110>
 8003ce2:	e010      	b.n	8003d06 <_svfiprintf_r+0x102>
 8003ce4:	3501      	adds	r5, #1
 8003ce6:	e7b1      	b.n	8003c4c <_svfiprintf_r+0x48>
 8003ce8:	4b40      	ldr	r3, [pc, #256]	; (8003dec <_svfiprintf_r+0x1e8>)
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	1ac0      	subs	r0, r0, r3
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4083      	lsls	r3, r0
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	002e      	movs	r6, r5
 8003cf8:	e7ce      	b.n	8003c98 <_svfiprintf_r+0x94>
 8003cfa:	9b07      	ldr	r3, [sp, #28]
 8003cfc:	1d19      	adds	r1, r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	9107      	str	r1, [sp, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	db01      	blt.n	8003d0a <_svfiprintf_r+0x106>
 8003d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d08:	e004      	b.n	8003d14 <_svfiprintf_r+0x110>
 8003d0a:	425b      	negs	r3, r3
 8003d0c:	60e3      	str	r3, [r4, #12]
 8003d0e:	2302      	movs	r3, #2
 8003d10:	4313      	orrs	r3, r2
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	782b      	ldrb	r3, [r5, #0]
 8003d16:	2b2e      	cmp	r3, #46	; 0x2e
 8003d18:	d10a      	bne.n	8003d30 <_svfiprintf_r+0x12c>
 8003d1a:	786b      	ldrb	r3, [r5, #1]
 8003d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d1e:	d135      	bne.n	8003d8c <_svfiprintf_r+0x188>
 8003d20:	9b07      	ldr	r3, [sp, #28]
 8003d22:	3502      	adds	r5, #2
 8003d24:	1d1a      	adds	r2, r3, #4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	9207      	str	r2, [sp, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db2b      	blt.n	8003d86 <_svfiprintf_r+0x182>
 8003d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d30:	4e2f      	ldr	r6, [pc, #188]	; (8003df0 <_svfiprintf_r+0x1ec>)
 8003d32:	7829      	ldrb	r1, [r5, #0]
 8003d34:	2203      	movs	r2, #3
 8003d36:	0030      	movs	r0, r6
 8003d38:	f000 f9d8 	bl	80040ec <memchr>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d006      	beq.n	8003d4e <_svfiprintf_r+0x14a>
 8003d40:	2340      	movs	r3, #64	; 0x40
 8003d42:	1b80      	subs	r0, r0, r6
 8003d44:	4083      	lsls	r3, r0
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	3501      	adds	r5, #1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	7829      	ldrb	r1, [r5, #0]
 8003d50:	2206      	movs	r2, #6
 8003d52:	4828      	ldr	r0, [pc, #160]	; (8003df4 <_svfiprintf_r+0x1f0>)
 8003d54:	1c6e      	adds	r6, r5, #1
 8003d56:	7621      	strb	r1, [r4, #24]
 8003d58:	f000 f9c8 	bl	80040ec <memchr>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d03c      	beq.n	8003dda <_svfiprintf_r+0x1d6>
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <_svfiprintf_r+0x1f4>)
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d125      	bne.n	8003db2 <_svfiprintf_r+0x1ae>
 8003d66:	2207      	movs	r2, #7
 8003d68:	9b07      	ldr	r3, [sp, #28]
 8003d6a:	3307      	adds	r3, #7
 8003d6c:	4393      	bics	r3, r2
 8003d6e:	3308      	adds	r3, #8
 8003d70:	9307      	str	r3, [sp, #28]
 8003d72:	6963      	ldr	r3, [r4, #20]
 8003d74:	9a04      	ldr	r2, [sp, #16]
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	6163      	str	r3, [r4, #20]
 8003d7a:	e766      	b.n	8003c4a <_svfiprintf_r+0x46>
 8003d7c:	4343      	muls	r3, r0
 8003d7e:	2101      	movs	r1, #1
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	0035      	movs	r5, r6
 8003d84:	e7a6      	b.n	8003cd4 <_svfiprintf_r+0xd0>
 8003d86:	2301      	movs	r3, #1
 8003d88:	425b      	negs	r3, r3
 8003d8a:	e7d0      	b.n	8003d2e <_svfiprintf_r+0x12a>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	200a      	movs	r0, #10
 8003d90:	001a      	movs	r2, r3
 8003d92:	3501      	adds	r5, #1
 8003d94:	6063      	str	r3, [r4, #4]
 8003d96:	7829      	ldrb	r1, [r5, #0]
 8003d98:	1c6e      	adds	r6, r5, #1
 8003d9a:	3930      	subs	r1, #48	; 0x30
 8003d9c:	2909      	cmp	r1, #9
 8003d9e:	d903      	bls.n	8003da8 <_svfiprintf_r+0x1a4>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0c5      	beq.n	8003d30 <_svfiprintf_r+0x12c>
 8003da4:	9209      	str	r2, [sp, #36]	; 0x24
 8003da6:	e7c3      	b.n	8003d30 <_svfiprintf_r+0x12c>
 8003da8:	4342      	muls	r2, r0
 8003daa:	2301      	movs	r3, #1
 8003dac:	1852      	adds	r2, r2, r1
 8003dae:	0035      	movs	r5, r6
 8003db0:	e7f1      	b.n	8003d96 <_svfiprintf_r+0x192>
 8003db2:	ab07      	add	r3, sp, #28
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	003a      	movs	r2, r7
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <_svfiprintf_r+0x1f8>)
 8003dba:	0021      	movs	r1, r4
 8003dbc:	9803      	ldr	r0, [sp, #12]
 8003dbe:	e000      	b.n	8003dc2 <_svfiprintf_r+0x1be>
 8003dc0:	bf00      	nop
 8003dc2:	9004      	str	r0, [sp, #16]
 8003dc4:	9b04      	ldr	r3, [sp, #16]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	d1d3      	bne.n	8003d72 <_svfiprintf_r+0x16e>
 8003dca:	89bb      	ldrh	r3, [r7, #12]
 8003dcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003dce:	065b      	lsls	r3, r3, #25
 8003dd0:	d400      	bmi.n	8003dd4 <_svfiprintf_r+0x1d0>
 8003dd2:	e72e      	b.n	8003c32 <_svfiprintf_r+0x2e>
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	4240      	negs	r0, r0
 8003dd8:	e72b      	b.n	8003c32 <_svfiprintf_r+0x2e>
 8003dda:	ab07      	add	r3, sp, #28
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	003a      	movs	r2, r7
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <_svfiprintf_r+0x1f8>)
 8003de2:	0021      	movs	r1, r4
 8003de4:	9803      	ldr	r0, [sp, #12]
 8003de6:	f000 f879 	bl	8003edc <_printf_i>
 8003dea:	e7ea      	b.n	8003dc2 <_svfiprintf_r+0x1be>
 8003dec:	080043f4 	.word	0x080043f4
 8003df0:	080043fa 	.word	0x080043fa
 8003df4:	080043fe 	.word	0x080043fe
 8003df8:	00000000 	.word	0x00000000
 8003dfc:	08003b41 	.word	0x08003b41

08003e00 <_printf_common>:
 8003e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e02:	0015      	movs	r5, r2
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	688a      	ldr	r2, [r1, #8]
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	9000      	str	r0, [sp, #0]
 8003e0c:	000c      	movs	r4, r1
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	da00      	bge.n	8003e14 <_printf_common+0x14>
 8003e12:	0013      	movs	r3, r2
 8003e14:	0022      	movs	r2, r4
 8003e16:	602b      	str	r3, [r5, #0]
 8003e18:	3243      	adds	r2, #67	; 0x43
 8003e1a:	7812      	ldrb	r2, [r2, #0]
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d001      	beq.n	8003e24 <_printf_common+0x24>
 8003e20:	3301      	adds	r3, #1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	069b      	lsls	r3, r3, #26
 8003e28:	d502      	bpl.n	8003e30 <_printf_common+0x30>
 8003e2a:	682b      	ldr	r3, [r5, #0]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	2706      	movs	r7, #6
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	401f      	ands	r7, r3
 8003e36:	d027      	beq.n	8003e88 <_printf_common+0x88>
 8003e38:	0023      	movs	r3, r4
 8003e3a:	3343      	adds	r3, #67	; 0x43
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	4193      	sbcs	r3, r2
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	0692      	lsls	r2, r2, #26
 8003e46:	d430      	bmi.n	8003eaa <_printf_common+0xaa>
 8003e48:	0022      	movs	r2, r4
 8003e4a:	9901      	ldr	r1, [sp, #4]
 8003e4c:	3243      	adds	r2, #67	; 0x43
 8003e4e:	9800      	ldr	r0, [sp, #0]
 8003e50:	9e08      	ldr	r6, [sp, #32]
 8003e52:	47b0      	blx	r6
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d025      	beq.n	8003ea4 <_printf_common+0xa4>
 8003e58:	2306      	movs	r3, #6
 8003e5a:	6820      	ldr	r0, [r4, #0]
 8003e5c:	682a      	ldr	r2, [r5, #0]
 8003e5e:	68e1      	ldr	r1, [r4, #12]
 8003e60:	4003      	ands	r3, r0
 8003e62:	2500      	movs	r5, #0
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0x70>
 8003e68:	1a8d      	subs	r5, r1, r2
 8003e6a:	43eb      	mvns	r3, r5
 8003e6c:	17db      	asrs	r3, r3, #31
 8003e6e:	401d      	ands	r5, r3
 8003e70:	68a3      	ldr	r3, [r4, #8]
 8003e72:	6922      	ldr	r2, [r4, #16]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	dd01      	ble.n	8003e7c <_printf_common+0x7c>
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	18ed      	adds	r5, r5, r3
 8003e7c:	2700      	movs	r7, #0
 8003e7e:	42bd      	cmp	r5, r7
 8003e80:	d120      	bne.n	8003ec4 <_printf_common+0xc4>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e010      	b.n	8003ea8 <_printf_common+0xa8>
 8003e86:	3701      	adds	r7, #1
 8003e88:	68e3      	ldr	r3, [r4, #12]
 8003e8a:	682a      	ldr	r2, [r5, #0]
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	42bb      	cmp	r3, r7
 8003e90:	ddd2      	ble.n	8003e38 <_printf_common+0x38>
 8003e92:	0022      	movs	r2, r4
 8003e94:	2301      	movs	r3, #1
 8003e96:	3219      	adds	r2, #25
 8003e98:	9901      	ldr	r1, [sp, #4]
 8003e9a:	9800      	ldr	r0, [sp, #0]
 8003e9c:	9e08      	ldr	r6, [sp, #32]
 8003e9e:	47b0      	blx	r6
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d1f0      	bne.n	8003e86 <_printf_common+0x86>
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	4240      	negs	r0, r0
 8003ea8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eaa:	2030      	movs	r0, #48	; 0x30
 8003eac:	18e1      	adds	r1, r4, r3
 8003eae:	3143      	adds	r1, #67	; 0x43
 8003eb0:	7008      	strb	r0, [r1, #0]
 8003eb2:	0021      	movs	r1, r4
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	3145      	adds	r1, #69	; 0x45
 8003eb8:	7809      	ldrb	r1, [r1, #0]
 8003eba:	18a2      	adds	r2, r4, r2
 8003ebc:	3243      	adds	r2, #67	; 0x43
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	7011      	strb	r1, [r2, #0]
 8003ec2:	e7c1      	b.n	8003e48 <_printf_common+0x48>
 8003ec4:	0022      	movs	r2, r4
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	321a      	adds	r2, #26
 8003eca:	9901      	ldr	r1, [sp, #4]
 8003ecc:	9800      	ldr	r0, [sp, #0]
 8003ece:	9e08      	ldr	r6, [sp, #32]
 8003ed0:	47b0      	blx	r6
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	d0e6      	beq.n	8003ea4 <_printf_common+0xa4>
 8003ed6:	3701      	adds	r7, #1
 8003ed8:	e7d1      	b.n	8003e7e <_printf_common+0x7e>
	...

08003edc <_printf_i>:
 8003edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	9204      	str	r2, [sp, #16]
 8003ee2:	000a      	movs	r2, r1
 8003ee4:	3243      	adds	r2, #67	; 0x43
 8003ee6:	9305      	str	r3, [sp, #20]
 8003ee8:	9003      	str	r0, [sp, #12]
 8003eea:	9202      	str	r2, [sp, #8]
 8003eec:	7e0a      	ldrb	r2, [r1, #24]
 8003eee:	000c      	movs	r4, r1
 8003ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ef2:	2a6e      	cmp	r2, #110	; 0x6e
 8003ef4:	d100      	bne.n	8003ef8 <_printf_i+0x1c>
 8003ef6:	e086      	b.n	8004006 <_printf_i+0x12a>
 8003ef8:	d81f      	bhi.n	8003f3a <_printf_i+0x5e>
 8003efa:	2a63      	cmp	r2, #99	; 0x63
 8003efc:	d033      	beq.n	8003f66 <_printf_i+0x8a>
 8003efe:	d808      	bhi.n	8003f12 <_printf_i+0x36>
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	d100      	bne.n	8003f06 <_printf_i+0x2a>
 8003f04:	e08c      	b.n	8004020 <_printf_i+0x144>
 8003f06:	2a58      	cmp	r2, #88	; 0x58
 8003f08:	d04d      	beq.n	8003fa6 <_printf_i+0xca>
 8003f0a:	0025      	movs	r5, r4
 8003f0c:	3542      	adds	r5, #66	; 0x42
 8003f0e:	702a      	strb	r2, [r5, #0]
 8003f10:	e030      	b.n	8003f74 <_printf_i+0x98>
 8003f12:	2a64      	cmp	r2, #100	; 0x64
 8003f14:	d001      	beq.n	8003f1a <_printf_i+0x3e>
 8003f16:	2a69      	cmp	r2, #105	; 0x69
 8003f18:	d1f7      	bne.n	8003f0a <_printf_i+0x2e>
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	6825      	ldr	r5, [r4, #0]
 8003f1e:	1d0a      	adds	r2, r1, #4
 8003f20:	0628      	lsls	r0, r5, #24
 8003f22:	d529      	bpl.n	8003f78 <_printf_i+0x9c>
 8003f24:	6808      	ldr	r0, [r1, #0]
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	da03      	bge.n	8003f34 <_printf_i+0x58>
 8003f2c:	232d      	movs	r3, #45	; 0x2d
 8003f2e:	9a02      	ldr	r2, [sp, #8]
 8003f30:	4240      	negs	r0, r0
 8003f32:	7013      	strb	r3, [r2, #0]
 8003f34:	4e6b      	ldr	r6, [pc, #428]	; (80040e4 <_printf_i+0x208>)
 8003f36:	270a      	movs	r7, #10
 8003f38:	e04f      	b.n	8003fda <_printf_i+0xfe>
 8003f3a:	2a73      	cmp	r2, #115	; 0x73
 8003f3c:	d074      	beq.n	8004028 <_printf_i+0x14c>
 8003f3e:	d808      	bhi.n	8003f52 <_printf_i+0x76>
 8003f40:	2a6f      	cmp	r2, #111	; 0x6f
 8003f42:	d01f      	beq.n	8003f84 <_printf_i+0xa8>
 8003f44:	2a70      	cmp	r2, #112	; 0x70
 8003f46:	d1e0      	bne.n	8003f0a <_printf_i+0x2e>
 8003f48:	2220      	movs	r2, #32
 8003f4a:	6809      	ldr	r1, [r1, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	6022      	str	r2, [r4, #0]
 8003f50:	e003      	b.n	8003f5a <_printf_i+0x7e>
 8003f52:	2a75      	cmp	r2, #117	; 0x75
 8003f54:	d016      	beq.n	8003f84 <_printf_i+0xa8>
 8003f56:	2a78      	cmp	r2, #120	; 0x78
 8003f58:	d1d7      	bne.n	8003f0a <_printf_i+0x2e>
 8003f5a:	0022      	movs	r2, r4
 8003f5c:	2178      	movs	r1, #120	; 0x78
 8003f5e:	3245      	adds	r2, #69	; 0x45
 8003f60:	7011      	strb	r1, [r2, #0]
 8003f62:	4e61      	ldr	r6, [pc, #388]	; (80040e8 <_printf_i+0x20c>)
 8003f64:	e022      	b.n	8003fac <_printf_i+0xd0>
 8003f66:	0025      	movs	r5, r4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	3542      	adds	r5, #66	; 0x42
 8003f6c:	1d11      	adds	r1, r2, #4
 8003f6e:	6019      	str	r1, [r3, #0]
 8003f70:	6813      	ldr	r3, [r2, #0]
 8003f72:	702b      	strb	r3, [r5, #0]
 8003f74:	2301      	movs	r3, #1
 8003f76:	e065      	b.n	8004044 <_printf_i+0x168>
 8003f78:	6808      	ldr	r0, [r1, #0]
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	0669      	lsls	r1, r5, #25
 8003f7e:	d5d3      	bpl.n	8003f28 <_printf_i+0x4c>
 8003f80:	b200      	sxth	r0, r0
 8003f82:	e7d1      	b.n	8003f28 <_printf_i+0x4c>
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	1d08      	adds	r0, r1, #4
 8003f8a:	6018      	str	r0, [r3, #0]
 8003f8c:	6808      	ldr	r0, [r1, #0]
 8003f8e:	062e      	lsls	r6, r5, #24
 8003f90:	d505      	bpl.n	8003f9e <_printf_i+0xc2>
 8003f92:	4e54      	ldr	r6, [pc, #336]	; (80040e4 <_printf_i+0x208>)
 8003f94:	2708      	movs	r7, #8
 8003f96:	2a6f      	cmp	r2, #111	; 0x6f
 8003f98:	d01b      	beq.n	8003fd2 <_printf_i+0xf6>
 8003f9a:	270a      	movs	r7, #10
 8003f9c:	e019      	b.n	8003fd2 <_printf_i+0xf6>
 8003f9e:	066d      	lsls	r5, r5, #25
 8003fa0:	d5f7      	bpl.n	8003f92 <_printf_i+0xb6>
 8003fa2:	b280      	uxth	r0, r0
 8003fa4:	e7f5      	b.n	8003f92 <_printf_i+0xb6>
 8003fa6:	3145      	adds	r1, #69	; 0x45
 8003fa8:	4e4e      	ldr	r6, [pc, #312]	; (80040e4 <_printf_i+0x208>)
 8003faa:	700a      	strb	r2, [r1, #0]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	6822      	ldr	r2, [r4, #0]
 8003fb0:	1d01      	adds	r1, r0, #4
 8003fb2:	6800      	ldr	r0, [r0, #0]
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	0615      	lsls	r5, r2, #24
 8003fb8:	d521      	bpl.n	8003ffe <_printf_i+0x122>
 8003fba:	07d3      	lsls	r3, r2, #31
 8003fbc:	d502      	bpl.n	8003fc4 <_printf_i+0xe8>
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	2710      	movs	r7, #16
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d103      	bne.n	8003fd2 <_printf_i+0xf6>
 8003fca:	2320      	movs	r3, #32
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	439a      	bics	r2, r3
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	0023      	movs	r3, r4
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	3343      	adds	r3, #67	; 0x43
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db58      	blt.n	8004094 <_printf_i+0x1b8>
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	6821      	ldr	r1, [r4, #0]
 8003fe6:	4391      	bics	r1, r2
 8003fe8:	6021      	str	r1, [r4, #0]
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d154      	bne.n	8004098 <_printf_i+0x1bc>
 8003fee:	9d02      	ldr	r5, [sp, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05a      	beq.n	80040aa <_printf_i+0x1ce>
 8003ff4:	0025      	movs	r5, r4
 8003ff6:	7833      	ldrb	r3, [r6, #0]
 8003ff8:	3542      	adds	r5, #66	; 0x42
 8003ffa:	702b      	strb	r3, [r5, #0]
 8003ffc:	e055      	b.n	80040aa <_printf_i+0x1ce>
 8003ffe:	0655      	lsls	r5, r2, #25
 8004000:	d5db      	bpl.n	8003fba <_printf_i+0xde>
 8004002:	b280      	uxth	r0, r0
 8004004:	e7d9      	b.n	8003fba <_printf_i+0xde>
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	680d      	ldr	r5, [r1, #0]
 800400a:	1d10      	adds	r0, r2, #4
 800400c:	6949      	ldr	r1, [r1, #20]
 800400e:	6018      	str	r0, [r3, #0]
 8004010:	6813      	ldr	r3, [r2, #0]
 8004012:	062e      	lsls	r6, r5, #24
 8004014:	d501      	bpl.n	800401a <_printf_i+0x13e>
 8004016:	6019      	str	r1, [r3, #0]
 8004018:	e002      	b.n	8004020 <_printf_i+0x144>
 800401a:	066d      	lsls	r5, r5, #25
 800401c:	d5fb      	bpl.n	8004016 <_printf_i+0x13a>
 800401e:	8019      	strh	r1, [r3, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	9d02      	ldr	r5, [sp, #8]
 8004024:	6123      	str	r3, [r4, #16]
 8004026:	e04f      	b.n	80040c8 <_printf_i+0x1ec>
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	1d11      	adds	r1, r2, #4
 800402c:	6019      	str	r1, [r3, #0]
 800402e:	6815      	ldr	r5, [r2, #0]
 8004030:	2100      	movs	r1, #0
 8004032:	6862      	ldr	r2, [r4, #4]
 8004034:	0028      	movs	r0, r5
 8004036:	f000 f859 	bl	80040ec <memchr>
 800403a:	2800      	cmp	r0, #0
 800403c:	d001      	beq.n	8004042 <_printf_i+0x166>
 800403e:	1b40      	subs	r0, r0, r5
 8004040:	6060      	str	r0, [r4, #4]
 8004042:	6863      	ldr	r3, [r4, #4]
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	2300      	movs	r3, #0
 8004048:	9a02      	ldr	r2, [sp, #8]
 800404a:	7013      	strb	r3, [r2, #0]
 800404c:	e03c      	b.n	80040c8 <_printf_i+0x1ec>
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	002a      	movs	r2, r5
 8004052:	9904      	ldr	r1, [sp, #16]
 8004054:	9803      	ldr	r0, [sp, #12]
 8004056:	9d05      	ldr	r5, [sp, #20]
 8004058:	47a8      	blx	r5
 800405a:	1c43      	adds	r3, r0, #1
 800405c:	d03e      	beq.n	80040dc <_printf_i+0x200>
 800405e:	6823      	ldr	r3, [r4, #0]
 8004060:	079b      	lsls	r3, r3, #30
 8004062:	d415      	bmi.n	8004090 <_printf_i+0x1b4>
 8004064:	9b07      	ldr	r3, [sp, #28]
 8004066:	68e0      	ldr	r0, [r4, #12]
 8004068:	4298      	cmp	r0, r3
 800406a:	da39      	bge.n	80040e0 <_printf_i+0x204>
 800406c:	0018      	movs	r0, r3
 800406e:	e037      	b.n	80040e0 <_printf_i+0x204>
 8004070:	0022      	movs	r2, r4
 8004072:	2301      	movs	r3, #1
 8004074:	3219      	adds	r2, #25
 8004076:	9904      	ldr	r1, [sp, #16]
 8004078:	9803      	ldr	r0, [sp, #12]
 800407a:	9e05      	ldr	r6, [sp, #20]
 800407c:	47b0      	blx	r6
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	d02c      	beq.n	80040dc <_printf_i+0x200>
 8004082:	3501      	adds	r5, #1
 8004084:	68e3      	ldr	r3, [r4, #12]
 8004086:	9a07      	ldr	r2, [sp, #28]
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	42ab      	cmp	r3, r5
 800408c:	dcf0      	bgt.n	8004070 <_printf_i+0x194>
 800408e:	e7e9      	b.n	8004064 <_printf_i+0x188>
 8004090:	2500      	movs	r5, #0
 8004092:	e7f7      	b.n	8004084 <_printf_i+0x1a8>
 8004094:	2800      	cmp	r0, #0
 8004096:	d0ad      	beq.n	8003ff4 <_printf_i+0x118>
 8004098:	9d02      	ldr	r5, [sp, #8]
 800409a:	0039      	movs	r1, r7
 800409c:	f7fc f8b8 	bl	8000210 <__aeabi_uidivmod>
 80040a0:	5c73      	ldrb	r3, [r6, r1]
 80040a2:	3d01      	subs	r5, #1
 80040a4:	702b      	strb	r3, [r5, #0]
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d1f7      	bne.n	800409a <_printf_i+0x1be>
 80040aa:	2f08      	cmp	r7, #8
 80040ac:	d109      	bne.n	80040c2 <_printf_i+0x1e6>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	07db      	lsls	r3, r3, #31
 80040b2:	d506      	bpl.n	80040c2 <_printf_i+0x1e6>
 80040b4:	6863      	ldr	r3, [r4, #4]
 80040b6:	6922      	ldr	r2, [r4, #16]
 80040b8:	4293      	cmp	r3, r2
 80040ba:	dc02      	bgt.n	80040c2 <_printf_i+0x1e6>
 80040bc:	2330      	movs	r3, #48	; 0x30
 80040be:	3d01      	subs	r5, #1
 80040c0:	702b      	strb	r3, [r5, #0]
 80040c2:	9b02      	ldr	r3, [sp, #8]
 80040c4:	1b5b      	subs	r3, r3, r5
 80040c6:	6123      	str	r3, [r4, #16]
 80040c8:	9b05      	ldr	r3, [sp, #20]
 80040ca:	aa07      	add	r2, sp, #28
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	0021      	movs	r1, r4
 80040d0:	9b04      	ldr	r3, [sp, #16]
 80040d2:	9803      	ldr	r0, [sp, #12]
 80040d4:	f7ff fe94 	bl	8003e00 <_printf_common>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d1b8      	bne.n	800404e <_printf_i+0x172>
 80040dc:	2001      	movs	r0, #1
 80040de:	4240      	negs	r0, r0
 80040e0:	b009      	add	sp, #36	; 0x24
 80040e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e4:	08004405 	.word	0x08004405
 80040e8:	08004416 	.word	0x08004416

080040ec <memchr>:
 80040ec:	b2c9      	uxtb	r1, r1
 80040ee:	1882      	adds	r2, r0, r2
 80040f0:	4290      	cmp	r0, r2
 80040f2:	d101      	bne.n	80040f8 <memchr+0xc>
 80040f4:	2000      	movs	r0, #0
 80040f6:	4770      	bx	lr
 80040f8:	7803      	ldrb	r3, [r0, #0]
 80040fa:	428b      	cmp	r3, r1
 80040fc:	d0fb      	beq.n	80040f6 <memchr+0xa>
 80040fe:	3001      	adds	r0, #1
 8004100:	e7f6      	b.n	80040f0 <memchr+0x4>

08004102 <memcpy>:
 8004102:	2300      	movs	r3, #0
 8004104:	b510      	push	{r4, lr}
 8004106:	429a      	cmp	r2, r3
 8004108:	d100      	bne.n	800410c <memcpy+0xa>
 800410a:	bd10      	pop	{r4, pc}
 800410c:	5ccc      	ldrb	r4, [r1, r3]
 800410e:	54c4      	strb	r4, [r0, r3]
 8004110:	3301      	adds	r3, #1
 8004112:	e7f8      	b.n	8004106 <memcpy+0x4>

08004114 <memmove>:
 8004114:	b510      	push	{r4, lr}
 8004116:	4288      	cmp	r0, r1
 8004118:	d902      	bls.n	8004120 <memmove+0xc>
 800411a:	188b      	adds	r3, r1, r2
 800411c:	4298      	cmp	r0, r3
 800411e:	d303      	bcc.n	8004128 <memmove+0x14>
 8004120:	2300      	movs	r3, #0
 8004122:	e007      	b.n	8004134 <memmove+0x20>
 8004124:	5c8b      	ldrb	r3, [r1, r2]
 8004126:	5483      	strb	r3, [r0, r2]
 8004128:	3a01      	subs	r2, #1
 800412a:	d2fb      	bcs.n	8004124 <memmove+0x10>
 800412c:	bd10      	pop	{r4, pc}
 800412e:	5ccc      	ldrb	r4, [r1, r3]
 8004130:	54c4      	strb	r4, [r0, r3]
 8004132:	3301      	adds	r3, #1
 8004134:	429a      	cmp	r2, r3
 8004136:	d1fa      	bne.n	800412e <memmove+0x1a>
 8004138:	e7f8      	b.n	800412c <memmove+0x18>
	...

0800413c <_free_r>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	0005      	movs	r5, r0
 8004140:	2900      	cmp	r1, #0
 8004142:	d010      	beq.n	8004166 <_free_r+0x2a>
 8004144:	1f0c      	subs	r4, r1, #4
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da00      	bge.n	800414e <_free_r+0x12>
 800414c:	18e4      	adds	r4, r4, r3
 800414e:	0028      	movs	r0, r5
 8004150:	f000 f8d4 	bl	80042fc <__malloc_lock>
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <_free_r+0x90>)
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <_free_r+0x2c>
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	6014      	str	r4, [r2, #0]
 8004160:	0028      	movs	r0, r5
 8004162:	f000 f8cc 	bl	80042fe <__malloc_unlock>
 8004166:	bd70      	pop	{r4, r5, r6, pc}
 8004168:	42a3      	cmp	r3, r4
 800416a:	d909      	bls.n	8004180 <_free_r+0x44>
 800416c:	6821      	ldr	r1, [r4, #0]
 800416e:	1860      	adds	r0, r4, r1
 8004170:	4283      	cmp	r3, r0
 8004172:	d1f3      	bne.n	800415c <_free_r+0x20>
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	1841      	adds	r1, r0, r1
 800417a:	6021      	str	r1, [r4, #0]
 800417c:	e7ee      	b.n	800415c <_free_r+0x20>
 800417e:	0013      	movs	r3, r2
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2a00      	cmp	r2, #0
 8004184:	d001      	beq.n	800418a <_free_r+0x4e>
 8004186:	42a2      	cmp	r2, r4
 8004188:	d9f9      	bls.n	800417e <_free_r+0x42>
 800418a:	6819      	ldr	r1, [r3, #0]
 800418c:	1858      	adds	r0, r3, r1
 800418e:	42a0      	cmp	r0, r4
 8004190:	d10b      	bne.n	80041aa <_free_r+0x6e>
 8004192:	6820      	ldr	r0, [r4, #0]
 8004194:	1809      	adds	r1, r1, r0
 8004196:	1858      	adds	r0, r3, r1
 8004198:	6019      	str	r1, [r3, #0]
 800419a:	4282      	cmp	r2, r0
 800419c:	d1e0      	bne.n	8004160 <_free_r+0x24>
 800419e:	6810      	ldr	r0, [r2, #0]
 80041a0:	6852      	ldr	r2, [r2, #4]
 80041a2:	1841      	adds	r1, r0, r1
 80041a4:	6019      	str	r1, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	e7da      	b.n	8004160 <_free_r+0x24>
 80041aa:	42a0      	cmp	r0, r4
 80041ac:	d902      	bls.n	80041b4 <_free_r+0x78>
 80041ae:	230c      	movs	r3, #12
 80041b0:	602b      	str	r3, [r5, #0]
 80041b2:	e7d5      	b.n	8004160 <_free_r+0x24>
 80041b4:	6821      	ldr	r1, [r4, #0]
 80041b6:	1860      	adds	r0, r4, r1
 80041b8:	4282      	cmp	r2, r0
 80041ba:	d103      	bne.n	80041c4 <_free_r+0x88>
 80041bc:	6810      	ldr	r0, [r2, #0]
 80041be:	6852      	ldr	r2, [r2, #4]
 80041c0:	1841      	adds	r1, r0, r1
 80041c2:	6021      	str	r1, [r4, #0]
 80041c4:	6062      	str	r2, [r4, #4]
 80041c6:	605c      	str	r4, [r3, #4]
 80041c8:	e7ca      	b.n	8004160 <_free_r+0x24>
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	20000090 	.word	0x20000090

080041d0 <_malloc_r>:
 80041d0:	2303      	movs	r3, #3
 80041d2:	b570      	push	{r4, r5, r6, lr}
 80041d4:	1ccd      	adds	r5, r1, #3
 80041d6:	439d      	bics	r5, r3
 80041d8:	3508      	adds	r5, #8
 80041da:	0006      	movs	r6, r0
 80041dc:	2d0c      	cmp	r5, #12
 80041de:	d21e      	bcs.n	800421e <_malloc_r+0x4e>
 80041e0:	250c      	movs	r5, #12
 80041e2:	42a9      	cmp	r1, r5
 80041e4:	d81d      	bhi.n	8004222 <_malloc_r+0x52>
 80041e6:	0030      	movs	r0, r6
 80041e8:	f000 f888 	bl	80042fc <__malloc_lock>
 80041ec:	4a25      	ldr	r2, [pc, #148]	; (8004284 <_malloc_r+0xb4>)
 80041ee:	6814      	ldr	r4, [r2, #0]
 80041f0:	0021      	movs	r1, r4
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d119      	bne.n	800422a <_malloc_r+0x5a>
 80041f6:	4c24      	ldr	r4, [pc, #144]	; (8004288 <_malloc_r+0xb8>)
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <_malloc_r+0x36>
 80041fe:	0030      	movs	r0, r6
 8004200:	f000 f86a 	bl	80042d8 <_sbrk_r>
 8004204:	6020      	str	r0, [r4, #0]
 8004206:	0029      	movs	r1, r5
 8004208:	0030      	movs	r0, r6
 800420a:	f000 f865 	bl	80042d8 <_sbrk_r>
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	d12b      	bne.n	800426a <_malloc_r+0x9a>
 8004212:	230c      	movs	r3, #12
 8004214:	0030      	movs	r0, r6
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f000 f871 	bl	80042fe <__malloc_unlock>
 800421c:	e003      	b.n	8004226 <_malloc_r+0x56>
 800421e:	2d00      	cmp	r5, #0
 8004220:	dadf      	bge.n	80041e2 <_malloc_r+0x12>
 8004222:	230c      	movs	r3, #12
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	2000      	movs	r0, #0
 8004228:	bd70      	pop	{r4, r5, r6, pc}
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	1b5b      	subs	r3, r3, r5
 800422e:	d419      	bmi.n	8004264 <_malloc_r+0x94>
 8004230:	2b0b      	cmp	r3, #11
 8004232:	d903      	bls.n	800423c <_malloc_r+0x6c>
 8004234:	600b      	str	r3, [r1, #0]
 8004236:	18cc      	adds	r4, r1, r3
 8004238:	6025      	str	r5, [r4, #0]
 800423a:	e003      	b.n	8004244 <_malloc_r+0x74>
 800423c:	684b      	ldr	r3, [r1, #4]
 800423e:	428c      	cmp	r4, r1
 8004240:	d10d      	bne.n	800425e <_malloc_r+0x8e>
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	0030      	movs	r0, r6
 8004246:	f000 f85a 	bl	80042fe <__malloc_unlock>
 800424a:	0020      	movs	r0, r4
 800424c:	2207      	movs	r2, #7
 800424e:	300b      	adds	r0, #11
 8004250:	1d23      	adds	r3, r4, #4
 8004252:	4390      	bics	r0, r2
 8004254:	1ac3      	subs	r3, r0, r3
 8004256:	d0e7      	beq.n	8004228 <_malloc_r+0x58>
 8004258:	425a      	negs	r2, r3
 800425a:	50e2      	str	r2, [r4, r3]
 800425c:	e7e4      	b.n	8004228 <_malloc_r+0x58>
 800425e:	6063      	str	r3, [r4, #4]
 8004260:	000c      	movs	r4, r1
 8004262:	e7ef      	b.n	8004244 <_malloc_r+0x74>
 8004264:	000c      	movs	r4, r1
 8004266:	6849      	ldr	r1, [r1, #4]
 8004268:	e7c3      	b.n	80041f2 <_malloc_r+0x22>
 800426a:	2303      	movs	r3, #3
 800426c:	1cc4      	adds	r4, r0, #3
 800426e:	439c      	bics	r4, r3
 8004270:	42a0      	cmp	r0, r4
 8004272:	d0e1      	beq.n	8004238 <_malloc_r+0x68>
 8004274:	1a21      	subs	r1, r4, r0
 8004276:	0030      	movs	r0, r6
 8004278:	f000 f82e 	bl	80042d8 <_sbrk_r>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d1db      	bne.n	8004238 <_malloc_r+0x68>
 8004280:	e7c7      	b.n	8004212 <_malloc_r+0x42>
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	20000090 	.word	0x20000090
 8004288:	20000094 	.word	0x20000094

0800428c <_realloc_r>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	0007      	movs	r7, r0
 8004290:	000d      	movs	r5, r1
 8004292:	0016      	movs	r6, r2
 8004294:	2900      	cmp	r1, #0
 8004296:	d105      	bne.n	80042a4 <_realloc_r+0x18>
 8004298:	0011      	movs	r1, r2
 800429a:	f7ff ff99 	bl	80041d0 <_malloc_r>
 800429e:	0004      	movs	r4, r0
 80042a0:	0020      	movs	r0, r4
 80042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	d103      	bne.n	80042b0 <_realloc_r+0x24>
 80042a8:	f7ff ff48 	bl	800413c <_free_r>
 80042ac:	0034      	movs	r4, r6
 80042ae:	e7f7      	b.n	80042a0 <_realloc_r+0x14>
 80042b0:	f000 f826 	bl	8004300 <_malloc_usable_size_r>
 80042b4:	002c      	movs	r4, r5
 80042b6:	42b0      	cmp	r0, r6
 80042b8:	d2f2      	bcs.n	80042a0 <_realloc_r+0x14>
 80042ba:	0031      	movs	r1, r6
 80042bc:	0038      	movs	r0, r7
 80042be:	f7ff ff87 	bl	80041d0 <_malloc_r>
 80042c2:	1e04      	subs	r4, r0, #0
 80042c4:	d0ec      	beq.n	80042a0 <_realloc_r+0x14>
 80042c6:	0029      	movs	r1, r5
 80042c8:	0032      	movs	r2, r6
 80042ca:	f7ff ff1a 	bl	8004102 <memcpy>
 80042ce:	0029      	movs	r1, r5
 80042d0:	0038      	movs	r0, r7
 80042d2:	f7ff ff33 	bl	800413c <_free_r>
 80042d6:	e7e3      	b.n	80042a0 <_realloc_r+0x14>

080042d8 <_sbrk_r>:
 80042d8:	2300      	movs	r3, #0
 80042da:	b570      	push	{r4, r5, r6, lr}
 80042dc:	4c06      	ldr	r4, [pc, #24]	; (80042f8 <_sbrk_r+0x20>)
 80042de:	0005      	movs	r5, r0
 80042e0:	0008      	movs	r0, r1
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	f7fd f812 	bl	800130c <_sbrk>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d103      	bne.n	80042f4 <_sbrk_r+0x1c>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d000      	beq.n	80042f4 <_sbrk_r+0x1c>
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	bd70      	pop	{r4, r5, r6, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20000100 	.word	0x20000100

080042fc <__malloc_lock>:
 80042fc:	4770      	bx	lr

080042fe <__malloc_unlock>:
 80042fe:	4770      	bx	lr

08004300 <_malloc_usable_size_r>:
 8004300:	1f0b      	subs	r3, r1, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1f18      	subs	r0, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	da01      	bge.n	800430e <_malloc_usable_size_r+0xe>
 800430a:	580b      	ldr	r3, [r1, r0]
 800430c:	18c0      	adds	r0, r0, r3
 800430e:	4770      	bx	lr

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
