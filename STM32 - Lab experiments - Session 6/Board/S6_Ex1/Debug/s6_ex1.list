
s6_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bbc  08003bbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bbc  08003bbc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bbc  08003bbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08003bd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003bd0  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7da  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b50  00000000  00000000  0002c80e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  0002f108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd67  00000000  00000000  0002fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b139  00000000  00000000  0004bb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9db0  00000000  00000000  00056c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  00110a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003b10 	.word	0x08003b10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003b10 	.word	0x08003b10

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
    uint16_t AD_RES = 0;
 8000222:	1dbb      	adds	r3, r7, #6
 8000224:	2200      	movs	r2, #0
 8000226:	801a      	strh	r2, [r3, #0]

    HAL_Init();
 8000228:	f000 fabe 	bl	80007a8 <HAL_Init>
    SystemClock_Config();
 800022c:	f000 f82e 	bl	800028c <SystemClock_Config>
    MX_GPIO_Init();
 8000230:	f000 f98e 	bl	8000550 <MX_GPIO_Init>
    MX_ADC1_Init();
 8000234:	f000 f8a0 	bl	8000378 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000238:	f000 f90a 	bl	8000450 <MX_TIM2_Init>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <main+0x68>)
 800023e:	2100      	movs	r1, #0
 8000240:	0018      	movs	r0, r3
 8000242:	f002 fd0f 	bl	8002c64 <HAL_TIM_PWM_Start>
    // Calibrate The ADC On Power-Up For Better Accuracy
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0x6c>)
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fa43 	bl	80016d4 <HAL_ADCEx_Calibration_Start>

    while (1)
    {
       // Start ADC Conversion
        HAL_ADC_Start(&hadc1);
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x6c>)
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fe83 	bl	8000f5c <HAL_ADC_Start>
       // Poll ADC1 Perihperal & TimeOut = 1mSec
        HAL_ADC_PollForConversion(&hadc1, 1);
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x6c>)
 8000258:	2101      	movs	r1, #1
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fecc 	bl	8000ff8 <HAL_ADC_PollForConversion>
       // Read The ADC Conversion Result & Map It To PWM DutyCycle
        AD_RES = HAL_ADC_GetValue(&hadc1);
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <main+0x6c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f000 ff56 	bl	8001114 <HAL_ADC_GetValue>
 8000268:	0002      	movs	r2, r0
 800026a:	1dbb      	adds	r3, r7, #6
 800026c:	801a      	strh	r2, [r3, #0]


        TIM2->CCR1 = (AD_RES<<4);
 800026e:	1dbb      	adds	r3, r7, #6
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	011a      	lsls	r2, r3, #4
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	635a      	str	r2, [r3, #52]	; 0x34

        HAL_Delay(1);
 800027a:	2001      	movs	r0, #1
 800027c:	f000 fb1a 	bl	80008b4 <HAL_Delay>
        HAL_ADC_Start(&hadc1);
 8000280:	e7e5      	b.n	800024e <main+0x32>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	2000008c 	.word	0x2000008c
 8000288:	20000028 	.word	0x20000028

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b0a7      	sub	sp, #156	; 0x9c
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	245c      	movs	r4, #92	; 0x5c
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	233c      	movs	r3, #60	; 0x3c
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f003 fc2f 	bl	8003b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	234c      	movs	r3, #76	; 0x4c
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	0018      	movs	r0, r3
 80002a8:	2310      	movs	r3, #16
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f003 fc27 	bl	8003b00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b2:	003b      	movs	r3, r7
 80002b4:	0018      	movs	r0, r3
 80002b6:	234c      	movs	r3, #76	; 0x4c
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f003 fc20 	bl	8003b00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fca7 	bl	8001c18 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	2280      	movs	r2, #128	; 0x80
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d8:	0021      	movs	r1, r4
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2240      	movs	r2, #64	; 0x40
 80002e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2202      	movs	r2, #2
 80002f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2208      	movs	r2, #8
 80002fc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2280      	movs	r2, #128	; 0x80
 8000302:	0292      	lsls	r2, r2, #10
 8000304:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	0492      	lsls	r2, r2, #18
 800030c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2280      	movs	r2, #128	; 0x80
 8000312:	0592      	lsls	r2, r2, #22
 8000314:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fcbd 	bl	8001c98 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000322:	f000 f92b 	bl	800057c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	214c      	movs	r1, #76	; 0x4c
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2207      	movs	r2, #7
 800032c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2202      	movs	r2, #2
 8000332:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2102      	movs	r1, #2
 8000344:	0018      	movs	r0, r3
 8000346:	f002 f80d 	bl	8002364 <HAL_RCC_ClockConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800034e:	f000 f915 	bl	800057c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000352:	003b      	movs	r3, r7
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	01d2      	lsls	r2, r2, #7
 8000358:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000360:	003b      	movs	r3, r7
 8000362:	0018      	movs	r0, r3
 8000364:	f002 f988 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800036c:	f000 f906 	bl	800057c <Error_Handler>
  }
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b027      	add	sp, #156	; 0x9c
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	0018      	movs	r0, r3
 8000382:	230c      	movs	r3, #12
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f003 fbba 	bl	8003b00 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800038c:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <MX_ADC1_Init+0xcc>)
 800038e:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <MX_ADC1_Init+0xd0>)
 8000390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000392:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <MX_ADC1_Init+0xcc>)
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	05d2      	lsls	r2, r2, #23
 8000398:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800039a:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <MX_ADC1_Init+0xcc>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a0:	4b28      	ldr	r3, [pc, #160]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003a6:	4b27      	ldr	r3, [pc, #156]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ac:	4b25      	ldr	r3, [pc, #148]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003ae:	2204      	movs	r2, #4
 80003b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b2:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ca:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003cc:	2220      	movs	r2, #32
 80003ce:	2100      	movs	r1, #0
 80003d0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003e0:	222c      	movs	r2, #44	; 0x2c
 80003e2:	2100      	movs	r1, #0
 80003e4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_ADC1_Init+0xcc>)
 80003fa:	223c      	movs	r2, #60	; 0x3c
 80003fc:	2100      	movs	r1, #0
 80003fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_ADC1_Init+0xcc>)
 8000402:	2200      	movs	r2, #0
 8000404:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_ADC1_Init+0xcc>)
 8000408:	0018      	movs	r0, r3
 800040a:	f000 fbcb 	bl	8000ba4 <HAL_ADC_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000412:	f000 f8b3 	bl	800057c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4a0c      	ldr	r2, [pc, #48]	; (800044c <MX_ADC1_Init+0xd4>)
 800041a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000428:	1d3a      	adds	r2, r7, #4
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_ADC1_Init+0xcc>)
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f000 fe7c 	bl	800112c <HAL_ADC_ConfigChannel>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000438:	f000 f8a0 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028
 8000448:	40012400 	.word	0x40012400
 800044c:	1c000080 	.word	0x1c000080

08000450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08e      	sub	sp, #56	; 0x38
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000456:	2328      	movs	r3, #40	; 0x28
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	0018      	movs	r0, r3
 800045c:	2310      	movs	r3, #16
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f003 fb4d 	bl	8003b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000466:	231c      	movs	r3, #28
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	0018      	movs	r0, r3
 800046c:	230c      	movs	r3, #12
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f003 fb45 	bl	8003b00 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000476:	003b      	movs	r3, r7
 8000478:	0018      	movs	r0, r3
 800047a:	231c      	movs	r3, #28
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f003 fb3e 	bl	8003b00 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000484:	4b30      	ldr	r3, [pc, #192]	; (8000548 <MX_TIM2_Init+0xf8>)
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	05d2      	lsls	r2, r2, #23
 800048a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800048c:	4b2e      	ldr	r3, [pc, #184]	; (8000548 <MX_TIM2_Init+0xf8>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_TIM2_Init+0xf8>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <MX_TIM2_Init+0xf8>)
 800049a:	4a2c      	ldr	r2, [pc, #176]	; (800054c <MX_TIM2_Init+0xfc>)
 800049c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049e:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_TIM2_Init+0xf8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_TIM2_Init+0xf8>)
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004aa:	4b27      	ldr	r3, [pc, #156]	; (8000548 <MX_TIM2_Init+0xf8>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fb21 	bl	8002af4 <HAL_TIM_Base_Init>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004b6:	f000 f861 	bl	800057c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ba:	2128      	movs	r1, #40	; 0x28
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0152      	lsls	r2, r2, #5
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <MX_TIM2_Init+0xf8>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fdb0 	bl	8003030 <HAL_TIM_ConfigClockSource>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004d4:	f000 f852 	bl	800057c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_TIM2_Init+0xf8>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fb62 	bl	8002ba4 <HAL_TIM_PWM_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004e4:	f000 f84a 	bl	800057c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	211c      	movs	r1, #28
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <MX_TIM2_Init+0xf8>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f003 fa65 	bl	80039cc <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000506:	f000 f839 	bl	800057c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050a:	003b      	movs	r3, r7
 800050c:	2260      	movs	r2, #96	; 0x60
 800050e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000510:	003b      	movs	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000516:	003b      	movs	r3, r7
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800051c:	003b      	movs	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000522:	0039      	movs	r1, r7
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_TIM2_Init+0xf8>)
 8000526:	2200      	movs	r2, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fc8b 	bl	8002e44 <HAL_TIM_PWM_ConfigChannel>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000532:	f000 f823 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <MX_TIM2_Init+0xf8>)
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f8ab 	bl	8000694 <HAL_TIM_MspPostInit>

}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b00e      	add	sp, #56	; 0x38
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	2000008c 	.word	0x2000008c
 800054c:	0000ffff 	.word	0x0000ffff

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_GPIO_Init+0x28>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <MX_GPIO_Init+0x28>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_GPIO_Init+0x28>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000582:	e7fe      	b.n	8000582 <Error_Handler+0x6>

08000584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_MspInit+0x4c>)
 800058c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_MspInit+0x4c>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_MspInit+0x4c>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_MspInit+0x4c>)
 80005a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_MspInit+0x4c>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	0549      	lsls	r1, r1, #21
 80005ac:	430a      	orrs	r2, r1
 80005ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <HAL_MspInit+0x4c>)
 80005b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	055b      	lsls	r3, r3, #21
 80005b8:	4013      	ands	r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80005be:	23c0      	movs	r3, #192	; 0xc0
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f998 	bl	80008f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2314      	movs	r3, #20
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f003 fa8a 	bl	8003b00 <memset>
  if(hadc->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a18      	ldr	r2, [pc, #96]	; (8000654 <HAL_ADC_MspInit+0x80>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d12a      	bne.n	800064c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_ADC_MspInit+0x84>)
 80005f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_ADC_MspInit+0x84>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0349      	lsls	r1, r1, #13
 8000600:	430a      	orrs	r2, r1
 8000602:	641a      	str	r2, [r3, #64]	; 0x40
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_ADC_MspInit+0x84>)
 8000606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	035b      	lsls	r3, r3, #13
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <HAL_ADC_MspInit+0x84>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_ADC_MspInit+0x84>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_ADC_MspInit+0x84>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800062a:	2114      	movs	r1, #20
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2203      	movs	r2, #3
 8000636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	187a      	adds	r2, r7, r1
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f001 f97a 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b00a      	add	sp, #40	; 0x28
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40012400 	.word	0x40012400
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	429a      	cmp	r2, r3
 800066e:	d10b      	bne.n	8000688 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_TIM_Base_MspInit+0x34>)
 8000672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_TIM_Base_MspInit+0x34>)
 8000676:	2101      	movs	r1, #1
 8000678:	430a      	orrs	r2, r1
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <HAL_TIM_Base_MspInit+0x34>)
 800067e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000680:	2201      	movs	r2, #1
 8000682:	4013      	ands	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b004      	add	sp, #16
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	230c      	movs	r3, #12
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	0018      	movs	r0, r3
 80006a2:	2314      	movs	r3, #20
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f003 fa2a 	bl	8003b00 <memset>
  if(htim->Instance==TIM2)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d122      	bne.n	80006fe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <HAL_TIM_MspPostInit+0x74>)
 80006ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_TIM_MspPostInit+0x74>)
 80006be:	2101      	movs	r1, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_TIM_MspPostInit+0x74>)
 80006c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c8:	2201      	movs	r2, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d0:	210c      	movs	r1, #12
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2202      	movs	r2, #2
 80006ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	187a      	adds	r2, r7, r1
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f921 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b008      	add	sp, #32
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40021000 	.word	0x40021000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8a4 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SystemInit+0x14>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	0512      	lsls	r2, r2, #20
 8000746:	609a      	str	r2, [r3, #8]
#endif
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000756:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000758:	f7ff fff0 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	; (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000782:	f003 f999 	bl	8003ab8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000786:	f7ff fd49 	bl	800021c <main>

0800078a <LoopForever>:

LoopForever:
  b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   r0, =_estack
 800078c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000798:	08003bc4 	.word	0x08003bc4
  ldr r2, =_sbss
 800079c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a0:	200000dc 	.word	0x200000dc

080007a4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_COMP_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_Init+0x3c>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_Init+0x3c>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0049      	lsls	r1, r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f810 	bl	80007e8 <HAL_InitTick>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d003      	beq.n	80007d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e001      	b.n	80007d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff fed6 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f0:	230f      	movs	r3, #15
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_InitTick+0x88>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d02b      	beq.n	8000858 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_InitTick+0x8c>)
 8000802:	681c      	ldr	r4, [r3, #0]
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <HAL_InitTick+0x88>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	0019      	movs	r1, r3
 800080a:	23fa      	movs	r3, #250	; 0xfa
 800080c:	0098      	lsls	r0, r3, #2
 800080e:	f7ff fc79 	bl	8000104 <__udivsi3>
 8000812:	0003      	movs	r3, r0
 8000814:	0019      	movs	r1, r3
 8000816:	0020      	movs	r0, r4
 8000818:	f7ff fc74 	bl	8000104 <__udivsi3>
 800081c:	0003      	movs	r3, r0
 800081e:	0018      	movs	r0, r3
 8000820:	f001 f881 	bl	8001926 <HAL_SYSTICK_Config>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d112      	bne.n	800084e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d80a      	bhi.n	8000844 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2301      	movs	r3, #1
 8000832:	425b      	negs	r3, r3
 8000834:	2200      	movs	r2, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f001 f860 	bl	80018fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_InitTick+0x90>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e00d      	b.n	8000860 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000844:	230f      	movs	r3, #15
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e008      	b.n	8000860 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800084e:	230f      	movs	r3, #15
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e003      	b.n	8000860 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000858:	230f      	movs	r3, #15
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	781b      	ldrb	r3, [r3, #0]
}
 8000866:	0018      	movs	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	b005      	add	sp, #20
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000008 	.word	0x20000008
 8000874:	20000000 	.word	0x20000000
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x1c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	001a      	movs	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x20>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	18d2      	adds	r2, r2, r3
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_IncTick+0x20>)
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	20000008 	.word	0x20000008
 800089c:	200000d8 	.word	0x200000d8

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <HAL_GetTick+0x10>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	200000d8 	.word	0x200000d8

080008b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008bc:	f7ff fff0 	bl	80008a0 <HAL_GetTick>
 80008c0:	0003      	movs	r3, r0
 80008c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	d005      	beq.n	80008da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_Delay+0x40>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	001a      	movs	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	189b      	adds	r3, r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	f7ff ffe0 	bl	80008a0 <HAL_GetTick>
 80008e0:	0002      	movs	r2, r0
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d8f7      	bhi.n	80008dc <HAL_Delay+0x28>
  {
  }
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b004      	add	sp, #16
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000008 	.word	0x20000008

080008f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000906:	4013      	ands	r3, r2
 8000908:	0019      	movs	r1, r3
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40010000 	.word	0x40010000
 8000920:	fffff9ff 	.word	0xfffff9ff

08000924 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000934:	401a      	ands	r2, r3
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	fe3fffff 	.word	0xfe3fffff

0800094c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	23e0      	movs	r3, #224	; 0xe0
 800095a:	045b      	lsls	r3, r3, #17
 800095c:	4013      	ands	r3, r2
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b084      	sub	sp, #16
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	2104      	movs	r1, #4
 800097a:	400a      	ands	r2, r1
 800097c:	2107      	movs	r1, #7
 800097e:	4091      	lsls	r1, r2
 8000980:	000a      	movs	r2, r1
 8000982:	43d2      	mvns	r2, r2
 8000984:	401a      	ands	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2104      	movs	r1, #4
 800098a:	400b      	ands	r3, r1
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4099      	lsls	r1, r3
 8000990:	000b      	movs	r3, r1
 8000992:	431a      	orrs	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b004      	add	sp, #16
 800099e:	bd80      	pop	{r7, pc}

080009a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	23c0      	movs	r3, #192	; 0xc0
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4013      	ands	r3, r2
 80009b2:	d101      	bne.n	80009b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	211f      	movs	r1, #31
 80009d6:	400a      	ands	r2, r1
 80009d8:	210f      	movs	r1, #15
 80009da:	4091      	lsls	r1, r2
 80009dc:	000a      	movs	r2, r1
 80009de:	43d2      	mvns	r2, r2
 80009e0:	401a      	ands	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0e9b      	lsrs	r3, r3, #26
 80009e6:	210f      	movs	r1, #15
 80009e8:	4019      	ands	r1, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	201f      	movs	r0, #31
 80009ee:	4003      	ands	r3, r0
 80009f0:	4099      	lsls	r1, r3
 80009f2:	000b      	movs	r3, r1
 80009f4:	431a      	orrs	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b004      	add	sp, #16
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	035b      	lsls	r3, r3, #13
 8000a14:	0b5b      	lsrs	r3, r3, #13
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	0352      	lsls	r2, r2, #13
 8000a36:	0b52      	lsrs	r2, r2, #13
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	0212      	lsls	r2, r2, #8
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	401a      	ands	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	400b      	ands	r3, r1
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a6a:	400b      	ands	r3, r1
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	07ffff00 	.word	0x07ffff00

08000a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0552      	lsls	r2, r2, #21
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	6fffffe8 	.word	0x6fffffe8

08000aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	055b      	lsls	r3, r3, #21
 8000ab8:	401a      	ands	r2, r3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	055b      	lsls	r3, r3, #21
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d101      	bne.n	8000ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <LL_ADC_Enable+0x20>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	7fffffe8 	.word	0x7fffffe8

08000af4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LL_ADC_Disable+0x20>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	2202      	movs	r2, #2
 8000b06:	431a      	orrs	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b002      	add	sp, #8
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	7fffffe8 	.word	0x7fffffe8

08000b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2201      	movs	r2, #1
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <LL_ADC_IsEnabled+0x18>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <LL_ADC_IsEnabled+0x1a>
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2202      	movs	r2, #2
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d101      	bne.n	8000b52 <LL_ADC_IsDisableOngoing+0x18>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <LL_ADC_IsDisableOngoing+0x1a>
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <LL_ADC_REG_StartConversion+0x20>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	7fffffe8 	.word	0x7fffffe8

08000b80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d101      	bne.n	8000b98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b94:	2301      	movs	r3, #1
 8000b96:	e000      	b.n	8000b9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b002      	add	sp, #8
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	231f      	movs	r3, #31
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e1ad      	b.n	8000f26 <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10a      	bne.n	8000be8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fcfd 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2254      	movs	r2, #84	; 0x54
 8000be4:	2100      	movs	r1, #0
 8000be6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff5b 	bl	8000aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d114      	bne.n	8000c20 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff ff40 	bl	8000a80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c00:	4bcb      	ldr	r3, [pc, #812]	; (8000f30 <HAL_ADC_Init+0x38c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	49cb      	ldr	r1, [pc, #812]	; (8000f34 <HAL_ADC_Init+0x390>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fa7c 	bl	8000104 <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c12:	e002      	b.n	8000c1a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f9      	bne.n	8000c14 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff3f 	bl	8000aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	2210      	movs	r2, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3e:	2201      	movs	r2, #1
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c46:	231f      	movs	r3, #31
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff ff94 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	2210      	movs	r2, #16
 8000c62:	4013      	ands	r3, r2
 8000c64:	d000      	beq.n	8000c68 <HAL_ADC_Init+0xc4>
 8000c66:	e151      	b.n	8000f0c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d000      	beq.n	8000c70 <HAL_ADC_Init+0xcc>
 8000c6e:	e14d      	b.n	8000f0c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	4ab0      	ldr	r2, [pc, #704]	; (8000f38 <HAL_ADC_Init+0x394>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	2202      	movs	r2, #2
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff47 	bl	8000b18 <LL_ADC_IsEnabled>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d151      	bne.n	8000d32 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	2218      	movs	r2, #24
 8000c96:	4393      	bics	r3, r2
 8000c98:	0019      	movs	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	0f9b      	lsrs	r3, r3, #30
 8000cac:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cb2:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8000cb8:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8000cbe:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8000cc4:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	223c      	movs	r2, #60	; 0x3c
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d103      	bne.n	8000cde <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	4a95      	ldr	r2, [pc, #596]	; (8000f3c <HAL_ADC_Init+0x398>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	23c0      	movs	r3, #192	; 0xc0
 8000cfa:	061b      	lsls	r3, r3, #24
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d018      	beq.n	8000d32 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d012      	beq.n	8000d32 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d00c      	beq.n	8000d32 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d18:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <HAL_ADC_Init+0x39c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a89      	ldr	r2, [pc, #548]	; (8000f44 <HAL_ADC_Init+0x3a0>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	0019      	movs	r1, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	23f0      	movs	r3, #240	; 0xf0
 8000d28:	039b      	lsls	r3, r3, #14
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	4b84      	ldr	r3, [pc, #528]	; (8000f40 <HAL_ADC_Init+0x39c>)
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7e1b      	ldrb	r3, [r3, #24]
 8000d36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7e5b      	ldrb	r3, [r3, #25]
 8000d3c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7e9b      	ldrb	r3, [r3, #26]
 8000d44:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d46:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <HAL_ADC_Init+0x1b2>
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	015b      	lsls	r3, r3, #5
 8000d54:	e000      	b.n	8000d58 <HAL_ADC_Init+0x1b4>
 8000d56:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d58:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d5e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	da04      	bge.n	8000d72 <HAL_ADC_Init+0x1ce>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	e001      	b.n	8000d76 <HAL_ADC_Init+0x1d2>
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8000d76:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	212c      	movs	r1, #44	; 0x2c
 8000d7c:	5c5b      	ldrb	r3, [r3, r1]
 8000d7e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d80:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	5c9b      	ldrb	r3, [r3, r2]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d115      	bne.n	8000dbe <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7e9b      	ldrb	r3, [r3, #26]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0252      	lsls	r2, r2, #9
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	e00b      	b.n	8000dbe <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	2220      	movs	r2, #32
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db6:	2201      	movs	r2, #1
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00a      	beq.n	8000ddc <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dca:	23e0      	movs	r3, #224	; 0xe0
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	4a59      	ldr	r2, [pc, #356]	; (8000f48 <HAL_ADC_Init+0x3a4>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	0019      	movs	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	4a54      	ldr	r2, [pc, #336]	; (8000f4c <HAL_ADC_Init+0x3a8>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f7ff fda7 	bl	8000966 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e20:	494b      	ldr	r1, [pc, #300]	; (8000f50 <HAL_ADC_Init+0x3ac>)
 8000e22:	001a      	movs	r2, r3
 8000e24:	f7ff fd9f 	bl	8000966 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d109      	bne.n	8000e44 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4249      	negs	r1, r1
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
 8000e42:	e03c      	b.n	8000ebe <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	039b      	lsls	r3, r3, #14
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d136      	bne.n	8000ebe <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	e00c      	b.n	8000e70 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	40da      	lsrs	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	220f      	movs	r2, #15
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	d006      	beq.n	8000e78 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	2b07      	cmp	r3, #7
 8000e74:	d9ef      	bls.n	8000e56 <HAL_ADC_Init+0x2b2>
 8000e76:	e000      	b.n	8000e7a <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8000e78:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d109      	bne.n	8000e94 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4249      	negs	r1, r1
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
 8000e92:	e014      	b.n	8000ebe <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <HAL_ADC_Init+0x3b0>)
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	221c      	movs	r2, #28
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2210      	movs	r2, #16
 8000eac:	4252      	negs	r2, r2
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a24      	ldr	r2, [pc, #144]	; (8000f58 <HAL_ADC_Init+0x3b4>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	2203      	movs	r2, #3
 8000eda:	4393      	bics	r3, r2
 8000edc:	2201      	movs	r2, #1
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ee4:	e01c      	b.n	8000f20 <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	2212      	movs	r2, #18
 8000eec:	4393      	bics	r3, r2
 8000eee:	2210      	movs	r2, #16
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efa:	2201      	movs	r2, #1
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000f02:	231f      	movs	r3, #31
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f0a:	e009      	b.n	8000f20 <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	2210      	movs	r2, #16
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f18:	231f      	movs	r3, #31
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f20:	231f      	movs	r3, #31
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	781b      	ldrb	r3, [r3, #0]
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b008      	add	sp, #32
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000000 	.word	0x20000000
 8000f34:	00030d40 	.word	0x00030d40
 8000f38:	fffffefd 	.word	0xfffffefd
 8000f3c:	1ffffc02 	.word	0x1ffffc02
 8000f40:	40012708 	.word	0x40012708
 8000f44:	ffc3ffff 	.word	0xffc3ffff
 8000f48:	fffe0219 	.word	0xfffe0219
 8000f4c:	dffffc02 	.word	0xdffffc02
 8000f50:	07ffff04 	.word	0x07ffff04
 8000f54:	3fffffff 	.word	0x3fffffff
 8000f58:	833fffe7 	.word	0x833fffe7

08000f5c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff fe09 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d135      	bne.n	8000fde <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2254      	movs	r2, #84	; 0x54
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_ADC_Start+0x24>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e035      	b.n	8000fec <HAL_ADC_Start+0x90>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2254      	movs	r2, #84	; 0x54
 8000f84:	2101      	movs	r1, #1
 8000f86:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f88:	250f      	movs	r5, #15
 8000f8a:	197c      	adds	r4, r7, r5
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 faa6 	bl	80014e0 <ADC_Enable>
 8000f94:	0003      	movs	r3, r0
 8000f96:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f98:	197b      	adds	r3, r7, r5
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d119      	bne.n	8000fd4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <HAL_ADC_Start+0x98>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	0052      	lsls	r2, r2, #1
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	221c      	movs	r2, #28
 8000fbe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2254      	movs	r2, #84	; 0x54
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fdc5 	bl	8000b5c <LL_ADC_REG_StartConversion>
 8000fd2:	e008      	b.n	8000fe6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2254      	movs	r2, #84	; 0x54
 8000fd8:	2100      	movs	r1, #0
 8000fda:	5499      	strb	r1, [r3, r2]
 8000fdc:	e003      	b.n	8000fe6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	781b      	ldrb	r3, [r3, #0]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff4:	fffff0fe 	.word	0xfffff0fe

08000ff8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b08      	cmp	r3, #8
 8001008:	d102      	bne.n	8001010 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800100a:	2308      	movs	r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e00f      	b.n	8001030 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2201      	movs	r2, #1
 8001018:	4013      	ands	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	2220      	movs	r2, #32
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e06c      	b.n	8001106 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800102c:	2304      	movs	r3, #4
 800102e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001030:	f7ff fc36 	bl	80008a0 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001038:	e019      	b.n	800106e <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	d016      	beq.n	800106e <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001040:	f7ff fc2e 	bl	80008a0 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d302      	bcc.n	8001056 <HAL_ADC_PollForConversion+0x5e>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10b      	bne.n	800106e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	2204      	movs	r2, #4
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2254      	movs	r2, #84	; 0x54
 8001066:	2100      	movs	r1, #0
 8001068:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e04b      	b.n	8001106 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4013      	ands	r3, r2
 8001078:	d0df      	beq.n	800103a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff fc87 	bl	80009a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d02e      	beq.n	80010f4 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7e9b      	ldrb	r3, [r3, #26]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d12a      	bne.n	80010f4 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2208      	movs	r2, #8
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d123      	bne.n	80010f4 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff fd65 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 80010b6:	1e03      	subs	r3, r0, #0
 80010b8:	d110      	bne.n	80010dc <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	210c      	movs	r1, #12
 80010c6:	438a      	bics	r2, r1
 80010c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_ADC_PollForConversion+0x118>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	2201      	movs	r2, #1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	659a      	str	r2, [r3, #88]	; 0x58
 80010da:	e00b      	b.n	80010f4 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	2220      	movs	r2, #32
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ec:	2201      	movs	r2, #1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7e1b      	ldrb	r3, [r3, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	220c      	movs	r2, #12
 8001102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	fffffefe 	.word	0xfffffefe

08001114 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001136:	2317      	movs	r3, #23
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2254      	movs	r2, #84	; 0x54
 8001146:	5c9b      	ldrb	r3, [r3, r2]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x24>
 800114c:	2302      	movs	r3, #2
 800114e:	e1c2      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x3aa>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2254      	movs	r2, #84	; 0x54
 8001154:	2101      	movs	r1, #1
 8001156:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fd0f 	bl	8000b80 <LL_ADC_REG_IsConversionOngoing>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d000      	beq.n	8001168 <HAL_ADC_ConfigChannel+0x3c>
 8001166:	e1a5      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d100      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x46>
 8001170:	e144      	b.n	80013fc <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	061b      	lsls	r3, r3, #24
 800117a:	429a      	cmp	r2, r3
 800117c:	d004      	beq.n	8001188 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001182:	4ac2      	ldr	r2, [pc, #776]	; (800148c <HAL_ADC_ConfigChannel+0x360>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d108      	bne.n	800119a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f7ff fc35 	bl	8000a02 <LL_ADC_REG_SetSequencerChAdd>
 8001198:	e0c9      	b.n	800132e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	211f      	movs	r1, #31
 80011a4:	400b      	ands	r3, r1
 80011a6:	210f      	movs	r1, #15
 80011a8:	4099      	lsls	r1, r3
 80011aa:	000b      	movs	r3, r1
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4013      	ands	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	035b      	lsls	r3, r3, #13
 80011b8:	0b5b      	lsrs	r3, r3, #13
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x9c>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0e9b      	lsrs	r3, r3, #26
 80011c2:	221f      	movs	r2, #31
 80011c4:	4013      	ands	r3, r2
 80011c6:	e098      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	d000      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0xa8>
 80011d2:	e091      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1cc>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2202      	movs	r2, #2
 80011da:	4013      	ands	r3, r2
 80011dc:	d000      	beq.n	80011e0 <HAL_ADC_ConfigChannel+0xb4>
 80011de:	e089      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x1c8>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2204      	movs	r2, #4
 80011e6:	4013      	ands	r3, r2
 80011e8:	d000      	beq.n	80011ec <HAL_ADC_ConfigChannel+0xc0>
 80011ea:	e081      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x1c4>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2208      	movs	r2, #8
 80011f2:	4013      	ands	r3, r2
 80011f4:	d000      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0xcc>
 80011f6:	e079      	b.n	80012ec <HAL_ADC_ConfigChannel+0x1c0>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2210      	movs	r2, #16
 80011fe:	4013      	ands	r3, r2
 8001200:	d000      	beq.n	8001204 <HAL_ADC_ConfigChannel+0xd8>
 8001202:	e071      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x1bc>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2220      	movs	r2, #32
 800120a:	4013      	ands	r3, r2
 800120c:	d000      	beq.n	8001210 <HAL_ADC_ConfigChannel+0xe4>
 800120e:	e069      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x1b8>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2240      	movs	r2, #64	; 0x40
 8001216:	4013      	ands	r3, r2
 8001218:	d000      	beq.n	800121c <HAL_ADC_ConfigChannel+0xf0>
 800121a:	e061      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1b4>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	4013      	ands	r3, r2
 8001224:	d000      	beq.n	8001228 <HAL_ADC_ConfigChannel+0xfc>
 8001226:	e059      	b.n	80012dc <HAL_ADC_ConfigChannel+0x1b0>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d151      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x1ac>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d149      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x1a8>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4013      	ands	r3, r2
 800124a:	d141      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1a4>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d139      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x1a0>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	4013      	ands	r3, r2
 8001262:	d131      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x19c>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	019b      	lsls	r3, r3, #6
 800126c:	4013      	ands	r3, r2
 800126e:	d129      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x198>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4013      	ands	r3, r2
 800127a:	d121      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x194>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	4013      	ands	r3, r2
 8001286:	d119      	bne.n	80012bc <HAL_ADC_ConfigChannel+0x190>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	4013      	ands	r3, r2
 8001292:	d111      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x18c>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	029b      	lsls	r3, r3, #10
 800129c:	4013      	ands	r3, r2
 800129e:	d109      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x188>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	02db      	lsls	r3, r3, #11
 80012a8:	4013      	ands	r3, r2
 80012aa:	d001      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x184>
 80012ac:	2312      	movs	r3, #18
 80012ae:	e024      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012b0:	2300      	movs	r3, #0
 80012b2:	e022      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012b4:	2311      	movs	r3, #17
 80012b6:	e020      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012b8:	2310      	movs	r3, #16
 80012ba:	e01e      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012bc:	230f      	movs	r3, #15
 80012be:	e01c      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012c0:	230e      	movs	r3, #14
 80012c2:	e01a      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012c4:	230d      	movs	r3, #13
 80012c6:	e018      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012c8:	230c      	movs	r3, #12
 80012ca:	e016      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012cc:	230b      	movs	r3, #11
 80012ce:	e014      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012d0:	230a      	movs	r3, #10
 80012d2:	e012      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012d4:	2309      	movs	r3, #9
 80012d6:	e010      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012d8:	2308      	movs	r3, #8
 80012da:	e00e      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012dc:	2307      	movs	r3, #7
 80012de:	e00c      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012e0:	2306      	movs	r3, #6
 80012e2:	e00a      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012e4:	2305      	movs	r3, #5
 80012e6:	e008      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012e8:	2304      	movs	r3, #4
 80012ea:	e006      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012ec:	2303      	movs	r3, #3
 80012ee:	e004      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1ce>
 80012f8:	2300      	movs	r3, #0
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	6852      	ldr	r2, [r2, #4]
 80012fe:	201f      	movs	r0, #31
 8001300:	4002      	ands	r2, r0
 8001302:	4093      	lsls	r3, r2
 8001304:	000a      	movs	r2, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	429a      	cmp	r2, r3
 800131a:	d808      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	001a      	movs	r2, r3
 800132a:	f7ff fb4a 	bl	80009c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	6819      	ldr	r1, [r3, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	001a      	movs	r2, r3
 800133c:	f7ff fb84 	bl	8000a48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db00      	blt.n	800134a <HAL_ADC_ConfigChannel+0x21e>
 8001348:	e0be      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff fafd 	bl	800094c <LL_ADC_GetCommonPathInternalCh>
 8001352:	0003      	movs	r3, r0
 8001354:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_ADC_ConfigChannel+0x368>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d123      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001368:	d11e      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0412      	lsls	r2, r2, #16
 8001370:	4313      	orrs	r3, r2
 8001372:	4a47      	ldr	r2, [pc, #284]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 8001374:	0019      	movs	r1, r3
 8001376:	0010      	movs	r0, r2
 8001378:	f7ff fad4 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_ADC_ConfigChannel+0x36c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4946      	ldr	r1, [pc, #280]	; (800149c <HAL_ADC_ConfigChannel+0x370>)
 8001382:	0018      	movs	r0, r3
 8001384:	f7fe febe 	bl	8000104 <__udivsi3>
 8001388:	0003      	movs	r3, r0
 800138a:	001a      	movs	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	189b      	adds	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	3301      	adds	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001398:	e002      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3b01      	subs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f9      	bne.n	800139a <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013a6:	e08f      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a3c      	ldr	r2, [pc, #240]	; (80014a0 <HAL_ADC_ConfigChannel+0x374>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10e      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x2a4>
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	045b      	lsls	r3, r3, #17
 80013b8:	4013      	ands	r3, r2
 80013ba:	d109      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0452      	lsls	r2, r2, #17
 80013c2:	4313      	orrs	r3, r2
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 80013c6:	0019      	movs	r1, r3
 80013c8:	0010      	movs	r0, r2
 80013ca:	f7ff faab 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 80013ce:	e07b      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <HAL_ADC_ConfigChannel+0x378>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0x2b0>
 80013da:	e075      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	03db      	lsls	r3, r3, #15
 80013e2:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80013e4:	d000      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x2bc>
 80013e6:	e06f      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	03d2      	lsls	r2, r2, #15
 80013ee:	4313      	orrs	r3, r2
 80013f0:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 80013f2:	0019      	movs	r1, r3
 80013f4:	0010      	movs	r0, r2
 80013f6:	f7ff fa95 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 80013fa:	e065      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	061b      	lsls	r3, r3, #24
 8001404:	429a      	cmp	r2, r3
 8001406:	d004      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800140c:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_ADC_ConfigChannel+0x360>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d107      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0019      	movs	r1, r3
 800141c:	0010      	movs	r0, r2
 800141e:	f7ff fb01 	bl	8000a24 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da4e      	bge.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fa8d 	bl	800094c <LL_ADC_GetCommonPathInternalCh>
 8001432:	0003      	movs	r3, r0
 8001434:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <HAL_ADC_ConfigChannel+0x368>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d108      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_ADC_ConfigChannel+0x37c>)
 8001444:	4013      	ands	r3, r2
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 8001448:	0019      	movs	r1, r3
 800144a:	0010      	movs	r0, r2
 800144c:	f7ff fa6a 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 8001450:	e03a      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <HAL_ADC_ConfigChannel+0x374>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d108      	bne.n	800146e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <HAL_ADC_ConfigChannel+0x380>)
 8001460:	4013      	ands	r3, r2
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 8001464:	0019      	movs	r1, r3
 8001466:	0010      	movs	r0, r2
 8001468:	f7ff fa5c 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 800146c:	e02c      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_ADC_ConfigChannel+0x378>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d127      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_ADC_ConfigChannel+0x384>)
 800147c:	4013      	ands	r3, r2
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_ADC_ConfigChannel+0x364>)
 8001480:	0019      	movs	r1, r3
 8001482:	0010      	movs	r0, r2
 8001484:	f7ff fa4e 	bl	8000924 <LL_ADC_SetCommonPathInternalCh>
 8001488:	e01e      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x39c>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	80000004 	.word	0x80000004
 8001490:	40012708 	.word	0x40012708
 8001494:	b0001000 	.word	0xb0001000
 8001498:	20000000 	.word	0x20000000
 800149c:	00030d40 	.word	0x00030d40
 80014a0:	b8004000 	.word	0xb8004000
 80014a4:	b4002000 	.word	0xb4002000
 80014a8:	ff7fffff 	.word	0xff7fffff
 80014ac:	feffffff 	.word	0xfeffffff
 80014b0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	2220      	movs	r2, #32
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014c0:	2317      	movs	r3, #23
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2254      	movs	r2, #84	; 0x54
 80014cc:	2100      	movs	r1, #0
 80014ce:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80014d0:	2317      	movs	r3, #23
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	781b      	ldrb	r3, [r3, #0]
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b006      	add	sp, #24
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)

080014e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff fb11 	bl	8000b18 <LL_ADC_IsEnabled>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d162      	bne.n	80015c0 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a32      	ldr	r2, [pc, #200]	; (80015cc <ADC_Enable+0xec>)
 8001502:	4013      	ands	r3, r2
 8001504:	d00d      	beq.n	8001522 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	2210      	movs	r2, #16
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2201      	movs	r2, #1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e04f      	b.n	80015c2 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fad2 	bl	8000ad0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <ADC_Enable+0xf0>)
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff fa0c 	bl	800094c <LL_ADC_GetCommonPathInternalCh>
 8001534:	0002      	movs	r2, r0
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	4013      	ands	r3, r2
 800153c:	d00f      	beq.n	800155e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <ADC_Enable+0xf4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4925      	ldr	r1, [pc, #148]	; (80015d8 <ADC_Enable+0xf8>)
 8001544:	0018      	movs	r0, r3
 8001546:	f7fe fddd 	bl	8000104 <__udivsi3>
 800154a:	0003      	movs	r3, r0
 800154c:	3301      	adds	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001550:	e002      	b.n	8001558 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3b01      	subs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f9      	bne.n	8001552 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e5b      	ldrb	r3, [r3, #25]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d02c      	beq.n	80015c0 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001566:	f7ff f99b 	bl	80008a0 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800156e:	e020      	b.n	80015b2 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff facf 	bl	8000b18 <LL_ADC_IsEnabled>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d104      	bne.n	8001588 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff faa4 	bl	8000ad0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001588:	f7ff f98a 	bl	80008a0 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d90d      	bls.n	80015b2 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	2210      	movs	r2, #16
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2201      	movs	r2, #1
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e007      	b.n	80015c2 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d1d7      	bne.n	8001570 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	80000017 	.word	0x80000017
 80015d0:	40012708 	.word	0x40012708
 80015d4:	20000000 	.word	0x20000000
 80015d8:	00030d40 	.word	0x00030d40

080015dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff faa6 	bl	8000b3a <LL_ADC_IsDisableOngoing>
 80015ee:	0003      	movs	r3, r0
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff fa8e 	bl	8000b18 <LL_ADC_IsEnabled>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d040      	beq.n	8001682 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d13d      	bne.n	8001682 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2205      	movs	r2, #5
 800160e:	4013      	ands	r3, r2
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10d      	bne.n	8001630 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fa6b 	bl	8000af4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2203      	movs	r2, #3
 8001624:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001626:	f7ff f93b 	bl	80008a0 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800162e:	e022      	b.n	8001676 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	2210      	movs	r2, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2201      	movs	r2, #1
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e01b      	b.n	8001684 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164c:	f7ff f928 	bl	80008a0 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d90d      	bls.n	8001676 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	2210      	movs	r2, #16
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2201      	movs	r2, #1
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e006      	b.n	8001684 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2201      	movs	r2, #1
 800167e:	4013      	ands	r3, r2
 8001680:	d1e4      	bne.n	800164c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}

0800168c <LL_ADC_IsEnabled>:
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <LL_ADC_IsEnabled+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_IsEnabled+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}

080016ae <LL_ADC_IsCalibrationOnGoing>:
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0fdb      	lsrs	r3, r3, #31
 80016bc:	07da      	lsls	r2, r3, #31
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d101      	bne.n	80016ca <LL_ADC_IsCalibrationOnGoing+0x1c>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_ADC_IsCalibrationOnGoing+0x1e>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2254      	movs	r2, #84	; 0x54
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_ADCEx_Calibration_Start+0x1a>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e06c      	b.n	80017c8 <HAL_ADCEx_Calibration_Start+0xf4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2254      	movs	r2, #84	; 0x54
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fc      	adds	r4, r7, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff6d 	bl	80015dc <ADC_Disable>
 8001702:	0003      	movs	r3, r0
 8001704:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff ffbe 	bl	800168c <LL_ADC_IsEnabled>
 8001710:	1e03      	subs	r3, r0, #0
 8001712:	d14c      	bne.n	80017ae <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_ADCEx_Calibration_Start+0xfc>)
 800171a:	4013      	ands	r3, r2
 800171c:	2202      	movs	r2, #2
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2203      	movs	r2, #3
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2103      	movs	r1, #3
 800173c:	438a      	bics	r2, r1
 800173e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	0609      	lsls	r1, r1, #24
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001752:	e014      	b.n	800177e <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_ADCEx_Calibration_Start+0x100>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d90d      	bls.n	800177e <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	2212      	movs	r2, #18
 8001768:	4393      	bics	r3, r2
 800176a:	2210      	movs	r2, #16
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2254      	movs	r2, #84	; 0x54
 8001776:	2100      	movs	r1, #0
 8001778:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e024      	b.n	80017c8 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff ff93 	bl	80016ae <LL_ADC_IsCalibrationOnGoing>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d1e3      	bne.n	8001754 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68d9      	ldr	r1, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	2203      	movs	r2, #3
 80017a2:	4393      	bics	r3, r2
 80017a4:	2201      	movs	r2, #1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58
 80017ac:	e005      	b.n	80017ba <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	2210      	movs	r2, #16
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2254      	movs	r2, #84	; 0x54
 80017be:	2100      	movs	r1, #0
 80017c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80017c2:	2317      	movs	r3, #23
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b007      	add	sp, #28
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	fffffefd 	.word	0xfffffefd
 80017d4:	0002f1ff 	.word	0x0002f1ff

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	0002      	movs	r2, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b7f      	cmp	r3, #127	; 0x7f
 80017ec:	d828      	bhi.n	8001840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ee:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <__NVIC_SetPriority+0xd4>)
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	33c0      	adds	r3, #192	; 0xc0
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	589b      	ldr	r3, [r3, r2]
 80017fe:	1dfa      	adds	r2, r7, #7
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	0011      	movs	r1, r2
 8001804:	2203      	movs	r2, #3
 8001806:	400a      	ands	r2, r1
 8001808:	00d2      	lsls	r2, r2, #3
 800180a:	21ff      	movs	r1, #255	; 0xff
 800180c:	4091      	lsls	r1, r2
 800180e:	000a      	movs	r2, r1
 8001810:	43d2      	mvns	r2, r2
 8001812:	401a      	ands	r2, r3
 8001814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	401a      	ands	r2, r3
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	0018      	movs	r0, r3
 8001824:	2303      	movs	r3, #3
 8001826:	4003      	ands	r3, r0
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800182c:	481f      	ldr	r0, [pc, #124]	; (80018ac <__NVIC_SetPriority+0xd4>)
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b25b      	sxtb	r3, r3
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	430a      	orrs	r2, r1
 8001838:	33c0      	adds	r3, #192	; 0xc0
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800183e:	e031      	b.n	80018a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <__NVIC_SetPriority+0xd8>)
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	0019      	movs	r1, r3
 8001848:	230f      	movs	r3, #15
 800184a:	400b      	ands	r3, r1
 800184c:	3b08      	subs	r3, #8
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3306      	adds	r3, #6
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	3304      	adds	r3, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1dfa      	adds	r2, r7, #7
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	0011      	movs	r1, r2
 8001860:	2203      	movs	r2, #3
 8001862:	400a      	ands	r2, r1
 8001864:	00d2      	lsls	r2, r2, #3
 8001866:	21ff      	movs	r1, #255	; 0xff
 8001868:	4091      	lsls	r1, r2
 800186a:	000a      	movs	r2, r1
 800186c:	43d2      	mvns	r2, r2
 800186e:	401a      	ands	r2, r3
 8001870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	401a      	ands	r2, r3
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	0018      	movs	r0, r3
 8001880:	2303      	movs	r3, #3
 8001882:	4003      	ands	r3, r0
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <__NVIC_SetPriority+0xd8>)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	001c      	movs	r4, r3
 8001890:	230f      	movs	r3, #15
 8001892:	4023      	ands	r3, r4
 8001894:	3b08      	subs	r3, #8
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	430a      	orrs	r2, r1
 800189a:	3306      	adds	r3, #6
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	18c3      	adds	r3, r0, r3
 80018a0:	3304      	adds	r3, #4
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b003      	add	sp, #12
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <SysTick_Config+0x40>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e010      	b.n	80018ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <SysTick_Config+0x44>)
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	3a01      	subs	r2, #1
 80018d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	2301      	movs	r3, #1
 80018d4:	425b      	negs	r3, r3
 80018d6:	2103      	movs	r1, #3
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff ff7d 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SysTick_Config+0x44>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x44>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	00ffffff 	.word	0x00ffffff
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	210f      	movs	r1, #15
 8001908:	187b      	adds	r3, r7, r1
 800190a:	1c02      	adds	r2, r0, #0
 800190c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	187b      	adds	r3, r7, r1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b25b      	sxtb	r3, r3
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff5d 	bl	80017d8 <__NVIC_SetPriority>
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b004      	add	sp, #16
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ffbf 	bl	80018b4 <SysTick_Config>
 8001936:	0003      	movs	r3, r0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e14d      	b.n	8001bec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <HAL_GPIO_Init+0x28>
 8001966:	e13e      	b.n	8001be6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d00b      	beq.n	8001988 <HAL_GPIO_Init+0x48>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197c:	2b11      	cmp	r3, #17
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b12      	cmp	r3, #18
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	409a      	lsls	r2, r3
 80019aa:	0013      	movs	r3, r2
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	2201      	movs	r2, #1
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	43da      	mvns	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0xea>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	58d3      	ldr	r3, [r2, r3]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	43da      	mvns	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2107      	movs	r1, #7
 8001a56:	400b      	ands	r3, r1
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	6939      	ldr	r1, [r7, #16]
 8001a70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	401a      	ands	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	055b      	lsls	r3, r3, #21
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <HAL_GPIO_Init+0x174>
 8001ab2:	e098      	b.n	8001be6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ab4:	4a53      	ldr	r2, [pc, #332]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3318      	adds	r3, #24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	589b      	ldr	r3, [r3, r2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	220f      	movs	r2, #15
 8001acc:	409a      	lsls	r2, r3
 8001ace:	0013      	movs	r3, r2
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	23a0      	movs	r3, #160	; 0xa0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x1d6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_GPIO_Init+0x2c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x1d2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_GPIO_Init+0x2cc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1ce>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1ca>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <HAL_GPIO_Init+0x2d4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1c6>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b16:	2300      	movs	r3, #0
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	00d2      	lsls	r2, r2, #3
 8001b20:	4093      	lsls	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b28:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3318      	adds	r3, #24
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	58d3      	ldr	r3, [r2, r3]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43da      	mvns	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	4013      	ands	r3, r2
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b5c:	4929      	ldr	r1, [pc, #164]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b66:	2384      	movs	r3, #132	; 0x84
 8001b68:	58d3      	ldr	r3, [r2, r3]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b8a:	491e      	ldr	r1, [pc, #120]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b8c:	2284      	movs	r2, #132	; 0x84
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	035b      	lsls	r3, r3, #13
 8001baa:	4013      	ands	r3, r2
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	039b      	lsls	r3, r3, #14
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	1e13      	subs	r3, r2, #0
 8001bf6:	d000      	beq.n	8001bfa <HAL_GPIO_Init+0x2ba>
 8001bf8:	e6aa      	b.n	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b006      	add	sp, #24
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40021800 	.word	0x40021800
 8001c08:	50000400 	.word	0x50000400
 8001c0c:	50000800 	.word	0x50000800
 8001c10:	50000c00 	.word	0x50000c00
 8001c14:	50001000 	.word	0x50001000

08001c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d11f      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	0013      	movs	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4912      	ldr	r1, [pc, #72]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7fe fa5a 	bl	8000104 <__udivsi3>
 8001c50:	0003      	movs	r3, r0
 8001c52:	3301      	adds	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c56:	e008      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e001      	b.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e009      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	401a      	ands	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d0ed      	beq.n	8001c58 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b004      	add	sp, #16
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	fffff9ff 	.word	0xfffff9ff
 8001c90:	20000000 	.word	0x20000000
 8001c94:	000f4240 	.word	0x000f4240

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f000 fb56 	bl	8002358 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d100      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x20>
 8001cb6:	e07d      	b.n	8001db4 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	4bc3      	ldr	r3, [pc, #780]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2238      	movs	r2, #56	; 0x38
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc2:	4bc1      	ldr	r3, [pc, #772]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x40>
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d002      	beq.n	8001cde <HAL_RCC_OscConfig+0x46>
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4bba      	ldr	r3, [pc, #744]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	029b      	lsls	r3, r3, #10
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_OscConfig+0x11a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d15f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f000 fb30 	bl	8002358 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	025b      	lsls	r3, r3, #9
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x7c>
 8001d04:	4bb0      	ldr	r3, [pc, #704]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4baf      	ldr	r3, [pc, #700]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	0249      	lsls	r1, r1, #9
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e020      	b.n	8001d56 <HAL_RCC_OscConfig+0xbe>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	23a0      	movs	r3, #160	; 0xa0
 8001d1a:	02db      	lsls	r3, r3, #11
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10e      	bne.n	8001d3e <HAL_RCC_OscConfig+0xa6>
 8001d20:	4ba9      	ldr	r3, [pc, #676]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4ba8      	ldr	r3, [pc, #672]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	02c9      	lsls	r1, r1, #11
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4ba6      	ldr	r3, [pc, #664]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4ba5      	ldr	r3, [pc, #660]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0249      	lsls	r1, r1, #9
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0xbe>
 8001d3e:	4ba2      	ldr	r3, [pc, #648]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4ba1      	ldr	r3, [pc, #644]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d44:	49a1      	ldr	r1, [pc, #644]	; (8001fcc <HAL_RCC_OscConfig+0x334>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4b9f      	ldr	r3, [pc, #636]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b9e      	ldr	r3, [pc, #632]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d50:	499f      	ldr	r1, [pc, #636]	; (8001fd0 <HAL_RCC_OscConfig+0x338>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d014      	beq.n	8001d88 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fd9f 	bl	80008a0 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7fe fd9a 	bl	80008a0 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e2ee      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7a:	4b93      	ldr	r3, [pc, #588]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	4013      	ands	r3, r2
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xd0>
 8001d86:	e015      	b.n	8001db4 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe fd8a 	bl	80008a0 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d92:	f7fe fd85 	bl	80008a0 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	; 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e2d9      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da4:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0xfa>
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x128>
 8001dbe:	e099      	b.n	8001ef4 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc0:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2238      	movs	r2, #56	; 0x38
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0x148>
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d002      	beq.n	8001de6 <HAL_RCC_OscConfig+0x14e>
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d135      	bne.n	8001e52 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de6:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4013      	ands	r3, r2
 8001df0:	d005      	beq.n	8001dfe <HAL_RCC_OscConfig+0x166>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e2ac      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a74      	ldr	r2, [pc, #464]	; (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e1a:	4b6b      	ldr	r3, [pc, #428]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6e      	ldr	r2, [pc, #440]	; (8001fd8 <HAL_RCC_OscConfig+0x340>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e2e:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0adb      	lsrs	r3, r3, #11
 8001e34:	2207      	movs	r2, #7
 8001e36:	4013      	ands	r3, r2
 8001e38:	4a68      	ldr	r2, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x344>)
 8001e3a:	40da      	lsrs	r2, r3
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x348>)
 8001e3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x34c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7fe fccf 	bl	80007e8 <HAL_InitTick>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d051      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e282      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d030      	beq.n	8001ebc <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e5a:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	; (8001fd8 <HAL_RCC_OscConfig+0x340>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	0049      	lsls	r1, r1, #1
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fd10 	bl	80008a0 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7fe fd0b 	bl	80008a0 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e25f      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e98:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a4a      	ldr	r2, [pc, #296]	; (8001fd4 <HAL_RCC_OscConfig+0x33c>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	021a      	lsls	r2, r3, #8
 8001eb4:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e01b      	b.n	8001ef4 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ebc:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001ec2:	4949      	ldr	r1, [pc, #292]	; (8001fe8 <HAL_RCC_OscConfig+0x350>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fcea 	bl	80008a0 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7fe fce5 	bl	80008a0 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e239      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x23a>
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	4013      	ands	r3, r2
 8001efc:	d047      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2238      	movs	r2, #56	; 0x38
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b18      	cmp	r3, #24
 8001f08:	d10a      	bne.n	8001f20 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	d03c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2f6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d138      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e21b      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d019      	beq.n	8001f5c <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f2e:	2101      	movs	r1, #1
 8001f30:	430a      	orrs	r2, r1
 8001f32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe fcb4 	bl	80008a0 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fcaf 	bl	80008a0 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e203      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f54:	2202      	movs	r2, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d0f1      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2a6>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	438a      	bics	r2, r1
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe fc9a 	bl	80008a0 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7fe fc95 	bl	80008a0 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1e9      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f1      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2204      	movs	r2, #4
 8001f94:	4013      	ands	r3, r2
 8001f96:	d100      	bne.n	8001f9a <HAL_RCC_OscConfig+0x302>
 8001f98:	e0c6      	b.n	8002128 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9a:	231f      	movs	r3, #31
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2238      	movs	r2, #56	; 0x38
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d11e      	bne.n	8001fec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCC_OscConfig+0x322>
 8001fb8:	e0b6      	b.n	8002128 <HAL_RCC_OscConfig+0x490>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d000      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x32c>
 8001fc2:	e0b1      	b.n	8002128 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e1c7      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	fffeffff 	.word	0xfffeffff
 8001fd0:	fffbffff 	.word	0xfffbffff
 8001fd4:	ffff80ff 	.word	0xffff80ff
 8001fd8:	ffffc7ff 	.word	0xffffc7ff
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000004 	.word	0x20000004
 8001fe8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fec:	4bb8      	ldr	r3, [pc, #736]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8001fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x364>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x366>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d011      	beq.n	8002026 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4bb3      	ldr	r3, [pc, #716]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002006:	4bb2      	ldr	r3, [pc, #712]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0549      	lsls	r1, r1, #21
 800200c:	430a      	orrs	r2, r1
 800200e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002010:	4baf      	ldr	r3, [pc, #700]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	055b      	lsls	r3, r3, #21
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800201e:	231f      	movs	r3, #31
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4bab      	ldr	r3, [pc, #684]	; (80022d4 <HAL_RCC_OscConfig+0x63c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d11a      	bne.n	8002068 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002032:	4ba8      	ldr	r3, [pc, #672]	; (80022d4 <HAL_RCC_OscConfig+0x63c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4ba7      	ldr	r3, [pc, #668]	; (80022d4 <HAL_RCC_OscConfig+0x63c>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0049      	lsls	r1, r1, #1
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002040:	f7fe fc2e 	bl	80008a0 <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7fe fc29 	bl	80008a0 <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e17d      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205c:	4b9d      	ldr	r3, [pc, #628]	; (80022d4 <HAL_RCC_OscConfig+0x63c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4013      	ands	r3, r2
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x3e6>
 8002070:	4b97      	ldr	r3, [pc, #604]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002074:	4b96      	ldr	r3, [pc, #600]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002076:	2101      	movs	r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x420>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x408>
 8002086:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208a:	4b91      	ldr	r3, [pc, #580]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800208c:	2104      	movs	r1, #4
 800208e:	430a      	orrs	r2, r1
 8002090:	65da      	str	r2, [r3, #92]	; 0x5c
 8002092:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002096:	4b8e      	ldr	r3, [pc, #568]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002098:	2101      	movs	r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	65da      	str	r2, [r3, #92]	; 0x5c
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x420>
 80020a0:	4b8b      	ldr	r3, [pc, #556]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80020a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020a4:	4b8a      	ldr	r3, [pc, #552]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	438a      	bics	r2, r1
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80020ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b0:	4b87      	ldr	r3, [pc, #540]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80020b2:	2104      	movs	r1, #4
 80020b4:	438a      	bics	r2, r1
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d014      	beq.n	80020ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe fbee 	bl	80008a0 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	e009      	b.n	80020de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fbe9 	bl	80008a0 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4a80      	ldr	r2, [pc, #512]	; (80022d8 <HAL_RCC_OscConfig+0x640>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e13c      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x432>
 80020e8:	e013      	b.n	8002112 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe fbd9 	bl	80008a0 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f2:	e009      	b.n	8002108 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7fe fbd4 	bl	80008a0 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	4a76      	ldr	r2, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x640>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e127      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002108:	4b71      	ldr	r3, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002112:	231f      	movs	r3, #31
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800211e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002122:	496e      	ldr	r1, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x644>)
 8002124:	400a      	ands	r2, r1
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2220      	movs	r2, #32
 800212e:	4013      	ands	r3, r2
 8002130:	d039      	beq.n	80021a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01b      	beq.n	8002172 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b64      	ldr	r3, [pc, #400]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	03c9      	lsls	r1, r1, #15
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe fbaa 	bl	80008a0 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002152:	f7fe fba5 	bl	80008a0 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0f9      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002164:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	4013      	ands	r3, r2
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x4ba>
 8002170:	e019      	b.n	80021a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002172:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002178:	4959      	ldr	r1, [pc, #356]	; (80022e0 <HAL_RCC_OscConfig+0x648>)
 800217a:	400a      	ands	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fb8f 	bl	80008a0 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002188:	f7fe fb8a 	bl	80008a0 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0de      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800219a:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d100      	bne.n	80021b0 <HAL_RCC_OscConfig+0x518>
 80021ae:	e0d2      	b.n	8002356 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2238      	movs	r2, #56	; 0x38
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d100      	bne.n	80021be <HAL_RCC_OscConfig+0x526>
 80021bc:	e081      	b.n	80022c2 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d156      	bne.n	8002274 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80021cc:	4945      	ldr	r1, [pc, #276]	; (80022e4 <HAL_RCC_OscConfig+0x64c>)
 80021ce:	400a      	ands	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe fb65 	bl	80008a0 <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe fb60 	bl	80008a0 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0b4      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	049b      	lsls	r3, r3, #18
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fa:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a3a      	ldr	r2, [pc, #232]	; (80022e8 <HAL_RCC_OscConfig+0x650>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	431a      	orrs	r2, r3
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800222a:	430a      	orrs	r2, r1
 800222c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0449      	lsls	r1, r1, #17
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	0549      	lsls	r1, r1, #21
 8002246:	430a      	orrs	r2, r1
 8002248:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe fb29 	bl	80008a0 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fb24 	bl	80008a0 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e078      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	049b      	lsls	r3, r3, #18
 800226e:	4013      	ands	r3, r2
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x5bc>
 8002272:	e070      	b.n	8002356 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800227a:	491a      	ldr	r1, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x64c>)
 800227c:	400a      	ands	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002286:	2103      	movs	r1, #3
 8002288:	438a      	bics	r2, r1
 800228a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 8002292:	4916      	ldr	r1, [pc, #88]	; (80022ec <HAL_RCC_OscConfig+0x654>)
 8002294:	400a      	ands	r2, r1
 8002296:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe fb02 	bl	80008a0 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7fe fafd 	bl	80008a0 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e051      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_OscConfig+0x638>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	049b      	lsls	r3, r3, #18
 80022bc:	4013      	ands	r3, r2
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x60a>
 80022c0:	e049      	b.n	8002356 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d112      	bne.n	80022f0 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e044      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
 80022d8:	00001388 	.word	0x00001388
 80022dc:	efffffff 	.word	0xefffffff
 80022e0:	ffbfffff 	.word	0xffbfffff
 80022e4:	feffffff 	.word	0xfeffffff
 80022e8:	11c1808c 	.word	0x11c1808c
 80022ec:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x6c8>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2203      	movs	r2, #3
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	429a      	cmp	r2, r3
 8002302:	d126      	bne.n	8002352 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2270      	movs	r2, #112	; 0x70
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d11f      	bne.n	8002352 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	23fe      	movs	r3, #254	; 0xfe
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002320:	429a      	cmp	r2, r3
 8002322:	d116      	bne.n	8002352 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	23f8      	movs	r3, #248	; 0xf8
 8002328:	039b      	lsls	r3, r3, #14
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d10e      	bne.n	8002352 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	23e0      	movs	r3, #224	; 0xe0
 8002338:	051b      	lsls	r3, r3, #20
 800233a:	401a      	ands	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	0f5b      	lsrs	r3, r3, #29
 8002348:	075a      	lsls	r2, r3, #29
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b008      	add	sp, #32
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0e9      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2207      	movs	r2, #7
 800237e:	4013      	ands	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d91e      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2207      	movs	r2, #7
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002398:	f7fe fa82 	bl	80008a0 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe fa7d 	bl	80008a0 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a6a      	ldr	r2, [pc, #424]	; (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0ca      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2207      	movs	r2, #7
 80023bc:	4013      	ands	r3, r2
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d015      	beq.n	80023fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	4013      	ands	r3, r2
 80023d6:	d006      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023d8:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	4b5f      	ldr	r3, [pc, #380]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	21e0      	movs	r1, #224	; 0xe0
 80023e0:	01c9      	lsls	r1, r1, #7
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e6:	4b5d      	ldr	r3, [pc, #372]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4a5d      	ldr	r2, [pc, #372]	; (8002560 <HAL_RCC_ClockConfig+0x1fc>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	d057      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	4013      	ands	r3, r2
 8002416:	d12b      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e097      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002424:	4b4d      	ldr	r3, [pc, #308]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	049b      	lsls	r3, r3, #18
 800242c:	4013      	ands	r3, r2
 800242e:	d11f      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e08b      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243c:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4013      	ands	r3, r2
 8002446:	d113      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e07f      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d106      	bne.n	8002462 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d108      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e074      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002462:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2202      	movs	r2, #2
 8002468:	4013      	ands	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e06d      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2207      	movs	r2, #7
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fa0c 	bl	80008a0 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	e009      	b.n	80024a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fe fa07 	bl	80008a0 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e054      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2238      	movs	r2, #56	; 0x38
 80024a8:	401a      	ands	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1ec      	bne.n	800248e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d21e      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2207      	movs	r2, #7
 80024c8:	4393      	bics	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d4:	f7fe f9e4 	bl	80008a0 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024dc:	e009      	b.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe f9df 	bl	80008a0 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_RCC_ClockConfig+0x1f4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e02c      	b.n	800254c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2207      	movs	r2, #7
 80024f8:	4013      	ands	r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2204      	movs	r2, #4
 8002506:	4013      	ands	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_RCC_ClockConfig+0x200>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800251e:	f000 f829 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002522:	0001      	movs	r1, r0
 8002524:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_ClockConfig+0x1f8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	220f      	movs	r2, #15
 800252c:	401a      	ands	r2, r3
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x204>)
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	58d3      	ldr	r3, [r2, r3]
 8002534:	221f      	movs	r2, #31
 8002536:	4013      	ands	r3, r2
 8002538:	000a      	movs	r2, r1
 800253a:	40da      	lsrs	r2, r3
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x208>)
 800253e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_ClockConfig+0x20c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0018      	movs	r0, r3
 8002546:	f7fe f94f 	bl	80007e8 <HAL_InitTick>
 800254a:	0003      	movs	r3, r0
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40022000 	.word	0x40022000
 8002558:	00001388 	.word	0x00001388
 800255c:	40021000 	.word	0x40021000
 8002560:	fffff0ff 	.word	0xfffff0ff
 8002564:	ffff8fff 	.word	0xffff8fff
 8002568:	08003b28 	.word	0x08003b28
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b3c      	ldr	r3, [pc, #240]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2238      	movs	r2, #56	; 0x38
 8002580:	4013      	ands	r3, r2
 8002582:	d10f      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002584:	4b39      	ldr	r3, [pc, #228]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0adb      	lsrs	r3, r3, #11
 800258a:	2207      	movs	r2, #7
 800258c:	4013      	ands	r3, r2
 800258e:	2201      	movs	r2, #1
 8002590:	409a      	lsls	r2, r3
 8002592:	0013      	movs	r3, r2
 8002594:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	4835      	ldr	r0, [pc, #212]	; (8002670 <HAL_RCC_GetSysClockFreq+0xfc>)
 800259a:	f7fd fdb3 	bl	8000104 <__udivsi3>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	e05d      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2238      	movs	r2, #56	; 0x38
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b0:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCC_GetSysClockFreq+0x100>)
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e054      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2238      	movs	r2, #56	; 0x38
 80025bc:	4013      	ands	r3, r2
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d138      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2203      	movs	r2, #3
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	4824      	ldr	r0, [pc, #144]	; (8002674 <HAL_RCC_GetSysClockFreq+0x100>)
 80025e4:	f7fd fd8e 	bl	8000104 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	0019      	movs	r1, r3
 80025ec:	4b1f      	ldr	r3, [pc, #124]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	227f      	movs	r2, #127	; 0x7f
 80025f4:	4013      	ands	r3, r2
 80025f6:	434b      	muls	r3, r1
 80025f8:	617b      	str	r3, [r7, #20]
        break;
 80025fa:	e00d      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	481c      	ldr	r0, [pc, #112]	; (8002670 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002600:	f7fd fd80 	bl	8000104 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	0019      	movs	r1, r3
 8002608:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	227f      	movs	r2, #127	; 0x7f
 8002610:	4013      	ands	r3, r2
 8002612:	434b      	muls	r3, r1
 8002614:	617b      	str	r3, [r7, #20]
        break;
 8002616:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0f5b      	lsrs	r3, r3, #29
 800261e:	2207      	movs	r2, #7
 8002620:	4013      	ands	r3, r2
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	6978      	ldr	r0, [r7, #20]
 800262a:	f7fd fd6b 	bl	8000104 <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e015      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2238      	movs	r2, #56	; 0x38
 800263a:	4013      	ands	r3, r2
 800263c:	2b20      	cmp	r3, #32
 800263e:	d103      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2238      	movs	r2, #56	; 0x38
 800264e:	4013      	ands	r3, r2
 8002650:	2b18      	cmp	r3, #24
 8002652:	d103      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002654:	23fa      	movs	r3, #250	; 0xfa
 8002656:	01db      	lsls	r3, r3, #7
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e001      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002660:	693b      	ldr	r3, [r7, #16]
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b006      	add	sp, #24
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	40021000 	.word	0x40021000
 8002670:	00f42400 	.word	0x00f42400
 8002674:	007a1200 	.word	0x007a1200

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002680:	2313      	movs	r3, #19
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002688:	2312      	movs	r3, #18
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	029b      	lsls	r3, r3, #10
 8002698:	4013      	ands	r3, r2
 800269a:	d100      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800269c:	e0af      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2311      	movs	r3, #17
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	055b      	lsls	r3, r3, #21
 80026ae:	4013      	ands	r3, r2
 80026b0:	d111      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0549      	lsls	r1, r1, #21
 80026bc:	430a      	orrs	r2, r1
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80026c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2311      	movs	r3, #17
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0049      	lsls	r1, r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e4:	f7fe f8dc 	bl	80008a0 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ec:	e00b      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe f8d7 	bl	80008a0 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d904      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80026fc:	2313      	movs	r3, #19
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2203      	movs	r2, #3
 8002702:	701a      	strb	r2, [r3, #0]
        break;
 8002704:	e005      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4013      	ands	r3, r2
 8002710:	d0ed      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002712:	2313      	movs	r3, #19
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d15f      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800271e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002720:	23c0      	movs	r3, #192	; 0xc0
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4013      	ands	r3, r2
 8002726:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	d014      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800273e:	4013      	ands	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0249      	lsls	r1, r1, #9
 800274c:	430a      	orrs	r2, r1
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002756:	491f      	ldr	r1, [pc, #124]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002758:	400a      	ands	r2, r1
 800275a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	d016      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe f899 	bl	80008a0 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe f894 	bl	80008a0 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d904      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002784:	2313      	movs	r3, #19
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2203      	movs	r2, #3
 800278a:	701a      	strb	r2, [r3, #0]
            break;
 800278c:	e004      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d0ed      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002798:	2313      	movs	r3, #19
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027b6:	e017      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027b8:	2312      	movs	r3, #18
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2213      	movs	r2, #19
 80027be:	18ba      	adds	r2, r7, r2
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e010      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
 80027d0:	fffffcff 	.word	0xfffffcff
 80027d4:	fffeffff 	.word	0xfffeffff
 80027d8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	2312      	movs	r3, #18
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	2213      	movs	r2, #19
 80027e2:	18ba      	adds	r2, r7, r2
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e8:	2311      	movs	r3, #17
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4bb6      	ldr	r3, [pc, #728]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80027f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f6:	4bb5      	ldr	r3, [pc, #724]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80027f8:	49b5      	ldr	r1, [pc, #724]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002808:	4bb0      	ldr	r3, [pc, #704]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	2203      	movs	r2, #3
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4bad      	ldr	r3, [pc, #692]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002818:	430a      	orrs	r2, r1
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2202      	movs	r2, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002826:	4ba9      	ldr	r3, [pc, #676]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	220c      	movs	r2, #12
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4ba5      	ldr	r3, [pc, #660]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002836:	430a      	orrs	r2, r1
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2204      	movs	r2, #4
 8002840:	4013      	ands	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002844:	4ba1      	ldr	r3, [pc, #644]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	2230      	movs	r2, #48	; 0x30
 800284a:	4393      	bics	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002854:	430a      	orrs	r2, r1
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	4013      	ands	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002862:	4b9a      	ldr	r3, [pc, #616]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	4a9b      	ldr	r2, [pc, #620]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	4b96      	ldr	r3, [pc, #600]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002872:	430a      	orrs	r2, r1
 8002874:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	4013      	ands	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002882:	4b92      	ldr	r3, [pc, #584]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	4a94      	ldr	r2, [pc, #592]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	4b8e      	ldr	r3, [pc, #568]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002892:	430a      	orrs	r2, r1
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a2:	4b8a      	ldr	r3, [pc, #552]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	4a8d      	ldr	r2, [pc, #564]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b0:	4b86      	ldr	r3, [pc, #536]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4013      	ands	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	4b7e      	ldr	r3, [pc, #504]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028d2:	430a      	orrs	r2, r1
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2220      	movs	r2, #32
 80028dc:	4013      	ands	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e0:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	4a7f      	ldr	r2, [pc, #508]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	4b77      	ldr	r3, [pc, #476]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	4013      	ands	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	4a79      	ldr	r2, [pc, #484]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69da      	ldr	r2, [r3, #28]
 800290c:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800290e:	430a      	orrs	r2, r1
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	01db      	lsls	r3, r3, #7
 800291a:	4013      	ands	r3, r2
 800291c:	d015      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800291e:	4b6b      	ldr	r3, [pc, #428]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	0899      	lsrs	r1, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292a:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800292c:	430a      	orrs	r2, r1
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	05db      	lsls	r3, r3, #23
 8002938:	429a      	cmp	r2, r3
 800293a:	d106      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800293c:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b62      	ldr	r3, [pc, #392]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	0249      	lsls	r1, r1, #9
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	031b      	lsls	r3, r3, #12
 8002952:	4013      	ands	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002956:	4b5d      	ldr	r3, [pc, #372]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	4393      	bics	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002966:	430a      	orrs	r2, r1
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	039b      	lsls	r3, r3, #14
 8002972:	4013      	ands	r3, r2
 8002974:	d016      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002976:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800297c:	4013      	ands	r3, r2
 800297e:	0019      	movs	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002984:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002986:	430a      	orrs	r2, r1
 8002988:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	03db      	lsls	r3, r3, #15
 8002992:	429a      	cmp	r2, r3
 8002994:	d106      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0449      	lsls	r1, r1, #17
 80029a0:	430a      	orrs	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	03db      	lsls	r3, r3, #15
 80029ac:	4013      	ands	r3, r2
 80029ae:	d016      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029b0:	4b46      	ldr	r3, [pc, #280]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029be:	4b43      	ldr	r3, [pc, #268]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029c0:	430a      	orrs	r2, r1
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	045b      	lsls	r3, r3, #17
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d106      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029d0:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	0449      	lsls	r1, r1, #17
 80029da:	430a      	orrs	r2, r1
 80029dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d014      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	2203      	movs	r2, #3
 80029f0:	4393      	bics	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d106      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0249      	lsls	r1, r1, #9
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d014      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a20:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	220c      	movs	r2, #12
 8002a26:	4393      	bics	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a30:	430a      	orrs	r2, r1
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	0249      	lsls	r1, r1, #9
 8002a46:	430a      	orrs	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	045b      	lsls	r3, r3, #17
 8002a52:	4013      	ands	r3, r2
 8002a54:	d016      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a22      	ldr	r2, [pc, #136]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d106      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	0449      	lsls	r1, r1, #17
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	049b      	lsls	r3, r3, #18
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d016      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a90:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	0449      	lsls	r1, r1, #17
 8002aba:	430a      	orrs	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b006      	add	sp, #24
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	efffffff 	.word	0xefffffff
 8002ad4:	fffff3ff 	.word	0xfffff3ff
 8002ad8:	fffffcff 	.word	0xfffffcff
 8002adc:	fff3ffff 	.word	0xfff3ffff
 8002ae0:	ffcfffff 	.word	0xffcfffff
 8002ae4:	ffffcfff 	.word	0xffffcfff
 8002ae8:	ffff3fff 	.word	0xffff3fff
 8002aec:	ffbfffff 	.word	0xffbfffff
 8002af0:	feffffff 	.word	0xfeffffff

08002af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e04a      	b.n	8002b9c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	223d      	movs	r2, #61	; 0x3d
 8002b0a:	5c9b      	ldrb	r3, [r3, r2]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223c      	movs	r2, #60	; 0x3c
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7fd fd9d 	bl	800065c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223d      	movs	r2, #61	; 0x3d
 8002b26:	2102      	movs	r1, #2
 8002b28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	0019      	movs	r1, r3
 8002b34:	0010      	movs	r0, r2
 8002b36:	f000 fb3b 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2248      	movs	r2, #72	; 0x48
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223e      	movs	r2, #62	; 0x3e
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223f      	movs	r2, #63	; 0x3f
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	; 0x41
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2242      	movs	r2, #66	; 0x42
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2243      	movs	r2, #67	; 0x43
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2244      	movs	r2, #68	; 0x44
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2245      	movs	r2, #69	; 0x45
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2246      	movs	r2, #70	; 0x46
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2247      	movs	r2, #71	; 0x47
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223d      	movs	r2, #61	; 0x3d
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e04a      	b.n	8002c4c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	223d      	movs	r2, #61	; 0x3d
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223c      	movs	r2, #60	; 0x3c
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f841 	bl	8002c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223d      	movs	r2, #61	; 0x3d
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f000 fae3 	bl	80031b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2248      	movs	r2, #72	; 0x48
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223e      	movs	r2, #62	; 0x3e
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223f      	movs	r2, #63	; 0x3f
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2240      	movs	r2, #64	; 0x40
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2241      	movs	r2, #65	; 0x41
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2242      	movs	r2, #66	; 0x42
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2243      	movs	r2, #67	; 0x43
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2244      	movs	r2, #68	; 0x44
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2245      	movs	r2, #69	; 0x45
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2246      	movs	r2, #70	; 0x46
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2247      	movs	r2, #71	; 0x47
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223d      	movs	r2, #61	; 0x3d
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d108      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x22>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	223e      	movs	r2, #62	; 0x3e
 8002c78:	5c9b      	ldrb	r3, [r3, r2]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	4193      	sbcs	r3, r2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e037      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x92>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d108      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x3a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	223f      	movs	r2, #63	; 0x3f
 8002c90:	5c9b      	ldrb	r3, [r3, r2]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	4193      	sbcs	r3, r2
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e02b      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x92>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d108      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x52>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	5c9b      	ldrb	r3, [r3, r2]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	4193      	sbcs	r3, r2
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e01f      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x92>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d108      	bne.n	8002cce <HAL_TIM_PWM_Start+0x6a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2241      	movs	r2, #65	; 0x41
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	1e5a      	subs	r2, r3, #1
 8002cc8:	4193      	sbcs	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	e013      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x92>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d108      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x82>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2242      	movs	r2, #66	; 0x42
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	1e5a      	subs	r2, r3, #1
 8002ce0:	4193      	sbcs	r3, r2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x92>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2243      	movs	r2, #67	; 0x43
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	4193      	sbcs	r3, r2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e090      	b.n	8002e20 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <HAL_TIM_PWM_Start+0xaa>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	223e      	movs	r2, #62	; 0x3e
 8002d08:	2102      	movs	r1, #2
 8002d0a:	5499      	strb	r1, [r3, r2]
 8002d0c:	e023      	b.n	8002d56 <HAL_TIM_PWM_Start+0xf2>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_PWM_Start+0xba>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	2102      	movs	r1, #2
 8002d1a:	5499      	strb	r1, [r3, r2]
 8002d1c:	e01b      	b.n	8002d56 <HAL_TIM_PWM_Start+0xf2>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_PWM_Start+0xca>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	2102      	movs	r1, #2
 8002d2a:	5499      	strb	r1, [r3, r2]
 8002d2c:	e013      	b.n	8002d56 <HAL_TIM_PWM_Start+0xf2>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_PWM_Start+0xda>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2241      	movs	r2, #65	; 0x41
 8002d38:	2102      	movs	r1, #2
 8002d3a:	5499      	strb	r1, [r3, r2]
 8002d3c:	e00b      	b.n	8002d56 <HAL_TIM_PWM_Start+0xf2>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0xea>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2242      	movs	r2, #66	; 0x42
 8002d48:	2102      	movs	r1, #2
 8002d4a:	5499      	strb	r1, [r3, r2]
 8002d4c:	e003      	b.n	8002d56 <HAL_TIM_PWM_Start+0xf2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2243      	movs	r2, #67	; 0x43
 8002d52:	2102      	movs	r1, #2
 8002d54:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fe10 	bl	8003984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <HAL_TIM_PWM_Start+0x1c4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_TIM_PWM_Start+0x128>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2e      	ldr	r2, [pc, #184]	; (8002e2c <HAL_TIM_PWM_Start+0x1c8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_TIM_PWM_Start+0x128>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <HAL_TIM_PWM_Start+0x1cc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_PWM_Start+0x128>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <HAL_TIM_PWM_Start+0x1d0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_PWM_Start+0x12c>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_TIM_PWM_Start+0x12e>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	0209      	lsls	r1, r1, #8
 8002da4:	430a      	orrs	r2, r1
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_TIM_PWM_Start+0x1c4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d014      	beq.n	8002ddc <HAL_TIM_PWM_Start+0x178>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d00e      	beq.n	8002ddc <HAL_TIM_PWM_Start+0x178>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_TIM_PWM_Start+0x1d4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d009      	beq.n	8002ddc <HAL_TIM_PWM_Start+0x178>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <HAL_TIM_PWM_Start+0x1d8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_TIM_PWM_Start+0x178>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_TIM_PWM_Start+0x1c8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d116      	bne.n	8002e0a <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <HAL_TIM_PWM_Start+0x1dc>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d016      	beq.n	8002e1c <HAL_TIM_PWM_Start+0x1b8>
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d011      	beq.n	8002e1c <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	e008      	b.n	8002e1c <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e000      	b.n	8002e1e <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40014000 	.word	0x40014000
 8002e30:	40014400 	.word	0x40014400
 8002e34:	40014800 	.word	0x40014800
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	00010007 	.word	0x00010007

08002e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	223c      	movs	r2, #60	; 0x3c
 8002e54:	5c9b      	ldrb	r3, [r3, r2]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0df      	b.n	800301e <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	223c      	movs	r2, #60	; 0x3c
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b14      	cmp	r3, #20
 8002e6a:	d900      	bls.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002e6c:	e0d1      	b.n	8003012 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	009a      	lsls	r2, r3, #2
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	0011      	movs	r1, r2
 8002e82:	0018      	movs	r0, r3
 8002e84:	f000 fa1e 	bl	80032c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2108      	movs	r1, #8
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6999      	ldr	r1, [r3, #24]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	619a      	str	r2, [r3, #24]
      break;
 8002eba:	e0ab      	b.n	8003014 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	0011      	movs	r1, r2
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 fa87 	bl	80033d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0109      	lsls	r1, r1, #4
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4951      	ldr	r1, [pc, #324]	; (800302c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
      break;
 8002f00:	e088      	b.n	8003014 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	0011      	movs	r1, r2
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 fae8 	bl	80034e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69d9      	ldr	r1, [r3, #28]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	61da      	str	r2, [r3, #28]
      break;
 8002f42:	e067      	b.n	8003014 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fb4f 	bl	80035f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0109      	lsls	r1, r1, #4
 8002f60:	430a      	orrs	r2, r1
 8002f62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	492f      	ldr	r1, [pc, #188]	; (800302c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69d9      	ldr	r1, [r3, #28]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	61da      	str	r2, [r3, #28]
      break;
 8002f88:	e044      	b.n	8003014 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	0011      	movs	r1, r2
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 fb96 	bl	80036c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2108      	movs	r1, #8
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	438a      	bics	r2, r1
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fca:	e023      	b.n	8003014 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 fbd5 	bl	8003784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0109      	lsls	r1, r1, #4
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	490d      	ldr	r1, [pc, #52]	; (800302c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	021a      	lsls	r2, r3, #8
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003010:	e000      	b.n	8003014 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8003012:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	223c      	movs	r2, #60	; 0x3c
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b004      	add	sp, #16
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	08003b68 	.word	0x08003b68
 800302c:	fffffbff 	.word	0xfffffbff

08003030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	223c      	movs	r2, #60	; 0x3c
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIM_ConfigClockSource+0x18>
 8003044:	2302      	movs	r3, #2
 8003046:	e0ab      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x170>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	223c      	movs	r2, #60	; 0x3c
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	223d      	movs	r2, #61	; 0x3d
 8003054:	2102      	movs	r1, #2
 8003056:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_TIM_ConfigClockSource+0x178>)
 8003064:	4013      	ands	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_TIM_ConfigClockSource+0x17c>)
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d100      	bne.n	8003082 <HAL_TIM_ConfigClockSource+0x52>
 8003080:	e06b      	b.n	800315a <HAL_TIM_ConfigClockSource+0x12a>
 8003082:	d80e      	bhi.n	80030a2 <HAL_TIM_ConfigClockSource+0x72>
 8003084:	2b10      	cmp	r3, #16
 8003086:	d100      	bne.n	800308a <HAL_TIM_ConfigClockSource+0x5a>
 8003088:	e077      	b.n	800317a <HAL_TIM_ConfigClockSource+0x14a>
 800308a:	d803      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x64>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d100      	bne.n	8003092 <HAL_TIM_ConfigClockSource+0x62>
 8003090:	e073      	b.n	800317a <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003092:	e07c      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003094:	2b20      	cmp	r3, #32
 8003096:	d100      	bne.n	800309a <HAL_TIM_ConfigClockSource+0x6a>
 8003098:	e06f      	b.n	800317a <HAL_TIM_ConfigClockSource+0x14a>
 800309a:	2b30      	cmp	r3, #48	; 0x30
 800309c:	d100      	bne.n	80030a0 <HAL_TIM_ConfigClockSource+0x70>
 800309e:	e06c      	b.n	800317a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80030a0:	e075      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80030a2:	2b70      	cmp	r3, #112	; 0x70
 80030a4:	d00e      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0x94>
 80030a6:	d804      	bhi.n	80030b2 <HAL_TIM_ConfigClockSource+0x82>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d036      	beq.n	800311a <HAL_TIM_ConfigClockSource+0xea>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d044      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80030b0:	e06d      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	0152      	lsls	r2, r2, #5
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d068      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x15c>
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	0192      	lsls	r2, r2, #6
 80030be:	4293      	cmp	r3, r2
 80030c0:	d017      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80030c2:	e064      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f000 fc36 	bl	8003944 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2277      	movs	r2, #119	; 0x77
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
      break;
 80030f0:	e04d      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f000 fc1f 	bl	8003944 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	01c9      	lsls	r1, r1, #7
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
      break;
 8003118:	e039      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	001a      	movs	r2, r3
 8003128:	f000 fb90 	bl	800384c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2150      	movs	r1, #80	; 0x50
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fbea 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 8003138:	e029      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	001a      	movs	r2, r3
 8003148:	f000 fbae 	bl	80038a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2160      	movs	r1, #96	; 0x60
 8003152:	0018      	movs	r0, r3
 8003154:	f000 fbda 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 8003158:	e019      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	001a      	movs	r2, r3
 8003168:	f000 fb70 	bl	800384c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2140      	movs	r1, #64	; 0x40
 8003172:	0018      	movs	r0, r3
 8003174:	f000 fbca 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 8003178:	e009      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f000 fbc1 	bl	800390c <TIM_ITRx_SetConfig>
        break;
 800318a:	e000      	b.n	800318e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800318c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	223d      	movs	r2, #61	; 0x3d
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	223c      	movs	r2, #60	; 0x3c
 800319a:	2100      	movs	r1, #0
 800319c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b004      	add	sp, #16
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	ffceff88 	.word	0xffceff88
 80031ac:	ffff00ff 	.word	0xffff00ff

080031b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a38      	ldr	r2, [pc, #224]	; (80032a4 <TIM_Base_SetConfig+0xf4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00c      	beq.n	80031e2 <TIM_Base_SetConfig+0x32>
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0x32>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a34      	ldr	r2, [pc, #208]	; (80032a8 <TIM_Base_SetConfig+0xf8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0x32>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a33      	ldr	r2, [pc, #204]	; (80032ac <TIM_Base_SetConfig+0xfc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2270      	movs	r2, #112	; 0x70
 80031e6:	4393      	bics	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <TIM_Base_SetConfig+0xf4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d01c      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	05db      	lsls	r3, r3, #23
 8003202:	429a      	cmp	r2, r3
 8003204:	d017      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <TIM_Base_SetConfig+0xf8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a26      	ldr	r2, [pc, #152]	; (80032ac <TIM_Base_SetConfig+0xfc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00f      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a25      	ldr	r2, [pc, #148]	; (80032b0 <TIM_Base_SetConfig+0x100>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00b      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <TIM_Base_SetConfig+0x104>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <TIM_Base_SetConfig+0x108>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_Base_SetConfig+0x86>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a22      	ldr	r2, [pc, #136]	; (80032bc <TIM_Base_SetConfig+0x10c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d108      	bne.n	8003248 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <TIM_Base_SetConfig+0x110>)
 800323a:	4013      	ands	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	4393      	bics	r3, r2
 800324e:	001a      	movs	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <TIM_Base_SetConfig+0xf4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0xde>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <TIM_Base_SetConfig+0x104>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0xde>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <TIM_Base_SetConfig+0x108>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0xde>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <TIM_Base_SetConfig+0x10c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d103      	bne.n	8003296 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	615a      	str	r2, [r3, #20]
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b004      	add	sp, #16
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40002000 	.word	0x40002000
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800
 80032c0:	fffffcff 	.word	0xfffffcff

080032c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	2201      	movs	r2, #1
 80032d4:	4393      	bics	r3, r2
 80032d6:	001a      	movs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a32      	ldr	r2, [pc, #200]	; (80033bc <TIM_OC1_SetConfig+0xf8>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2203      	movs	r2, #3
 80032fa:	4393      	bics	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2202      	movs	r2, #2
 800330c:	4393      	bics	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a28      	ldr	r2, [pc, #160]	; (80033c0 <TIM_OC1_SetConfig+0xfc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00b      	beq.n	800333a <TIM_OC1_SetConfig+0x76>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <TIM_OC1_SetConfig+0x100>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <TIM_OC1_SetConfig+0x76>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <TIM_OC1_SetConfig+0x104>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_OC1_SetConfig+0x76>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a25      	ldr	r2, [pc, #148]	; (80033cc <TIM_OC1_SetConfig+0x108>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10c      	bne.n	8003354 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2208      	movs	r2, #8
 800333e:	4393      	bics	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2204      	movs	r2, #4
 8003350:	4393      	bics	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <TIM_OC1_SetConfig+0xfc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00b      	beq.n	8003374 <TIM_OC1_SetConfig+0xb0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <TIM_OC1_SetConfig+0x100>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_OC1_SetConfig+0xb0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <TIM_OC1_SetConfig+0x104>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_OC1_SetConfig+0xb0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_OC1_SetConfig+0x108>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <TIM_OC1_SetConfig+0x10c>)
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <TIM_OC1_SetConfig+0x110>)
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b006      	add	sp, #24
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	fffeff8f 	.word	0xfffeff8f
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800
 80033d0:	fffffeff 	.word	0xfffffeff
 80033d4:	fffffdff 	.word	0xfffffdff

080033d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	2210      	movs	r2, #16
 80033e8:	4393      	bics	r3, r2
 80033ea:	001a      	movs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <TIM_OC2_SetConfig+0xe8>)
 8003406:	4013      	ands	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <TIM_OC2_SetConfig+0xec>)
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2220      	movs	r2, #32
 8003422:	4393      	bics	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <TIM_OC2_SetConfig+0xf0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10d      	bne.n	8003456 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	4393      	bics	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2240      	movs	r2, #64	; 0x40
 8003452:	4393      	bics	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <TIM_OC2_SetConfig+0xf0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00b      	beq.n	8003476 <TIM_OC2_SetConfig+0x9e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <TIM_OC2_SetConfig+0xf4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <TIM_OC2_SetConfig+0x9e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <TIM_OC2_SetConfig+0xf8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <TIM_OC2_SetConfig+0x9e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <TIM_OC2_SetConfig+0xfc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d113      	bne.n	800349e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <TIM_OC2_SetConfig+0x100>)
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4a16      	ldr	r2, [pc, #88]	; (80034dc <TIM_OC2_SetConfig+0x104>)
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b006      	add	sp, #24
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	feff8fff 	.word	0xfeff8fff
 80034c4:	fffffcff 	.word	0xfffffcff
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800
 80034d8:	fffffbff 	.word	0xfffffbff
 80034dc:	fffff7ff 	.word	0xfffff7ff

080034e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a35      	ldr	r2, [pc, #212]	; (80035c4 <TIM_OC3_SetConfig+0xe4>)
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <TIM_OC3_SetConfig+0xe8>)
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2203      	movs	r2, #3
 8003514:	4393      	bics	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4a29      	ldr	r2, [pc, #164]	; (80035cc <TIM_OC3_SetConfig+0xec>)
 8003526:	4013      	ands	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <TIM_OC3_SetConfig+0xf0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10d      	bne.n	800355a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	4a24      	ldr	r2, [pc, #144]	; (80035d4 <TIM_OC3_SetConfig+0xf4>)
 8003542:	4013      	ands	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <TIM_OC3_SetConfig+0xf8>)
 8003556:	4013      	ands	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <TIM_OC3_SetConfig+0xf0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_OC3_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <TIM_OC3_SetConfig+0xfc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_OC3_SetConfig+0x9a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <TIM_OC3_SetConfig+0x100>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_OC3_SetConfig+0x9a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <TIM_OC3_SetConfig+0x104>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d113      	bne.n	80035a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <TIM_OC3_SetConfig+0x108>)
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4a19      	ldr	r2, [pc, #100]	; (80035ec <TIM_OC3_SetConfig+0x10c>)
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b006      	add	sp, #24
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	fffffeff 	.word	0xfffffeff
 80035c8:	fffeff8f 	.word	0xfffeff8f
 80035cc:	fffffdff 	.word	0xfffffdff
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	fffff7ff 	.word	0xfffff7ff
 80035d8:	fffffbff 	.word	0xfffffbff
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800
 80035e8:	ffffefff 	.word	0xffffefff
 80035ec:	ffffdfff 	.word	0xffffdfff

080035f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <TIM_OC4_SetConfig+0xb0>)
 8003600:	401a      	ands	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <TIM_OC4_SetConfig+0xb4>)
 800361c:	4013      	ands	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <TIM_OC4_SetConfig+0xb8>)
 8003624:	4013      	ands	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <TIM_OC4_SetConfig+0xbc>)
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	031b      	lsls	r3, r3, #12
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <TIM_OC4_SetConfig+0xc0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00b      	beq.n	8003668 <TIM_OC4_SetConfig+0x78>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <TIM_OC4_SetConfig+0xc4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_OC4_SetConfig+0x78>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <TIM_OC4_SetConfig+0xc8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_OC4_SetConfig+0x78>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <TIM_OC4_SetConfig+0xcc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d109      	bne.n	800367c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <TIM_OC4_SetConfig+0xd0>)
 800366c:	4013      	ands	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b006      	add	sp, #24
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	ffffefff 	.word	0xffffefff
 80036a4:	feff8fff 	.word	0xfeff8fff
 80036a8:	fffffcff 	.word	0xfffffcff
 80036ac:	ffffdfff 	.word	0xffffdfff
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800
 80036c0:	ffffbfff 	.word	0xffffbfff

080036c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a25      	ldr	r2, [pc, #148]	; (8003768 <TIM_OC5_SetConfig+0xa4>)
 80036d4:	401a      	ands	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <TIM_OC5_SetConfig+0xa8>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <TIM_OC5_SetConfig+0xac>)
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a17      	ldr	r2, [pc, #92]	; (8003774 <TIM_OC5_SetConfig+0xb0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_OC5_SetConfig+0x6e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a16      	ldr	r2, [pc, #88]	; (8003778 <TIM_OC5_SetConfig+0xb4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <TIM_OC5_SetConfig+0x6e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a15      	ldr	r2, [pc, #84]	; (800377c <TIM_OC5_SetConfig+0xb8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_OC5_SetConfig+0x6e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <TIM_OC5_SetConfig+0xbc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d109      	bne.n	8003746 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <TIM_OC5_SetConfig+0xa4>)
 8003736:	4013      	ands	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	621a      	str	r2, [r3, #32]
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b006      	add	sp, #24
 8003766:	bd80      	pop	{r7, pc}
 8003768:	fffeffff 	.word	0xfffeffff
 800376c:	fffeff8f 	.word	0xfffeff8f
 8003770:	fffdffff 	.word	0xfffdffff
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40014000 	.word	0x40014000
 800377c:	40014400 	.word	0x40014400
 8003780:	40014800 	.word	0x40014800

08003784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a26      	ldr	r2, [pc, #152]	; (800382c <TIM_OC6_SetConfig+0xa8>)
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a20      	ldr	r2, [pc, #128]	; (8003830 <TIM_OC6_SetConfig+0xac>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <TIM_OC6_SetConfig+0xb0>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	051b      	lsls	r3, r3, #20
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a18      	ldr	r2, [pc, #96]	; (8003838 <TIM_OC6_SetConfig+0xb4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_OC6_SetConfig+0x70>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <TIM_OC6_SetConfig+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_OC6_SetConfig+0x70>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <TIM_OC6_SetConfig+0xbc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_OC6_SetConfig+0x70>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <TIM_OC6_SetConfig+0xc0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d109      	bne.n	8003808 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4a14      	ldr	r2, [pc, #80]	; (8003848 <TIM_OC6_SetConfig+0xc4>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	029b      	lsls	r3, r3, #10
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b006      	add	sp, #24
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	ffefffff 	.word	0xffefffff
 8003830:	feff8fff 	.word	0xfeff8fff
 8003834:	ffdfffff 	.word	0xffdfffff
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	fffbffff 	.word	0xfffbffff

0800384c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	2201      	movs	r2, #1
 8003864:	4393      	bics	r3, r2
 8003866:	001a      	movs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	22f0      	movs	r2, #240	; 0xf0
 8003876:	4393      	bics	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	220a      	movs	r2, #10
 8003888:	4393      	bics	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	621a      	str	r2, [r3, #32]
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	2210      	movs	r2, #16
 80038ba:	4393      	bics	r3, r2
 80038bc:	001a      	movs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <TIM_TI2_ConfigInputStage+0x60>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	031b      	lsls	r3, r3, #12
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	22a0      	movs	r2, #160	; 0xa0
 80038e4:	4393      	bics	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b006      	add	sp, #24
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	ffff0fff 	.word	0xffff0fff

0800390c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <TIM_ITRx_SetConfig+0x34>)
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	2207      	movs	r2, #7
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	609a      	str	r2, [r3, #8]
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	ffcfff8f 	.word	0xffcfff8f

08003944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <TIM_ETR_SetConfig+0x3c>)
 800395c:	4013      	ands	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	431a      	orrs	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4313      	orrs	r3, r2
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b006      	add	sp, #24
 800397e:	bd80      	pop	{r7, pc}
 8003980:	ffff00ff 	.word	0xffff00ff

08003984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	221f      	movs	r2, #31
 8003994:	4013      	ands	r3, r2
 8003996:	2201      	movs	r2, #1
 8003998:	409a      	lsls	r2, r3
 800399a:	0013      	movs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	43d2      	mvns	r2, r2
 80039a6:	401a      	ands	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	211f      	movs	r1, #31
 80039b4:	400b      	ands	r3, r1
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4099      	lsls	r1, r3
 80039ba:	000b      	movs	r3, r1
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b006      	add	sp, #24
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223c      	movs	r2, #60	; 0x3c
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e05a      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	223c      	movs	r2, #60	; 0x3c
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	223d      	movs	r2, #61	; 0x3d
 80039f0:	2102      	movs	r1, #2
 80039f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2270      	movs	r2, #112	; 0x70
 8003a24:	4393      	bics	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d014      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	05db      	lsls	r3, r3, #23
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	4393      	bics	r3, r2
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	223d      	movs	r2, #61	; 0x3d
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	223c      	movs	r2, #60	; 0x3c
 8003a94:	2100      	movs	r1, #0
 8003a96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	ff0fffff 	.word	0xff0fffff
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40014000 	.word	0x40014000

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	2600      	movs	r6, #0
 8003abc:	4d0c      	ldr	r5, [pc, #48]	; (8003af0 <__libc_init_array+0x38>)
 8003abe:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <__libc_init_array+0x3c>)
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	2600      	movs	r6, #0
 8003aca:	f000 f821 	bl	8003b10 <_init>
 8003ace:	4d0a      	ldr	r5, [pc, #40]	; (8003af8 <__libc_init_array+0x40>)
 8003ad0:	4c0a      	ldr	r4, [pc, #40]	; (8003afc <__libc_init_array+0x44>)
 8003ad2:	1b64      	subs	r4, r4, r5
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	00b3      	lsls	r3, r6, #2
 8003ade:	58eb      	ldr	r3, [r5, r3]
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	00b3      	lsls	r3, r6, #2
 8003ae8:	58eb      	ldr	r3, [r5, r3]
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08003bbc 	.word	0x08003bbc
 8003af4:	08003bbc 	.word	0x08003bbc
 8003af8:	08003bbc 	.word	0x08003bbc
 8003afc:	08003bc0 	.word	0x08003bc0

08003b00 <memset>:
 8003b00:	0003      	movs	r3, r0
 8003b02:	1812      	adds	r2, r2, r0
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d100      	bne.n	8003b0a <memset+0xa>
 8003b08:	4770      	bx	lr
 8003b0a:	7019      	strb	r1, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	e7f9      	b.n	8003b04 <memset+0x4>

08003b10 <_init>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr

08003b1c <_fini>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr
