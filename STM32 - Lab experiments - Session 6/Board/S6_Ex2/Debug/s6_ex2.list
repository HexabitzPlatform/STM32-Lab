
s6_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003df8  08003df8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df8  08003df8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003e0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003e0c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cef2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bdc  00000000  00000000  0002cf26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  0002eb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  0002f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd67  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b14c  00000000  00000000  0004c2f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9dc5  00000000  00000000  00057443  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  00111284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d4c 	.word	0x08003d4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003d4c 	.word	0x08003d4c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);

int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
    HAL_Init();
 8000220:	f000 fac6 	bl	80007b0 <HAL_Init>
    SystemClock_Config();
 8000224:	f000 f838 	bl	8000298 <SystemClock_Config>
    MX_GPIO_Init();
 8000228:	f000 f982 	bl	8000530 <MX_GPIO_Init>
    MX_ADC1_Init();
 800022c:	f000 f894 	bl	8000358 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000230:	f000 f8fe 	bl	8000430 <MX_TIM2_Init>


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <main+0x48>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f002 fe31 	bl	8002ea0 <HAL_TIM_PWM_Start>
    // Calibrate The ADC On Power-Up For Better Accuracy
    HAL_ADCEx_Calibration_Start(&hadc1);
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0x4c>)
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fb1b 	bl	800187c <HAL_ADCEx_Calibration_Start>

    while (1)
    {
        // Start ADC Conversion
        HAL_ADC_Start_IT(&hadc1);
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <main+0x4c>)
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fe97 	bl	8000f7c <HAL_ADC_Start_IT>
        // Update The PWM Duty Cycle With Latest ADC Conversion Result

        TIM2->CCR1 = (AD_RES<<4);
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <main+0x50>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	011a      	lsls	r2, r3, #4
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fb2e 	bl	80008bc <HAL_Delay>
        HAL_ADC_Start_IT(&hadc1);
 8000260:	e7f1      	b.n	8000246 <main+0x2a>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	20000090 	.word	0x20000090
 8000268:	2000002c 	.word	0x2000002c
 800026c:	20000028 	.word	0x20000028

08000270 <HAL_ADC_ConvCpltCallback>:
    }
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

 // Read & Update The ADC Result
    AD_RES = HAL_ADC_GetValue(&hadc1);
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_ADC_ConvCpltCallback+0x20>)
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fef6 	bl	800106c <HAL_ADC_GetValue>
 8000280:	0003      	movs	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_ADC_ConvCpltCallback+0x24>)
 8000286:	801a      	strh	r2, [r3, #0]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000002c 	.word	0x2000002c
 8000294:	20000028 	.word	0x20000028

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b0a7      	sub	sp, #156	; 0x9c
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	245c      	movs	r4, #92	; 0x5c
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	233c      	movs	r3, #60	; 0x3c
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f003 fd47 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	234c      	movs	r3, #76	; 0x4c
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	0018      	movs	r0, r3
 80002b4:	2310      	movs	r3, #16
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f003 fd3f 	bl	8003d3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	234c      	movs	r3, #76	; 0x4c
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f003 fd38 	bl	8003d3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fdbf 	bl	8001e54 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2202      	movs	r2, #2
 80002da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2240      	movs	r2, #64	; 0x40
 80002ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2200      	movs	r2, #0
 80002f4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fdeb 	bl	8001ed4 <HAL_RCC_OscConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000302:	f000 f92b 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	214c      	movs	r1, #76	; 0x4c
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2207      	movs	r2, #7
 800030c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2100      	movs	r1, #0
 8000324:	0018      	movs	r0, r3
 8000326:	f002 f93b 	bl	80025a0 <HAL_RCC_ClockConfig>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800032e:	f000 f915 	bl	800055c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000332:	003b      	movs	r3, r7
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	01d2      	lsls	r2, r2, #7
 8000338:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800033a:	003b      	movs	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000340:	003b      	movs	r3, r7
 8000342:	0018      	movs	r0, r3
 8000344:	f002 fab6 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800034c:	f000 f906 	bl	800055c <Error_Handler>
  }
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b027      	add	sp, #156	; 0x9c
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	230c      	movs	r3, #12
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f003 fce8 	bl	8003d3c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800036c:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <MX_ADC1_Init+0xcc>)
 800036e:	4a2e      	ldr	r2, [pc, #184]	; (8000428 <MX_ADC1_Init+0xd0>)
 8000370:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000372:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <MX_ADC1_Init+0xcc>)
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	05d2      	lsls	r2, r2, #23
 8000378:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800037a:	4b2a      	ldr	r3, [pc, #168]	; (8000424 <MX_ADC1_Init+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000380:	4b28      	ldr	r3, [pc, #160]	; (8000424 <MX_ADC1_Init+0xcc>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_ADC1_Init+0xcc>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038c:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_ADC1_Init+0xcc>)
 800038e:	2204      	movs	r2, #4
 8000390:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000392:	4b24      	ldr	r3, [pc, #144]	; (8000424 <MX_ADC1_Init+0xcc>)
 8000394:	2200      	movs	r2, #0
 8000396:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <MX_ADC1_Init+0xcc>)
 800039a:	2200      	movs	r2, #0
 800039c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003a4:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003c0:	222c      	movs	r2, #44	; 0x2c
 80003c2:	2100      	movs	r1, #0
 80003c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003d2:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003da:	223c      	movs	r2, #60	; 0x3c
 80003dc:	2100      	movs	r1, #0
 80003de:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_ADC1_Init+0xcc>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fbeb 	bl	8000bc4 <HAL_ADC_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003f2:	f000 f8b3 	bl	800055c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <MX_ADC1_Init+0xd4>)
 80003fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000408:	1d3a      	adds	r2, r7, #4
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_ADC1_Init+0xcc>)
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 ff60 	bl	80012d4 <HAL_ADC_ConfigChannel>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000418:	f000 f8a0 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b004      	add	sp, #16
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000002c 	.word	0x2000002c
 8000428:	40012400 	.word	0x40012400
 800042c:	1c000080 	.word	0x1c000080

08000430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08e      	sub	sp, #56	; 0x38
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000436:	2328      	movs	r3, #40	; 0x28
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2310      	movs	r3, #16
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 fc7b 	bl	8003d3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000446:	231c      	movs	r3, #28
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	0018      	movs	r0, r3
 800044c:	230c      	movs	r3, #12
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f003 fc73 	bl	8003d3c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	003b      	movs	r3, r7
 8000458:	0018      	movs	r0, r3
 800045a:	231c      	movs	r3, #28
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f003 fc6c 	bl	8003d3c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000464:	4b30      	ldr	r3, [pc, #192]	; (8000528 <MX_TIM2_Init+0xf8>)
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	05d2      	lsls	r2, r2, #23
 800046a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800046c:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <MX_TIM2_Init+0xf8>)
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b2d      	ldr	r3, [pc, #180]	; (8000528 <MX_TIM2_Init+0xf8>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000478:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <MX_TIM2_Init+0xf8>)
 800047a:	4a2c      	ldr	r2, [pc, #176]	; (800052c <MX_TIM2_Init+0xfc>)
 800047c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047e:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <MX_TIM2_Init+0xf8>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000484:	4b28      	ldr	r3, [pc, #160]	; (8000528 <MX_TIM2_Init+0xf8>)
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800048a:	4b27      	ldr	r3, [pc, #156]	; (8000528 <MX_TIM2_Init+0xf8>)
 800048c:	0018      	movs	r0, r3
 800048e:	f002 fc4f 	bl	8002d30 <HAL_TIM_Base_Init>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000496:	f000 f861 	bl	800055c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049a:	2128      	movs	r1, #40	; 0x28
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0152      	lsls	r2, r2, #5
 80004a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a4:	187a      	adds	r2, r7, r1
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <MX_TIM2_Init+0xf8>)
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fede 	bl	800326c <HAL_TIM_ConfigClockSource>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004b4:	f000 f852 	bl	800055c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_TIM2_Init+0xf8>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 fc90 	bl	8002de0 <HAL_TIM_PWM_Init>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004c4:	f000 f84a 	bl	800055c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	211c      	movs	r1, #28
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d6:	187a      	adds	r2, r7, r1
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_TIM2_Init+0xf8>)
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 fb93 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004e6:	f000 f839 	bl	800055c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2260      	movs	r2, #96	; 0x60
 80004ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	0039      	movs	r1, r7
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_TIM2_Init+0xf8>)
 8000506:	2200      	movs	r2, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f002 fdb9 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000512:	f000 f823 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <MX_TIM2_Init+0xf8>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f8b3 	bl	8000684 <HAL_TIM_MspPostInit>

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b00e      	add	sp, #56	; 0x38
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000090 	.word	0x20000090
 800052c:	0000ffff 	.word	0x0000ffff

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_GPIO_Init+0x28>)
 8000538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <MX_GPIO_Init+0x28>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_GPIO_Init+0x28>)
 8000544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000562:	e7fe      	b.n	8000562 <Error_Handler+0x6>

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <HAL_MspInit+0x4c>)
 800056c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <HAL_MspInit+0x4c>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	641a      	str	r2, [r3, #64]	; 0x40
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_MspInit+0x4c>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_MspInit+0x4c>)
 8000584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x4c>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0549      	lsls	r1, r1, #21
 800058c:	430a      	orrs	r2, r1
 800058e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <HAL_MspInit+0x4c>)
 8000592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	055b      	lsls	r3, r3, #21
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800059e:	23c0      	movs	r3, #192	; 0xc0
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 f9ac 	bl	8000900 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b002      	add	sp, #8
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	2314      	movs	r3, #20
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	0018      	movs	r0, r3
 80005c2:	2314      	movs	r3, #20
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f003 fbb8 	bl	8003d3c <memset>
  if(hadc->Instance==ADC1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <HAL_ADC_MspInit+0x90>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d132      	bne.n	800063c <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_ADC_MspInit+0x94>)
 80005d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <HAL_ADC_MspInit+0x94>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0349      	lsls	r1, r1, #13
 80005e0:	430a      	orrs	r2, r1
 80005e2:	641a      	str	r2, [r3, #64]	; 0x40
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <HAL_ADC_MspInit+0x94>)
 80005e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	035b      	lsls	r3, r3, #13
 80005ec:	4013      	ands	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_ADC_MspInit+0x94>)
 80005f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_ADC_MspInit+0x94>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_ADC_MspInit+0x94>)
 8000600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800060a:	2114      	movs	r1, #20
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2203      	movs	r2, #3
 8000616:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	187a      	adds	r2, r7, r1
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f001 faa8 	bl	8001b7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	200c      	movs	r0, #12
 8000632:	f001 fa71 	bl	8001b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000636:	200c      	movs	r0, #12
 8000638:	f001 fa83 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b00a      	add	sp, #40	; 0x28
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40012400 	.word	0x40012400
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	429a      	cmp	r2, r3
 800065e:	d10b      	bne.n	8000678 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <HAL_TIM_Base_MspInit+0x34>)
 8000662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_TIM_Base_MspInit+0x34>)
 8000666:	2101      	movs	r1, #1
 8000668:	430a      	orrs	r2, r1
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <HAL_TIM_Base_MspInit+0x34>)
 800066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000670:	2201      	movs	r2, #1
 8000672:	4013      	ands	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b004      	add	sp, #16
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	230c      	movs	r3, #12
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	0018      	movs	r0, r3
 8000692:	2314      	movs	r3, #20
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f003 fb50 	bl	8003d3c <memset>
  if(htim->Instance==TIM2)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d122      	bne.n	80006ee <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <HAL_TIM_MspPostInit+0x74>)
 80006aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_TIM_MspPostInit+0x74>)
 80006ae:	2101      	movs	r1, #1
 80006b0:	430a      	orrs	r2, r1
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_TIM_MspPostInit+0x74>)
 80006b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b8:	2201      	movs	r2, #1
 80006ba:	4013      	ands	r3, r2
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c0:	210c      	movs	r1, #12
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2202      	movs	r2, #2
 80006cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fa47 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b008      	add	sp, #32
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 f8b0 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <ADC1_COMP_IRQHandler+0x14>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fca6 	bl	8001084 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	2000002c 	.word	0x2000002c

08000744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <SystemInit+0x14>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0512      	lsls	r2, r2, #20
 800074e:	609a      	str	r2, [r3, #8]
#endif
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f7ff fff0 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078a:	f003 fab3 	bl	8003cf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800078e:	f7ff fd45 	bl	800021c <main>

08000792 <LoopForever>:

LoopForever:
  b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007a0:	08003e00 	.word	0x08003e00
  ldr r2, =_sbss
 80007a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007a8:	200000e0 	.word	0x200000e0

080007ac <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <CEC_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <HAL_Init+0x3c>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Init+0x3c>)
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	0049      	lsls	r1, r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f810 	bl	80007f0 <HAL_InitTick>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d003      	beq.n	80007dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	e001      	b.n	80007e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fec2 	bl	8000564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f8:	230f      	movs	r3, #15
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_InitTick+0x88>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d02b      	beq.n	8000860 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_InitTick+0x8c>)
 800080a:	681c      	ldr	r4, [r3, #0]
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_InitTick+0x88>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	0019      	movs	r1, r3
 8000812:	23fa      	movs	r3, #250	; 0xfa
 8000814:	0098      	lsls	r0, r3, #2
 8000816:	f7ff fc75 	bl	8000104 <__udivsi3>
 800081a:	0003      	movs	r3, r0
 800081c:	0019      	movs	r1, r3
 800081e:	0020      	movs	r0, r4
 8000820:	f7ff fc70 	bl	8000104 <__udivsi3>
 8000824:	0003      	movs	r3, r0
 8000826:	0018      	movs	r0, r3
 8000828:	f001 f99b 	bl	8001b62 <HAL_SYSTICK_Config>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d112      	bne.n	8000856 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d80a      	bhi.n	800084c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	2301      	movs	r3, #1
 800083a:	425b      	negs	r3, r3
 800083c:	2200      	movs	r2, #0
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f96a 	bl	8001b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_InitTick+0x90>)
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e00d      	b.n	8000868 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800084c:	230f      	movs	r3, #15
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e008      	b.n	8000868 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000856:	230f      	movs	r3, #15
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e003      	b.n	8000868 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b005      	add	sp, #20
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20000008 	.word	0x20000008
 800087c:	20000000 	.word	0x20000000
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	18d2      	adds	r2, r2, r3
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000008 	.word	0x20000008
 80008a4:	200000dc 	.word	0x200000dc

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200000dc 	.word	0x200000dc

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff fff0 	bl	80008a8 <HAL_GetTick>
 80008c8:	0003      	movs	r3, r0
 80008ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_Delay+0x40>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	001a      	movs	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	189b      	adds	r3, r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	f7ff ffe0 	bl	80008a8 <HAL_GetTick>
 80008e8:	0002      	movs	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b004      	add	sp, #16
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000008 	.word	0x20000008

08000900 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800090e:	4013      	ands	r3, r2
 8000910:	0019      	movs	r1, r3
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40010000 	.word	0x40010000
 8000928:	fffff9ff 	.word	0xfffff9ff

0800092c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800093c:	401a      	ands	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	fe3fffff 	.word	0xfe3fffff

08000954 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	23e0      	movs	r3, #224	; 0xe0
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	4013      	ands	r3, r2
}
 8000966:	0018      	movs	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}

0800096e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	2104      	movs	r1, #4
 8000982:	400a      	ands	r2, r1
 8000984:	2107      	movs	r1, #7
 8000986:	4091      	lsls	r1, r2
 8000988:	000a      	movs	r2, r1
 800098a:	43d2      	mvns	r2, r2
 800098c:	401a      	ands	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2104      	movs	r1, #4
 8000992:	400b      	ands	r3, r1
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	4099      	lsls	r1, r3
 8000998:	000b      	movs	r3, r1
 800099a:	431a      	orrs	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	23c0      	movs	r3, #192	; 0xc0
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	4013      	ands	r3, r2
 80009ba:	d101      	bne.n	80009c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}

080009ca <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	211f      	movs	r1, #31
 80009de:	400a      	ands	r2, r1
 80009e0:	210f      	movs	r1, #15
 80009e2:	4091      	lsls	r1, r2
 80009e4:	000a      	movs	r2, r1
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	401a      	ands	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	0e9b      	lsrs	r3, r3, #26
 80009ee:	210f      	movs	r1, #15
 80009f0:	4019      	ands	r1, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	201f      	movs	r0, #31
 80009f6:	4003      	ands	r3, r0
 80009f8:	4099      	lsls	r1, r3
 80009fa:	000b      	movs	r3, r1
 80009fc:	431a      	orrs	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	035b      	lsls	r3, r3, #13
 8000a1c:	0b5b      	lsrs	r3, r3, #13
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	0352      	lsls	r2, r2, #13
 8000a3e:	0b52      	lsrs	r2, r2, #13
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	43d2      	mvns	r2, r2
 8000a7e:	401a      	ands	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	400b      	ands	r3, r1
 8000a88:	4904      	ldr	r1, [pc, #16]	; (8000a9c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b004      	add	sp, #16
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	07ffff00 	.word	0x07ffff00

08000aa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	0552      	lsls	r2, r2, #21
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	6fffffe8 	.word	0x6fffffe8

08000ac8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	055b      	lsls	r3, r3, #21
 8000ad8:	401a      	ands	r2, r3
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	055b      	lsls	r3, r3, #21
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d101      	bne.n	8000ae6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <LL_ADC_Enable+0x20>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	2201      	movs	r2, #1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	7fffffe8 	.word	0x7fffffe8

08000b14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <LL_ADC_Disable+0x20>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	2202      	movs	r2, #2
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b002      	add	sp, #8
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	7fffffe8 	.word	0x7fffffe8

08000b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d101      	bne.n	8000b50 <LL_ADC_IsEnabled+0x18>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <LL_ADC_IsEnabled+0x1a>
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2202      	movs	r2, #2
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d101      	bne.n	8000b72 <LL_ADC_IsDisableOngoing+0x18>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <LL_ADC_IsDisableOngoing+0x1a>
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <LL_ADC_REG_StartConversion+0x20>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	7fffffe8 	.word	0x7fffffe8

08000ba0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2204      	movs	r2, #4
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d101      	bne.n	8000bb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bcc:	231f      	movs	r3, #31
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e1ad      	b.n	8000f46 <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fcdd 	bl	80005b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2254      	movs	r2, #84	; 0x54
 8000c04:	2100      	movs	r1, #0
 8000c06:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff5b 	bl	8000ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d114      	bne.n	8000c40 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff ff40 	bl	8000aa0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000c20:	4bcb      	ldr	r3, [pc, #812]	; (8000f50 <HAL_ADC_Init+0x38c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	49cb      	ldr	r1, [pc, #812]	; (8000f54 <HAL_ADC_Init+0x390>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fa6c 	bl	8000104 <__udivsi3>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c32:	e002      	b.n	8000c3a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f9      	bne.n	8000c34 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff3f 	bl	8000ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	2210      	movs	r2, #16
 8000c54:	431a      	orrs	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5e:	2201      	movs	r2, #1
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c66:	231f      	movs	r3, #31
 8000c68:	18fb      	adds	r3, r7, r3
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff ff94 	bl	8000ba0 <LL_ADC_REG_IsConversionOngoing>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	2210      	movs	r2, #16
 8000c82:	4013      	ands	r3, r2
 8000c84:	d000      	beq.n	8000c88 <HAL_ADC_Init+0xc4>
 8000c86:	e151      	b.n	8000f2c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d000      	beq.n	8000c90 <HAL_ADC_Init+0xcc>
 8000c8e:	e14d      	b.n	8000f2c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4ab0      	ldr	r2, [pc, #704]	; (8000f58 <HAL_ADC_Init+0x394>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	2202      	movs	r2, #2
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff47 	bl	8000b38 <LL_ADC_IsEnabled>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d151      	bne.n	8000d52 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	2218      	movs	r2, #24
 8000cb6:	4393      	bics	r3, r2
 8000cb8:	0019      	movs	r1, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	0f9b      	lsrs	r3, r3, #30
 8000ccc:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cd2:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8000cd8:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8000cde:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8000ce4:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	223c      	movs	r2, #60	; 0x3c
 8000cf0:	5c9b      	ldrb	r3, [r3, r2]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d103      	bne.n	8000cfe <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	4a95      	ldr	r2, [pc, #596]	; (8000f5c <HAL_ADC_Init+0x398>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	0019      	movs	r1, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	23c0      	movs	r3, #192	; 0xc0
 8000d1a:	061b      	lsls	r3, r3, #24
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d018      	beq.n	8000d52 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d012      	beq.n	8000d52 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	061b      	lsls	r3, r3, #24
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d00c      	beq.n	8000d52 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d38:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <HAL_ADC_Init+0x39c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a89      	ldr	r2, [pc, #548]	; (8000f64 <HAL_ADC_Init+0x3a0>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	0019      	movs	r1, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	23f0      	movs	r3, #240	; 0xf0
 8000d48:	039b      	lsls	r3, r3, #14
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	4b84      	ldr	r3, [pc, #528]	; (8000f60 <HAL_ADC_Init+0x39c>)
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e1b      	ldrb	r3, [r3, #24]
 8000d56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7e5b      	ldrb	r3, [r3, #25]
 8000d5c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d5e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e9b      	ldrb	r3, [r3, #26]
 8000d64:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d66:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <HAL_ADC_Init+0x1b2>
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	015b      	lsls	r3, r3, #5
 8000d74:	e000      	b.n	8000d78 <HAL_ADC_Init+0x1b4>
 8000d76:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d78:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d7e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da04      	bge.n	8000d92 <HAL_ADC_Init+0x1ce>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	085b      	lsrs	r3, r3, #1
 8000d90:	e001      	b.n	8000d96 <HAL_ADC_Init+0x1d2>
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8000d96:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	212c      	movs	r1, #44	; 0x2c
 8000d9c:	5c5b      	ldrb	r3, [r3, r1]
 8000d9e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000da0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	5c9b      	ldrb	r3, [r3, r2]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d115      	bne.n	8000dde <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7e9b      	ldrb	r3, [r3, #26]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d105      	bne.n	8000dc6 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	0252      	lsls	r2, r2, #9
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	e00b      	b.n	8000dde <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	2220      	movs	r2, #32
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00a      	beq.n	8000dfc <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dea:	23e0      	movs	r3, #224	; 0xe0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000df4:	4313      	orrs	r3, r2
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4a59      	ldr	r2, [pc, #356]	; (8000f68 <HAL_ADC_Init+0x3a4>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	0019      	movs	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	4a54      	ldr	r2, [pc, #336]	; (8000f6c <HAL_ADC_Init+0x3a8>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e30:	001a      	movs	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	f7ff fd9b 	bl	800096e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	494b      	ldr	r1, [pc, #300]	; (8000f70 <HAL_ADC_Init+0x3ac>)
 8000e42:	001a      	movs	r2, r3
 8000e44:	f7ff fd93 	bl	800096e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d109      	bne.n	8000e64 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4249      	negs	r1, r1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
 8000e62:	e03c      	b.n	8000ede <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	039b      	lsls	r3, r3, #14
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d136      	bne.n	8000ede <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	e00c      	b.n	8000e90 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	40da      	lsrs	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	220f      	movs	r2, #15
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	d006      	beq.n	8000e98 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	2b07      	cmp	r3, #7
 8000e94:	d9ef      	bls.n	8000e76 <HAL_ADC_Init+0x2b2>
 8000e96:	e000      	b.n	8000e9a <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8000e98:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d109      	bne.n	8000eb4 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4249      	negs	r1, r1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
 8000eb2:	e014      	b.n	8000ede <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a2d      	ldr	r2, [pc, #180]	; (8000f74 <HAL_ADC_Init+0x3b0>)
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	221c      	movs	r2, #28
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2210      	movs	r2, #16
 8000ecc:	4252      	negs	r2, r2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_ADC_Init+0x3b4>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d10b      	bne.n	8000f06 <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4393      	bics	r3, r2
 8000efc:	2201      	movs	r2, #1
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f04:	e01c      	b.n	8000f40 <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	2212      	movs	r2, #18
 8000f0c:	4393      	bics	r3, r2
 8000f0e:	2210      	movs	r2, #16
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000f22:	231f      	movs	r3, #31
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f2a:	e009      	b.n	8000f40 <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f30:	2210      	movs	r2, #16
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f38:	231f      	movs	r3, #31
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f40:	231f      	movs	r3, #31
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	781b      	ldrb	r3, [r3, #0]
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b008      	add	sp, #32
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000000 	.word	0x20000000
 8000f54:	00030d40 	.word	0x00030d40
 8000f58:	fffffefd 	.word	0xfffffefd
 8000f5c:	1ffffc02 	.word	0x1ffffc02
 8000f60:	40012708 	.word	0x40012708
 8000f64:	ffc3ffff 	.word	0xffc3ffff
 8000f68:	fffe0219 	.word	0xfffe0219
 8000f6c:	dffffc02 	.word	0xdffffc02
 8000f70:	07ffff04 	.word	0x07ffff04
 8000f74:	3fffffff 	.word	0x3fffffff
 8000f78:	833fffe7 	.word	0x833fffe7

08000f7c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fe09 	bl	8000ba0 <LL_ADC_REG_IsConversionOngoing>
 8000f8e:	1e03      	subs	r3, r0, #0
 8000f90:	d15f      	bne.n	8001052 <HAL_ADC_Start_IT+0xd6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2254      	movs	r2, #84	; 0x54
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_ADC_Start_IT+0x24>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e05f      	b.n	8001060 <HAL_ADC_Start_IT+0xe4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2254      	movs	r2, #84	; 0x54
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fa8:	250f      	movs	r5, #15
 8000faa:	197c      	adds	r4, r7, r5
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 fb6a 	bl	8001688 <ADC_Enable>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fb8:	197b      	adds	r3, r7, r5
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d143      	bne.n	8001048 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_ADC_Start_IT+0xec>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0052      	lsls	r2, r2, #1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	221c      	movs	r2, #28
 8000fde:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2254      	movs	r2, #84	; 0x54
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	211c      	movs	r1, #28
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d108      	bne.n	8001012 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2108      	movs	r1, #8
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]
          break;
 8001010:	e008      	b.n	8001024 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2104      	movs	r1, #4
 800101e:	430a      	orrs	r2, r1
 8001020:	605a      	str	r2, [r3, #4]
          break;
 8001022:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	2b00      	cmp	r3, #0
 800102a:	d107      	bne.n	800103c <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2110      	movs	r1, #16
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fd9b 	bl	8000b7c <LL_ADC_REG_StartConversion>
 8001046:	e008      	b.n	800105a <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2254      	movs	r2, #84	; 0x54
 800104c:	2100      	movs	r1, #0
 800104e:	5499      	strb	r1, [r3, r2]
 8001050:	e003      	b.n	800105a <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	781b      	ldrb	r3, [r3, #0]
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b004      	add	sp, #16
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	fffff0fe 	.word	0xfffff0fe

0800106c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d017      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x54>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2202      	movs	r2, #2
 80010ac:	4013      	ands	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	2210      	movs	r2, #16
 80010b6:	4013      	ands	r3, r2
 80010b8:	d106      	bne.n	80010c8 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 fc68 	bl	80019a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2204      	movs	r2, #4
 80010dc:	4013      	ands	r3, r2
 80010de:	d003      	beq.n	80010e8 <HAL_ADC_IRQHandler+0x64>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2204      	movs	r2, #4
 80010e4:	4013      	ands	r3, r2
 80010e6:	d107      	bne.n	80010f8 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	2208      	movs	r2, #8
 80010ec:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80010ee:	d04d      	beq.n	800118c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2208      	movs	r2, #8
 80010f4:	4013      	ands	r3, r2
 80010f6:	d049      	beq.n	800118c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	2210      	movs	r2, #16
 80010fe:	4013      	ands	r3, r2
 8001100:	d106      	bne.n	8001110 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fc47 	bl	80009a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d02e      	beq.n	800117c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e9b      	ldrb	r3, [r3, #26]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d12a      	bne.n	800117c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2208      	movs	r2, #8
 800112e:	4013      	ands	r3, r2
 8001130:	2b08      	cmp	r3, #8
 8001132:	d123      	bne.n	800117c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fd31 	bl	8000ba0 <LL_ADC_REG_IsConversionOngoing>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d110      	bne.n	8001164 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	210c      	movs	r1, #12
 800114e:	438a      	bics	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	4a56      	ldr	r2, [pc, #344]	; (80012b0 <HAL_ADC_IRQHandler+0x22c>)
 8001158:	4013      	ands	r3, r2
 800115a:	2201      	movs	r2, #1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	; 0x58
 8001162:	e00b      	b.n	800117c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	2220      	movs	r2, #32
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	2201      	movs	r2, #1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff f876 	bl	8000270 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	220c      	movs	r2, #12
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	4013      	ands	r3, r2
 8001192:	d012      	beq.n	80011ba <HAL_ADC_IRQHandler+0x136>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	4013      	ands	r3, r2
 800119a:	d00e      	beq.n	80011ba <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	0252      	lsls	r2, r2, #9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 f881 	bl	80012b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	d014      	beq.n	80011ee <HAL_ADC_IRQHandler+0x16a>
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4013      	ands	r3, r2
 80011cc:	d00f      	beq.n	80011ee <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	0292      	lsls	r2, r2, #10
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fbce 	bl	8001980 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0052      	lsls	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d014      	beq.n	8001222 <HAL_ADC_IRQHandler+0x19e>
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d00f      	beq.n	8001222 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	02d2      	lsls	r2, r2, #11
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	0018      	movs	r0, r3
 8001214:	f000 fbbc 	bl	8001990 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2210      	movs	r2, #16
 8001226:	4013      	ands	r3, r2
 8001228:	d02b      	beq.n	8001282 <HAL_ADC_IRQHandler+0x1fe>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2210      	movs	r2, #16
 800122e:	4013      	ands	r3, r2
 8001230:	d027      	beq.n	8001282 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800123a:	2301      	movs	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e008      	b.n	8001252 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fc03 	bl	8000a50 <LL_ADC_REG_GetDMATransfer>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d110      	bne.n	800127a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	00d2      	lsls	r2, r2, #3
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126a:	2202      	movs	r2, #2
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	f000 f825 	bl	80012c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2210      	movs	r2, #16
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	019b      	lsls	r3, r3, #6
 8001288:	4013      	ands	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_ADC_IRQHandler+0x224>
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	019b      	lsls	r3, r3, #6
 8001292:	4013      	ands	r3, r2
 8001294:	d008      	beq.n	80012a8 <HAL_ADC_IRQHandler+0x224>
  {
    /* Level out of window 1 callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 fb89 	bl	80019b0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0192      	lsls	r2, r2, #6
 80012a6:	601a      	str	r2, [r3, #0]
  }
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b006      	add	sp, #24
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	fffffefe 	.word	0xfffffefe

080012b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012de:	2317      	movs	r3, #23
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2254      	movs	r2, #84	; 0x54
 80012ee:	5c9b      	ldrb	r3, [r3, r2]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x24>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e1c2      	b.n	800167e <HAL_ADC_ConfigChannel+0x3aa>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2254      	movs	r2, #84	; 0x54
 80012fc:	2101      	movs	r1, #1
 80012fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff fc4b 	bl	8000ba0 <LL_ADC_REG_IsConversionOngoing>
 800130a:	1e03      	subs	r3, r0, #0
 800130c:	d000      	beq.n	8001310 <HAL_ADC_ConfigChannel+0x3c>
 800130e:	e1a5      	b.n	800165c <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d100      	bne.n	800131a <HAL_ADC_ConfigChannel+0x46>
 8001318:	e144      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	429a      	cmp	r2, r3
 8001324:	d004      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800132a:	4ac2      	ldr	r2, [pc, #776]	; (8001634 <HAL_ADC_ConfigChannel+0x360>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d108      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0019      	movs	r1, r3
 800133a:	0010      	movs	r0, r2
 800133c:	f7ff fb65 	bl	8000a0a <LL_ADC_REG_SetSequencerChAdd>
 8001340:	e0c9      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	211f      	movs	r1, #31
 800134c:	400b      	ands	r3, r1
 800134e:	210f      	movs	r1, #15
 8001350:	4099      	lsls	r1, r3
 8001352:	000b      	movs	r3, r1
 8001354:	43db      	mvns	r3, r3
 8001356:	4013      	ands	r3, r2
 8001358:	0019      	movs	r1, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	035b      	lsls	r3, r3, #13
 8001360:	0b5b      	lsrs	r3, r3, #13
 8001362:	d105      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x9c>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0e9b      	lsrs	r3, r3, #26
 800136a:	221f      	movs	r2, #31
 800136c:	4013      	ands	r3, r2
 800136e:	e098      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	d000      	beq.n	800137c <HAL_ADC_ConfigChannel+0xa8>
 800137a:	e091      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x1cc>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2202      	movs	r2, #2
 8001382:	4013      	ands	r3, r2
 8001384:	d000      	beq.n	8001388 <HAL_ADC_ConfigChannel+0xb4>
 8001386:	e089      	b.n	800149c <HAL_ADC_ConfigChannel+0x1c8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2204      	movs	r2, #4
 800138e:	4013      	ands	r3, r2
 8001390:	d000      	beq.n	8001394 <HAL_ADC_ConfigChannel+0xc0>
 8001392:	e081      	b.n	8001498 <HAL_ADC_ConfigChannel+0x1c4>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2208      	movs	r2, #8
 800139a:	4013      	ands	r3, r2
 800139c:	d000      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0xcc>
 800139e:	e079      	b.n	8001494 <HAL_ADC_ConfigChannel+0x1c0>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2210      	movs	r2, #16
 80013a6:	4013      	ands	r3, r2
 80013a8:	d000      	beq.n	80013ac <HAL_ADC_ConfigChannel+0xd8>
 80013aa:	e071      	b.n	8001490 <HAL_ADC_ConfigChannel+0x1bc>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2220      	movs	r2, #32
 80013b2:	4013      	ands	r3, r2
 80013b4:	d000      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0xe4>
 80013b6:	e069      	b.n	800148c <HAL_ADC_ConfigChannel+0x1b8>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xf0>
 80013c2:	e061      	b.n	8001488 <HAL_ADC_ConfigChannel+0x1b4>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	4013      	ands	r3, r2
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xfc>
 80013ce:	e059      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1b0>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	d151      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1ac>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d149      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1a8>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	d141      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x1a4>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	4013      	ands	r3, r2
 80013fe:	d139      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1a0>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	015b      	lsls	r3, r3, #5
 8001408:	4013      	ands	r3, r2
 800140a:	d131      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x19c>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	019b      	lsls	r3, r3, #6
 8001414:	4013      	ands	r3, r2
 8001416:	d129      	bne.n	800146c <HAL_ADC_ConfigChannel+0x198>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	01db      	lsls	r3, r3, #7
 8001420:	4013      	ands	r3, r2
 8001422:	d121      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x194>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4013      	ands	r3, r2
 800142e:	d119      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x190>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	025b      	lsls	r3, r3, #9
 8001438:	4013      	ands	r3, r2
 800143a:	d111      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x18c>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	029b      	lsls	r3, r3, #10
 8001444:	4013      	ands	r3, r2
 8001446:	d109      	bne.n	800145c <HAL_ADC_ConfigChannel+0x188>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	02db      	lsls	r3, r3, #11
 8001450:	4013      	ands	r3, r2
 8001452:	d001      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x184>
 8001454:	2312      	movs	r3, #18
 8001456:	e024      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001458:	2300      	movs	r3, #0
 800145a:	e022      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 800145c:	2311      	movs	r3, #17
 800145e:	e020      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001460:	2310      	movs	r3, #16
 8001462:	e01e      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001464:	230f      	movs	r3, #15
 8001466:	e01c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001468:	230e      	movs	r3, #14
 800146a:	e01a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 800146c:	230d      	movs	r3, #13
 800146e:	e018      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001470:	230c      	movs	r3, #12
 8001472:	e016      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001474:	230b      	movs	r3, #11
 8001476:	e014      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001478:	230a      	movs	r3, #10
 800147a:	e012      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 800147c:	2309      	movs	r3, #9
 800147e:	e010      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001480:	2308      	movs	r3, #8
 8001482:	e00e      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001484:	2307      	movs	r3, #7
 8001486:	e00c      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001488:	2306      	movs	r3, #6
 800148a:	e00a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 800148c:	2305      	movs	r3, #5
 800148e:	e008      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001490:	2304      	movs	r3, #4
 8001492:	e006      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001494:	2303      	movs	r3, #3
 8001496:	e004      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 8001498:	2302      	movs	r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x1ce>
 80014a0:	2300      	movs	r3, #0
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	6852      	ldr	r2, [r2, #4]
 80014a6:	201f      	movs	r0, #31
 80014a8:	4002      	ands	r2, r0
 80014aa:	4093      	lsls	r3, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d808      	bhi.n	80014d6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	001a      	movs	r2, r3
 80014d2:	f7ff fa7a 	bl	80009ca <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	001a      	movs	r2, r3
 80014e4:	f7ff fac0 	bl	8000a68 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db00      	blt.n	80014f2 <HAL_ADC_ConfigChannel+0x21e>
 80014f0:	e0be      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014f2:	4b51      	ldr	r3, [pc, #324]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fa2d 	bl	8000954 <LL_ADC_GetCommonPathInternalCh>
 80014fa:	0003      	movs	r3, r0
 80014fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_ADC_ConfigChannel+0x368>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d123      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001510:	d11e      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	4313      	orrs	r3, r2
 800151a:	4a47      	ldr	r2, [pc, #284]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f7ff fa04 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001524:	4b46      	ldr	r3, [pc, #280]	; (8001640 <HAL_ADC_ConfigChannel+0x36c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4946      	ldr	r1, [pc, #280]	; (8001644 <HAL_ADC_ConfigChannel+0x370>)
 800152a:	0018      	movs	r0, r3
 800152c:	f7fe fdea 	bl	8000104 <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	189b      	adds	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001540:	e002      	b.n	8001548 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3b01      	subs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800154e:	e08f      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a3c      	ldr	r2, [pc, #240]	; (8001648 <HAL_ADC_ConfigChannel+0x374>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10e      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x2a4>
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	045b      	lsls	r3, r3, #17
 8001560:	4013      	ands	r3, r2
 8001562:	d109      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	0452      	lsls	r2, r2, #17
 800156a:	4313      	orrs	r3, r2
 800156c:	4a32      	ldr	r2, [pc, #200]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f7ff f9db 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 8001576:	e07b      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a33      	ldr	r2, [pc, #204]	; (800164c <HAL_ADC_ConfigChannel+0x378>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d000      	beq.n	8001584 <HAL_ADC_ConfigChannel+0x2b0>
 8001582:	e075      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	03db      	lsls	r3, r3, #15
 800158a:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800158c:	d000      	beq.n	8001590 <HAL_ADC_ConfigChannel+0x2bc>
 800158e:	e06f      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	03d2      	lsls	r2, r2, #15
 8001596:	4313      	orrs	r3, r2
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 800159a:	0019      	movs	r1, r3
 800159c:	0010      	movs	r0, r2
 800159e:	f7ff f9c5 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 80015a2:	e065      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	061b      	lsls	r3, r3, #24
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d004      	beq.n	80015ba <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015b4:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <HAL_ADC_ConfigChannel+0x360>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d107      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0019      	movs	r1, r3
 80015c4:	0010      	movs	r0, r2
 80015c6:	f7ff fa31 	bl	8000a2c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da4e      	bge.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff f9bd 	bl	8000954 <LL_ADC_GetCommonPathInternalCh>
 80015da:	0003      	movs	r3, r0
 80015dc:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_ADC_ConfigChannel+0x368>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d108      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_ADC_ConfigChannel+0x37c>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 80015f0:	0019      	movs	r1, r3
 80015f2:	0010      	movs	r0, r2
 80015f4:	f7ff f99a 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 80015f8:	e03a      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_ADC_ConfigChannel+0x374>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d108      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <HAL_ADC_ConfigChannel+0x380>)
 8001608:	4013      	ands	r3, r2
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 800160c:	0019      	movs	r1, r3
 800160e:	0010      	movs	r0, r2
 8001610:	f7ff f98c 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 8001614:	e02c      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <HAL_ADC_ConfigChannel+0x378>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d127      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_ADC_ConfigChannel+0x384>)
 8001624:	4013      	ands	r3, r2
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_ADC_ConfigChannel+0x364>)
 8001628:	0019      	movs	r1, r3
 800162a:	0010      	movs	r0, r2
 800162c:	f7ff f97e 	bl	800092c <LL_ADC_SetCommonPathInternalCh>
 8001630:	e01e      	b.n	8001670 <HAL_ADC_ConfigChannel+0x39c>
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	80000004 	.word	0x80000004
 8001638:	40012708 	.word	0x40012708
 800163c:	b0001000 	.word	0xb0001000
 8001640:	20000000 	.word	0x20000000
 8001644:	00030d40 	.word	0x00030d40
 8001648:	b8004000 	.word	0xb8004000
 800164c:	b4002000 	.word	0xb4002000
 8001650:	ff7fffff 	.word	0xff7fffff
 8001654:	feffffff 	.word	0xfeffffff
 8001658:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	2220      	movs	r2, #32
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001668:	2317      	movs	r3, #23
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2254      	movs	r2, #84	; 0x54
 8001674:	2100      	movs	r1, #0
 8001676:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001678:	2317      	movs	r3, #23
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	b006      	add	sp, #24
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			; (mov r8, r8)

08001688 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff fa4d 	bl	8000b38 <LL_ADC_IsEnabled>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d162      	bne.n	8001768 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <ADC_Enable+0xec>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	d00d      	beq.n	80016ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	2210      	movs	r2, #16
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2201      	movs	r2, #1
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e04f      	b.n	800176a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff fa0e 	bl	8000af0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <ADC_Enable+0xf0>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff f93c 	bl	8000954 <LL_ADC_GetCommonPathInternalCh>
 80016dc:	0002      	movs	r2, r0
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	4013      	ands	r3, r2
 80016e4:	d00f      	beq.n	8001706 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <ADC_Enable+0xf4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <ADC_Enable+0xf8>)
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7fe fd09 	bl	8000104 <__udivsi3>
 80016f2:	0003      	movs	r3, r0
 80016f4:	3301      	adds	r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016f8:	e002      	b.n	8001700 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d02c      	beq.n	8001768 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800170e:	f7ff f8cb 	bl	80008a8 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001716:	e020      	b.n	800175a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fa0b 	bl	8000b38 <LL_ADC_IsEnabled>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d104      	bne.n	8001730 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff f9e0 	bl	8000af0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001730:	f7ff f8ba 	bl	80008a8 <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d90d      	bls.n	800175a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	2210      	movs	r2, #16
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2201      	movs	r2, #1
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e007      	b.n	800176a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	2b01      	cmp	r3, #1
 8001766:	d1d7      	bne.n	8001718 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	80000017 	.word	0x80000017
 8001778:	40012708 	.word	0x40012708
 800177c:	20000000 	.word	0x20000000
 8001780:	00030d40 	.word	0x00030d40

08001784 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff f9e2 	bl	8000b5a <LL_ADC_IsDisableOngoing>
 8001796:	0003      	movs	r3, r0
 8001798:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff f9ca 	bl	8000b38 <LL_ADC_IsEnabled>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d040      	beq.n	800182a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d13d      	bne.n	800182a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2205      	movs	r2, #5
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10d      	bne.n	80017d8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff f9a7 	bl	8000b14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2203      	movs	r2, #3
 80017cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ce:	f7ff f86b 	bl	80008a8 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017d6:	e022      	b.n	800181e <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	2210      	movs	r2, #16
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2201      	movs	r2, #1
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e01b      	b.n	800182c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017f4:	f7ff f858 	bl	80008a8 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d90d      	bls.n	800181e <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	2210      	movs	r2, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2201      	movs	r2, #1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e006      	b.n	800182c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	d1e4      	bne.n	80017f4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_ADC_IsEnabled>:
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <LL_ADC_IsEnabled+0x18>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <LL_ADC_IsEnabled+0x1a>
 800184c:	2300      	movs	r3, #0
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}

08001856 <LL_ADC_IsCalibrationOnGoing>:
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0fdb      	lsrs	r3, r3, #31
 8001864:	07da      	lsls	r2, r3, #31
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2254      	movs	r2, #84	; 0x54
 800188c:	5c9b      	ldrb	r3, [r3, r2]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_ADCEx_Calibration_Start+0x1a>
 8001892:	2302      	movs	r3, #2
 8001894:	e06c      	b.n	8001970 <HAL_ADCEx_Calibration_Start+0xf4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2254      	movs	r2, #84	; 0x54
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800189e:	2317      	movs	r3, #23
 80018a0:	18fc      	adds	r4, r7, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff ff6d 	bl	8001784 <ADC_Disable>
 80018aa:	0003      	movs	r3, r0
 80018ac:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff ffbe 	bl	8001834 <LL_ADC_IsEnabled>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d14c      	bne.n	8001956 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <HAL_ADCEx_Calibration_Start+0xfc>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	2202      	movs	r2, #2
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2203      	movs	r2, #3
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2103      	movs	r1, #3
 80018e4:	438a      	bics	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0609      	lsls	r1, r1, #24
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80018fa:	e014      	b.n	8001926 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3301      	adds	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_ADCEx_Calibration_Start+0x100>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d90d      	bls.n	8001926 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	2212      	movs	r2, #18
 8001910:	4393      	bics	r3, r2
 8001912:	2210      	movs	r2, #16
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2254      	movs	r2, #84	; 0x54
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e024      	b.n	8001970 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff ff93 	bl	8001856 <LL_ADC_IsCalibrationOnGoing>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d1e3      	bne.n	80018fc <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68d9      	ldr	r1, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	2203      	movs	r2, #3
 800194a:	4393      	bics	r3, r2
 800194c:	2201      	movs	r2, #1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	659a      	str	r2, [r3, #88]	; 0x58
 8001954:	e005      	b.n	8001962 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	2210      	movs	r2, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2254      	movs	r2, #84	; 0x54
 8001966:	2100      	movs	r1, #0
 8001968:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800196a:	2317      	movs	r3, #23
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	781b      	ldrb	r3, [r3, #0]
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b007      	add	sp, #28
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	fffffefd 	.word	0xfffffefd
 800197c:	0002f1ff 	.word	0x0002f1ff

08001980 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	0002      	movs	r2, r0
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b7f      	cmp	r3, #127	; 0x7f
 80019d2:	d809      	bhi.n	80019e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	001a      	movs	r2, r3
 80019da:	231f      	movs	r3, #31
 80019dc:	401a      	ands	r2, r3
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_EnableIRQ+0x30>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	4091      	lsls	r1, r2
 80019e4:	000a      	movs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	0002      	movs	r2, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b7f      	cmp	r3, #127	; 0x7f
 8001a08:	d828      	bhi.n	8001a5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <__NVIC_SetPriority+0xd4>)
 8001a0c:	1dfb      	adds	r3, r7, #7
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	33c0      	adds	r3, #192	; 0xc0
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	589b      	ldr	r3, [r3, r2]
 8001a1a:	1dfa      	adds	r2, r7, #7
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	0011      	movs	r1, r2
 8001a20:	2203      	movs	r2, #3
 8001a22:	400a      	ands	r2, r1
 8001a24:	00d2      	lsls	r2, r2, #3
 8001a26:	21ff      	movs	r1, #255	; 0xff
 8001a28:	4091      	lsls	r1, r2
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	43d2      	mvns	r2, r2
 8001a2e:	401a      	ands	r2, r3
 8001a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	019b      	lsls	r3, r3, #6
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	401a      	ands	r2, r3
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	2303      	movs	r3, #3
 8001a42:	4003      	ands	r3, r0
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a48:	481f      	ldr	r0, [pc, #124]	; (8001ac8 <__NVIC_SetPriority+0xd4>)
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b25b      	sxtb	r3, r3
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	430a      	orrs	r2, r1
 8001a54:	33c0      	adds	r3, #192	; 0xc0
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a5a:	e031      	b.n	8001ac0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <__NVIC_SetPriority+0xd8>)
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	0019      	movs	r1, r3
 8001a64:	230f      	movs	r3, #15
 8001a66:	400b      	ands	r3, r1
 8001a68:	3b08      	subs	r3, #8
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3306      	adds	r3, #6
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	18d3      	adds	r3, r2, r3
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1dfa      	adds	r2, r7, #7
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	400a      	ands	r2, r1
 8001a80:	00d2      	lsls	r2, r2, #3
 8001a82:	21ff      	movs	r1, #255	; 0xff
 8001a84:	4091      	lsls	r1, r2
 8001a86:	000a      	movs	r2, r1
 8001a88:	43d2      	mvns	r2, r2
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	019b      	lsls	r3, r3, #6
 8001a92:	22ff      	movs	r2, #255	; 0xff
 8001a94:	401a      	ands	r2, r3
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <__NVIC_SetPriority+0xd8>)
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	001c      	movs	r4, r3
 8001aac:	230f      	movs	r3, #15
 8001aae:	4023      	ands	r3, r4
 8001ab0:	3b08      	subs	r3, #8
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	3306      	adds	r3, #6
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	18c3      	adds	r3, r0, r3
 8001abc:	3304      	adds	r3, #4
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b003      	add	sp, #12
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <SysTick_Config+0x40>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e010      	b.n	8001b08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <SysTick_Config+0x44>)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	3a01      	subs	r2, #1
 8001aec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	2301      	movs	r3, #1
 8001af0:	425b      	negs	r3, r3
 8001af2:	2103      	movs	r1, #3
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff ff7d 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SysTick_Config+0x44>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <SysTick_Config+0x44>)
 8001b02:	2207      	movs	r2, #7
 8001b04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	00ffffff 	.word	0x00ffffff
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	210f      	movs	r1, #15
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	1c02      	adds	r2, r0, #0
 8001b28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	0011      	movs	r1, r2
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b004      	add	sp, #16
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	0002      	movs	r2, r0
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff ff33 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff ffaf 	bl	8001ad0 <SysTick_Config>
 8001b72:	0003      	movs	r3, r0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e14d      	b.n	8001e28 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d100      	bne.n	8001ba4 <HAL_GPIO_Init+0x28>
 8001ba2:	e13e      	b.n	8001e22 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d00b      	beq.n	8001bc4 <HAL_GPIO_Init+0x48>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d007      	beq.n	8001bc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb8:	2b11      	cmp	r3, #17
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b12      	cmp	r3, #18
 8001bc2:	d130      	bne.n	8001c26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	2201      	movs	r2, #1
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	43da      	mvns	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0xea>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	58d3      	ldr	r3, [r2, r3]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2207      	movs	r2, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2107      	movs	r1, #7
 8001c92:	400b      	ands	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	6939      	ldr	r1, [r7, #16]
 8001cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	401a      	ands	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_GPIO_Init+0x174>
 8001cee:	e098      	b.n	8001e22 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001cf0:	4a53      	ldr	r2, [pc, #332]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	589b      	ldr	r3, [r3, r2]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2203      	movs	r2, #3
 8001d02:	4013      	ands	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	220f      	movs	r2, #15
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	23a0      	movs	r3, #160	; 0xa0
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x1d6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_GPIO_Init+0x2c8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x1d2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a47      	ldr	r2, [pc, #284]	; (8001e48 <HAL_GPIO_Init+0x2cc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x1ce>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x2d0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x1ca>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <HAL_GPIO_Init+0x2d4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x1c6>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x1d8>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x1d8>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x1d8>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x1d8>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x1d8>
 8001d52:	2300      	movs	r3, #0
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	2103      	movs	r1, #3
 8001d58:	400a      	ands	r2, r1
 8001d5a:	00d2      	lsls	r2, r2, #3
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d64:	4936      	ldr	r1, [pc, #216]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d72:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	58d3      	ldr	r3, [r2, r3]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	025b      	lsls	r3, r3, #9
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d98:	4929      	ldr	r1, [pc, #164]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001da2:	2384      	movs	r3, #132	; 0x84
 8001da4:	58d3      	ldr	r3, [r2, r3]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	029b      	lsls	r3, r3, #10
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001dc8:	2284      	movs	r2, #132	; 0x84
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	035b      	lsls	r3, r3, #13
 8001de6:	4013      	ands	r3, r2
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	039b      	lsls	r3, r3, #14
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_GPIO_Init+0x2c4>)
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	1e13      	subs	r3, r2, #0
 8001e32:	d000      	beq.n	8001e36 <HAL_GPIO_Init+0x2ba>
 8001e34:	e6aa      	b.n	8001b8c <HAL_GPIO_Init+0x10>
  }
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b006      	add	sp, #24
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	40021800 	.word	0x40021800
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000800 	.word	0x50000800
 8001e4c:	50000c00 	.word	0x50000c00
 8001e50:	50001000 	.word	0x50001000

08001e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d11f      	bne.n	8001eb8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	189b      	adds	r3, r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4912      	ldr	r1, [pc, #72]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7fe f93c 	bl	8000104 <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e92:	e008      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e001      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e009      	b.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d0ed      	beq.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	fffff9ff 	.word	0xfffff9ff
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	000f4240 	.word	0x000f4240

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f000 fb56 	bl	8002594 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d100      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x20>
 8001ef2:	e07d      	b.n	8001ff0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ef4:	4bc3      	ldr	r3, [pc, #780]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2238      	movs	r2, #56	; 0x38
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001efe:	4bc1      	ldr	r3, [pc, #772]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2203      	movs	r2, #3
 8001f04:	4013      	ands	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_OscConfig+0x40>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1a:	4bba      	ldr	r3, [pc, #744]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	029b      	lsls	r3, r3, #10
 8001f22:	4013      	ands	r3, r2
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x11a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d15f      	bne.n	8001fee <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f000 fb30 	bl	8002594 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x7c>
 8001f40:	4bb0      	ldr	r3, [pc, #704]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4baf      	ldr	r3, [pc, #700]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0249      	lsls	r1, r1, #9
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e020      	b.n	8001f92 <HAL_RCC_OscConfig+0xbe>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	23a0      	movs	r3, #160	; 0xa0
 8001f56:	02db      	lsls	r3, r3, #11
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d10e      	bne.n	8001f7a <HAL_RCC_OscConfig+0xa6>
 8001f5c:	4ba9      	ldr	r3, [pc, #676]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4ba8      	ldr	r3, [pc, #672]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	02c9      	lsls	r1, r1, #11
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	4ba6      	ldr	r3, [pc, #664]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4ba5      	ldr	r3, [pc, #660]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0249      	lsls	r1, r1, #9
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e00b      	b.n	8001f92 <HAL_RCC_OscConfig+0xbe>
 8001f7a:	4ba2      	ldr	r3, [pc, #648]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4ba1      	ldr	r3, [pc, #644]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f80:	49a1      	ldr	r1, [pc, #644]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f82:	400a      	ands	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	4b9f      	ldr	r3, [pc, #636]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b9e      	ldr	r3, [pc, #632]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	499f      	ldr	r1, [pc, #636]	; (800220c <HAL_RCC_OscConfig+0x338>)
 8001f8e:	400a      	ands	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d014      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fc85 	bl	80008a8 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fc80 	bl	80008a8 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e2ee      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb6:	4b93      	ldr	r3, [pc, #588]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xd0>
 8001fc2:	e015      	b.n	8001ff0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fc70 	bl	80008a8 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fce:	f7fe fc6b 	bl	80008a8 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	; 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e2d9      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe0:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0xfa>
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d100      	bne.n	8001ffc <HAL_RCC_OscConfig+0x128>
 8001ffa:	e099      	b.n	8002130 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffc:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2238      	movs	r2, #56	; 0x38
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0x148>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d002      	beq.n	8002022 <HAL_RCC_OscConfig+0x14e>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d135      	bne.n	800208e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002022:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4013      	ands	r3, r2
 800202c:	d005      	beq.n	800203a <HAL_RCC_OscConfig+0x166>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e2ac      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b72      	ldr	r3, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a74      	ldr	r2, [pc, #464]	; (8002210 <HAL_RCC_OscConfig+0x33c>)
 8002040:	4013      	ands	r3, r2
 8002042:	0019      	movs	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	021a      	lsls	r2, r3, #8
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d112      	bne.n	800207c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_RCC_OscConfig+0x340>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800206a:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	2207      	movs	r2, #7
 8002072:	4013      	ands	r3, r2
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_RCC_OscConfig+0x344>)
 8002076:	40da      	lsrs	r2, r3
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x348>)
 800207a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x34c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7fe fbb5 	bl	80007f0 <HAL_InitTick>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d051      	beq.n	800212e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e282      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d030      	beq.n	80020f8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002096:	4b5b      	ldr	r3, [pc, #364]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5e      	ldr	r2, [pc, #376]	; (8002214 <HAL_RCC_OscConfig+0x340>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b55      	ldr	r3, [pc, #340]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0049      	lsls	r1, r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fbf6 	bl	80008a8 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fbf1 	bl	80008a8 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e25f      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4013      	ands	r3, r2
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_RCC_OscConfig+0x33c>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	021a      	lsls	r2, r3, #8
 80020f0:	4b44      	ldr	r3, [pc, #272]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e01b      	b.n	8002130 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020fe:	4949      	ldr	r1, [pc, #292]	; (8002224 <HAL_RCC_OscConfig+0x350>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe fbd0 	bl	80008a8 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7fe fbcb 	bl	80008a8 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e239      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002120:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4013      	ands	r3, r2
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x23a>
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2208      	movs	r2, #8
 8002136:	4013      	ands	r3, r2
 8002138:	d047      	beq.n	80021ca <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2238      	movs	r2, #56	; 0x38
 8002140:	4013      	ands	r3, r2
 8002142:	2b18      	cmp	r3, #24
 8002144:	d10a      	bne.n	800215c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d03c      	beq.n	80021ca <HAL_RCC_OscConfig+0x2f6>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d138      	bne.n	80021ca <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e21b      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d019      	beq.n	8002198 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800216a:	2101      	movs	r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fb9a 	bl	80008a8 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217a:	f7fe fb95 	bl	80008a8 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e203      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800218e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d0f1      	beq.n	800217a <HAL_RCC_OscConfig+0x2a6>
 8002196:	e018      	b.n	80021ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800219a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fb80 	bl	80008a8 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7fe fb7b 	bl	80008a8 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1e9      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d1f1      	bne.n	80021ae <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2204      	movs	r2, #4
 80021d0:	4013      	ands	r3, r2
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x302>
 80021d4:	e0c6      	b.n	8002364 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d6:	231f      	movs	r3, #31
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2238      	movs	r2, #56	; 0x38
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d11e      	bne.n	8002228 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d100      	bne.n	80021f6 <HAL_RCC_OscConfig+0x322>
 80021f4:	e0b6      	b.n	8002364 <HAL_RCC_OscConfig+0x490>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d000      	beq.n	8002200 <HAL_RCC_OscConfig+0x32c>
 80021fe:	e0b1      	b.n	8002364 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e1c7      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
 8002204:	40021000 	.word	0x40021000
 8002208:	fffeffff 	.word	0xfffeffff
 800220c:	fffbffff 	.word	0xfffbffff
 8002210:	ffff80ff 	.word	0xffff80ff
 8002214:	ffffc7ff 	.word	0xffffc7ff
 8002218:	00f42400 	.word	0x00f42400
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004
 8002224:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002228:	4bb8      	ldr	r3, [pc, #736]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800222a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	055b      	lsls	r3, r3, #21
 8002230:	4013      	ands	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x364>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x366>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d011      	beq.n	8002262 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4bb3      	ldr	r3, [pc, #716]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002242:	4bb2      	ldr	r3, [pc, #712]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0549      	lsls	r1, r1, #21
 8002248:	430a      	orrs	r2, r1
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
 800224c:	4baf      	ldr	r3, [pc, #700]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800224e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	055b      	lsls	r3, r3, #21
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800225a:	231f      	movs	r3, #31
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002262:	4bab      	ldr	r3, [pc, #684]	; (8002510 <HAL_RCC_OscConfig+0x63c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d11a      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800226e:	4ba8      	ldr	r3, [pc, #672]	; (8002510 <HAL_RCC_OscConfig+0x63c>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4ba7      	ldr	r3, [pc, #668]	; (8002510 <HAL_RCC_OscConfig+0x63c>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0049      	lsls	r1, r1, #1
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800227c:	f7fe fb14 	bl	80008a8 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fb0f 	bl	80008a8 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e17d      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002298:	4b9d      	ldr	r3, [pc, #628]	; (8002510 <HAL_RCC_OscConfig+0x63c>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x3e6>
 80022ac:	4b97      	ldr	r3, [pc, #604]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022b0:	4b96      	ldr	r3, [pc, #600]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	430a      	orrs	r2, r1
 80022b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x420>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x408>
 80022c2:	4b92      	ldr	r3, [pc, #584]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022c6:	4b91      	ldr	r3, [pc, #580]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022c8:	2104      	movs	r1, #4
 80022ca:	430a      	orrs	r2, r1
 80022cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80022ce:	4b8f      	ldr	r3, [pc, #572]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022d2:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022d4:	2101      	movs	r1, #1
 80022d6:	430a      	orrs	r2, r1
 80022d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0x420>
 80022dc:	4b8b      	ldr	r3, [pc, #556]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e0:	4b8a      	ldr	r3, [pc, #552]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022e2:	2101      	movs	r1, #1
 80022e4:	438a      	bics	r2, r1
 80022e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022e8:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ec:	4b87      	ldr	r3, [pc, #540]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80022ee:	2104      	movs	r1, #4
 80022f0:	438a      	bics	r2, r1
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d014      	beq.n	8002326 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fad4 	bl	80008a8 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	e009      	b.n	800231a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe facf 	bl	80008a8 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	4a80      	ldr	r2, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x640>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e13c      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x432>
 8002324:	e013      	b.n	800234e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7fe fabf 	bl	80008a8 <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800232e:	e009      	b.n	8002344 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7fe faba 	bl	80008a8 <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	4a76      	ldr	r2, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x640>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e127      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002344:	4b71      	ldr	r3, [pc, #452]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800234e:	231f      	movs	r3, #31
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002358:	4b6c      	ldr	r3, [pc, #432]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800235a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800235c:	4b6b      	ldr	r3, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800235e:	496e      	ldr	r1, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x644>)
 8002360:	400a      	ands	r2, r1
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2220      	movs	r2, #32
 800236a:	4013      	ands	r3, r2
 800236c:	d039      	beq.n	80023e2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01b      	beq.n	80023ae <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	03c9      	lsls	r1, r1, #15
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fa90 	bl	80008a8 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238e:	f7fe fa8b 	bl	80008a8 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0f9      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023a0:	4b5a      	ldr	r3, [pc, #360]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x4ba>
 80023ac:	e019      	b.n	80023e2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ae:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80023b4:	4959      	ldr	r1, [pc, #356]	; (800251c <HAL_RCC_OscConfig+0x648>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fa75 	bl	80008a8 <HAL_GetTick>
 80023be:	0003      	movs	r3, r0
 80023c0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c4:	f7fe fa70 	bl	80008a8 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0de      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80023d6:	4b4d      	ldr	r3, [pc, #308]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	4013      	ands	r3, r2
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d100      	bne.n	80023ec <HAL_RCC_OscConfig+0x518>
 80023ea:	e0d2      	b.n	8002592 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ec:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2238      	movs	r2, #56	; 0x38
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d100      	bne.n	80023fa <HAL_RCC_OscConfig+0x526>
 80023f8:	e081      	b.n	80024fe <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d156      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002408:	4945      	ldr	r1, [pc, #276]	; (8002520 <HAL_RCC_OscConfig+0x64c>)
 800240a:	400a      	ands	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fa4b 	bl	80008a8 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fa46 	bl	80008a8 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0b4      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	049b      	lsls	r3, r3, #18
 8002432:	4013      	ands	r3, r2
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_RCC_OscConfig+0x650>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	431a      	orrs	r2, r3
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002466:	430a      	orrs	r2, r1
 8002468:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b27      	ldr	r3, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0449      	lsls	r1, r1, #17
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCC_OscConfig+0x638>)
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0549      	lsls	r1, r1, #21
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fa0f 	bl	80008a8 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fa0a 	bl	80008a8 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e078      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	049b      	lsls	r3, r3, #18
 80024aa:	4013      	ands	r3, r2
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x5bc>
 80024ae:	e070      	b.n	8002592 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024b6:	491a      	ldr	r1, [pc, #104]	; (8002520 <HAL_RCC_OscConfig+0x64c>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024c2:	2103      	movs	r1, #3
 80024c4:	438a      	bics	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024ce:	4916      	ldr	r1, [pc, #88]	; (8002528 <HAL_RCC_OscConfig+0x654>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe f9e8 	bl	80008a8 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe f9e3 	bl	80008a8 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e051      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_OscConfig+0x638>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x60a>
 80024fc:	e049      	b.n	8002592 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e044      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
 8002514:	00001388 	.word	0x00001388
 8002518:	efffffff 	.word	0xefffffff
 800251c:	ffbfffff 	.word	0xffbfffff
 8002520:	feffffff 	.word	0xfeffffff
 8002524:	11c1808c 	.word	0x11c1808c
 8002528:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x6c8>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2203      	movs	r2, #3
 8002536:	401a      	ands	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	429a      	cmp	r2, r3
 800253e:	d126      	bne.n	800258e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2270      	movs	r2, #112	; 0x70
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d11f      	bne.n	800258e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	23fe      	movs	r3, #254	; 0xfe
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	401a      	ands	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d116      	bne.n	800258e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	23f8      	movs	r3, #248	; 0xf8
 8002564:	039b      	lsls	r3, r3, #14
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d10e      	bne.n	800258e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	23e0      	movs	r3, #224	; 0xe0
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	0f5b      	lsrs	r3, r3, #29
 8002584:	075a      	lsls	r2, r3, #29
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b008      	add	sp, #32
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0e9      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d91e      	bls.n	8002600 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2207      	movs	r2, #7
 80025c8:	4393      	bics	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d4:	f7fe f968 	bl	80008a8 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025dc:	e009      	b.n	80025f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025de:	f7fe f963 	bl	80008a8 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0ca      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d015      	beq.n	8002636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d006      	beq.n	8002622 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800261a:	21e0      	movs	r1, #224	; 0xe0
 800261c:	01c9      	lsls	r1, r1, #7
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_ClockConfig+0x1fc>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d057      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	4013      	ands	r3, r2
 8002652:	d12b      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e097      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d107      	bne.n	8002670 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d11f      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e08b      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4013      	ands	r3, r2
 8002682:	d113      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e07f      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d106      	bne.n	800269e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d108      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e074      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e06d      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2207      	movs	r2, #7
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe f8f2 	bl	80008a8 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7fe f8ed 	bl	80008a8 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e054      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ec      	bne.n	80026ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2207      	movs	r2, #7
 80026f6:	4013      	ands	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d21e      	bcs.n	800273c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2207      	movs	r2, #7
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002710:	f7fe f8ca 	bl	80008a8 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002718:	e009      	b.n	800272e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7fe f8c5 	bl	80008a8 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e02c      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_RCC_ClockConfig+0x200>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800275a:	f000 f829 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800275e:	0001      	movs	r1, r0
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	220f      	movs	r2, #15
 8002768:	401a      	ands	r2, r3
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x204>)
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	221f      	movs	r2, #31
 8002772:	4013      	ands	r3, r2
 8002774:	000a      	movs	r2, r1
 8002776:	40da      	lsrs	r2, r3
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x208>)
 800277a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x20c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe f835 	bl	80007f0 <HAL_InitTick>
 8002786:	0003      	movs	r3, r0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40022000 	.word	0x40022000
 8002794:	00001388 	.word	0x00001388
 8002798:	40021000 	.word	0x40021000
 800279c:	fffff0ff 	.word	0xfffff0ff
 80027a0:	ffff8fff 	.word	0xffff8fff
 80027a4:	08003d64 	.word	0x08003d64
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000004 	.word	0x20000004

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2238      	movs	r2, #56	; 0x38
 80027bc:	4013      	ands	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0adb      	lsrs	r3, r3, #11
 80027c6:	2207      	movs	r2, #7
 80027c8:	4013      	ands	r3, r2
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	0013      	movs	r3, r2
 80027d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	4835      	ldr	r0, [pc, #212]	; (80028ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80027d6:	f7fd fc95 	bl	8000104 <__udivsi3>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e05d      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2238      	movs	r2, #56	; 0x38
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e054      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2238      	movs	r2, #56	; 0x38
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d138      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	3301      	adds	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d10d      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4824      	ldr	r0, [pc, #144]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002820:	f7fd fc70 	bl	8000104 <__udivsi3>
 8002824:	0003      	movs	r3, r0
 8002826:	0019      	movs	r1, r3
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	227f      	movs	r2, #127	; 0x7f
 8002830:	4013      	ands	r3, r2
 8002832:	434b      	muls	r3, r1
 8002834:	617b      	str	r3, [r7, #20]
        break;
 8002836:	e00d      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	481c      	ldr	r0, [pc, #112]	; (80028ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800283c:	f7fd fc62 	bl	8000104 <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	0019      	movs	r1, r3
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	227f      	movs	r2, #127	; 0x7f
 800284c:	4013      	ands	r3, r2
 800284e:	434b      	muls	r3, r1
 8002850:	617b      	str	r3, [r7, #20]
        break;
 8002852:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0f5b      	lsrs	r3, r3, #29
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	3301      	adds	r3, #1
 8002860:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f7fd fc4d 	bl	8000104 <__udivsi3>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e015      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2238      	movs	r2, #56	; 0x38
 8002876:	4013      	ands	r3, r2
 8002878:	2b20      	cmp	r3, #32
 800287a:	d103      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e00b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2238      	movs	r2, #56	; 0x38
 800288a:	4013      	ands	r3, r2
 800288c:	2b18      	cmp	r3, #24
 800288e:	d103      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002890:	23fa      	movs	r3, #250	; 0xfa
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e001      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800289c:	693b      	ldr	r3, [r7, #16]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b006      	add	sp, #24
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028bc:	2313      	movs	r3, #19
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c4:	2312      	movs	r3, #18
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	029b      	lsls	r3, r3, #10
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028d8:	e0af      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2311      	movs	r3, #17
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	055b      	lsls	r3, r3, #21
 80028ea:	4013      	ands	r3, r2
 80028ec:	d111      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f2:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	0549      	lsls	r1, r1, #21
 80028f8:	430a      	orrs	r2, r1
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	055b      	lsls	r3, r3, #21
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2311      	movs	r3, #17
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b3c      	ldr	r3, [pc, #240]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0049      	lsls	r1, r1, #1
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002920:	f7fd ffc2 	bl	80008a8 <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002928:	e00b      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fd ffbd 	bl	80008a8 <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d904      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002938:	2313      	movs	r3, #19
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2203      	movs	r2, #3
 800293e:	701a      	strb	r2, [r3, #0]
        break;
 8002940:	e005      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d0ed      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800294e:	2313      	movs	r3, #19
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d15f      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800295a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800295c:	23c0      	movs	r3, #192	; 0xc0
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4013      	ands	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	d014      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800297a:	4013      	ands	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0249      	lsls	r1, r1, #9
 8002988:	430a      	orrs	r2, r1
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800298e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002992:	491f      	ldr	r1, [pc, #124]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002994:	400a      	ands	r2, r1
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	d016      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fd ff7f 	bl	80008a8 <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	e00c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fd ff7a 	bl	80008a8 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d904      	bls.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80029c0:	2313      	movs	r3, #19
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2203      	movs	r2, #3
 80029c6:	701a      	strb	r2, [r3, #0]
            break;
 80029c8:	e004      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	d0ed      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80029d4:	2313      	movs	r3, #19
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f2:	e017      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029f4:	2312      	movs	r3, #18
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2213      	movs	r2, #19
 80029fa:	18ba      	adds	r2, r7, r2
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e010      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	fffffcff 	.word	0xfffffcff
 8002a10:	fffeffff 	.word	0xfffeffff
 8002a14:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	2312      	movs	r3, #18
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2213      	movs	r2, #19
 8002a1e:	18ba      	adds	r2, r7, r2
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a24:	2311      	movs	r3, #17
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4bb6      	ldr	r3, [pc, #728]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a32:	4bb5      	ldr	r3, [pc, #724]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a34:	49b5      	ldr	r1, [pc, #724]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a44:	4bb0      	ldr	r3, [pc, #704]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4bad      	ldr	r3, [pc, #692]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d009      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a62:	4ba9      	ldr	r3, [pc, #676]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	220c      	movs	r2, #12
 8002a68:	4393      	bics	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4ba5      	ldr	r3, [pc, #660]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a80:	4ba1      	ldr	r3, [pc, #644]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	2230      	movs	r2, #48	; 0x30
 8002a86:	4393      	bics	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002a90:	430a      	orrs	r2, r1
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a9e:	4b9a      	ldr	r3, [pc, #616]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	4a9b      	ldr	r2, [pc, #620]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	4b96      	ldr	r3, [pc, #600]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	015b      	lsls	r3, r3, #5
 8002aba:	4013      	ands	r3, r2
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002abe:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	4a94      	ldr	r2, [pc, #592]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	4b8e      	ldr	r3, [pc, #568]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ade:	4b8a      	ldr	r3, [pc, #552]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	4a8d      	ldr	r2, [pc, #564]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4013      	ands	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002afe:	4b82      	ldr	r3, [pc, #520]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	4a86      	ldr	r2, [pc, #536]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	4b7e      	ldr	r3, [pc, #504]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1c:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	4a7f      	ldr	r2, [pc, #508]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2240      	movs	r2, #64	; 0x40
 8002b36:	4013      	ands	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b3a:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	4013      	ands	r3, r2
 8002b58:	d015      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b5a:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	0899      	lsrs	r1, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b66:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	05db      	lsls	r3, r3, #23
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b78:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	0249      	lsls	r1, r1, #9
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	039b      	lsls	r3, r3, #14
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bb2:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	4b51      	ldr	r3, [pc, #324]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	03db      	lsls	r3, r3, #15
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	0449      	lsls	r1, r1, #17
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	03db      	lsls	r3, r3, #15
 8002be8:	4013      	ands	r3, r2
 8002bea:	d016      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	4a4e      	ldr	r2, [pc, #312]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	045b      	lsls	r3, r3, #17
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0449      	lsls	r1, r1, #17
 8002c16:	430a      	orrs	r2, r1
 8002c18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4013      	ands	r3, r2
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	4393      	bics	r3, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d106      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	0249      	lsls	r1, r1, #9
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	019b      	lsls	r3, r3, #6
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d014      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	220c      	movs	r2, #12
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d106      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c78:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	0249      	lsls	r1, r1, #9
 8002c82:	430a      	orrs	r2, r1
 8002c84:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	045b      	lsls	r3, r3, #17
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	0449      	lsls	r1, r1, #17
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	049b      	lsls	r3, r3, #18
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d016      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002cf2:	2180      	movs	r1, #128	; 0x80
 8002cf4:	0449      	lsls	r1, r1, #17
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002cfa:	2312      	movs	r3, #18
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	efffffff 	.word	0xefffffff
 8002d10:	fffff3ff 	.word	0xfffff3ff
 8002d14:	fffffcff 	.word	0xfffffcff
 8002d18:	fff3ffff 	.word	0xfff3ffff
 8002d1c:	ffcfffff 	.word	0xffcfffff
 8002d20:	ffffcfff 	.word	0xffffcfff
 8002d24:	ffff3fff 	.word	0xffff3fff
 8002d28:	ffbfffff 	.word	0xffbfffff
 8002d2c:	feffffff 	.word	0xfeffffff

08002d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e04a      	b.n	8002dd8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223d      	movs	r2, #61	; 0x3d
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223c      	movs	r2, #60	; 0x3c
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7fd fc77 	bl	800064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223d      	movs	r2, #61	; 0x3d
 8002d62:	2102      	movs	r1, #2
 8002d64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	0019      	movs	r1, r3
 8002d70:	0010      	movs	r0, r2
 8002d72:	f000 fb3b 	bl	80033ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2248      	movs	r2, #72	; 0x48
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223e      	movs	r2, #62	; 0x3e
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	223f      	movs	r2, #63	; 0x3f
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2241      	movs	r2, #65	; 0x41
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2242      	movs	r2, #66	; 0x42
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2243      	movs	r2, #67	; 0x43
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2244      	movs	r2, #68	; 0x44
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2245      	movs	r2, #69	; 0x45
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2246      	movs	r2, #70	; 0x46
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2247      	movs	r2, #71	; 0x47
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223d      	movs	r2, #61	; 0x3d
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e04a      	b.n	8002e88 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223d      	movs	r2, #61	; 0x3d
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223c      	movs	r2, #60	; 0x3c
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f841 	bl	8002e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	223d      	movs	r2, #61	; 0x3d
 8002e12:	2102      	movs	r1, #2
 8002e14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	0019      	movs	r1, r3
 8002e20:	0010      	movs	r0, r2
 8002e22:	f000 fae3 	bl	80033ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2248      	movs	r2, #72	; 0x48
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223e      	movs	r2, #62	; 0x3e
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	223f      	movs	r2, #63	; 0x3f
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2240      	movs	r2, #64	; 0x40
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2241      	movs	r2, #65	; 0x41
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2242      	movs	r2, #66	; 0x42
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2243      	movs	r2, #67	; 0x43
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2244      	movs	r2, #68	; 0x44
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2245      	movs	r2, #69	; 0x45
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2246      	movs	r2, #70	; 0x46
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2247      	movs	r2, #71	; 0x47
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223d      	movs	r2, #61	; 0x3d
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d108      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x22>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	223e      	movs	r2, #62	; 0x3e
 8002eb4:	5c9b      	ldrb	r3, [r3, r2]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	1e5a      	subs	r2, r3, #1
 8002ebc:	4193      	sbcs	r3, r2
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e037      	b.n	8002f32 <HAL_TIM_PWM_Start+0x92>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d108      	bne.n	8002eda <HAL_TIM_PWM_Start+0x3a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	5c9b      	ldrb	r3, [r3, r2]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	4193      	sbcs	r3, r2
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e02b      	b.n	8002f32 <HAL_TIM_PWM_Start+0x92>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d108      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x52>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2240      	movs	r2, #64	; 0x40
 8002ee4:	5c9b      	ldrb	r3, [r3, r2]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	4193      	sbcs	r3, r2
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e01f      	b.n	8002f32 <HAL_TIM_PWM_Start+0x92>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d108      	bne.n	8002f0a <HAL_TIM_PWM_Start+0x6a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2241      	movs	r2, #65	; 0x41
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	4193      	sbcs	r3, r2
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e013      	b.n	8002f32 <HAL_TIM_PWM_Start+0x92>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d108      	bne.n	8002f22 <HAL_TIM_PWM_Start+0x82>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2242      	movs	r2, #66	; 0x42
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	1e5a      	subs	r2, r3, #1
 8002f1c:	4193      	sbcs	r3, r2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e007      	b.n	8002f32 <HAL_TIM_PWM_Start+0x92>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2243      	movs	r2, #67	; 0x43
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	4193      	sbcs	r3, r2
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e090      	b.n	800305c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Start+0xaa>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	223e      	movs	r2, #62	; 0x3e
 8002f44:	2102      	movs	r1, #2
 8002f46:	5499      	strb	r1, [r3, r2]
 8002f48:	e023      	b.n	8002f92 <HAL_TIM_PWM_Start+0xf2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Start+0xba>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223f      	movs	r2, #63	; 0x3f
 8002f54:	2102      	movs	r1, #2
 8002f56:	5499      	strb	r1, [r3, r2]
 8002f58:	e01b      	b.n	8002f92 <HAL_TIM_PWM_Start+0xf2>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0xca>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	2102      	movs	r1, #2
 8002f66:	5499      	strb	r1, [r3, r2]
 8002f68:	e013      	b.n	8002f92 <HAL_TIM_PWM_Start+0xf2>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0xda>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2241      	movs	r2, #65	; 0x41
 8002f74:	2102      	movs	r1, #2
 8002f76:	5499      	strb	r1, [r3, r2]
 8002f78:	e00b      	b.n	8002f92 <HAL_TIM_PWM_Start+0xf2>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Start+0xea>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2242      	movs	r2, #66	; 0x42
 8002f84:	2102      	movs	r1, #2
 8002f86:	5499      	strb	r1, [r3, r2]
 8002f88:	e003      	b.n	8002f92 <HAL_TIM_PWM_Start+0xf2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2243      	movs	r2, #67	; 0x43
 8002f8e:	2102      	movs	r1, #2
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6839      	ldr	r1, [r7, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fe10 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <HAL_TIM_PWM_Start+0x1c4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x128>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_TIM_PWM_Start+0x1c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x128>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <HAL_TIM_PWM_Start+0x1cc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_PWM_Start+0x128>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <HAL_TIM_PWM_Start+0x1d0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIM_PWM_Start+0x12c>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_TIM_PWM_Start+0x12e>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	0209      	lsls	r1, r1, #8
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_TIM_PWM_Start+0x1c4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d014      	beq.n	8003018 <HAL_TIM_PWM_Start+0x178>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	05db      	lsls	r3, r3, #23
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d00e      	beq.n	8003018 <HAL_TIM_PWM_Start+0x178>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <HAL_TIM_PWM_Start+0x1d4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_TIM_PWM_Start+0x178>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_TIM_PWM_Start+0x1d8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_TIM_PWM_Start+0x178>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_TIM_PWM_Start+0x1c8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d116      	bne.n	8003046 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_TIM_PWM_Start+0x1dc>)
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b06      	cmp	r3, #6
 8003028:	d016      	beq.n	8003058 <HAL_TIM_PWM_Start+0x1b8>
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	025b      	lsls	r3, r3, #9
 8003030:	429a      	cmp	r2, r3
 8003032:	d011      	beq.n	8003058 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	e008      	b.n	8003058 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2101      	movs	r1, #1
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e000      	b.n	800305a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	00010007 	.word	0x00010007

08003080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	223c      	movs	r2, #60	; 0x3c
 8003090:	5c9b      	ldrb	r3, [r3, r2]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003096:	2302      	movs	r3, #2
 8003098:	e0df      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x1da>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	223c      	movs	r2, #60	; 0x3c
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b14      	cmp	r3, #20
 80030a6:	d900      	bls.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x2a>
 80030a8:	e0d1      	b.n	800324e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	4b6d      	ldr	r3, [pc, #436]	; (8003264 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	0011      	movs	r1, r2
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fa1e 	bl	8003500 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2108      	movs	r1, #8
 80030d0:	430a      	orrs	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2104      	movs	r1, #4
 80030e0:	438a      	bics	r2, r1
 80030e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6999      	ldr	r1, [r3, #24]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	619a      	str	r2, [r3, #24]
      break;
 80030f6:	e0ab      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	0011      	movs	r1, r2
 8003100:	0018      	movs	r0, r3
 8003102:	f000 fa87 	bl	8003614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0109      	lsls	r1, r1, #4
 8003114:	430a      	orrs	r2, r1
 8003116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4951      	ldr	r1, [pc, #324]	; (8003268 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003124:	400a      	ands	r2, r1
 8003126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6999      	ldr	r1, [r3, #24]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	021a      	lsls	r2, r3, #8
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	619a      	str	r2, [r3, #24]
      break;
 800313c:	e088      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	0011      	movs	r1, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fae8 	bl	800371c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2108      	movs	r1, #8
 8003158:	430a      	orrs	r2, r1
 800315a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2104      	movs	r1, #4
 8003168:	438a      	bics	r2, r1
 800316a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69d9      	ldr	r1, [r3, #28]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	61da      	str	r2, [r3, #28]
      break;
 800317e:	e067      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	0011      	movs	r1, r2
 8003188:	0018      	movs	r0, r3
 800318a:	f000 fb4f 	bl	800382c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	0109      	lsls	r1, r1, #4
 800319c:	430a      	orrs	r2, r1
 800319e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	492f      	ldr	r1, [pc, #188]	; (8003268 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80031ac:	400a      	ands	r2, r1
 80031ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69d9      	ldr	r1, [r3, #28]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	021a      	lsls	r2, r3, #8
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	61da      	str	r2, [r3, #28]
      break;
 80031c4:	e044      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	0011      	movs	r1, r2
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 fb96 	bl	8003900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2108      	movs	r1, #8
 80031e0:	430a      	orrs	r2, r1
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2104      	movs	r1, #4
 80031f0:	438a      	bics	r2, r1
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003206:	e023      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fbd5 	bl	80039c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	0109      	lsls	r1, r1, #4
 8003224:	430a      	orrs	r2, r1
 8003226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	490d      	ldr	r1, [pc, #52]	; (8003268 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003234:	400a      	ands	r2, r1
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800324c:	e000      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800324e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	223c      	movs	r2, #60	; 0x3c
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b004      	add	sp, #16
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	08003da4 	.word	0x08003da4
 8003268:	fffffbff 	.word	0xfffffbff

0800326c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	5c9b      	ldrb	r3, [r3, r2]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIM_ConfigClockSource+0x18>
 8003280:	2302      	movs	r3, #2
 8003282:	e0ab      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x170>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223c      	movs	r2, #60	; 0x3c
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	223d      	movs	r2, #61	; 0x3d
 8003290:	2102      	movs	r1, #2
 8003292:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a51      	ldr	r2, [pc, #324]	; (80033e4 <HAL_TIM_ConfigClockSource+0x178>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a50      	ldr	r2, [pc, #320]	; (80033e8 <HAL_TIM_ConfigClockSource+0x17c>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d100      	bne.n	80032be <HAL_TIM_ConfigClockSource+0x52>
 80032bc:	e06b      	b.n	8003396 <HAL_TIM_ConfigClockSource+0x12a>
 80032be:	d80e      	bhi.n	80032de <HAL_TIM_ConfigClockSource+0x72>
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d100      	bne.n	80032c6 <HAL_TIM_ConfigClockSource+0x5a>
 80032c4:	e077      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x14a>
 80032c6:	d803      	bhi.n	80032d0 <HAL_TIM_ConfigClockSource+0x64>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d100      	bne.n	80032ce <HAL_TIM_ConfigClockSource+0x62>
 80032cc:	e073      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032ce:	e07c      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d100      	bne.n	80032d6 <HAL_TIM_ConfigClockSource+0x6a>
 80032d4:	e06f      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x14a>
 80032d6:	2b30      	cmp	r3, #48	; 0x30
 80032d8:	d100      	bne.n	80032dc <HAL_TIM_ConfigClockSource+0x70>
 80032da:	e06c      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80032dc:	e075      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80032de:	2b70      	cmp	r3, #112	; 0x70
 80032e0:	d00e      	beq.n	8003300 <HAL_TIM_ConfigClockSource+0x94>
 80032e2:	d804      	bhi.n	80032ee <HAL_TIM_ConfigClockSource+0x82>
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d036      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xea>
 80032e8:	2b60      	cmp	r3, #96	; 0x60
 80032ea:	d044      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80032ec:	e06d      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	0152      	lsls	r2, r2, #5
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d068      	beq.n	80033c8 <HAL_TIM_ConfigClockSource+0x15c>
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	0192      	lsls	r2, r2, #6
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d017      	beq.n	800332e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80032fe:	e064      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6899      	ldr	r1, [r3, #8]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f000 fc36 	bl	8003b80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2277      	movs	r2, #119	; 0x77
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	609a      	str	r2, [r3, #8]
      break;
 800332c:	e04d      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f000 fc1f 	bl	8003b80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	01c9      	lsls	r1, r1, #7
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
      break;
 8003354:	e039      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	001a      	movs	r2, r3
 8003364:	f000 fb90 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2150      	movs	r1, #80	; 0x50
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fbea 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003374:	e029      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	001a      	movs	r2, r3
 8003384:	f000 fbae 	bl	8003ae4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2160      	movs	r1, #96	; 0x60
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fbda 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003394:	e019      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	001a      	movs	r2, r3
 80033a4:	f000 fb70 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2140      	movs	r1, #64	; 0x40
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 fbca 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80033b4:	e009      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0019      	movs	r1, r3
 80033c0:	0010      	movs	r0, r2
 80033c2:	f000 fbc1 	bl	8003b48 <TIM_ITRx_SetConfig>
        break;
 80033c6:	e000      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80033c8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223d      	movs	r2, #61	; 0x3d
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223c      	movs	r2, #60	; 0x3c
 80033d6:	2100      	movs	r1, #0
 80033d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b004      	add	sp, #16
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	ffceff88 	.word	0xffceff88
 80033e8:	ffff00ff 	.word	0xffff00ff

080033ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a38      	ldr	r2, [pc, #224]	; (80034e0 <TIM_Base_SetConfig+0xf4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00c      	beq.n	800341e <TIM_Base_SetConfig+0x32>
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	429a      	cmp	r2, r3
 800340c:	d007      	beq.n	800341e <TIM_Base_SetConfig+0x32>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <TIM_Base_SetConfig+0xf8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_Base_SetConfig+0x32>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a33      	ldr	r2, [pc, #204]	; (80034e8 <TIM_Base_SetConfig+0xfc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d108      	bne.n	8003430 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2270      	movs	r2, #112	; 0x70
 8003422:	4393      	bics	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <TIM_Base_SetConfig+0xf4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d01c      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	05db      	lsls	r3, r3, #23
 800343e:	429a      	cmp	r2, r3
 8003440:	d017      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <TIM_Base_SetConfig+0xf8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <TIM_Base_SetConfig+0xfc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <TIM_Base_SetConfig+0x100>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <TIM_Base_SetConfig+0x104>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <TIM_Base_SetConfig+0x108>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x86>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <TIM_Base_SetConfig+0x10c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a21      	ldr	r2, [pc, #132]	; (80034fc <TIM_Base_SetConfig+0x110>)
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	4393      	bics	r3, r2
 800348a:	001a      	movs	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <TIM_Base_SetConfig+0xf4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0xde>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <TIM_Base_SetConfig+0x104>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0xde>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <TIM_Base_SetConfig+0x108>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0xde>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <TIM_Base_SetConfig+0x10c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d103      	bne.n	80034d2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	615a      	str	r2, [r3, #20]
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40002000 	.word	0x40002000
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800
 80034fc:	fffffcff 	.word	0xfffffcff

08003500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	2201      	movs	r2, #1
 8003510:	4393      	bics	r3, r2
 8003512:	001a      	movs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <TIM_OC1_SetConfig+0xf8>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2203      	movs	r2, #3
 8003536:	4393      	bics	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2202      	movs	r2, #2
 8003548:	4393      	bics	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <TIM_OC1_SetConfig+0xfc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_OC1_SetConfig+0x76>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <TIM_OC1_SetConfig+0x100>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_OC1_SetConfig+0x76>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <TIM_OC1_SetConfig+0x104>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_OC1_SetConfig+0x76>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <TIM_OC1_SetConfig+0x108>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10c      	bne.n	8003590 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2208      	movs	r2, #8
 800357a:	4393      	bics	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2204      	movs	r2, #4
 800358c:	4393      	bics	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <TIM_OC1_SetConfig+0xfc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_OC1_SetConfig+0xb0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_OC1_SetConfig+0x100>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_OC1_SetConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a18      	ldr	r2, [pc, #96]	; (8003604 <TIM_OC1_SetConfig+0x104>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_OC1_SetConfig+0xb0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a17      	ldr	r2, [pc, #92]	; (8003608 <TIM_OC1_SetConfig+0x108>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d111      	bne.n	80035d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <TIM_OC1_SetConfig+0x10c>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4a15      	ldr	r2, [pc, #84]	; (8003610 <TIM_OC1_SetConfig+0x110>)
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b006      	add	sp, #24
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	fffeff8f 	.word	0xfffeff8f
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40014000 	.word	0x40014000
 8003604:	40014400 	.word	0x40014400
 8003608:	40014800 	.word	0x40014800
 800360c:	fffffeff 	.word	0xfffffeff
 8003610:	fffffdff 	.word	0xfffffdff

08003614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	2210      	movs	r2, #16
 8003624:	4393      	bics	r3, r2
 8003626:	001a      	movs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <TIM_OC2_SetConfig+0xe8>)
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <TIM_OC2_SetConfig+0xec>)
 800364a:	4013      	ands	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2220      	movs	r2, #32
 800365e:	4393      	bics	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <TIM_OC2_SetConfig+0xf0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10d      	bne.n	8003692 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	4393      	bics	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	4393      	bics	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <TIM_OC2_SetConfig+0xf0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00b      	beq.n	80036b2 <TIM_OC2_SetConfig+0x9e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <TIM_OC2_SetConfig+0xf4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d007      	beq.n	80036b2 <TIM_OC2_SetConfig+0x9e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <TIM_OC2_SetConfig+0xf8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d003      	beq.n	80036b2 <TIM_OC2_SetConfig+0x9e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <TIM_OC2_SetConfig+0xfc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4a17      	ldr	r2, [pc, #92]	; (8003714 <TIM_OC2_SetConfig+0x100>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a16      	ldr	r2, [pc, #88]	; (8003718 <TIM_OC2_SetConfig+0x104>)
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b006      	add	sp, #24
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	feff8fff 	.word	0xfeff8fff
 8003700:	fffffcff 	.word	0xfffffcff
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	fffffbff 	.word	0xfffffbff
 8003718:	fffff7ff 	.word	0xfffff7ff

0800371c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a35      	ldr	r2, [pc, #212]	; (8003800 <TIM_OC3_SetConfig+0xe4>)
 800372c:	401a      	ands	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <TIM_OC3_SetConfig+0xe8>)
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2203      	movs	r2, #3
 8003750:	4393      	bics	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <TIM_OC3_SetConfig+0xec>)
 8003762:	4013      	ands	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <TIM_OC3_SetConfig+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10d      	bne.n	8003796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <TIM_OC3_SetConfig+0xf4>)
 800377e:	4013      	ands	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_OC3_SetConfig+0xf8>)
 8003792:	4013      	ands	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <TIM_OC3_SetConfig+0xf0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00b      	beq.n	80037b6 <TIM_OC3_SetConfig+0x9a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <TIM_OC3_SetConfig+0xfc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <TIM_OC3_SetConfig+0x9a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <TIM_OC3_SetConfig+0x100>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC3_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <TIM_OC3_SetConfig+0x104>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d113      	bne.n	80037de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <TIM_OC3_SetConfig+0x108>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <TIM_OC3_SetConfig+0x10c>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	621a      	str	r2, [r3, #32]
}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	fffffeff 	.word	0xfffffeff
 8003804:	fffeff8f 	.word	0xfffeff8f
 8003808:	fffffdff 	.word	0xfffffdff
 800380c:	40012c00 	.word	0x40012c00
 8003810:	fffff7ff 	.word	0xfffff7ff
 8003814:	fffffbff 	.word	0xfffffbff
 8003818:	40014000 	.word	0x40014000
 800381c:	40014400 	.word	0x40014400
 8003820:	40014800 	.word	0x40014800
 8003824:	ffffefff 	.word	0xffffefff
 8003828:	ffffdfff 	.word	0xffffdfff

0800382c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a28      	ldr	r2, [pc, #160]	; (80038dc <TIM_OC4_SetConfig+0xb0>)
 800383c:	401a      	ands	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <TIM_OC4_SetConfig+0xb4>)
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <TIM_OC4_SetConfig+0xb8>)
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <TIM_OC4_SetConfig+0xbc>)
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a19      	ldr	r2, [pc, #100]	; (80038ec <TIM_OC4_SetConfig+0xc0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_OC4_SetConfig+0x78>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <TIM_OC4_SetConfig+0xc4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_OC4_SetConfig+0x78>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <TIM_OC4_SetConfig+0xc8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC4_SetConfig+0x78>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC4_SetConfig+0xcc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d109      	bne.n	80038b8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC4_SetConfig+0xd0>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b006      	add	sp, #24
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	ffffefff 	.word	0xffffefff
 80038e0:	feff8fff 	.word	0xfeff8fff
 80038e4:	fffffcff 	.word	0xfffffcff
 80038e8:	ffffdfff 	.word	0xffffdfff
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800
 80038fc:	ffffbfff 	.word	0xffffbfff

08003900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <TIM_OC5_SetConfig+0xa4>)
 8003910:	401a      	ands	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <TIM_OC5_SetConfig+0xa8>)
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <TIM_OC5_SetConfig+0xac>)
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <TIM_OC5_SetConfig+0xb0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_OC5_SetConfig+0x6e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <TIM_OC5_SetConfig+0xb4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_OC5_SetConfig+0x6e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <TIM_OC5_SetConfig+0xb8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_OC5_SetConfig+0x6e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <TIM_OC5_SetConfig+0xbc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d109      	bne.n	8003982 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <TIM_OC5_SetConfig+0xa4>)
 8003972:	4013      	ands	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b006      	add	sp, #24
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	fffeffff 	.word	0xfffeffff
 80039a8:	fffeff8f 	.word	0xfffeff8f
 80039ac:	fffdffff 	.word	0xfffdffff
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <TIM_OC6_SetConfig+0xa8>)
 80039d0:	401a      	ands	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <TIM_OC6_SetConfig+0xac>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <TIM_OC6_SetConfig+0xb0>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	051b      	lsls	r3, r3, #20
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <TIM_OC6_SetConfig+0xb4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_OC6_SetConfig+0x70>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <TIM_OC6_SetConfig+0xb8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_OC6_SetConfig+0x70>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <TIM_OC6_SetConfig+0xbc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_OC6_SetConfig+0x70>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <TIM_OC6_SetConfig+0xc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d109      	bne.n	8003a44 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <TIM_OC6_SetConfig+0xc4>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	029b      	lsls	r3, r3, #10
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	621a      	str	r2, [r3, #32]
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b006      	add	sp, #24
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	ffefffff 	.word	0xffefffff
 8003a6c:	feff8fff 	.word	0xfeff8fff
 8003a70:	ffdfffff 	.word	0xffdfffff
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800
 8003a84:	fffbffff 	.word	0xfffbffff

08003a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	22f0      	movs	r2, #240	; 0xf0
 8003ab2:	4393      	bics	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b006      	add	sp, #24
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4393      	bics	r3, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <TIM_TI2_ConfigInputStage+0x60>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	031b      	lsls	r3, r3, #12
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	22a0      	movs	r2, #160	; 0xa0
 8003b20:	4393      	bics	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b006      	add	sp, #24
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	ffff0fff 	.word	0xffff0fff

08003b48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <TIM_ITRx_SetConfig+0x34>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	2207      	movs	r2, #7
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	ffcfff8f 	.word	0xffcfff8f

08003b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <TIM_ETR_SetConfig+0x3c>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b006      	add	sp, #24
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	ffff00ff 	.word	0xffff00ff

08003bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	221f      	movs	r2, #31
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	43d2      	mvns	r2, r2
 8003be2:	401a      	ands	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	211f      	movs	r1, #31
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4099      	lsls	r1, r3
 8003bf6:	000b      	movs	r3, r1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b006      	add	sp, #24
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	223c      	movs	r2, #60	; 0x3c
 8003c16:	5c9b      	ldrb	r3, [r3, r2]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e05a      	b.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223c      	movs	r2, #60	; 0x3c
 8003c24:	2101      	movs	r1, #1
 8003c26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	223d      	movs	r2, #61	; 0x3d
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a25      	ldr	r2, [pc, #148]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2270      	movs	r2, #112	; 0x70
 8003c60:	4393      	bics	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d014      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	4393      	bics	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	223d      	movs	r2, #61	; 0x3d
 8003cc8:	2101      	movs	r1, #1
 8003cca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	223c      	movs	r2, #60	; 0x3c
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	ff0fffff 	.word	0xff0fffff
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40014000 	.word	0x40014000

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	4d0c      	ldr	r5, [pc, #48]	; (8003d2c <__libc_init_array+0x38>)
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1b64      	subs	r4, r4, r5
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a6      	cmp	r6, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	2600      	movs	r6, #0
 8003d06:	f000 f821 	bl	8003d4c <_init>
 8003d0a:	4d0a      	ldr	r5, [pc, #40]	; (8003d34 <__libc_init_array+0x40>)
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <__libc_init_array+0x44>)
 8003d0e:	1b64      	subs	r4, r4, r5
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a6      	cmp	r6, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	00b3      	lsls	r3, r6, #2
 8003d1a:	58eb      	ldr	r3, [r5, r3]
 8003d1c:	4798      	blx	r3
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	00b3      	lsls	r3, r6, #2
 8003d24:	58eb      	ldr	r3, [r5, r3]
 8003d26:	4798      	blx	r3
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08003df8 	.word	0x08003df8
 8003d30:	08003df8 	.word	0x08003df8
 8003d34:	08003df8 	.word	0x08003df8
 8003d38:	08003dfc 	.word	0x08003dfc

08003d3c <memset>:
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	1812      	adds	r2, r2, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	7019      	strb	r1, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <_init>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr

08003d58 <_fini>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr
