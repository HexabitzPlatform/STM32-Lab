
s7_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003730  08003730  00013730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800380c  0800380c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003814  08003814  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800381c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  0800388c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800388c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b733  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a66  00000000  00000000  0002b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002db00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b58c  00000000  00000000  0002e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2fc  00000000  00000000  000498ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b07bd  00000000  00000000  00054ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002210  00000000  00000000  001053b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003718 	.word	0x08003718

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003718 	.word	0x08003718

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:


static void MX_USART2_UART_Init(void);

int main(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0



	char  MSG[29];
	uint8_t X = 0;
 8000636:	231f      	movs	r3, #31
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  HAL_Init();
 800063e:	f000 fa0f 	bl	8000a60 <HAL_Init>
  SystemClock_Config();
 8000642:	f000 f82b 	bl	800069c <SystemClock_Config>
  MX_GPIO_Init();
 8000646:	f000 f8bf 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f86f 	bl	800072c <MX_USART2_UART_Init>

  while (1)
  {
	  sprintf(MSG, "Hello Dudes! Tracing X = %d \n", X);
 800064e:	241f      	movs	r4, #31
 8000650:	193b      	adds	r3, r7, r4
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	490e      	ldr	r1, [pc, #56]	; (8000690 <main+0x60>)
 8000656:	003b      	movs	r3, r7
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fbf3 	bl	8002e44 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) MSG, sizeof(MSG), HAL_MAX_DELAY);
 800065e:	2301      	movs	r3, #1
 8000660:	425b      	negs	r3, r3
 8000662:	0039      	movs	r1, r7
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <main+0x64>)
 8000666:	221d      	movs	r2, #29
 8000668:	f001 fce4 	bl	8002034 <HAL_UART_Transmit>
     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <main+0x68>)
 8000672:	0019      	movs	r1, r3
 8000674:	0010      	movs	r0, r2
 8000676:	f000 fcda 	bl	800102e <HAL_GPIO_TogglePin>

     HAL_Delay(500);
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fa74 	bl	8000b6c <HAL_Delay>
     X++;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	193b      	adds	r3, r7, r4
 800068a:	3201      	adds	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
	  sprintf(MSG, "Hello Dudes! Tracing X = %d \n", X);
 800068e:	e7de      	b.n	800064e <main+0x1e>
 8000690:	08003730 	.word	0x08003730
 8000694:	2000008c 	.word	0x2000008c
 8000698:	50000400 	.word	0x50000400

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b095      	sub	sp, #84	; 0x54
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	2414      	movs	r4, #20
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	233c      	movs	r3, #60	; 0x3c
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f002 fbc1 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2310      	movs	r3, #16
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f002 fbba 	bl	8002e34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fccd 	bl	8001064 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2202      	movs	r2, #2
 80006ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fd05 	bl	80010fc <HAL_RCC_OscConfig>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f6:	f000 f8ab 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2100      	movs	r1, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f850 	bl	80017bc <HAL_RCC_ClockConfig>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000720:	f000 f896 	bl	8000850 <Error_Handler>
  }
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b015      	add	sp, #84	; 0x54
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <MX_USART2_UART_Init+0x98>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000738:	22e1      	movs	r2, #225	; 0xe1
 800073a:	0252      	lsls	r2, r2, #9
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fc06 	bl	8001f88 <HAL_UART_Init>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f866 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000786:	2100      	movs	r1, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fa49 	bl	8002c20 <HAL_UARTEx_SetTxFifoThreshold>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000792:	f000 f85d 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000798:	2100      	movs	r1, #0
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fa80 	bl	8002ca0 <HAL_UARTEx_SetRxFifoThreshold>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f854 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 f9fe 	bl	8002bac <HAL_UARTEx_DisableFifoMode>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f84c 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	240c      	movs	r4, #12
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2314      	movs	r3, #20
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f002 fb2b 	bl	8002e34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_GPIO_Init+0x80>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0x80>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_GPIO_Init+0x80>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_GPIO_Init+0x80>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_GPIO_Init+0x80>)
 80007fc:	2102      	movs	r1, #2
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_GPIO_Init+0x80>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	2202      	movs	r2, #2
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_GPIO_Init+0x84>)
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fbed 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081a:	0021      	movs	r1, r4
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	187b      	adds	r3, r7, r1
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <MX_GPIO_Init+0x84>)
 8000838:	0019      	movs	r1, r3
 800083a:	0010      	movs	r0, r2
 800083c:	f000 fa6e 	bl	8000d1c <HAL_GPIO_Init>

}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b009      	add	sp, #36	; 0x24
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	50000400 	.word	0x50000400

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	0549      	lsls	r1, r1, #21
 8000884:	430a      	orrs	r2, r1
 8000886:	63da      	str	r2, [r3, #60]	; 0x3c
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_MspInit+0x44>)
 800088a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	055b      	lsls	r3, r3, #21
 8000890:	4013      	ands	r3, r2
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b09d      	sub	sp, #116	; 0x74
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	235c      	movs	r3, #92	; 0x5c
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f002 fabc 	bl	8002e34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	2410      	movs	r4, #16
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	0018      	movs	r0, r3
 80008c2:	234c      	movs	r3, #76	; 0x4c
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f002 fab4 	bl	8002e34 <memset>
  if(huart->Instance==USART2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <HAL_UART_MspInit+0xb8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d13e      	bne.n	8000954 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2202      	movs	r2, #2
 80008da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 f913 	bl	8001b10 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008ee:	f7ff ffaf 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_UART_MspInit+0xbc>)
 80008f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_UART_MspInit+0xbc>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0289      	lsls	r1, r1, #10
 80008fc:	430a      	orrs	r2, r1
 80008fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_UART_MspInit+0xbc>)
 8000902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	029b      	lsls	r3, r3, #10
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_UART_MspInit+0xbc>)
 8000910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_UART_MspInit+0xbc>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	635a      	str	r2, [r3, #52]	; 0x34
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0xbc>)
 800091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000926:	215c      	movs	r1, #92	; 0x5c
 8000928:	187b      	adds	r3, r7, r1
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2202      	movs	r2, #2
 8000932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	187a      	adds	r2, r7, r1
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 f9e4 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b01d      	add	sp, #116	; 0x74
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40004400 	.word	0x40004400
 8000960:	40021000 	.word	0x40021000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f8d4 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fa0c 	bl	8002de0 <__errno>
 80009c8:	0003      	movs	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	425b      	negs	r3, r3
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	18d2      	adds	r2, r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b006      	add	sp, #24
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20024000 	.word	0x20024000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000120 	.word	0x20000120
 80009fc:	20000138 	.word	0x20000138

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a10:	f7ff fff6 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3a:	f002 f9d7 	bl	8002dec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a3e:	f7ff fdf7 	bl	8000630 <main>

08000a42 <LoopForever>:

LoopForever:
  b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a50:	0800381c 	.word	0x0800381c
  ldr r2, =_sbss
 8000a54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a58:	20000138 	.word	0x20000138

08000a5c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_COMP_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_Init+0x3c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_Init+0x3c>)
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	0049      	lsls	r1, r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f810 	bl	8000aa0 <HAL_InitTick>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e001      	b.n	8000a90 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fee6 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <HAL_InitTick+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d02b      	beq.n	8000b10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_InitTick+0x8c>)
 8000aba:	681c      	ldr	r4, [r3, #0]
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_InitTick+0x88>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	23fa      	movs	r3, #250	; 0xfa
 8000ac4:	0098      	lsls	r0, r3, #2
 8000ac6:	f7ff fb27 	bl	8000118 <__udivsi3>
 8000aca:	0003      	movs	r3, r0
 8000acc:	0019      	movs	r1, r3
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f7ff fb22 	bl	8000118 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f913 	bl	8000d02 <HAL_SYSTICK_Config>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d112      	bne.n	8000b06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d80a      	bhi.n	8000afc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	425b      	negs	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f8f2 	bl	8000cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_InitTick+0x90>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	e00d      	b.n	8000b18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e008      	b.n	8000b18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b06:	230f      	movs	r3, #15
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e003      	b.n	8000b18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	781b      	ldrb	r3, [r3, #0]
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b005      	add	sp, #20
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	18d2      	adds	r2, r2, r3
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_IncTick+0x20>)
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000124 	.word	0x20000124

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <HAL_GetTick+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000124 	.word	0x20000124

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff fff0 	bl	8000b58 <HAL_GetTick>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	189b      	adds	r3, r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	f7ff ffe0 	bl	8000b58 <HAL_GetTick>
 8000b98:	0002      	movs	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc8:	d828      	bhi.n	8000c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bca:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <__NVIC_SetPriority+0xd4>)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	589b      	ldr	r3, [r3, r2]
 8000bda:	1dfa      	adds	r2, r7, #7
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	0011      	movs	r1, r2
 8000be0:	2203      	movs	r2, #3
 8000be2:	400a      	ands	r2, r1
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	21ff      	movs	r1, #255	; 0xff
 8000be8:	4091      	lsls	r1, r2
 8000bea:	000a      	movs	r2, r1
 8000bec:	43d2      	mvns	r2, r2
 8000bee:	401a      	ands	r2, r3
 8000bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	019b      	lsls	r3, r3, #6
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2303      	movs	r3, #3
 8000c02:	4003      	ands	r3, r0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	481f      	ldr	r0, [pc, #124]	; (8000c88 <__NVIC_SetPriority+0xd4>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	430a      	orrs	r2, r1
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c1a:	e031      	b.n	8000c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0019      	movs	r1, r3
 8000c24:	230f      	movs	r3, #15
 8000c26:	400b      	ands	r3, r1
 8000c28:	3b08      	subs	r3, #8
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3306      	adds	r3, #6
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	3304      	adds	r3, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <__NVIC_SetPriority+0xd8>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001c      	movs	r4, r3
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	4023      	ands	r3, r4
 8000c70:	3b08      	subs	r3, #8
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	430a      	orrs	r2, r1
 8000c76:	3306      	adds	r3, #6
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	18c3      	adds	r3, r0, r3
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b003      	add	sp, #12
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	045b      	lsls	r3, r3, #17
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d301      	bcc.n	8000ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e010      	b.n	8000cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <SysTick_Config+0x44>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	3a01      	subs	r2, #1
 8000cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff ff7c 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x44>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x44>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	1c02      	adds	r2, r0, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffbf 	bl	8000c90 <SysTick_Config>
 8000d12:	0003      	movs	r3, r0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e14d      	b.n	8000fc8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d100      	bne.n	8000d44 <HAL_GPIO_Init+0x28>
 8000d42:	e13e      	b.n	8000fc2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d005      	beq.n	8000d5c <HAL_GPIO_Init+0x40>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2203      	movs	r2, #3
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d130      	bne.n	8000dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	0013      	movs	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d92:	2201      	movs	r2, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	2201      	movs	r2, #1
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d017      	beq.n	8000dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2203      	movs	r2, #3
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d123      	bne.n	8000e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	58d3      	ldr	r3, [r2, r3]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2207      	movs	r2, #7
 8000e18:	4013      	ands	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	43da      	mvns	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2107      	movs	r1, #7
 8000e32:	400b      	ands	r3, r1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	6939      	ldr	r1, [r7, #16]
 8000e4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	029b      	lsls	r3, r3, #10
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d100      	bne.n	8000e90 <HAL_GPIO_Init+0x174>
 8000e8e:	e098      	b.n	8000fc2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e90:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3318      	adds	r3, #24
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	589b      	ldr	r3, [r3, r2]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	43da      	mvns	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	23a0      	movs	r3, #160	; 0xa0
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x1d6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <HAL_GPIO_Init+0x2c8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x1d2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a47      	ldr	r2, [pc, #284]	; (8000fe8 <HAL_GPIO_Init+0x2cc>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x1ce>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a46      	ldr	r2, [pc, #280]	; (8000fec <HAL_GPIO_Init+0x2d0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x1ca>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a45      	ldr	r2, [pc, #276]	; (8000ff0 <HAL_GPIO_Init+0x2d4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x1c6>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e008      	b.n	8000ef4 <HAL_GPIO_Init+0x1d8>
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x1d8>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x1d8>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x1d8>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x1d8>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	400a      	ands	r2, r1
 8000efa:	00d2      	lsls	r2, r2, #3
 8000efc:	4093      	lsls	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f04:	4936      	ldr	r1, [pc, #216]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3318      	adds	r3, #24
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f12:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	035b      	lsls	r3, r3, #13
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	43da      	mvns	r2, r3
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	039b      	lsls	r3, r3, #14
 8000f54:	4013      	ands	r3, r2
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f68:	2384      	movs	r3, #132	; 0x84
 8000f6a:	58d3      	ldr	r3, [r2, r3]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	029b      	lsls	r3, r3, #10
 8000f80:	4013      	ands	r3, r2
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f8c:	4914      	ldr	r1, [pc, #80]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f8e:	2284      	movs	r2, #132	; 0x84
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	58d3      	ldr	r3, [r2, r3]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fba:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <HAL_GPIO_Init+0x2c4>)
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	40da      	lsrs	r2, r3
 8000fd0:	1e13      	subs	r3, r2, #0
 8000fd2:	d000      	beq.n	8000fd6 <HAL_GPIO_Init+0x2ba>
 8000fd4:	e6aa      	b.n	8000d2c <HAL_GPIO_Init+0x10>
  }
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b006      	add	sp, #24
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	50000400 	.word	0x50000400
 8000fe8:	50000800 	.word	0x50000800
 8000fec:	50000c00 	.word	0x50000c00
 8000ff0:	50001000 	.word	0x50001000

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	0008      	movs	r0, r1
 8000ffe:	0011      	movs	r1, r2
 8001000:	1cbb      	adds	r3, r7, #2
 8001002:	1c02      	adds	r2, r0, #0
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	1c7b      	adds	r3, r7, #1
 8001008:	1c0a      	adds	r2, r1, #0
 800100a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	1c7b      	adds	r3, r7, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001014:	1cbb      	adds	r3, r7, #2
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101e:	1cbb      	adds	r3, r7, #2
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	000a      	movs	r2, r1
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	041a      	lsls	r2, r3, #16
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	1cb9      	adds	r1, r7, #2
 8001052:	8809      	ldrh	r1, [r1, #0]
 8001054:	400b      	ands	r3, r1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b004      	add	sp, #16
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001072:	4013      	ands	r3, r2
 8001074:	0019      	movs	r1, r3
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	429a      	cmp	r2, r3
 8001086:	d11f      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	0013      	movs	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	189b      	adds	r3, r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4912      	ldr	r1, [pc, #72]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff f83e 	bl	8000118 <__udivsi3>
 800109c:	0003      	movs	r3, r0
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a2:	e008      	b.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	e001      	b.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e009      	b.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	401a      	ands	r2, r3
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d0ed      	beq.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40007000 	.word	0x40007000
 80010d8:	fffff9ff 	.word	0xfffff9ff
 80010dc:	20000000 	.word	0x20000000
 80010e0:	000f4240 	.word	0x000f4240

080010e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	23e0      	movs	r3, #224	; 0xe0
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	4013      	ands	r3, r2
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	f000 fb50 	bl	80017b0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	4013      	ands	r3, r2
 8001118:	d100      	bne.n	800111c <HAL_RCC_OscConfig+0x20>
 800111a:	e07c      	b.n	8001216 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800111c:	4bc3      	ldr	r3, [pc, #780]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2238      	movs	r2, #56	; 0x38
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001126:	4bc1      	ldr	r3, [pc, #772]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2203      	movs	r2, #3
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d102      	bne.n	800113c <HAL_RCC_OscConfig+0x40>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d002      	beq.n	8001142 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2b08      	cmp	r3, #8
 8001140:	d10b      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	4bba      	ldr	r3, [pc, #744]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	029b      	lsls	r3, r3, #10
 800114a:	4013      	ands	r3, r2
 800114c:	d062      	beq.n	8001214 <HAL_RCC_OscConfig+0x118>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d15e      	bne.n	8001214 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e32a      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	429a      	cmp	r2, r3
 8001164:	d107      	bne.n	8001176 <HAL_RCC_OscConfig+0x7a>
 8001166:	4bb1      	ldr	r3, [pc, #708]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4bb0      	ldr	r3, [pc, #704]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	0249      	lsls	r1, r1, #9
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e020      	b.n	80011b8 <HAL_RCC_OscConfig+0xbc>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	02db      	lsls	r3, r3, #11
 800117e:	429a      	cmp	r2, r3
 8001180:	d10e      	bne.n	80011a0 <HAL_RCC_OscConfig+0xa4>
 8001182:	4baa      	ldr	r3, [pc, #680]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4ba9      	ldr	r3, [pc, #676]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	02c9      	lsls	r1, r1, #11
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4ba6      	ldr	r3, [pc, #664]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4ba5      	ldr	r3, [pc, #660]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0249      	lsls	r1, r1, #9
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xbc>
 80011a0:	4ba2      	ldr	r3, [pc, #648]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4ba1      	ldr	r3, [pc, #644]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80011a6:	49a2      	ldr	r1, [pc, #648]	; (8001430 <HAL_RCC_OscConfig+0x334>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	4b9f      	ldr	r3, [pc, #636]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b9e      	ldr	r3, [pc, #632]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80011b2:	49a0      	ldr	r1, [pc, #640]	; (8001434 <HAL_RCC_OscConfig+0x338>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d014      	beq.n	80011ea <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fcca 	bl	8000b58 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fcc5 	bl	8000b58 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e2e9      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	4013      	ands	r3, r2
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0xce>
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fcb5 	bl	8000b58 <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fcb0 	bl	8000b58 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e2d4      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001206:	4b89      	ldr	r3, [pc, #548]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0xf8>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d100      	bne.n	8001222 <HAL_RCC_OscConfig+0x126>
 8001220:	e099      	b.n	8001356 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001222:	4b82      	ldr	r3, [pc, #520]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2238      	movs	r2, #56	; 0x38
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800122c:	4b7f      	ldr	r3, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b10      	cmp	r3, #16
 800123a:	d102      	bne.n	8001242 <HAL_RCC_OscConfig+0x146>
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d002      	beq.n	8001248 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d135      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001248:	4b78      	ldr	r3, [pc, #480]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4013      	ands	r3, r2
 8001252:	d005      	beq.n	8001260 <HAL_RCC_OscConfig+0x164>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e2a7      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b72      	ldr	r3, [pc, #456]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a74      	ldr	r2, [pc, #464]	; (8001438 <HAL_RCC_OscConfig+0x33c>)
 8001266:	4013      	ands	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	021a      	lsls	r2, r3, #8
 8001270:	4b6e      	ldr	r3, [pc, #440]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001272:	430a      	orrs	r2, r1
 8001274:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d112      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800127c:	4b6b      	ldr	r3, [pc, #428]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a6e      	ldr	r2, [pc, #440]	; (800143c <HAL_RCC_OscConfig+0x340>)
 8001282:	4013      	ands	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001290:	4b66      	ldr	r3, [pc, #408]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0adb      	lsrs	r3, r3, #11
 8001296:	2207      	movs	r2, #7
 8001298:	4013      	ands	r3, r2
 800129a:	4a69      	ldr	r2, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x344>)
 800129c:	40da      	lsrs	r2, r3
 800129e:	4b69      	ldr	r3, [pc, #420]	; (8001444 <HAL_RCC_OscConfig+0x348>)
 80012a0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012a2:	4b69      	ldr	r3, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x34c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7ff fbfa 	bl	8000aa0 <HAL_InitTick>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d051      	beq.n	8001354 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e27d      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d030      	beq.n	800131e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a5e      	ldr	r2, [pc, #376]	; (800143c <HAL_RCC_OscConfig+0x340>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b55      	ldr	r3, [pc, #340]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	0049      	lsls	r1, r1, #1
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff fc3b 	bl	8000b58 <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc36 	bl	8000b58 <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e25a      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fa:	4b4c      	ldr	r3, [pc, #304]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4013      	ands	r3, r2
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001306:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a4b      	ldr	r2, [pc, #300]	; (8001438 <HAL_RCC_OscConfig+0x33c>)
 800130c:	4013      	ands	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	021a      	lsls	r2, r3, #8
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001318:	430a      	orrs	r2, r1
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	e01b      	b.n	8001356 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001324:	4949      	ldr	r1, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x350>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132a:	f7ff fc15 	bl	8000b58 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fc10 	bl	8000b58 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e234      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x238>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001354:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2208      	movs	r2, #8
 800135c:	4013      	ands	r3, r2
 800135e:	d047      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2238      	movs	r2, #56	; 0x38
 8001366:	4013      	ands	r3, r2
 8001368:	2b18      	cmp	r3, #24
 800136a:	d10a      	bne.n	8001382 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d03c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2f4>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d138      	bne.n	80013f0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e216      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <HAL_RCC_OscConfig+0x330>)
 800138c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fbdf 	bl	8000b58 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbda 	bl	8000b58 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1fe      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f1      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2a4>
 80013bc:	e018      	b.n	80013f0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80013c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	438a      	bics	r2, r1
 80013c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fbc5 	bl	8000b58 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fbc0 	bl	8000b58 <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1e4      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_RCC_OscConfig+0x330>)
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	2202      	movs	r2, #2
 80013ec:	4013      	ands	r3, r2
 80013ee:	d1f1      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2204      	movs	r2, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d100      	bne.n	80013fc <HAL_RCC_OscConfig+0x300>
 80013fa:	e0c7      	b.n	800158c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fc:	231f      	movs	r3, #31
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2238      	movs	r2, #56	; 0x38
 800140a:	4013      	ands	r3, r2
 800140c:	2b20      	cmp	r3, #32
 800140e:	d11f      	bne.n	8001450 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_OscConfig+0x330>)
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	2202      	movs	r2, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d100      	bne.n	800141c <HAL_RCC_OscConfig+0x320>
 800141a:	e0b7      	b.n	800158c <HAL_RCC_OscConfig+0x490>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d000      	beq.n	8001426 <HAL_RCC_OscConfig+0x32a>
 8001424:	e0b2      	b.n	800158c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e1c2      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40021000 	.word	0x40021000
 8001430:	fffeffff 	.word	0xfffeffff
 8001434:	fffbffff 	.word	0xfffbffff
 8001438:	ffff80ff 	.word	0xffff80ff
 800143c:	ffffc7ff 	.word	0xffffc7ff
 8001440:	00f42400 	.word	0x00f42400
 8001444:	20000000 	.word	0x20000000
 8001448:	20000004 	.word	0x20000004
 800144c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001450:	4bb5      	ldr	r3, [pc, #724]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	055b      	lsls	r3, r3, #21
 8001458:	4013      	ands	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x364>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x366>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d011      	beq.n	800148a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4bb0      	ldr	r3, [pc, #704]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800146a:	4baf      	ldr	r3, [pc, #700]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0549      	lsls	r1, r1, #21
 8001470:	430a      	orrs	r2, r1
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c
 8001474:	4bac      	ldr	r3, [pc, #688]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	055b      	lsls	r3, r3, #21
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001482:	231f      	movs	r3, #31
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148a:	4ba8      	ldr	r3, [pc, #672]	; (800172c <HAL_RCC_OscConfig+0x630>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4013      	ands	r3, r2
 8001494:	d11a      	bne.n	80014cc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001496:	4ba5      	ldr	r3, [pc, #660]	; (800172c <HAL_RCC_OscConfig+0x630>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4ba4      	ldr	r3, [pc, #656]	; (800172c <HAL_RCC_OscConfig+0x630>)
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0049      	lsls	r1, r1, #1
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb58 	bl	8000b58 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7ff fb53 	bl	8000b58 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e177      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	4b9a      	ldr	r3, [pc, #616]	; (800172c <HAL_RCC_OscConfig+0x630>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3e6>
 80014d4:	4b94      	ldr	r3, [pc, #592]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80014d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d8:	4b93      	ldr	r3, [pc, #588]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80014da:	2101      	movs	r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e0:	e01c      	b.n	800151c <HAL_RCC_OscConfig+0x420>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x408>
 80014ea:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80014ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ee:	4b8e      	ldr	r3, [pc, #568]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80014f0:	2104      	movs	r1, #4
 80014f2:	430a      	orrs	r2, r1
 80014f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80014f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014fa:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80014fc:	2101      	movs	r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	65da      	str	r2, [r3, #92]	; 0x5c
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0x420>
 8001504:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001506:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001508:	4b87      	ldr	r3, [pc, #540]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 800150a:	2101      	movs	r1, #1
 800150c:	438a      	bics	r2, r1
 800150e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001510:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001514:	4b84      	ldr	r3, [pc, #528]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001516:	2104      	movs	r1, #4
 8001518:	438a      	bics	r2, r1
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d014      	beq.n	800154e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fb18 	bl	8000b58 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152c:	e009      	b.n	8001542 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fb13 	bl	8000b58 <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x634>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e136      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001542:	4b79      	ldr	r3, [pc, #484]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x432>
 800154c:	e013      	b.n	8001576 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fb03 	bl	8000b58 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001556:	e009      	b.n	800156c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fafe 	bl	8000b58 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4a73      	ldr	r2, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x634>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e121      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800156c:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001576:	231f      	movs	r3, #31
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001586:	496b      	ldr	r1, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x638>)
 8001588:	400a      	ands	r2, r1
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2220      	movs	r2, #32
 8001592:	4013      	ands	r3, r2
 8001594:	d039      	beq.n	800160a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01b      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800159e:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b61      	ldr	r3, [pc, #388]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	03c9      	lsls	r1, r1, #15
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fad4 	bl	8000b58 <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b6:	f7ff facf 	bl	8000b58 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0f3      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80015c8:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4ba>
 80015d4:	e019      	b.n	800160a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015d6:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80015dc:	4956      	ldr	r1, [pc, #344]	; (8001738 <HAL_RCC_OscConfig+0x63c>)
 80015de:	400a      	ands	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff fab9 	bl	8000b58 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ec:	f7ff fab4 	bl	8000b58 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0d8      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80015fe:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_RCC_OscConfig+0x518>
 8001612:	e0cc      	b.n	80017ae <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2238      	movs	r2, #56	; 0x38
 800161a:	4013      	ands	r3, r2
 800161c:	2b10      	cmp	r3, #16
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x526>
 8001620:	e07b      	b.n	800171a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d156      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001630:	4942      	ldr	r1, [pc, #264]	; (800173c <HAL_RCC_OscConfig+0x640>)
 8001632:	400a      	ands	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fa8f 	bl	8000b58 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fa8a 	bl	8000b58 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0ae      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	049b      	lsls	r3, r3, #18
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a37      	ldr	r2, [pc, #220]	; (8001740 <HAL_RCC_OscConfig+0x644>)
 8001664:	4013      	ands	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	431a      	orrs	r2, r3
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 800168e:	430a      	orrs	r2, r1
 8001690:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	0449      	lsls	r1, r1, #17
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0549      	lsls	r1, r1, #21
 80016aa:	430a      	orrs	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa53 	bl	8000b58 <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fa4e 	bl	8000b58 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e072      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	049b      	lsls	r3, r3, #18
 80016d2:	4013      	ands	r3, r2
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x5bc>
 80016d6:	e06a      	b.n	80017ae <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 80016de:	4917      	ldr	r1, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x640>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fa38 	bl	8000b58 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fa33 	bl	8000b58 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e057      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	049b      	lsls	r3, r3, #18
 8001708:	4013      	ands	r3, r2
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_OscConfig+0x62c>)
 8001712:	490c      	ldr	r1, [pc, #48]	; (8001744 <HAL_RCC_OscConfig+0x648>)
 8001714:	400a      	ands	r2, r1
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	e049      	b.n	80017ae <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d112      	bne.n	8001748 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e044      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40021000 	.word	0x40021000
 800172c:	40007000 	.word	0x40007000
 8001730:	00001388 	.word	0x00001388
 8001734:	efffffff 	.word	0xefffffff
 8001738:	ffbfffff 	.word	0xffbfffff
 800173c:	feffffff 	.word	0xfeffffff
 8001740:	11c1808c 	.word	0x11c1808c
 8001744:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x6bc>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2203      	movs	r2, #3
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	429a      	cmp	r2, r3
 800175a:	d126      	bne.n	80017aa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2270      	movs	r2, #112	; 0x70
 8001760:	401a      	ands	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11f      	bne.n	80017aa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	23fe      	movs	r3, #254	; 0xfe
 800176e:	01db      	lsls	r3, r3, #7
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d116      	bne.n	80017aa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	23f8      	movs	r3, #248	; 0xf8
 8001780:	039b      	lsls	r3, r3, #14
 8001782:	401a      	ands	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d10e      	bne.n	80017aa <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	23e0      	movs	r3, #224	; 0xe0
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	401a      	ands	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	0f5b      	lsrs	r3, r3, #29
 80017a0:	075a      	lsls	r2, r3, #29
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b008      	add	sp, #32
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0e9      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d91e      	bls.n	800181c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2207      	movs	r2, #7
 80017e4:	4393      	bics	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017f0:	f7ff f9b2 	bl	8000b58 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f8:	e009      	b.n	800180e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fa:	f7ff f9ad 	bl	8000b58 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0ca      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2207      	movs	r2, #7
 8001814:	4013      	ands	r3, r2
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d015      	beq.n	8001852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2204      	movs	r2, #4
 800182c:	4013      	ands	r3, r2
 800182e:	d006      	beq.n	800183e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001836:	21e0      	movs	r1, #224	; 0xe0
 8001838:	01c9      	lsls	r1, r1, #7
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4a5d      	ldr	r2, [pc, #372]	; (80019b8 <HAL_RCC_ClockConfig+0x1fc>)
 8001844:	4013      	ands	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d057      	beq.n	800190c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	029b      	lsls	r3, r3, #10
 800186c:	4013      	ands	r3, r2
 800186e:	d12b      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e097      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d107      	bne.n	800188c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	049b      	lsls	r3, r3, #18
 8001884:	4013      	ands	r3, r2
 8001886:	d11f      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e08b      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4013      	ands	r3, r2
 800189e:	d113      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e07f      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d108      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e074      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e06d      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c8:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2207      	movs	r2, #7
 80018ce:	4393      	bics	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff f93c 	bl	8000b58 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e4:	e009      	b.n	80018fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e6:	f7ff f937 	bl	8000b58 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_RCC_ClockConfig+0x1f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e054      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2238      	movs	r2, #56	; 0x38
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	429a      	cmp	r2, r3
 800190a:	d1ec      	bne.n	80018e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2207      	movs	r2, #7
 8001912:	4013      	ands	r3, r2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d21e      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2207      	movs	r2, #7
 8001920:	4393      	bics	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800192c:	f7ff f914 	bl	8000b58 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001934:	e009      	b.n	800194a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f7ff f90f 	bl	8000b58 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e02c      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2207      	movs	r2, #7
 8001950:	4013      	ands	r3, r2
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2204      	movs	r2, #4
 800195e:	4013      	ands	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_RCC_ClockConfig+0x200>)
 8001968:	4013      	ands	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001976:	f000 f829 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800197a:	0001      	movs	r1, r0
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	220f      	movs	r2, #15
 8001984:	401a      	ands	r2, r3
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x204>)
 8001988:	0092      	lsls	r2, r2, #2
 800198a:	58d3      	ldr	r3, [r2, r3]
 800198c:	221f      	movs	r2, #31
 800198e:	4013      	ands	r3, r2
 8001990:	000a      	movs	r2, r1
 8001992:	40da      	lsrs	r2, r3
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x208>)
 8001996:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_ClockConfig+0x20c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff f87f 	bl	8000aa0 <HAL_InitTick>
 80019a2:	0003      	movs	r3, r0
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b004      	add	sp, #16
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40022000 	.word	0x40022000
 80019b0:	00001388 	.word	0x00001388
 80019b4:	40021000 	.word	0x40021000
 80019b8:	fffff0ff 	.word	0xfffff0ff
 80019bc:	ffff8fff 	.word	0xffff8fff
 80019c0:	08003750 	.word	0x08003750
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2238      	movs	r2, #56	; 0x38
 80019d8:	4013      	ands	r3, r2
 80019da:	d10f      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0adb      	lsrs	r3, r3, #11
 80019e2:	2207      	movs	r2, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	2201      	movs	r2, #1
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	4835      	ldr	r0, [pc, #212]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019f2:	f7fe fb91 	bl	8000118 <__udivsi3>
 80019f6:	0003      	movs	r3, r0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e05d      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2238      	movs	r2, #56	; 0x38
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d138      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2203      	movs	r2, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d10d      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	4824      	ldr	r0, [pc, #144]	; (8001acc <HAL_RCC_GetSysClockFreq+0x100>)
 8001a3c:	f7fe fb6c 	bl	8000118 <__udivsi3>
 8001a40:	0003      	movs	r3, r0
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	227f      	movs	r2, #127	; 0x7f
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	434b      	muls	r3, r1
 8001a50:	617b      	str	r3, [r7, #20]
        break;
 8001a52:	e00d      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	481c      	ldr	r0, [pc, #112]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a58:	f7fe fb5e 	bl	8000118 <__udivsi3>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	0019      	movs	r1, r3
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	227f      	movs	r2, #127	; 0x7f
 8001a68:	4013      	ands	r3, r2
 8001a6a:	434b      	muls	r3, r1
 8001a6c:	617b      	str	r3, [r7, #20]
        break;
 8001a6e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0f5b      	lsrs	r3, r3, #29
 8001a76:	2207      	movs	r2, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f7fe fb49 	bl	8000118 <__udivsi3>
 8001a86:	0003      	movs	r3, r0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e015      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2238      	movs	r2, #56	; 0x38
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d103      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2238      	movs	r2, #56	; 0x38
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b18      	cmp	r3, #24
 8001aaa:	d103      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001aac:	23fa      	movs	r3, #250	; 0xfa
 8001aae:	01db      	lsls	r3, r3, #7
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e001      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ab8:	693b      	ldr	r3, [r7, #16]
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b006      	add	sp, #24
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200

08001ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	0004      	movs	r4, r0
 8001aee:	f7ff faf9 	bl	80010e4 <LL_RCC_GetAPB1Prescaler>
 8001af2:	0003      	movs	r3, r0
 8001af4:	0b1a      	lsrs	r2, r3, #12
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	58d3      	ldr	r3, [r2, r3]
 8001afc:	221f      	movs	r2, #31
 8001afe:	4013      	ands	r3, r2
 8001b00:	40dc      	lsrs	r4, r3
 8001b02:	0023      	movs	r3, r4
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	08003790 	.word	0x08003790

08001b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b18:	2313      	movs	r3, #19
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b20:	2312      	movs	r3, #18
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	029b      	lsls	r3, r3, #10
 8001b30:	4013      	ands	r3, r2
 8001b32:	d100      	bne.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b34:	e0ad      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b36:	2011      	movs	r0, #17
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	055b      	lsls	r3, r3, #21
 8001b46:	4013      	ands	r3, r2
 8001b48:	d110      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0549      	lsls	r1, r1, #21
 8001b54:	430a      	orrs	r2, r1
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b58:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	055b      	lsls	r3, r3, #21
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0049      	lsls	r1, r1, #1
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b7a:	f7fe ffed 	bl	8000b58 <HAL_GetTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b82:	e00b      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7fe ffe8 	bl	8000b58 <HAL_GetTick>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d904      	bls.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b92:	2313      	movs	r3, #19
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2203      	movs	r2, #3
 8001b98:	701a      	strb	r2, [r3, #0]
        break;
 8001b9a:	e005      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d0ed      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ba8:	2313      	movs	r3, #19
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d15e      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d019      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d014      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	0249      	lsls	r1, r1, #9
 8001be2:	430a      	orrs	r2, r1
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bec:	491e      	ldr	r1, [pc, #120]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d016      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7fe ffaa 	bl	8000b58 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c08:	e00c      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe ffa5 	bl	8000b58 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d904      	bls.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c1a:	2313      	movs	r3, #19
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
            break;
 8001c22:	e004      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d0ed      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c2e:	2313      	movs	r3, #19
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c4c:	e016      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2213      	movs	r2, #19
 8001c54:	18ba      	adds	r2, r7, r2
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	fffffcff 	.word	0xfffffcff
 8001c68:	fffeffff 	.word	0xfffeffff
 8001c6c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c70:	2312      	movs	r3, #18
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2213      	movs	r2, #19
 8001c76:	18ba      	adds	r2, r7, r2
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7c:	2311      	movs	r3, #17
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4bb6      	ldr	r3, [pc, #728]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8a:	4bb5      	ldr	r3, [pc, #724]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c8c:	49b5      	ldr	r1, [pc, #724]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c9c:	4bb0      	ldr	r3, [pc, #704]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4bad      	ldr	r3, [pc, #692]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cba:	4ba9      	ldr	r3, [pc, #676]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	4ba5      	ldr	r3, [pc, #660]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cd8:	4ba1      	ldr	r3, [pc, #644]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	2230      	movs	r2, #48	; 0x30
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b9e      	ldr	r3, [pc, #632]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cf6:	4b9a      	ldr	r3, [pc, #616]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	4a9b      	ldr	r2, [pc, #620]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	015b      	lsls	r3, r3, #5
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001d16:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	4a94      	ldr	r2, [pc, #592]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4013      	ands	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d36:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	4a8d      	ldr	r2, [pc, #564]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d44:	4b86      	ldr	r3, [pc, #536]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4013      	ands	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	4a86      	ldr	r2, [pc, #536]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d64:	4b7e      	ldr	r3, [pc, #504]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	4013      	ands	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	4a7f      	ldr	r2, [pc, #508]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	4b77      	ldr	r3, [pc, #476]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2240      	movs	r2, #64	; 0x40
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	4a79      	ldr	r2, [pc, #484]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	01db      	lsls	r3, r3, #7
 8001dae:	4013      	ands	r3, r2
 8001db0:	d015      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	0899      	lsrs	r1, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d106      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0249      	lsls	r1, r1, #9
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	031b      	lsls	r3, r3, #12
 8001de6:	4013      	ands	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	4013      	ands	r3, r2
 8001e08:	d016      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e0a:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	4a5c      	ldr	r2, [pc, #368]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e18:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	03db      	lsls	r3, r3, #15
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	0449      	lsls	r1, r1, #17
 8001e34:	430a      	orrs	r2, r1
 8001e36:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	03db      	lsls	r3, r3, #15
 8001e40:	4013      	ands	r3, r2
 8001e42:	d016      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e44:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	4a4e      	ldr	r2, [pc, #312]	; (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	045b      	lsls	r3, r3, #17
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0449      	lsls	r1, r1, #17
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	2203      	movs	r2, #3
 8001e84:	4393      	bics	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b30      	ldr	r3, [pc, #192]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0249      	lsls	r1, r1, #9
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	019b      	lsls	r3, r3, #6
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d014      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	220c      	movs	r2, #12
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d106      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0249      	lsls	r1, r1, #9
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	045b      	lsls	r3, r3, #17
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d106      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0449      	lsls	r1, r1, #17
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	049b      	lsls	r3, r3, #18
 8001f20:	4013      	ands	r3, r2
 8001f22:	d016      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d106      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	0449      	lsls	r1, r1, #17
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f52:	2312      	movs	r3, #18
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b006      	add	sp, #24
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	fffff3ff 	.word	0xfffff3ff
 8001f6c:	fffffcff 	.word	0xfffffcff
 8001f70:	fff3ffff 	.word	0xfff3ffff
 8001f74:	ffcfffff 	.word	0xffcfffff
 8001f78:	ffffcfff 	.word	0xffffcfff
 8001f7c:	ffff3fff 	.word	0xffff3fff
 8001f80:	ffbfffff 	.word	0xffbfffff
 8001f84:	feffffff 	.word	0xfeffffff

08001f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e046      	b.n	8002028 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2288      	movs	r2, #136	; 0x88
 8001f9e:	589b      	ldr	r3, [r3, r2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2284      	movs	r2, #132	; 0x84
 8001fa8:	2100      	movs	r1, #0
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe fc78 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2288      	movs	r2, #136	; 0x88
 8001fb8:	2124      	movs	r1, #36	; 0x24
 8001fba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	438a      	bics	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 f8cc 	bl	800216c <UART_SetConfig>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e024      	b.n	8002028 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 fc15 	bl	8002818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	490d      	ldr	r1, [pc, #52]	; (8002030 <HAL_UART_Init+0xa8>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	212a      	movs	r1, #42	; 0x2a
 800200a:	438a      	bics	r2, r1
 800200c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fcad 	bl	8002980 <UART_CheckIdleState>
 8002026:	0003      	movs	r3, r0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}
 8002030:	ffffb7ff 	.word	0xffffb7ff

08002034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2288      	movs	r2, #136	; 0x88
 8002048:	589b      	ldr	r3, [r3, r2]
 800204a:	2b20      	cmp	r3, #32
 800204c:	d000      	beq.n	8002050 <HAL_UART_Transmit+0x1c>
 800204e:	e088      	b.n	8002162 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_UART_Transmit+0x2a>
 8002056:	1dbb      	adds	r3, r7, #6
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e080      	b.n	8002164 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	429a      	cmp	r2, r3
 800206c:	d109      	bne.n	8002082 <HAL_UART_Transmit+0x4e>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d001      	beq.n	8002082 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e070      	b.n	8002164 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2290      	movs	r2, #144	; 0x90
 8002086:	2100      	movs	r1, #0
 8002088:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2288      	movs	r2, #136	; 0x88
 800208e:	2121      	movs	r1, #33	; 0x21
 8002090:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002092:	f7fe fd61 	bl	8000b58 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1dba      	adds	r2, r7, #6
 800209e:	2154      	movs	r1, #84	; 0x54
 80020a0:	8812      	ldrh	r2, [r2, #0]
 80020a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1dba      	adds	r2, r7, #6
 80020a8:	2156      	movs	r1, #86	; 0x56
 80020aa:	8812      	ldrh	r2, [r2, #0]
 80020ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d108      	bne.n	80020cc <HAL_UART_Transmit+0x98>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020d4:	e02c      	b.n	8002130 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	0013      	movs	r3, r2
 80020e0:	2200      	movs	r2, #0
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	f000 fc9a 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 80020e8:	1e03      	subs	r3, r0, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e039      	b.n	8002164 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	001a      	movs	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	05d2      	lsls	r2, r2, #23
 8002102:	0dd2      	lsrs	r2, r2, #23
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3302      	adds	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e007      	b.n	800211e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2256      	movs	r2, #86	; 0x56
 8002122:	5a9b      	ldrh	r3, [r3, r2]
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b299      	uxth	r1, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2256      	movs	r2, #86	; 0x56
 800212e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2256      	movs	r2, #86	; 0x56
 8002134:	5a9b      	ldrh	r3, [r3, r2]
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1cc      	bne.n	80020d6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	0013      	movs	r3, r2
 8002146:	2200      	movs	r2, #0
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	f000 fc67 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 800214e:	1e03      	subs	r3, r0, #0
 8002150:	d001      	beq.n	8002156 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e006      	b.n	8002164 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2288      	movs	r2, #136	; 0x88
 800215a:	2120      	movs	r1, #32
 800215c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b008      	add	sp, #32
 800216a:	bd80      	pop	{r7, pc}

0800216c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b090      	sub	sp, #64	; 0x40
 8002170:	af00      	add	r7, sp, #0
 8002172:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002174:	231a      	movs	r3, #26
 8002176:	2220      	movs	r2, #32
 8002178:	189b      	adds	r3, r3, r2
 800217a:	19db      	adds	r3, r3, r7
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	431a      	orrs	r2, r3
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	431a      	orrs	r2, r3
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4313      	orrs	r3, r2
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4ac1      	ldr	r2, [pc, #772]	; (80024a4 <UART_SetConfig+0x338>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4abc      	ldr	r2, [pc, #752]	; (80024a8 <UART_SetConfig+0x33c>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0018      	movs	r0, r3
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	68d9      	ldr	r1, [r3, #12]
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	0003      	movs	r3, r0
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4ab6      	ldr	r2, [pc, #728]	; (80024ac <UART_SetConfig+0x340>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d009      	beq.n	80021ec <UART_SetConfig+0x80>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4ab4      	ldr	r2, [pc, #720]	; (80024b0 <UART_SetConfig+0x344>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021e8:	4313      	orrs	r3, r2
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4ab0      	ldr	r2, [pc, #704]	; (80024b4 <UART_SetConfig+0x348>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fe:	430b      	orrs	r3, r1
 8002200:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	220f      	movs	r2, #15
 800220a:	4393      	bics	r3, r2
 800220c:	0018      	movs	r0, r3
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	0003      	movs	r3, r0
 8002218:	430b      	orrs	r3, r1
 800221a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4aa5      	ldr	r2, [pc, #660]	; (80024b8 <UART_SetConfig+0x34c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d131      	bne.n	800228a <UART_SetConfig+0x11e>
 8002226:	4ba5      	ldr	r3, [pc, #660]	; (80024bc <UART_SetConfig+0x350>)
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	2203      	movs	r2, #3
 800222c:	4013      	ands	r3, r2
 800222e:	2b03      	cmp	r3, #3
 8002230:	d01d      	beq.n	800226e <UART_SetConfig+0x102>
 8002232:	d823      	bhi.n	800227c <UART_SetConfig+0x110>
 8002234:	2b02      	cmp	r3, #2
 8002236:	d00c      	beq.n	8002252 <UART_SetConfig+0xe6>
 8002238:	d820      	bhi.n	800227c <UART_SetConfig+0x110>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <UART_SetConfig+0xd8>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d00e      	beq.n	8002260 <UART_SetConfig+0xf4>
 8002242:	e01b      	b.n	800227c <UART_SetConfig+0x110>
 8002244:	231b      	movs	r3, #27
 8002246:	2220      	movs	r2, #32
 8002248:	189b      	adds	r3, r3, r2
 800224a:	19db      	adds	r3, r3, r7
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e154      	b.n	80024fc <UART_SetConfig+0x390>
 8002252:	231b      	movs	r3, #27
 8002254:	2220      	movs	r2, #32
 8002256:	189b      	adds	r3, r3, r2
 8002258:	19db      	adds	r3, r3, r7
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e14d      	b.n	80024fc <UART_SetConfig+0x390>
 8002260:	231b      	movs	r3, #27
 8002262:	2220      	movs	r2, #32
 8002264:	189b      	adds	r3, r3, r2
 8002266:	19db      	adds	r3, r3, r7
 8002268:	2204      	movs	r2, #4
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e146      	b.n	80024fc <UART_SetConfig+0x390>
 800226e:	231b      	movs	r3, #27
 8002270:	2220      	movs	r2, #32
 8002272:	189b      	adds	r3, r3, r2
 8002274:	19db      	adds	r3, r3, r7
 8002276:	2208      	movs	r2, #8
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e13f      	b.n	80024fc <UART_SetConfig+0x390>
 800227c:	231b      	movs	r3, #27
 800227e:	2220      	movs	r2, #32
 8002280:	189b      	adds	r3, r3, r2
 8002282:	19db      	adds	r3, r3, r7
 8002284:	2210      	movs	r2, #16
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e138      	b.n	80024fc <UART_SetConfig+0x390>
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a8c      	ldr	r2, [pc, #560]	; (80024c0 <UART_SetConfig+0x354>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d131      	bne.n	80022f8 <UART_SetConfig+0x18c>
 8002294:	4b89      	ldr	r3, [pc, #548]	; (80024bc <UART_SetConfig+0x350>)
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	220c      	movs	r2, #12
 800229a:	4013      	ands	r3, r2
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d01d      	beq.n	80022dc <UART_SetConfig+0x170>
 80022a0:	d823      	bhi.n	80022ea <UART_SetConfig+0x17e>
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d00c      	beq.n	80022c0 <UART_SetConfig+0x154>
 80022a6:	d820      	bhi.n	80022ea <UART_SetConfig+0x17e>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <UART_SetConfig+0x146>
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00e      	beq.n	80022ce <UART_SetConfig+0x162>
 80022b0:	e01b      	b.n	80022ea <UART_SetConfig+0x17e>
 80022b2:	231b      	movs	r3, #27
 80022b4:	2220      	movs	r2, #32
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	19db      	adds	r3, r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e11d      	b.n	80024fc <UART_SetConfig+0x390>
 80022c0:	231b      	movs	r3, #27
 80022c2:	2220      	movs	r2, #32
 80022c4:	189b      	adds	r3, r3, r2
 80022c6:	19db      	adds	r3, r3, r7
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e116      	b.n	80024fc <UART_SetConfig+0x390>
 80022ce:	231b      	movs	r3, #27
 80022d0:	2220      	movs	r2, #32
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	19db      	adds	r3, r3, r7
 80022d6:	2204      	movs	r2, #4
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	e10f      	b.n	80024fc <UART_SetConfig+0x390>
 80022dc:	231b      	movs	r3, #27
 80022de:	2220      	movs	r2, #32
 80022e0:	189b      	adds	r3, r3, r2
 80022e2:	19db      	adds	r3, r3, r7
 80022e4:	2208      	movs	r2, #8
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e108      	b.n	80024fc <UART_SetConfig+0x390>
 80022ea:	231b      	movs	r3, #27
 80022ec:	2220      	movs	r2, #32
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	19db      	adds	r3, r3, r7
 80022f2:	2210      	movs	r2, #16
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e101      	b.n	80024fc <UART_SetConfig+0x390>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <UART_SetConfig+0x358>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d131      	bne.n	8002366 <UART_SetConfig+0x1fa>
 8002302:	4b6e      	ldr	r3, [pc, #440]	; (80024bc <UART_SetConfig+0x350>)
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	2230      	movs	r2, #48	; 0x30
 8002308:	4013      	ands	r3, r2
 800230a:	2b30      	cmp	r3, #48	; 0x30
 800230c:	d01d      	beq.n	800234a <UART_SetConfig+0x1de>
 800230e:	d823      	bhi.n	8002358 <UART_SetConfig+0x1ec>
 8002310:	2b20      	cmp	r3, #32
 8002312:	d00c      	beq.n	800232e <UART_SetConfig+0x1c2>
 8002314:	d820      	bhi.n	8002358 <UART_SetConfig+0x1ec>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <UART_SetConfig+0x1b4>
 800231a:	2b10      	cmp	r3, #16
 800231c:	d00e      	beq.n	800233c <UART_SetConfig+0x1d0>
 800231e:	e01b      	b.n	8002358 <UART_SetConfig+0x1ec>
 8002320:	231b      	movs	r3, #27
 8002322:	2220      	movs	r2, #32
 8002324:	189b      	adds	r3, r3, r2
 8002326:	19db      	adds	r3, r3, r7
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e0e6      	b.n	80024fc <UART_SetConfig+0x390>
 800232e:	231b      	movs	r3, #27
 8002330:	2220      	movs	r2, #32
 8002332:	189b      	adds	r3, r3, r2
 8002334:	19db      	adds	r3, r3, r7
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e0df      	b.n	80024fc <UART_SetConfig+0x390>
 800233c:	231b      	movs	r3, #27
 800233e:	2220      	movs	r2, #32
 8002340:	189b      	adds	r3, r3, r2
 8002342:	19db      	adds	r3, r3, r7
 8002344:	2204      	movs	r2, #4
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e0d8      	b.n	80024fc <UART_SetConfig+0x390>
 800234a:	231b      	movs	r3, #27
 800234c:	2220      	movs	r2, #32
 800234e:	189b      	adds	r3, r3, r2
 8002350:	19db      	adds	r3, r3, r7
 8002352:	2208      	movs	r2, #8
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e0d1      	b.n	80024fc <UART_SetConfig+0x390>
 8002358:	231b      	movs	r3, #27
 800235a:	2220      	movs	r2, #32
 800235c:	189b      	adds	r3, r3, r2
 800235e:	19db      	adds	r3, r3, r7
 8002360:	2210      	movs	r2, #16
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e0ca      	b.n	80024fc <UART_SetConfig+0x390>
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a57      	ldr	r2, [pc, #348]	; (80024c8 <UART_SetConfig+0x35c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d106      	bne.n	800237e <UART_SetConfig+0x212>
 8002370:	231b      	movs	r3, #27
 8002372:	2220      	movs	r2, #32
 8002374:	189b      	adds	r3, r3, r2
 8002376:	19db      	adds	r3, r3, r7
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e0be      	b.n	80024fc <UART_SetConfig+0x390>
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a52      	ldr	r2, [pc, #328]	; (80024cc <UART_SetConfig+0x360>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d106      	bne.n	8002396 <UART_SetConfig+0x22a>
 8002388:	231b      	movs	r3, #27
 800238a:	2220      	movs	r2, #32
 800238c:	189b      	adds	r3, r3, r2
 800238e:	19db      	adds	r3, r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e0b2      	b.n	80024fc <UART_SetConfig+0x390>
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <UART_SetConfig+0x364>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d106      	bne.n	80023ae <UART_SetConfig+0x242>
 80023a0:	231b      	movs	r3, #27
 80023a2:	2220      	movs	r2, #32
 80023a4:	189b      	adds	r3, r3, r2
 80023a6:	19db      	adds	r3, r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e0a6      	b.n	80024fc <UART_SetConfig+0x390>
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3e      	ldr	r2, [pc, #248]	; (80024ac <UART_SetConfig+0x340>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d13e      	bne.n	8002436 <UART_SetConfig+0x2ca>
 80023b8:	4b40      	ldr	r3, [pc, #256]	; (80024bc <UART_SetConfig+0x350>)
 80023ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023bc:	23c0      	movs	r3, #192	; 0xc0
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	4013      	ands	r3, r2
 80023c2:	22c0      	movs	r2, #192	; 0xc0
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d027      	beq.n	800241a <UART_SetConfig+0x2ae>
 80023ca:	22c0      	movs	r2, #192	; 0xc0
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d82a      	bhi.n	8002428 <UART_SetConfig+0x2bc>
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d011      	beq.n	80023fe <UART_SetConfig+0x292>
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	4293      	cmp	r3, r2
 80023e0:	d822      	bhi.n	8002428 <UART_SetConfig+0x2bc>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <UART_SetConfig+0x284>
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	00d2      	lsls	r2, r2, #3
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <UART_SetConfig+0x2a0>
 80023ee:	e01b      	b.n	8002428 <UART_SetConfig+0x2bc>
 80023f0:	231b      	movs	r3, #27
 80023f2:	2220      	movs	r2, #32
 80023f4:	189b      	adds	r3, r3, r2
 80023f6:	19db      	adds	r3, r3, r7
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e07e      	b.n	80024fc <UART_SetConfig+0x390>
 80023fe:	231b      	movs	r3, #27
 8002400:	2220      	movs	r2, #32
 8002402:	189b      	adds	r3, r3, r2
 8002404:	19db      	adds	r3, r3, r7
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e077      	b.n	80024fc <UART_SetConfig+0x390>
 800240c:	231b      	movs	r3, #27
 800240e:	2220      	movs	r2, #32
 8002410:	189b      	adds	r3, r3, r2
 8002412:	19db      	adds	r3, r3, r7
 8002414:	2204      	movs	r2, #4
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e070      	b.n	80024fc <UART_SetConfig+0x390>
 800241a:	231b      	movs	r3, #27
 800241c:	2220      	movs	r2, #32
 800241e:	189b      	adds	r3, r3, r2
 8002420:	19db      	adds	r3, r3, r7
 8002422:	2208      	movs	r2, #8
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e069      	b.n	80024fc <UART_SetConfig+0x390>
 8002428:	231b      	movs	r3, #27
 800242a:	2220      	movs	r2, #32
 800242c:	189b      	adds	r3, r3, r2
 800242e:	19db      	adds	r3, r3, r7
 8002430:	2210      	movs	r2, #16
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e062      	b.n	80024fc <UART_SetConfig+0x390>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <UART_SetConfig+0x344>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d157      	bne.n	80024f0 <UART_SetConfig+0x384>
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <UART_SetConfig+0x350>)
 8002442:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002444:	23c0      	movs	r3, #192	; 0xc0
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4013      	ands	r3, r2
 800244a:	22c0      	movs	r2, #192	; 0xc0
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	4293      	cmp	r3, r2
 8002450:	d040      	beq.n	80024d4 <UART_SetConfig+0x368>
 8002452:	22c0      	movs	r2, #192	; 0xc0
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4293      	cmp	r3, r2
 8002458:	d843      	bhi.n	80024e2 <UART_SetConfig+0x376>
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	4293      	cmp	r3, r2
 8002460:	d011      	beq.n	8002486 <UART_SetConfig+0x31a>
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4293      	cmp	r3, r2
 8002468:	d83b      	bhi.n	80024e2 <UART_SetConfig+0x376>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <UART_SetConfig+0x30c>
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	0052      	lsls	r2, r2, #1
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <UART_SetConfig+0x328>
 8002476:	e034      	b.n	80024e2 <UART_SetConfig+0x376>
 8002478:	231b      	movs	r3, #27
 800247a:	2220      	movs	r2, #32
 800247c:	189b      	adds	r3, r3, r2
 800247e:	19db      	adds	r3, r3, r7
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e03a      	b.n	80024fc <UART_SetConfig+0x390>
 8002486:	231b      	movs	r3, #27
 8002488:	2220      	movs	r2, #32
 800248a:	189b      	adds	r3, r3, r2
 800248c:	19db      	adds	r3, r3, r7
 800248e:	2202      	movs	r2, #2
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e033      	b.n	80024fc <UART_SetConfig+0x390>
 8002494:	231b      	movs	r3, #27
 8002496:	2220      	movs	r2, #32
 8002498:	189b      	adds	r3, r3, r2
 800249a:	19db      	adds	r3, r3, r7
 800249c:	2204      	movs	r2, #4
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e02c      	b.n	80024fc <UART_SetConfig+0x390>
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	cfff69f3 	.word	0xcfff69f3
 80024a8:	ffffcfff 	.word	0xffffcfff
 80024ac:	40008000 	.word	0x40008000
 80024b0:	40008400 	.word	0x40008400
 80024b4:	11fff4ff 	.word	0x11fff4ff
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40004800 	.word	0x40004800
 80024c8:	40004c00 	.word	0x40004c00
 80024cc:	40005000 	.word	0x40005000
 80024d0:	40013c00 	.word	0x40013c00
 80024d4:	231b      	movs	r3, #27
 80024d6:	2220      	movs	r2, #32
 80024d8:	189b      	adds	r3, r3, r2
 80024da:	19db      	adds	r3, r3, r7
 80024dc:	2208      	movs	r2, #8
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e00c      	b.n	80024fc <UART_SetConfig+0x390>
 80024e2:	231b      	movs	r3, #27
 80024e4:	2220      	movs	r2, #32
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	19db      	adds	r3, r3, r7
 80024ea:	2210      	movs	r2, #16
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e005      	b.n	80024fc <UART_SetConfig+0x390>
 80024f0:	231b      	movs	r3, #27
 80024f2:	2220      	movs	r2, #32
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	19db      	adds	r3, r3, r7
 80024f8:	2210      	movs	r2, #16
 80024fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4ac1      	ldr	r2, [pc, #772]	; (8002808 <UART_SetConfig+0x69c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d005      	beq.n	8002512 <UART_SetConfig+0x3a6>
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4ac0      	ldr	r2, [pc, #768]	; (800280c <UART_SetConfig+0x6a0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d000      	beq.n	8002512 <UART_SetConfig+0x3a6>
 8002510:	e093      	b.n	800263a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002512:	231b      	movs	r3, #27
 8002514:	2220      	movs	r2, #32
 8002516:	189b      	adds	r3, r3, r2
 8002518:	19db      	adds	r3, r3, r7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d015      	beq.n	800254c <UART_SetConfig+0x3e0>
 8002520:	dc18      	bgt.n	8002554 <UART_SetConfig+0x3e8>
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00d      	beq.n	8002542 <UART_SetConfig+0x3d6>
 8002526:	dc15      	bgt.n	8002554 <UART_SetConfig+0x3e8>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <UART_SetConfig+0x3c6>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d005      	beq.n	800253c <UART_SetConfig+0x3d0>
 8002530:	e010      	b.n	8002554 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002532:	f7ff fad7 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8002536:	0003      	movs	r3, r0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800253a:	e014      	b.n	8002566 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800253c:	4bb4      	ldr	r3, [pc, #720]	; (8002810 <UART_SetConfig+0x6a4>)
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002540:	e011      	b.n	8002566 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002542:	f7ff fa43 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002546:	0003      	movs	r3, r0
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800254a:	e00c      	b.n	8002566 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002552:	e008      	b.n	8002566 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002558:	231a      	movs	r3, #26
 800255a:	2220      	movs	r2, #32
 800255c:	189b      	adds	r3, r3, r2
 800255e:	19db      	adds	r3, r3, r7
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
        break;
 8002564:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <UART_SetConfig+0x402>
 800256c:	e135      	b.n	80027da <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	4ba8      	ldr	r3, [pc, #672]	; (8002814 <UART_SetConfig+0x6a8>)
 8002574:	0052      	lsls	r2, r2, #1
 8002576:	5ad3      	ldrh	r3, [r2, r3]
 8002578:	0019      	movs	r1, r3
 800257a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800257c:	f7fd fdcc 	bl	8000118 <__udivsi3>
 8002580:	0003      	movs	r3, r0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	0013      	movs	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	189b      	adds	r3, r3, r2
 800258e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002590:	429a      	cmp	r2, r3
 8002592:	d305      	bcc.n	80025a0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800259a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800259c:	429a      	cmp	r2, r3
 800259e:	d906      	bls.n	80025ae <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80025a0:	231a      	movs	r3, #26
 80025a2:	2220      	movs	r2, #32
 80025a4:	189b      	adds	r3, r3, r2
 80025a6:	19db      	adds	r3, r3, r7
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e044      	b.n	8002638 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ba:	4b96      	ldr	r3, [pc, #600]	; (8002814 <UART_SetConfig+0x6a8>)
 80025bc:	0052      	lsls	r2, r2, #1
 80025be:	5ad3      	ldrh	r3, [r2, r3]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	69b8      	ldr	r0, [r7, #24]
 80025cc:	69f9      	ldr	r1, [r7, #28]
 80025ce:	f7fd ff19 	bl	8000404 <__aeabi_uldivmod>
 80025d2:	0002      	movs	r2, r0
 80025d4:	000b      	movs	r3, r1
 80025d6:	0e11      	lsrs	r1, r2, #24
 80025d8:	021d      	lsls	r5, r3, #8
 80025da:	430d      	orrs	r5, r1
 80025dc:	0214      	lsls	r4, r2, #8
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68b8      	ldr	r0, [r7, #8]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	1900      	adds	r0, r0, r4
 80025f0:	4169      	adcs	r1, r5
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f7fd ff00 	bl	8000404 <__aeabi_uldivmod>
 8002604:	0002      	movs	r2, r0
 8002606:	000b      	movs	r3, r1
 8002608:	0013      	movs	r3, r2
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800260c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260e:	23c0      	movs	r3, #192	; 0xc0
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	429a      	cmp	r2, r3
 8002614:	d309      	bcc.n	800262a <UART_SetConfig+0x4be>
 8002616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	035b      	lsls	r3, r3, #13
 800261c:	429a      	cmp	r2, r3
 800261e:	d204      	bcs.n	800262a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	e006      	b.n	8002638 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800262a:	231a      	movs	r3, #26
 800262c:	2220      	movs	r2, #32
 800262e:	189b      	adds	r3, r3, r2
 8002630:	19db      	adds	r3, r3, r7
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002636:	e0d0      	b.n	80027da <UART_SetConfig+0x66e>
 8002638:	e0cf      	b.n	80027da <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	429a      	cmp	r2, r3
 8002644:	d000      	beq.n	8002648 <UART_SetConfig+0x4dc>
 8002646:	e070      	b.n	800272a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002648:	231b      	movs	r3, #27
 800264a:	2220      	movs	r2, #32
 800264c:	189b      	adds	r3, r3, r2
 800264e:	19db      	adds	r3, r3, r7
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b08      	cmp	r3, #8
 8002654:	d015      	beq.n	8002682 <UART_SetConfig+0x516>
 8002656:	dc18      	bgt.n	800268a <UART_SetConfig+0x51e>
 8002658:	2b04      	cmp	r3, #4
 800265a:	d00d      	beq.n	8002678 <UART_SetConfig+0x50c>
 800265c:	dc15      	bgt.n	800268a <UART_SetConfig+0x51e>
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <UART_SetConfig+0x4fc>
 8002662:	2b02      	cmp	r3, #2
 8002664:	d005      	beq.n	8002672 <UART_SetConfig+0x506>
 8002666:	e010      	b.n	800268a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002668:	f7ff fa3c 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800266c:	0003      	movs	r3, r0
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002670:	e014      	b.n	800269c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002672:	4b67      	ldr	r3, [pc, #412]	; (8002810 <UART_SetConfig+0x6a4>)
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002676:	e011      	b.n	800269c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002678:	f7ff f9a8 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800267c:	0003      	movs	r3, r0
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002680:	e00c      	b.n	800269c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002688:	e008      	b.n	800269c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800268e:	231a      	movs	r3, #26
 8002690:	2220      	movs	r2, #32
 8002692:	189b      	adds	r3, r3, r2
 8002694:	19db      	adds	r3, r3, r7
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
        break;
 800269a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d100      	bne.n	80026a4 <UART_SetConfig+0x538>
 80026a2:	e09a      	b.n	80027da <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <UART_SetConfig+0x6a8>)
 80026aa:	0052      	lsls	r2, r2, #1
 80026ac:	5ad3      	ldrh	r3, [r2, r3]
 80026ae:	0019      	movs	r1, r3
 80026b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026b2:	f7fd fd31 	bl	8000118 <__udivsi3>
 80026b6:	0003      	movs	r3, r0
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	18d2      	adds	r2, r2, r3
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0019      	movs	r1, r3
 80026c8:	0010      	movs	r0, r2
 80026ca:	f7fd fd25 	bl	8000118 <__udivsi3>
 80026ce:	0003      	movs	r3, r0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d921      	bls.n	800271c <UART_SetConfig+0x5b0>
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	025b      	lsls	r3, r3, #9
 80026de:	429a      	cmp	r2, r3
 80026e0:	d21c      	bcs.n	800271c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	200e      	movs	r0, #14
 80026e8:	2420      	movs	r4, #32
 80026ea:	1903      	adds	r3, r0, r4
 80026ec:	19db      	adds	r3, r3, r7
 80026ee:	210f      	movs	r1, #15
 80026f0:	438a      	bics	r2, r1
 80026f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2207      	movs	r2, #7
 80026fc:	4013      	ands	r3, r2
 80026fe:	b299      	uxth	r1, r3
 8002700:	1903      	adds	r3, r0, r4
 8002702:	19db      	adds	r3, r3, r7
 8002704:	1902      	adds	r2, r0, r4
 8002706:	19d2      	adds	r2, r2, r7
 8002708:	8812      	ldrh	r2, [r2, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1902      	adds	r2, r0, r4
 8002714:	19d2      	adds	r2, r2, r7
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e05e      	b.n	80027da <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800271c:	231a      	movs	r3, #26
 800271e:	2220      	movs	r2, #32
 8002720:	189b      	adds	r3, r3, r2
 8002722:	19db      	adds	r3, r3, r7
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e057      	b.n	80027da <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800272a:	231b      	movs	r3, #27
 800272c:	2220      	movs	r2, #32
 800272e:	189b      	adds	r3, r3, r2
 8002730:	19db      	adds	r3, r3, r7
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d015      	beq.n	8002764 <UART_SetConfig+0x5f8>
 8002738:	dc18      	bgt.n	800276c <UART_SetConfig+0x600>
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00d      	beq.n	800275a <UART_SetConfig+0x5ee>
 800273e:	dc15      	bgt.n	800276c <UART_SetConfig+0x600>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <UART_SetConfig+0x5de>
 8002744:	2b02      	cmp	r3, #2
 8002746:	d005      	beq.n	8002754 <UART_SetConfig+0x5e8>
 8002748:	e010      	b.n	800276c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800274a:	f7ff f9cb 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 800274e:	0003      	movs	r3, r0
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002752:	e014      	b.n	800277e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002754:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <UART_SetConfig+0x6a4>)
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002758:	e011      	b.n	800277e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800275a:	f7ff f937 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800275e:	0003      	movs	r3, r0
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002762:	e00c      	b.n	800277e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800276a:	e008      	b.n	800277e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002770:	231a      	movs	r3, #26
 8002772:	2220      	movs	r2, #32
 8002774:	189b      	adds	r3, r3, r2
 8002776:	19db      	adds	r3, r3, r7
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
        break;
 800277c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02a      	beq.n	80027da <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <UART_SetConfig+0x6a8>)
 800278a:	0052      	lsls	r2, r2, #1
 800278c:	5ad3      	ldrh	r3, [r2, r3]
 800278e:	0019      	movs	r1, r3
 8002790:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002792:	f7fd fcc1 	bl	8000118 <__udivsi3>
 8002796:	0003      	movs	r3, r0
 8002798:	001a      	movs	r2, r3
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	18d2      	adds	r2, r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0019      	movs	r1, r3
 80027a8:	0010      	movs	r0, r2
 80027aa:	f7fd fcb5 	bl	8000118 <__udivsi3>
 80027ae:	0003      	movs	r3, r0
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d90a      	bls.n	80027ce <UART_SetConfig+0x662>
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	025b      	lsls	r3, r3, #9
 80027be:	429a      	cmp	r2, r3
 80027c0:	d205      	bcs.n	80027ce <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	e005      	b.n	80027da <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80027ce:	231a      	movs	r3, #26
 80027d0:	2220      	movs	r2, #32
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	226a      	movs	r2, #106	; 0x6a
 80027de:	2101      	movs	r1, #1
 80027e0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	2268      	movs	r2, #104	; 0x68
 80027e6:	2101      	movs	r1, #1
 80027e8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	2200      	movs	r2, #0
 80027ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80027f6:	231a      	movs	r3, #26
 80027f8:	2220      	movs	r2, #32
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	19db      	adds	r3, r3, r7
 80027fe:	781b      	ldrb	r3, [r3, #0]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b010      	add	sp, #64	; 0x40
 8002806:	bdb0      	pop	{r4, r5, r7, pc}
 8002808:	40008000 	.word	0x40008000
 800280c:	40008400 	.word	0x40008400
 8002810:	00f42400 	.word	0x00f42400
 8002814:	080037b0 	.word	0x080037b0

08002818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d00b      	beq.n	8002842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a4a      	ldr	r2, [pc, #296]	; (800295c <UART_AdvFeatureConfig+0x144>)
 8002832:	4013      	ands	r3, r2
 8002834:	0019      	movs	r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	2202      	movs	r2, #2
 8002848:	4013      	ands	r3, r2
 800284a:	d00b      	beq.n	8002864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a43      	ldr	r2, [pc, #268]	; (8002960 <UART_AdvFeatureConfig+0x148>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	2204      	movs	r2, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d00b      	beq.n	8002886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a3b      	ldr	r2, [pc, #236]	; (8002964 <UART_AdvFeatureConfig+0x14c>)
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	2208      	movs	r2, #8
 800288c:	4013      	ands	r3, r2
 800288e:	d00b      	beq.n	80028a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a34      	ldr	r2, [pc, #208]	; (8002968 <UART_AdvFeatureConfig+0x150>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	2210      	movs	r2, #16
 80028ae:	4013      	ands	r3, r2
 80028b0:	d00b      	beq.n	80028ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	; (800296c <UART_AdvFeatureConfig+0x154>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	2220      	movs	r2, #32
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a25      	ldr	r2, [pc, #148]	; (8002970 <UART_AdvFeatureConfig+0x158>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	4013      	ands	r3, r2
 80028f4:	d01d      	beq.n	8002932 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <UART_AdvFeatureConfig+0x15c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	035b      	lsls	r3, r3, #13
 8002916:	429a      	cmp	r2, r3
 8002918:	d10b      	bne.n	8002932 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <UART_AdvFeatureConfig+0x160>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	4013      	ands	r3, r2
 800293a:	d00b      	beq.n	8002954 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <UART_AdvFeatureConfig+0x164>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  }
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	fffdffff 	.word	0xfffdffff
 8002960:	fffeffff 	.word	0xfffeffff
 8002964:	fffbffff 	.word	0xfffbffff
 8002968:	ffff7fff 	.word	0xffff7fff
 800296c:	ffffefff 	.word	0xffffefff
 8002970:	ffffdfff 	.word	0xffffdfff
 8002974:	ffefffff 	.word	0xffefffff
 8002978:	ff9fffff 	.word	0xff9fffff
 800297c:	fff7ffff 	.word	0xfff7ffff

08002980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2290      	movs	r2, #144	; 0x90
 800298c:	2100      	movs	r1, #0
 800298e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002990:	f7fe f8e2 	bl	8000b58 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2208      	movs	r2, #8
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d10c      	bne.n	80029c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0391      	lsls	r1, r2, #14
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <UART_CheckIdleState+0x98>)
 80029b0:	9200      	str	r2, [sp, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f000 f832 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e026      	b.n	8002a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2204      	movs	r2, #4
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d10c      	bne.n	80029e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	03d1      	lsls	r1, r2, #15
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <UART_CheckIdleState+0x98>)
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	f000 f81e 	bl	8002a1c <UART_WaitOnFlagUntilTimeout>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d001      	beq.n	80029e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e012      	b.n	8002a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2288      	movs	r2, #136	; 0x88
 80029ec:	2120      	movs	r1, #32
 80029ee:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	228c      	movs	r2, #140	; 0x8c
 80029f4:	2120      	movs	r1, #32
 80029f6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2284      	movs	r2, #132	; 0x84
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	01ffffff 	.word	0x01ffffff

08002a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b094      	sub	sp, #80	; 0x50
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a2c:	e0a7      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a30:	3301      	adds	r3, #1
 8002a32:	d100      	bne.n	8002a36 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a34:	e0a3      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe f88f 	bl	8000b58 <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13f      	bne.n	8002acc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a54:	647b      	str	r3, [r7, #68]	; 0x44
 8002a56:	2301      	movs	r3, #1
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	f383 8810 	msr	PRIMASK, r3
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	494e      	ldr	r1, [pc, #312]	; (8002ba8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	f383 8810 	msr	PRIMASK, r3
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
 8002a88:	2301      	movs	r3, #1
 8002a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8e:	f383 8810 	msr	PRIMASK, r3
}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2288      	movs	r2, #136	; 0x88
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	228c      	movs	r2, #140	; 0x8c
 8002abc:	2120      	movs	r1, #32
 8002abe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2284      	movs	r2, #132	; 0x84
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e069      	b.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d052      	beq.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69da      	ldr	r2, [r3, #28]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d148      	bne.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af6:	f3ef 8310 	mrs	r3, PRIMASK
 8002afa:	613b      	str	r3, [r7, #16]
  return(result);
 8002afc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b00:	2301      	movs	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f383 8810 	msr	PRIMASK, r3
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4924      	ldr	r1, [pc, #144]	; (8002ba8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b28:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b32:	2301      	movs	r3, #1
 8002b34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	438a      	bics	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f383 8810 	msr	PRIMASK, r3
}
 8002b58:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2288      	movs	r2, #136	; 0x88
 8002b5e:	2120      	movs	r1, #32
 8002b60:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	228c      	movs	r2, #140	; 0x8c
 8002b66:	2120      	movs	r1, #32
 8002b68:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2290      	movs	r2, #144	; 0x90
 8002b6e:	2120      	movs	r1, #32
 8002b70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2284      	movs	r2, #132	; 0x84
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e010      	b.n	8002ba0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	425a      	negs	r2, r3
 8002b8e:	4153      	adcs	r3, r2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	001a      	movs	r2, r3
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d100      	bne.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x182>
 8002b9c:	e747      	b.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b014      	add	sp, #80	; 0x50
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	fffffe5f 	.word	0xfffffe5f

08002bac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2284      	movs	r2, #132	; 0x84
 8002bb8:	5c9b      	ldrb	r3, [r3, r2]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e027      	b.n	8002c12 <HAL_UARTEx_DisableFifoMode+0x66>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2284      	movs	r2, #132	; 0x84
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2288      	movs	r2, #136	; 0x88
 8002bce:	2124      	movs	r1, #36	; 0x24
 8002bd0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	438a      	bics	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <HAL_UARTEx_DisableFifoMode+0x70>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2288      	movs	r2, #136	; 0x88
 8002c04:	2120      	movs	r1, #32
 8002c06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2284      	movs	r2, #132	; 0x84
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	dfffffff 	.word	0xdfffffff

08002c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2284      	movs	r2, #132	; 0x84
 8002c2e:	5c9b      	ldrb	r3, [r3, r2]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e02e      	b.n	8002c96 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2284      	movs	r2, #132	; 0x84
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2288      	movs	r2, #136	; 0x88
 8002c44:	2124      	movs	r1, #36	; 0x24
 8002c46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	438a      	bics	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	08d9      	lsrs	r1, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f854 	bl	8002d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2288      	movs	r2, #136	; 0x88
 8002c88:	2120      	movs	r1, #32
 8002c8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2284      	movs	r2, #132	; 0x84
 8002c90:	2100      	movs	r1, #0
 8002c92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2284      	movs	r2, #132	; 0x84
 8002cae:	5c9b      	ldrb	r3, [r3, r2]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e02f      	b.n	8002d18 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2284      	movs	r2, #132	; 0x84
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2288      	movs	r2, #136	; 0x88
 8002cc4:	2124      	movs	r1, #36	; 0x24
 8002cc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4a0e      	ldr	r2, [pc, #56]	; (8002d20 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f813 	bl	8002d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2288      	movs	r2, #136	; 0x88
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2284      	movs	r2, #132	; 0x84
 8002d12:	2100      	movs	r1, #0
 8002d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	f1ffffff 	.word	0xf1ffffff

08002d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d108      	bne.n	8002d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	226a      	movs	r2, #106	; 0x6a
 8002d38:	2101      	movs	r1, #1
 8002d3a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2268      	movs	r2, #104	; 0x68
 8002d40:	2101      	movs	r1, #1
 8002d42:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d44:	e043      	b.n	8002dce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d46:	260f      	movs	r6, #15
 8002d48:	19bb      	adds	r3, r7, r6
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d4e:	200e      	movs	r0, #14
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	2208      	movs	r2, #8
 8002d54:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	0e5b      	lsrs	r3, r3, #25
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	240d      	movs	r4, #13
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2107      	movs	r1, #7
 8002d66:	400a      	ands	r2, r1
 8002d68:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	0f5b      	lsrs	r3, r3, #29
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	250c      	movs	r5, #12
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	2107      	movs	r1, #7
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d7e:	183b      	adds	r3, r7, r0
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	197a      	adds	r2, r7, r5
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	4914      	ldr	r1, [pc, #80]	; (8002dd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d88:	5c8a      	ldrb	r2, [r1, r2]
 8002d8a:	435a      	muls	r2, r3
 8002d8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d8e:	197b      	adds	r3, r7, r5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <UARTEx_SetNbDataToProcess+0xb8>)
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d96:	0019      	movs	r1, r3
 8002d98:	f7fd fa48 	bl	800022c <__divsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	b299      	uxth	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	226a      	movs	r2, #106	; 0x6a
 8002da4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002da6:	19bb      	adds	r3, r7, r6
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	193a      	adds	r2, r7, r4
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <UARTEx_SetNbDataToProcess+0xb4>)
 8002db0:	5c8a      	ldrb	r2, [r1, r2]
 8002db2:	435a      	muls	r2, r3
 8002db4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <UARTEx_SetNbDataToProcess+0xb8>)
 8002dbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	f7fd fa34 	bl	800022c <__divsi3>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2268      	movs	r2, #104	; 0x68
 8002dcc:	5299      	strh	r1, [r3, r2]
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b005      	add	sp, #20
 8002dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	080037c8 	.word	0x080037c8
 8002ddc:	080037d0 	.word	0x080037d0

08002de0 <__errno>:
 8002de0:	4b01      	ldr	r3, [pc, #4]	; (8002de8 <__errno+0x8>)
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	4770      	bx	lr
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	2000000c 	.word	0x2000000c

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4d0c      	ldr	r5, [pc, #48]	; (8002e24 <__libc_init_array+0x38>)
 8002df2:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 fc8b 	bl	8003718 <_init>
 8002e02:	4d0a      	ldr	r5, [pc, #40]	; (8002e2c <__libc_init_array+0x40>)
 8002e04:	4c0a      	ldr	r4, [pc, #40]	; (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08003814 	.word	0x08003814
 8002e28:	08003814 	.word	0x08003814
 8002e2c:	08003814 	.word	0x08003814
 8002e30:	08003818 	.word	0x08003818

08002e34 <memset>:
 8002e34:	0003      	movs	r3, r0
 8002e36:	1882      	adds	r2, r0, r2
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	7019      	strb	r1, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <siprintf>:
 8002e44:	b40e      	push	{r1, r2, r3}
 8002e46:	b500      	push	{lr}
 8002e48:	490b      	ldr	r1, [pc, #44]	; (8002e78 <siprintf+0x34>)
 8002e4a:	b09c      	sub	sp, #112	; 0x70
 8002e4c:	ab1d      	add	r3, sp, #116	; 0x74
 8002e4e:	9002      	str	r0, [sp, #8]
 8002e50:	9006      	str	r0, [sp, #24]
 8002e52:	9107      	str	r1, [sp, #28]
 8002e54:	9104      	str	r1, [sp, #16]
 8002e56:	4809      	ldr	r0, [pc, #36]	; (8002e7c <siprintf+0x38>)
 8002e58:	4909      	ldr	r1, [pc, #36]	; (8002e80 <siprintf+0x3c>)
 8002e5a:	cb04      	ldmia	r3!, {r2}
 8002e5c:	9105      	str	r1, [sp, #20]
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	a902      	add	r1, sp, #8
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	f000 f870 	bl	8002f48 <_svfiprintf_r>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9a02      	ldr	r2, [sp, #8]
 8002e6c:	7013      	strb	r3, [r2, #0]
 8002e6e:	b01c      	add	sp, #112	; 0x70
 8002e70:	bc08      	pop	{r3}
 8002e72:	b003      	add	sp, #12
 8002e74:	4718      	bx	r3
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	7fffffff 	.word	0x7fffffff
 8002e7c:	2000000c 	.word	0x2000000c
 8002e80:	ffff0208 	.word	0xffff0208

08002e84 <__ssputs_r>:
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	688e      	ldr	r6, [r1, #8]
 8002e88:	b085      	sub	sp, #20
 8002e8a:	0007      	movs	r7, r0
 8002e8c:	000c      	movs	r4, r1
 8002e8e:	9203      	str	r2, [sp, #12]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	429e      	cmp	r6, r3
 8002e94:	d83c      	bhi.n	8002f10 <__ssputs_r+0x8c>
 8002e96:	2390      	movs	r3, #144	; 0x90
 8002e98:	898a      	ldrh	r2, [r1, #12]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	421a      	tst	r2, r3
 8002e9e:	d034      	beq.n	8002f0a <__ssputs_r+0x86>
 8002ea0:	6909      	ldr	r1, [r1, #16]
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	6960      	ldr	r0, [r4, #20]
 8002ea6:	1a5b      	subs	r3, r3, r1
 8002ea8:	9302      	str	r3, [sp, #8]
 8002eaa:	2303      	movs	r3, #3
 8002eac:	4343      	muls	r3, r0
 8002eae:	0fdd      	lsrs	r5, r3, #31
 8002eb0:	18ed      	adds	r5, r5, r3
 8002eb2:	9b01      	ldr	r3, [sp, #4]
 8002eb4:	9802      	ldr	r0, [sp, #8]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	181b      	adds	r3, r3, r0
 8002eba:	106d      	asrs	r5, r5, #1
 8002ebc:	42ab      	cmp	r3, r5
 8002ebe:	d900      	bls.n	8002ec2 <__ssputs_r+0x3e>
 8002ec0:	001d      	movs	r5, r3
 8002ec2:	0553      	lsls	r3, r2, #21
 8002ec4:	d532      	bpl.n	8002f2c <__ssputs_r+0xa8>
 8002ec6:	0029      	movs	r1, r5
 8002ec8:	0038      	movs	r0, r7
 8002eca:	f000 fb53 	bl	8003574 <_malloc_r>
 8002ece:	1e06      	subs	r6, r0, #0
 8002ed0:	d109      	bne.n	8002ee6 <__ssputs_r+0x62>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	2340      	movs	r3, #64	; 0x40
 8002ed8:	2001      	movs	r0, #1
 8002eda:	89a2      	ldrh	r2, [r4, #12]
 8002edc:	4240      	negs	r0, r0
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	81a3      	strh	r3, [r4, #12]
 8002ee2:	b005      	add	sp, #20
 8002ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee6:	9a02      	ldr	r2, [sp, #8]
 8002ee8:	6921      	ldr	r1, [r4, #16]
 8002eea:	f000 faba 	bl	8003462 <memcpy>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <__ssputs_r+0xc0>)
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	9b02      	ldr	r3, [sp, #8]
 8002efc:	6126      	str	r6, [r4, #16]
 8002efe:	18f6      	adds	r6, r6, r3
 8002f00:	6026      	str	r6, [r4, #0]
 8002f02:	6165      	str	r5, [r4, #20]
 8002f04:	9e01      	ldr	r6, [sp, #4]
 8002f06:	1aed      	subs	r5, r5, r3
 8002f08:	60a5      	str	r5, [r4, #8]
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	429e      	cmp	r6, r3
 8002f0e:	d900      	bls.n	8002f12 <__ssputs_r+0x8e>
 8002f10:	9e01      	ldr	r6, [sp, #4]
 8002f12:	0032      	movs	r2, r6
 8002f14:	9903      	ldr	r1, [sp, #12]
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	f000 faac 	bl	8003474 <memmove>
 8002f1c:	68a3      	ldr	r3, [r4, #8]
 8002f1e:	2000      	movs	r0, #0
 8002f20:	1b9b      	subs	r3, r3, r6
 8002f22:	60a3      	str	r3, [r4, #8]
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	199e      	adds	r6, r3, r6
 8002f28:	6026      	str	r6, [r4, #0]
 8002f2a:	e7da      	b.n	8002ee2 <__ssputs_r+0x5e>
 8002f2c:	002a      	movs	r2, r5
 8002f2e:	0038      	movs	r0, r7
 8002f30:	f000 fb96 	bl	8003660 <_realloc_r>
 8002f34:	1e06      	subs	r6, r0, #0
 8002f36:	d1e0      	bne.n	8002efa <__ssputs_r+0x76>
 8002f38:	0038      	movs	r0, r7
 8002f3a:	6921      	ldr	r1, [r4, #16]
 8002f3c:	f000 faae 	bl	800349c <_free_r>
 8002f40:	e7c7      	b.n	8002ed2 <__ssputs_r+0x4e>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	fffffb7f 	.word	0xfffffb7f

08002f48 <_svfiprintf_r>:
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	b0a1      	sub	sp, #132	; 0x84
 8002f4c:	9003      	str	r0, [sp, #12]
 8002f4e:	001d      	movs	r5, r3
 8002f50:	898b      	ldrh	r3, [r1, #12]
 8002f52:	000f      	movs	r7, r1
 8002f54:	0016      	movs	r6, r2
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	d511      	bpl.n	8002f7e <_svfiprintf_r+0x36>
 8002f5a:	690b      	ldr	r3, [r1, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10e      	bne.n	8002f7e <_svfiprintf_r+0x36>
 8002f60:	2140      	movs	r1, #64	; 0x40
 8002f62:	f000 fb07 	bl	8003574 <_malloc_r>
 8002f66:	6038      	str	r0, [r7, #0]
 8002f68:	6138      	str	r0, [r7, #16]
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d105      	bne.n	8002f7a <_svfiprintf_r+0x32>
 8002f6e:	230c      	movs	r3, #12
 8002f70:	9a03      	ldr	r2, [sp, #12]
 8002f72:	3801      	subs	r0, #1
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	b021      	add	sp, #132	; 0x84
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	ac08      	add	r4, sp, #32
 8002f82:	6163      	str	r3, [r4, #20]
 8002f84:	3320      	adds	r3, #32
 8002f86:	7663      	strb	r3, [r4, #25]
 8002f88:	3310      	adds	r3, #16
 8002f8a:	76a3      	strb	r3, [r4, #26]
 8002f8c:	9507      	str	r5, [sp, #28]
 8002f8e:	0035      	movs	r5, r6
 8002f90:	782b      	ldrb	r3, [r5, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <_svfiprintf_r+0x52>
 8002f96:	2b25      	cmp	r3, #37	; 0x25
 8002f98:	d147      	bne.n	800302a <_svfiprintf_r+0xe2>
 8002f9a:	1bab      	subs	r3, r5, r6
 8002f9c:	9305      	str	r3, [sp, #20]
 8002f9e:	42b5      	cmp	r5, r6
 8002fa0:	d00c      	beq.n	8002fbc <_svfiprintf_r+0x74>
 8002fa2:	0032      	movs	r2, r6
 8002fa4:	0039      	movs	r1, r7
 8002fa6:	9803      	ldr	r0, [sp, #12]
 8002fa8:	f7ff ff6c 	bl	8002e84 <__ssputs_r>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d100      	bne.n	8002fb2 <_svfiprintf_r+0x6a>
 8002fb0:	e0ae      	b.n	8003110 <_svfiprintf_r+0x1c8>
 8002fb2:	6962      	ldr	r2, [r4, #20]
 8002fb4:	9b05      	ldr	r3, [sp, #20]
 8002fb6:	4694      	mov	ip, r2
 8002fb8:	4463      	add	r3, ip
 8002fba:	6163      	str	r3, [r4, #20]
 8002fbc:	782b      	ldrb	r3, [r5, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d100      	bne.n	8002fc4 <_svfiprintf_r+0x7c>
 8002fc2:	e0a5      	b.n	8003110 <_svfiprintf_r+0x1c8>
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	4252      	negs	r2, r2
 8002fca:	6062      	str	r2, [r4, #4]
 8002fcc:	a904      	add	r1, sp, #16
 8002fce:	3254      	adds	r2, #84	; 0x54
 8002fd0:	1852      	adds	r2, r2, r1
 8002fd2:	1c6e      	adds	r6, r5, #1
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	60e3      	str	r3, [r4, #12]
 8002fd8:	60a3      	str	r3, [r4, #8]
 8002fda:	7013      	strb	r3, [r2, #0]
 8002fdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fde:	2205      	movs	r2, #5
 8002fe0:	7831      	ldrb	r1, [r6, #0]
 8002fe2:	4854      	ldr	r0, [pc, #336]	; (8003134 <_svfiprintf_r+0x1ec>)
 8002fe4:	f000 fa32 	bl	800344c <memchr>
 8002fe8:	1c75      	adds	r5, r6, #1
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d11f      	bne.n	800302e <_svfiprintf_r+0xe6>
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	06d3      	lsls	r3, r2, #27
 8002ff2:	d504      	bpl.n	8002ffe <_svfiprintf_r+0xb6>
 8002ff4:	2353      	movs	r3, #83	; 0x53
 8002ff6:	a904      	add	r1, sp, #16
 8002ff8:	185b      	adds	r3, r3, r1
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	7019      	strb	r1, [r3, #0]
 8002ffe:	0713      	lsls	r3, r2, #28
 8003000:	d504      	bpl.n	800300c <_svfiprintf_r+0xc4>
 8003002:	2353      	movs	r3, #83	; 0x53
 8003004:	a904      	add	r1, sp, #16
 8003006:	185b      	adds	r3, r3, r1
 8003008:	212b      	movs	r1, #43	; 0x2b
 800300a:	7019      	strb	r1, [r3, #0]
 800300c:	7833      	ldrb	r3, [r6, #0]
 800300e:	2b2a      	cmp	r3, #42	; 0x2a
 8003010:	d016      	beq.n	8003040 <_svfiprintf_r+0xf8>
 8003012:	0035      	movs	r5, r6
 8003014:	2100      	movs	r1, #0
 8003016:	200a      	movs	r0, #10
 8003018:	68e3      	ldr	r3, [r4, #12]
 800301a:	782a      	ldrb	r2, [r5, #0]
 800301c:	1c6e      	adds	r6, r5, #1
 800301e:	3a30      	subs	r2, #48	; 0x30
 8003020:	2a09      	cmp	r2, #9
 8003022:	d94e      	bls.n	80030c2 <_svfiprintf_r+0x17a>
 8003024:	2900      	cmp	r1, #0
 8003026:	d111      	bne.n	800304c <_svfiprintf_r+0x104>
 8003028:	e017      	b.n	800305a <_svfiprintf_r+0x112>
 800302a:	3501      	adds	r5, #1
 800302c:	e7b0      	b.n	8002f90 <_svfiprintf_r+0x48>
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <_svfiprintf_r+0x1ec>)
 8003030:	6822      	ldr	r2, [r4, #0]
 8003032:	1ac0      	subs	r0, r0, r3
 8003034:	2301      	movs	r3, #1
 8003036:	4083      	lsls	r3, r0
 8003038:	4313      	orrs	r3, r2
 800303a:	002e      	movs	r6, r5
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	e7ce      	b.n	8002fde <_svfiprintf_r+0x96>
 8003040:	9b07      	ldr	r3, [sp, #28]
 8003042:	1d19      	adds	r1, r3, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	9107      	str	r1, [sp, #28]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db01      	blt.n	8003050 <_svfiprintf_r+0x108>
 800304c:	930b      	str	r3, [sp, #44]	; 0x2c
 800304e:	e004      	b.n	800305a <_svfiprintf_r+0x112>
 8003050:	425b      	negs	r3, r3
 8003052:	60e3      	str	r3, [r4, #12]
 8003054:	2302      	movs	r3, #2
 8003056:	4313      	orrs	r3, r2
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	782b      	ldrb	r3, [r5, #0]
 800305c:	2b2e      	cmp	r3, #46	; 0x2e
 800305e:	d10a      	bne.n	8003076 <_svfiprintf_r+0x12e>
 8003060:	786b      	ldrb	r3, [r5, #1]
 8003062:	2b2a      	cmp	r3, #42	; 0x2a
 8003064:	d135      	bne.n	80030d2 <_svfiprintf_r+0x18a>
 8003066:	9b07      	ldr	r3, [sp, #28]
 8003068:	3502      	adds	r5, #2
 800306a:	1d1a      	adds	r2, r3, #4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	9207      	str	r2, [sp, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db2b      	blt.n	80030cc <_svfiprintf_r+0x184>
 8003074:	9309      	str	r3, [sp, #36]	; 0x24
 8003076:	4e30      	ldr	r6, [pc, #192]	; (8003138 <_svfiprintf_r+0x1f0>)
 8003078:	2203      	movs	r2, #3
 800307a:	0030      	movs	r0, r6
 800307c:	7829      	ldrb	r1, [r5, #0]
 800307e:	f000 f9e5 	bl	800344c <memchr>
 8003082:	2800      	cmp	r0, #0
 8003084:	d006      	beq.n	8003094 <_svfiprintf_r+0x14c>
 8003086:	2340      	movs	r3, #64	; 0x40
 8003088:	1b80      	subs	r0, r0, r6
 800308a:	4083      	lsls	r3, r0
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	3501      	adds	r5, #1
 8003090:	4313      	orrs	r3, r2
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	7829      	ldrb	r1, [r5, #0]
 8003096:	2206      	movs	r2, #6
 8003098:	4828      	ldr	r0, [pc, #160]	; (800313c <_svfiprintf_r+0x1f4>)
 800309a:	1c6e      	adds	r6, r5, #1
 800309c:	7621      	strb	r1, [r4, #24]
 800309e:	f000 f9d5 	bl	800344c <memchr>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d03c      	beq.n	8003120 <_svfiprintf_r+0x1d8>
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <_svfiprintf_r+0x1f8>)
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d125      	bne.n	80030f8 <_svfiprintf_r+0x1b0>
 80030ac:	2207      	movs	r2, #7
 80030ae:	9b07      	ldr	r3, [sp, #28]
 80030b0:	3307      	adds	r3, #7
 80030b2:	4393      	bics	r3, r2
 80030b4:	3308      	adds	r3, #8
 80030b6:	9307      	str	r3, [sp, #28]
 80030b8:	6963      	ldr	r3, [r4, #20]
 80030ba:	9a04      	ldr	r2, [sp, #16]
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	6163      	str	r3, [r4, #20]
 80030c0:	e765      	b.n	8002f8e <_svfiprintf_r+0x46>
 80030c2:	4343      	muls	r3, r0
 80030c4:	0035      	movs	r5, r6
 80030c6:	2101      	movs	r1, #1
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	e7a6      	b.n	800301a <_svfiprintf_r+0xd2>
 80030cc:	2301      	movs	r3, #1
 80030ce:	425b      	negs	r3, r3
 80030d0:	e7d0      	b.n	8003074 <_svfiprintf_r+0x12c>
 80030d2:	2300      	movs	r3, #0
 80030d4:	200a      	movs	r0, #10
 80030d6:	001a      	movs	r2, r3
 80030d8:	3501      	adds	r5, #1
 80030da:	6063      	str	r3, [r4, #4]
 80030dc:	7829      	ldrb	r1, [r5, #0]
 80030de:	1c6e      	adds	r6, r5, #1
 80030e0:	3930      	subs	r1, #48	; 0x30
 80030e2:	2909      	cmp	r1, #9
 80030e4:	d903      	bls.n	80030ee <_svfiprintf_r+0x1a6>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0c5      	beq.n	8003076 <_svfiprintf_r+0x12e>
 80030ea:	9209      	str	r2, [sp, #36]	; 0x24
 80030ec:	e7c3      	b.n	8003076 <_svfiprintf_r+0x12e>
 80030ee:	4342      	muls	r2, r0
 80030f0:	0035      	movs	r5, r6
 80030f2:	2301      	movs	r3, #1
 80030f4:	1852      	adds	r2, r2, r1
 80030f6:	e7f1      	b.n	80030dc <_svfiprintf_r+0x194>
 80030f8:	ab07      	add	r3, sp, #28
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	003a      	movs	r2, r7
 80030fe:	0021      	movs	r1, r4
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <_svfiprintf_r+0x1fc>)
 8003102:	9803      	ldr	r0, [sp, #12]
 8003104:	e000      	b.n	8003108 <_svfiprintf_r+0x1c0>
 8003106:	bf00      	nop
 8003108:	9004      	str	r0, [sp, #16]
 800310a:	9b04      	ldr	r3, [sp, #16]
 800310c:	3301      	adds	r3, #1
 800310e:	d1d3      	bne.n	80030b8 <_svfiprintf_r+0x170>
 8003110:	89bb      	ldrh	r3, [r7, #12]
 8003112:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003114:	065b      	lsls	r3, r3, #25
 8003116:	d400      	bmi.n	800311a <_svfiprintf_r+0x1d2>
 8003118:	e72d      	b.n	8002f76 <_svfiprintf_r+0x2e>
 800311a:	2001      	movs	r0, #1
 800311c:	4240      	negs	r0, r0
 800311e:	e72a      	b.n	8002f76 <_svfiprintf_r+0x2e>
 8003120:	ab07      	add	r3, sp, #28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	003a      	movs	r2, r7
 8003126:	0021      	movs	r1, r4
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <_svfiprintf_r+0x1fc>)
 800312a:	9803      	ldr	r0, [sp, #12]
 800312c:	f000 f87c 	bl	8003228 <_printf_i>
 8003130:	e7ea      	b.n	8003108 <_svfiprintf_r+0x1c0>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	080037d8 	.word	0x080037d8
 8003138:	080037de 	.word	0x080037de
 800313c:	080037e2 	.word	0x080037e2
 8003140:	00000000 	.word	0x00000000
 8003144:	08002e85 	.word	0x08002e85

08003148 <_printf_common>:
 8003148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800314a:	0015      	movs	r5, r2
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	688a      	ldr	r2, [r1, #8]
 8003150:	690b      	ldr	r3, [r1, #16]
 8003152:	000c      	movs	r4, r1
 8003154:	9000      	str	r0, [sp, #0]
 8003156:	4293      	cmp	r3, r2
 8003158:	da00      	bge.n	800315c <_printf_common+0x14>
 800315a:	0013      	movs	r3, r2
 800315c:	0022      	movs	r2, r4
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	3243      	adds	r2, #67	; 0x43
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	2a00      	cmp	r2, #0
 8003166:	d001      	beq.n	800316c <_printf_common+0x24>
 8003168:	3301      	adds	r3, #1
 800316a:	602b      	str	r3, [r5, #0]
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	069b      	lsls	r3, r3, #26
 8003170:	d502      	bpl.n	8003178 <_printf_common+0x30>
 8003172:	682b      	ldr	r3, [r5, #0]
 8003174:	3302      	adds	r3, #2
 8003176:	602b      	str	r3, [r5, #0]
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	2306      	movs	r3, #6
 800317c:	0017      	movs	r7, r2
 800317e:	401f      	ands	r7, r3
 8003180:	421a      	tst	r2, r3
 8003182:	d027      	beq.n	80031d4 <_printf_common+0x8c>
 8003184:	0023      	movs	r3, r4
 8003186:	3343      	adds	r3, #67	; 0x43
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	1e5a      	subs	r2, r3, #1
 800318c:	4193      	sbcs	r3, r2
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	0692      	lsls	r2, r2, #26
 8003192:	d430      	bmi.n	80031f6 <_printf_common+0xae>
 8003194:	0022      	movs	r2, r4
 8003196:	9901      	ldr	r1, [sp, #4]
 8003198:	9800      	ldr	r0, [sp, #0]
 800319a:	9e08      	ldr	r6, [sp, #32]
 800319c:	3243      	adds	r2, #67	; 0x43
 800319e:	47b0      	blx	r6
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d025      	beq.n	80031f0 <_printf_common+0xa8>
 80031a4:	2306      	movs	r3, #6
 80031a6:	6820      	ldr	r0, [r4, #0]
 80031a8:	682a      	ldr	r2, [r5, #0]
 80031aa:	68e1      	ldr	r1, [r4, #12]
 80031ac:	2500      	movs	r5, #0
 80031ae:	4003      	ands	r3, r0
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d103      	bne.n	80031bc <_printf_common+0x74>
 80031b4:	1a8d      	subs	r5, r1, r2
 80031b6:	43eb      	mvns	r3, r5
 80031b8:	17db      	asrs	r3, r3, #31
 80031ba:	401d      	ands	r5, r3
 80031bc:	68a3      	ldr	r3, [r4, #8]
 80031be:	6922      	ldr	r2, [r4, #16]
 80031c0:	4293      	cmp	r3, r2
 80031c2:	dd01      	ble.n	80031c8 <_printf_common+0x80>
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	18ed      	adds	r5, r5, r3
 80031c8:	2700      	movs	r7, #0
 80031ca:	42bd      	cmp	r5, r7
 80031cc:	d120      	bne.n	8003210 <_printf_common+0xc8>
 80031ce:	2000      	movs	r0, #0
 80031d0:	e010      	b.n	80031f4 <_printf_common+0xac>
 80031d2:	3701      	adds	r7, #1
 80031d4:	68e3      	ldr	r3, [r4, #12]
 80031d6:	682a      	ldr	r2, [r5, #0]
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	42bb      	cmp	r3, r7
 80031dc:	ddd2      	ble.n	8003184 <_printf_common+0x3c>
 80031de:	0022      	movs	r2, r4
 80031e0:	2301      	movs	r3, #1
 80031e2:	9901      	ldr	r1, [sp, #4]
 80031e4:	9800      	ldr	r0, [sp, #0]
 80031e6:	9e08      	ldr	r6, [sp, #32]
 80031e8:	3219      	adds	r2, #25
 80031ea:	47b0      	blx	r6
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d1f0      	bne.n	80031d2 <_printf_common+0x8a>
 80031f0:	2001      	movs	r0, #1
 80031f2:	4240      	negs	r0, r0
 80031f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031f6:	2030      	movs	r0, #48	; 0x30
 80031f8:	18e1      	adds	r1, r4, r3
 80031fa:	3143      	adds	r1, #67	; 0x43
 80031fc:	7008      	strb	r0, [r1, #0]
 80031fe:	0021      	movs	r1, r4
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	3145      	adds	r1, #69	; 0x45
 8003204:	7809      	ldrb	r1, [r1, #0]
 8003206:	18a2      	adds	r2, r4, r2
 8003208:	3243      	adds	r2, #67	; 0x43
 800320a:	3302      	adds	r3, #2
 800320c:	7011      	strb	r1, [r2, #0]
 800320e:	e7c1      	b.n	8003194 <_printf_common+0x4c>
 8003210:	0022      	movs	r2, r4
 8003212:	2301      	movs	r3, #1
 8003214:	9901      	ldr	r1, [sp, #4]
 8003216:	9800      	ldr	r0, [sp, #0]
 8003218:	9e08      	ldr	r6, [sp, #32]
 800321a:	321a      	adds	r2, #26
 800321c:	47b0      	blx	r6
 800321e:	1c43      	adds	r3, r0, #1
 8003220:	d0e6      	beq.n	80031f0 <_printf_common+0xa8>
 8003222:	3701      	adds	r7, #1
 8003224:	e7d1      	b.n	80031ca <_printf_common+0x82>
	...

08003228 <_printf_i>:
 8003228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322a:	b08b      	sub	sp, #44	; 0x2c
 800322c:	9206      	str	r2, [sp, #24]
 800322e:	000a      	movs	r2, r1
 8003230:	3243      	adds	r2, #67	; 0x43
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	9005      	str	r0, [sp, #20]
 8003236:	9204      	str	r2, [sp, #16]
 8003238:	7e0a      	ldrb	r2, [r1, #24]
 800323a:	000c      	movs	r4, r1
 800323c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800323e:	2a78      	cmp	r2, #120	; 0x78
 8003240:	d807      	bhi.n	8003252 <_printf_i+0x2a>
 8003242:	2a62      	cmp	r2, #98	; 0x62
 8003244:	d809      	bhi.n	800325a <_printf_i+0x32>
 8003246:	2a00      	cmp	r2, #0
 8003248:	d100      	bne.n	800324c <_printf_i+0x24>
 800324a:	e0c1      	b.n	80033d0 <_printf_i+0x1a8>
 800324c:	2a58      	cmp	r2, #88	; 0x58
 800324e:	d100      	bne.n	8003252 <_printf_i+0x2a>
 8003250:	e08c      	b.n	800336c <_printf_i+0x144>
 8003252:	0026      	movs	r6, r4
 8003254:	3642      	adds	r6, #66	; 0x42
 8003256:	7032      	strb	r2, [r6, #0]
 8003258:	e022      	b.n	80032a0 <_printf_i+0x78>
 800325a:	0010      	movs	r0, r2
 800325c:	3863      	subs	r0, #99	; 0x63
 800325e:	2815      	cmp	r0, #21
 8003260:	d8f7      	bhi.n	8003252 <_printf_i+0x2a>
 8003262:	f7fc ff4f 	bl	8000104 <__gnu_thumb1_case_shi>
 8003266:	0016      	.short	0x0016
 8003268:	fff6001f 	.word	0xfff6001f
 800326c:	fff6fff6 	.word	0xfff6fff6
 8003270:	001ffff6 	.word	0x001ffff6
 8003274:	fff6fff6 	.word	0xfff6fff6
 8003278:	fff6fff6 	.word	0xfff6fff6
 800327c:	003600a8 	.word	0x003600a8
 8003280:	fff6009a 	.word	0xfff6009a
 8003284:	00b9fff6 	.word	0x00b9fff6
 8003288:	0036fff6 	.word	0x0036fff6
 800328c:	fff6fff6 	.word	0xfff6fff6
 8003290:	009e      	.short	0x009e
 8003292:	0026      	movs	r6, r4
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	3642      	adds	r6, #66	; 0x42
 8003298:	1d11      	adds	r1, r2, #4
 800329a:	6019      	str	r1, [r3, #0]
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	7033      	strb	r3, [r6, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0a7      	b.n	80033f4 <_printf_i+0x1cc>
 80032a4:	6808      	ldr	r0, [r1, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	1d0a      	adds	r2, r1, #4
 80032aa:	0605      	lsls	r5, r0, #24
 80032ac:	d50b      	bpl.n	80032c6 <_printf_i+0x9e>
 80032ae:	680d      	ldr	r5, [r1, #0]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	2d00      	cmp	r5, #0
 80032b4:	da03      	bge.n	80032be <_printf_i+0x96>
 80032b6:	232d      	movs	r3, #45	; 0x2d
 80032b8:	9a04      	ldr	r2, [sp, #16]
 80032ba:	426d      	negs	r5, r5
 80032bc:	7013      	strb	r3, [r2, #0]
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <_printf_i+0x21c>)
 80032c0:	270a      	movs	r7, #10
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	e01b      	b.n	80032fe <_printf_i+0xd6>
 80032c6:	680d      	ldr	r5, [r1, #0]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	0641      	lsls	r1, r0, #25
 80032cc:	d5f1      	bpl.n	80032b2 <_printf_i+0x8a>
 80032ce:	b22d      	sxth	r5, r5
 80032d0:	e7ef      	b.n	80032b2 <_printf_i+0x8a>
 80032d2:	680d      	ldr	r5, [r1, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	1d08      	adds	r0, r1, #4
 80032d8:	6018      	str	r0, [r3, #0]
 80032da:	062e      	lsls	r6, r5, #24
 80032dc:	d501      	bpl.n	80032e2 <_printf_i+0xba>
 80032de:	680d      	ldr	r5, [r1, #0]
 80032e0:	e003      	b.n	80032ea <_printf_i+0xc2>
 80032e2:	066d      	lsls	r5, r5, #25
 80032e4:	d5fb      	bpl.n	80032de <_printf_i+0xb6>
 80032e6:	680d      	ldr	r5, [r1, #0]
 80032e8:	b2ad      	uxth	r5, r5
 80032ea:	4b56      	ldr	r3, [pc, #344]	; (8003444 <_printf_i+0x21c>)
 80032ec:	2708      	movs	r7, #8
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	2a6f      	cmp	r2, #111	; 0x6f
 80032f2:	d000      	beq.n	80032f6 <_printf_i+0xce>
 80032f4:	3702      	adds	r7, #2
 80032f6:	0023      	movs	r3, r4
 80032f8:	2200      	movs	r2, #0
 80032fa:	3343      	adds	r3, #67	; 0x43
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db03      	blt.n	800330e <_printf_i+0xe6>
 8003306:	2204      	movs	r2, #4
 8003308:	6821      	ldr	r1, [r4, #0]
 800330a:	4391      	bics	r1, r2
 800330c:	6021      	str	r1, [r4, #0]
 800330e:	2d00      	cmp	r5, #0
 8003310:	d102      	bne.n	8003318 <_printf_i+0xf0>
 8003312:	9e04      	ldr	r6, [sp, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00c      	beq.n	8003332 <_printf_i+0x10a>
 8003318:	9e04      	ldr	r6, [sp, #16]
 800331a:	0028      	movs	r0, r5
 800331c:	0039      	movs	r1, r7
 800331e:	f7fc ff81 	bl	8000224 <__aeabi_uidivmod>
 8003322:	9b03      	ldr	r3, [sp, #12]
 8003324:	3e01      	subs	r6, #1
 8003326:	5c5b      	ldrb	r3, [r3, r1]
 8003328:	7033      	strb	r3, [r6, #0]
 800332a:	002b      	movs	r3, r5
 800332c:	0005      	movs	r5, r0
 800332e:	429f      	cmp	r7, r3
 8003330:	d9f3      	bls.n	800331a <_printf_i+0xf2>
 8003332:	2f08      	cmp	r7, #8
 8003334:	d109      	bne.n	800334a <_printf_i+0x122>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	07db      	lsls	r3, r3, #31
 800333a:	d506      	bpl.n	800334a <_printf_i+0x122>
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	6922      	ldr	r2, [r4, #16]
 8003340:	4293      	cmp	r3, r2
 8003342:	dc02      	bgt.n	800334a <_printf_i+0x122>
 8003344:	2330      	movs	r3, #48	; 0x30
 8003346:	3e01      	subs	r6, #1
 8003348:	7033      	strb	r3, [r6, #0]
 800334a:	9b04      	ldr	r3, [sp, #16]
 800334c:	1b9b      	subs	r3, r3, r6
 800334e:	6123      	str	r3, [r4, #16]
 8003350:	9b07      	ldr	r3, [sp, #28]
 8003352:	0021      	movs	r1, r4
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	9805      	ldr	r0, [sp, #20]
 8003358:	9b06      	ldr	r3, [sp, #24]
 800335a:	aa09      	add	r2, sp, #36	; 0x24
 800335c:	f7ff fef4 	bl	8003148 <_printf_common>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d14c      	bne.n	80033fe <_printf_i+0x1d6>
 8003364:	2001      	movs	r0, #1
 8003366:	4240      	negs	r0, r0
 8003368:	b00b      	add	sp, #44	; 0x2c
 800336a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336c:	3145      	adds	r1, #69	; 0x45
 800336e:	700a      	strb	r2, [r1, #0]
 8003370:	4a34      	ldr	r2, [pc, #208]	; (8003444 <_printf_i+0x21c>)
 8003372:	9203      	str	r2, [sp, #12]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	6821      	ldr	r1, [r4, #0]
 8003378:	ca20      	ldmia	r2!, {r5}
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	0608      	lsls	r0, r1, #24
 800337e:	d516      	bpl.n	80033ae <_printf_i+0x186>
 8003380:	07cb      	lsls	r3, r1, #31
 8003382:	d502      	bpl.n	800338a <_printf_i+0x162>
 8003384:	2320      	movs	r3, #32
 8003386:	4319      	orrs	r1, r3
 8003388:	6021      	str	r1, [r4, #0]
 800338a:	2710      	movs	r7, #16
 800338c:	2d00      	cmp	r5, #0
 800338e:	d1b2      	bne.n	80032f6 <_printf_i+0xce>
 8003390:	2320      	movs	r3, #32
 8003392:	6822      	ldr	r2, [r4, #0]
 8003394:	439a      	bics	r2, r3
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	e7ad      	b.n	80032f6 <_printf_i+0xce>
 800339a:	2220      	movs	r2, #32
 800339c:	6809      	ldr	r1, [r1, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	6022      	str	r2, [r4, #0]
 80033a2:	0022      	movs	r2, r4
 80033a4:	2178      	movs	r1, #120	; 0x78
 80033a6:	3245      	adds	r2, #69	; 0x45
 80033a8:	7011      	strb	r1, [r2, #0]
 80033aa:	4a27      	ldr	r2, [pc, #156]	; (8003448 <_printf_i+0x220>)
 80033ac:	e7e1      	b.n	8003372 <_printf_i+0x14a>
 80033ae:	0648      	lsls	r0, r1, #25
 80033b0:	d5e6      	bpl.n	8003380 <_printf_i+0x158>
 80033b2:	b2ad      	uxth	r5, r5
 80033b4:	e7e4      	b.n	8003380 <_printf_i+0x158>
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	680d      	ldr	r5, [r1, #0]
 80033ba:	1d10      	adds	r0, r2, #4
 80033bc:	6949      	ldr	r1, [r1, #20]
 80033be:	6018      	str	r0, [r3, #0]
 80033c0:	6813      	ldr	r3, [r2, #0]
 80033c2:	062e      	lsls	r6, r5, #24
 80033c4:	d501      	bpl.n	80033ca <_printf_i+0x1a2>
 80033c6:	6019      	str	r1, [r3, #0]
 80033c8:	e002      	b.n	80033d0 <_printf_i+0x1a8>
 80033ca:	066d      	lsls	r5, r5, #25
 80033cc:	d5fb      	bpl.n	80033c6 <_printf_i+0x19e>
 80033ce:	8019      	strh	r1, [r3, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	9e04      	ldr	r6, [sp, #16]
 80033d4:	6123      	str	r3, [r4, #16]
 80033d6:	e7bb      	b.n	8003350 <_printf_i+0x128>
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	1d11      	adds	r1, r2, #4
 80033dc:	6019      	str	r1, [r3, #0]
 80033de:	6816      	ldr	r6, [r2, #0]
 80033e0:	2100      	movs	r1, #0
 80033e2:	0030      	movs	r0, r6
 80033e4:	6862      	ldr	r2, [r4, #4]
 80033e6:	f000 f831 	bl	800344c <memchr>
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d001      	beq.n	80033f2 <_printf_i+0x1ca>
 80033ee:	1b80      	subs	r0, r0, r6
 80033f0:	6060      	str	r0, [r4, #4]
 80033f2:	6863      	ldr	r3, [r4, #4]
 80033f4:	6123      	str	r3, [r4, #16]
 80033f6:	2300      	movs	r3, #0
 80033f8:	9a04      	ldr	r2, [sp, #16]
 80033fa:	7013      	strb	r3, [r2, #0]
 80033fc:	e7a8      	b.n	8003350 <_printf_i+0x128>
 80033fe:	6923      	ldr	r3, [r4, #16]
 8003400:	0032      	movs	r2, r6
 8003402:	9906      	ldr	r1, [sp, #24]
 8003404:	9805      	ldr	r0, [sp, #20]
 8003406:	9d07      	ldr	r5, [sp, #28]
 8003408:	47a8      	blx	r5
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	d0aa      	beq.n	8003364 <_printf_i+0x13c>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	079b      	lsls	r3, r3, #30
 8003412:	d415      	bmi.n	8003440 <_printf_i+0x218>
 8003414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003416:	68e0      	ldr	r0, [r4, #12]
 8003418:	4298      	cmp	r0, r3
 800341a:	daa5      	bge.n	8003368 <_printf_i+0x140>
 800341c:	0018      	movs	r0, r3
 800341e:	e7a3      	b.n	8003368 <_printf_i+0x140>
 8003420:	0022      	movs	r2, r4
 8003422:	2301      	movs	r3, #1
 8003424:	9906      	ldr	r1, [sp, #24]
 8003426:	9805      	ldr	r0, [sp, #20]
 8003428:	9e07      	ldr	r6, [sp, #28]
 800342a:	3219      	adds	r2, #25
 800342c:	47b0      	blx	r6
 800342e:	1c43      	adds	r3, r0, #1
 8003430:	d098      	beq.n	8003364 <_printf_i+0x13c>
 8003432:	3501      	adds	r5, #1
 8003434:	68e3      	ldr	r3, [r4, #12]
 8003436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	42ab      	cmp	r3, r5
 800343c:	dcf0      	bgt.n	8003420 <_printf_i+0x1f8>
 800343e:	e7e9      	b.n	8003414 <_printf_i+0x1ec>
 8003440:	2500      	movs	r5, #0
 8003442:	e7f7      	b.n	8003434 <_printf_i+0x20c>
 8003444:	080037e9 	.word	0x080037e9
 8003448:	080037fa 	.word	0x080037fa

0800344c <memchr>:
 800344c:	b2c9      	uxtb	r1, r1
 800344e:	1882      	adds	r2, r0, r2
 8003450:	4290      	cmp	r0, r2
 8003452:	d101      	bne.n	8003458 <memchr+0xc>
 8003454:	2000      	movs	r0, #0
 8003456:	4770      	bx	lr
 8003458:	7803      	ldrb	r3, [r0, #0]
 800345a:	428b      	cmp	r3, r1
 800345c:	d0fb      	beq.n	8003456 <memchr+0xa>
 800345e:	3001      	adds	r0, #1
 8003460:	e7f6      	b.n	8003450 <memchr+0x4>

08003462 <memcpy>:
 8003462:	2300      	movs	r3, #0
 8003464:	b510      	push	{r4, lr}
 8003466:	429a      	cmp	r2, r3
 8003468:	d100      	bne.n	800346c <memcpy+0xa>
 800346a:	bd10      	pop	{r4, pc}
 800346c:	5ccc      	ldrb	r4, [r1, r3]
 800346e:	54c4      	strb	r4, [r0, r3]
 8003470:	3301      	adds	r3, #1
 8003472:	e7f8      	b.n	8003466 <memcpy+0x4>

08003474 <memmove>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4288      	cmp	r0, r1
 8003478:	d902      	bls.n	8003480 <memmove+0xc>
 800347a:	188b      	adds	r3, r1, r2
 800347c:	4298      	cmp	r0, r3
 800347e:	d303      	bcc.n	8003488 <memmove+0x14>
 8003480:	2300      	movs	r3, #0
 8003482:	e007      	b.n	8003494 <memmove+0x20>
 8003484:	5c8b      	ldrb	r3, [r1, r2]
 8003486:	5483      	strb	r3, [r0, r2]
 8003488:	3a01      	subs	r2, #1
 800348a:	d2fb      	bcs.n	8003484 <memmove+0x10>
 800348c:	bd10      	pop	{r4, pc}
 800348e:	5ccc      	ldrb	r4, [r1, r3]
 8003490:	54c4      	strb	r4, [r0, r3]
 8003492:	3301      	adds	r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d1fa      	bne.n	800348e <memmove+0x1a>
 8003498:	e7f8      	b.n	800348c <memmove+0x18>
	...

0800349c <_free_r>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	0005      	movs	r5, r0
 80034a0:	2900      	cmp	r1, #0
 80034a2:	d010      	beq.n	80034c6 <_free_r+0x2a>
 80034a4:	1f0c      	subs	r4, r1, #4
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da00      	bge.n	80034ae <_free_r+0x12>
 80034ac:	18e4      	adds	r4, r4, r3
 80034ae:	0028      	movs	r0, r5
 80034b0:	f000 f918 	bl	80036e4 <__malloc_lock>
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <_free_r+0x90>)
 80034b6:	6813      	ldr	r3, [r2, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <_free_r+0x2c>
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	6014      	str	r4, [r2, #0]
 80034c0:	0028      	movs	r0, r5
 80034c2:	f000 f917 	bl	80036f4 <__malloc_unlock>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d908      	bls.n	80034de <_free_r+0x42>
 80034cc:	6821      	ldr	r1, [r4, #0]
 80034ce:	1860      	adds	r0, r4, r1
 80034d0:	4283      	cmp	r3, r0
 80034d2:	d1f3      	bne.n	80034bc <_free_r+0x20>
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	1841      	adds	r1, r0, r1
 80034da:	6021      	str	r1, [r4, #0]
 80034dc:	e7ee      	b.n	80034bc <_free_r+0x20>
 80034de:	001a      	movs	r2, r3
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <_free_r+0x4e>
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	d9f9      	bls.n	80034de <_free_r+0x42>
 80034ea:	6811      	ldr	r1, [r2, #0]
 80034ec:	1850      	adds	r0, r2, r1
 80034ee:	42a0      	cmp	r0, r4
 80034f0:	d10b      	bne.n	800350a <_free_r+0x6e>
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	1809      	adds	r1, r1, r0
 80034f6:	1850      	adds	r0, r2, r1
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	4283      	cmp	r3, r0
 80034fc:	d1e0      	bne.n	80034c0 <_free_r+0x24>
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	1841      	adds	r1, r0, r1
 8003504:	6011      	str	r1, [r2, #0]
 8003506:	6053      	str	r3, [r2, #4]
 8003508:	e7da      	b.n	80034c0 <_free_r+0x24>
 800350a:	42a0      	cmp	r0, r4
 800350c:	d902      	bls.n	8003514 <_free_r+0x78>
 800350e:	230c      	movs	r3, #12
 8003510:	602b      	str	r3, [r5, #0]
 8003512:	e7d5      	b.n	80034c0 <_free_r+0x24>
 8003514:	6821      	ldr	r1, [r4, #0]
 8003516:	1860      	adds	r0, r4, r1
 8003518:	4283      	cmp	r3, r0
 800351a:	d103      	bne.n	8003524 <_free_r+0x88>
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	1841      	adds	r1, r0, r1
 8003522:	6021      	str	r1, [r4, #0]
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	6054      	str	r4, [r2, #4]
 8003528:	e7ca      	b.n	80034c0 <_free_r+0x24>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000128 	.word	0x20000128

08003530 <sbrk_aligned>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4e0f      	ldr	r6, [pc, #60]	; (8003570 <sbrk_aligned+0x40>)
 8003534:	000d      	movs	r5, r1
 8003536:	6831      	ldr	r1, [r6, #0]
 8003538:	0004      	movs	r4, r0
 800353a:	2900      	cmp	r1, #0
 800353c:	d102      	bne.n	8003544 <sbrk_aligned+0x14>
 800353e:	f000 f8bf 	bl	80036c0 <_sbrk_r>
 8003542:	6030      	str	r0, [r6, #0]
 8003544:	0029      	movs	r1, r5
 8003546:	0020      	movs	r0, r4
 8003548:	f000 f8ba 	bl	80036c0 <_sbrk_r>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d00a      	beq.n	8003566 <sbrk_aligned+0x36>
 8003550:	2303      	movs	r3, #3
 8003552:	1cc5      	adds	r5, r0, #3
 8003554:	439d      	bics	r5, r3
 8003556:	42a8      	cmp	r0, r5
 8003558:	d007      	beq.n	800356a <sbrk_aligned+0x3a>
 800355a:	1a29      	subs	r1, r5, r0
 800355c:	0020      	movs	r0, r4
 800355e:	f000 f8af 	bl	80036c0 <_sbrk_r>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	d101      	bne.n	800356a <sbrk_aligned+0x3a>
 8003566:	2501      	movs	r5, #1
 8003568:	426d      	negs	r5, r5
 800356a:	0028      	movs	r0, r5
 800356c:	bd70      	pop	{r4, r5, r6, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	2000012c 	.word	0x2000012c

08003574 <_malloc_r>:
 8003574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003576:	2203      	movs	r2, #3
 8003578:	1ccb      	adds	r3, r1, #3
 800357a:	4393      	bics	r3, r2
 800357c:	3308      	adds	r3, #8
 800357e:	0006      	movs	r6, r0
 8003580:	001f      	movs	r7, r3
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d232      	bcs.n	80035ec <_malloc_r+0x78>
 8003586:	270c      	movs	r7, #12
 8003588:	42b9      	cmp	r1, r7
 800358a:	d831      	bhi.n	80035f0 <_malloc_r+0x7c>
 800358c:	0030      	movs	r0, r6
 800358e:	f000 f8a9 	bl	80036e4 <__malloc_lock>
 8003592:	4d32      	ldr	r5, [pc, #200]	; (800365c <_malloc_r+0xe8>)
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	001c      	movs	r4, r3
 8003598:	2c00      	cmp	r4, #0
 800359a:	d12e      	bne.n	80035fa <_malloc_r+0x86>
 800359c:	0039      	movs	r1, r7
 800359e:	0030      	movs	r0, r6
 80035a0:	f7ff ffc6 	bl	8003530 <sbrk_aligned>
 80035a4:	0004      	movs	r4, r0
 80035a6:	1c43      	adds	r3, r0, #1
 80035a8:	d11e      	bne.n	80035e8 <_malloc_r+0x74>
 80035aa:	682c      	ldr	r4, [r5, #0]
 80035ac:	0025      	movs	r5, r4
 80035ae:	2d00      	cmp	r5, #0
 80035b0:	d14a      	bne.n	8003648 <_malloc_r+0xd4>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	0029      	movs	r1, r5
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	0030      	movs	r0, r6
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	f000 f880 	bl	80036c0 <_sbrk_r>
 80035c0:	9b01      	ldr	r3, [sp, #4]
 80035c2:	4283      	cmp	r3, r0
 80035c4:	d143      	bne.n	800364e <_malloc_r+0xda>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	3703      	adds	r7, #3
 80035ca:	1aff      	subs	r7, r7, r3
 80035cc:	2303      	movs	r3, #3
 80035ce:	439f      	bics	r7, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	2f0c      	cmp	r7, #12
 80035d4:	d200      	bcs.n	80035d8 <_malloc_r+0x64>
 80035d6:	270c      	movs	r7, #12
 80035d8:	0039      	movs	r1, r7
 80035da:	0030      	movs	r0, r6
 80035dc:	f7ff ffa8 	bl	8003530 <sbrk_aligned>
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	d034      	beq.n	800364e <_malloc_r+0xda>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	19df      	adds	r7, r3, r7
 80035e8:	6027      	str	r7, [r4, #0]
 80035ea:	e013      	b.n	8003614 <_malloc_r+0xa0>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	dacb      	bge.n	8003588 <_malloc_r+0x14>
 80035f0:	230c      	movs	r3, #12
 80035f2:	2500      	movs	r5, #0
 80035f4:	6033      	str	r3, [r6, #0]
 80035f6:	0028      	movs	r0, r5
 80035f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	1bd1      	subs	r1, r2, r7
 80035fe:	d420      	bmi.n	8003642 <_malloc_r+0xce>
 8003600:	290b      	cmp	r1, #11
 8003602:	d917      	bls.n	8003634 <_malloc_r+0xc0>
 8003604:	19e2      	adds	r2, r4, r7
 8003606:	6027      	str	r7, [r4, #0]
 8003608:	42a3      	cmp	r3, r4
 800360a:	d111      	bne.n	8003630 <_malloc_r+0xbc>
 800360c:	602a      	str	r2, [r5, #0]
 800360e:	6863      	ldr	r3, [r4, #4]
 8003610:	6011      	str	r1, [r2, #0]
 8003612:	6053      	str	r3, [r2, #4]
 8003614:	0030      	movs	r0, r6
 8003616:	0025      	movs	r5, r4
 8003618:	f000 f86c 	bl	80036f4 <__malloc_unlock>
 800361c:	2207      	movs	r2, #7
 800361e:	350b      	adds	r5, #11
 8003620:	1d23      	adds	r3, r4, #4
 8003622:	4395      	bics	r5, r2
 8003624:	1aea      	subs	r2, r5, r3
 8003626:	429d      	cmp	r5, r3
 8003628:	d0e5      	beq.n	80035f6 <_malloc_r+0x82>
 800362a:	1b5b      	subs	r3, r3, r5
 800362c:	50a3      	str	r3, [r4, r2]
 800362e:	e7e2      	b.n	80035f6 <_malloc_r+0x82>
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e7ec      	b.n	800360e <_malloc_r+0x9a>
 8003634:	6862      	ldr	r2, [r4, #4]
 8003636:	42a3      	cmp	r3, r4
 8003638:	d101      	bne.n	800363e <_malloc_r+0xca>
 800363a:	602a      	str	r2, [r5, #0]
 800363c:	e7ea      	b.n	8003614 <_malloc_r+0xa0>
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	e7e8      	b.n	8003614 <_malloc_r+0xa0>
 8003642:	0023      	movs	r3, r4
 8003644:	6864      	ldr	r4, [r4, #4]
 8003646:	e7a7      	b.n	8003598 <_malloc_r+0x24>
 8003648:	002c      	movs	r4, r5
 800364a:	686d      	ldr	r5, [r5, #4]
 800364c:	e7af      	b.n	80035ae <_malloc_r+0x3a>
 800364e:	230c      	movs	r3, #12
 8003650:	0030      	movs	r0, r6
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	f000 f84e 	bl	80036f4 <__malloc_unlock>
 8003658:	e7cd      	b.n	80035f6 <_malloc_r+0x82>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20000128 	.word	0x20000128

08003660 <_realloc_r>:
 8003660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003662:	0007      	movs	r7, r0
 8003664:	000e      	movs	r6, r1
 8003666:	0014      	movs	r4, r2
 8003668:	2900      	cmp	r1, #0
 800366a:	d105      	bne.n	8003678 <_realloc_r+0x18>
 800366c:	0011      	movs	r1, r2
 800366e:	f7ff ff81 	bl	8003574 <_malloc_r>
 8003672:	0005      	movs	r5, r0
 8003674:	0028      	movs	r0, r5
 8003676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003678:	2a00      	cmp	r2, #0
 800367a:	d103      	bne.n	8003684 <_realloc_r+0x24>
 800367c:	f7ff ff0e 	bl	800349c <_free_r>
 8003680:	0025      	movs	r5, r4
 8003682:	e7f7      	b.n	8003674 <_realloc_r+0x14>
 8003684:	f000 f83e 	bl	8003704 <_malloc_usable_size_r>
 8003688:	9001      	str	r0, [sp, #4]
 800368a:	4284      	cmp	r4, r0
 800368c:	d803      	bhi.n	8003696 <_realloc_r+0x36>
 800368e:	0035      	movs	r5, r6
 8003690:	0843      	lsrs	r3, r0, #1
 8003692:	42a3      	cmp	r3, r4
 8003694:	d3ee      	bcc.n	8003674 <_realloc_r+0x14>
 8003696:	0021      	movs	r1, r4
 8003698:	0038      	movs	r0, r7
 800369a:	f7ff ff6b 	bl	8003574 <_malloc_r>
 800369e:	1e05      	subs	r5, r0, #0
 80036a0:	d0e8      	beq.n	8003674 <_realloc_r+0x14>
 80036a2:	9b01      	ldr	r3, [sp, #4]
 80036a4:	0022      	movs	r2, r4
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d900      	bls.n	80036ac <_realloc_r+0x4c>
 80036aa:	001a      	movs	r2, r3
 80036ac:	0031      	movs	r1, r6
 80036ae:	0028      	movs	r0, r5
 80036b0:	f7ff fed7 	bl	8003462 <memcpy>
 80036b4:	0031      	movs	r1, r6
 80036b6:	0038      	movs	r0, r7
 80036b8:	f7ff fef0 	bl	800349c <_free_r>
 80036bc:	e7da      	b.n	8003674 <_realloc_r+0x14>
	...

080036c0 <_sbrk_r>:
 80036c0:	2300      	movs	r3, #0
 80036c2:	b570      	push	{r4, r5, r6, lr}
 80036c4:	4d06      	ldr	r5, [pc, #24]	; (80036e0 <_sbrk_r+0x20>)
 80036c6:	0004      	movs	r4, r0
 80036c8:	0008      	movs	r0, r1
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	f7fd f962 	bl	8000994 <_sbrk>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d103      	bne.n	80036dc <_sbrk_r+0x1c>
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d000      	beq.n	80036dc <_sbrk_r+0x1c>
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000130 	.word	0x20000130

080036e4 <__malloc_lock>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4802      	ldr	r0, [pc, #8]	; (80036f0 <__malloc_lock+0xc>)
 80036e8:	f000 f814 	bl	8003714 <__retarget_lock_acquire_recursive>
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	20000134 	.word	0x20000134

080036f4 <__malloc_unlock>:
 80036f4:	b510      	push	{r4, lr}
 80036f6:	4802      	ldr	r0, [pc, #8]	; (8003700 <__malloc_unlock+0xc>)
 80036f8:	f000 f80d 	bl	8003716 <__retarget_lock_release_recursive>
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000134 	.word	0x20000134

08003704 <_malloc_usable_size_r>:
 8003704:	1f0b      	subs	r3, r1, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1f18      	subs	r0, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	da01      	bge.n	8003712 <_malloc_usable_size_r+0xe>
 800370e:	580b      	ldr	r3, [r1, r0]
 8003710:	18c0      	adds	r0, r0, r3
 8003712:	4770      	bx	lr

08003714 <__retarget_lock_acquire_recursive>:
 8003714:	4770      	bx	lr

08003716 <__retarget_lock_release_recursive>:
 8003716:	4770      	bx	lr

08003718 <_init>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr

08003724 <_fini>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr
