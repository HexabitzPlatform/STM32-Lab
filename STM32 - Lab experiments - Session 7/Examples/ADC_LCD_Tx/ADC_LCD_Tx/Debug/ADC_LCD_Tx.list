
ADC_LCD_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006970  08006970  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006978  08006978  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  080069f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080069f0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011115  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002332  00000000  00000000  000311ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  000334e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  000345e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e136  00000000  00000000  000355e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e35c  00000000  00000000  0005371e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c477d  00000000  00000000  00061a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001261f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  00126274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080067b0 	.word	0x080067b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080067b0 	.word	0x080067b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f000 ff37 	bl	80012ac <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f000 fe8d 	bl	8001164 <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 fb3e 	bl	8000ad4 <__aeabi_dsub>
 8000458:	f000 fe84 	bl	8001164 <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	464f      	mov	r7, r9
 8000470:	4646      	mov	r6, r8
 8000472:	46d6      	mov	lr, sl
 8000474:	b5c0      	push	{r6, r7, lr}
 8000476:	0004      	movs	r4, r0
 8000478:	b082      	sub	sp, #8
 800047a:	000d      	movs	r5, r1
 800047c:	4691      	mov	r9, r2
 800047e:	4698      	mov	r8, r3
 8000480:	428b      	cmp	r3, r1
 8000482:	d82f      	bhi.n	80004e4 <__udivmoddi4+0x78>
 8000484:	d02c      	beq.n	80004e0 <__udivmoddi4+0x74>
 8000486:	4641      	mov	r1, r8
 8000488:	4648      	mov	r0, r9
 800048a:	f000 ff37 	bl	80012fc <__clzdi2>
 800048e:	0029      	movs	r1, r5
 8000490:	0006      	movs	r6, r0
 8000492:	0020      	movs	r0, r4
 8000494:	f000 ff32 	bl	80012fc <__clzdi2>
 8000498:	1a33      	subs	r3, r6, r0
 800049a:	469c      	mov	ip, r3
 800049c:	3b20      	subs	r3, #32
 800049e:	469a      	mov	sl, r3
 80004a0:	d500      	bpl.n	80004a4 <__udivmoddi4+0x38>
 80004a2:	e076      	b.n	8000592 <__udivmoddi4+0x126>
 80004a4:	464b      	mov	r3, r9
 80004a6:	4652      	mov	r2, sl
 80004a8:	4093      	lsls	r3, r2
 80004aa:	001f      	movs	r7, r3
 80004ac:	464b      	mov	r3, r9
 80004ae:	4662      	mov	r2, ip
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d828      	bhi.n	800050a <__udivmoddi4+0x9e>
 80004b8:	d025      	beq.n	8000506 <__udivmoddi4+0x9a>
 80004ba:	4653      	mov	r3, sl
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5a>
 80004c4:	e07b      	b.n	80005be <__udivmoddi4+0x152>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	4652      	mov	r2, sl
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4662      	mov	r2, ip
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e018      	b.n	8000512 <__udivmoddi4+0xa6>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9d0      	bls.n	8000486 <__udivmoddi4+0x1a>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8a>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b002      	add	sp, #8
 80004fc:	bc1c      	pop	{r2, r3, r4}
 80004fe:	4690      	mov	r8, r2
 8000500:	4699      	mov	r9, r3
 8000502:	46a2      	mov	sl, r4
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000506:	42a3      	cmp	r3, r4
 8000508:	d9d7      	bls.n	80004ba <__udivmoddi4+0x4e>
 800050a:	2200      	movs	r2, #0
 800050c:	2300      	movs	r3, #0
 800050e:	9200      	str	r2, [sp, #0]
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	4663      	mov	r3, ip
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0e9      	beq.n	80004ec <__udivmoddi4+0x80>
 8000518:	07fb      	lsls	r3, r7, #31
 800051a:	4698      	mov	r8, r3
 800051c:	4641      	mov	r1, r8
 800051e:	0872      	lsrs	r2, r6, #1
 8000520:	430a      	orrs	r2, r1
 8000522:	087b      	lsrs	r3, r7, #1
 8000524:	4666      	mov	r6, ip
 8000526:	e00e      	b.n	8000546 <__udivmoddi4+0xda>
 8000528:	42ab      	cmp	r3, r5
 800052a:	d101      	bne.n	8000530 <__udivmoddi4+0xc4>
 800052c:	42a2      	cmp	r2, r4
 800052e:	d80c      	bhi.n	800054a <__udivmoddi4+0xde>
 8000530:	1aa4      	subs	r4, r4, r2
 8000532:	419d      	sbcs	r5, r3
 8000534:	2001      	movs	r0, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2100      	movs	r1, #0
 800053c:	3e01      	subs	r6, #1
 800053e:	1824      	adds	r4, r4, r0
 8000540:	414d      	adcs	r5, r1
 8000542:	2e00      	cmp	r6, #0
 8000544:	d006      	beq.n	8000554 <__udivmoddi4+0xe8>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d9ee      	bls.n	8000528 <__udivmoddi4+0xbc>
 800054a:	3e01      	subs	r6, #1
 800054c:	1924      	adds	r4, r4, r4
 800054e:	416d      	adcs	r5, r5
 8000550:	2e00      	cmp	r6, #0
 8000552:	d1f8      	bne.n	8000546 <__udivmoddi4+0xda>
 8000554:	9800      	ldr	r0, [sp, #0]
 8000556:	9901      	ldr	r1, [sp, #4]
 8000558:	4653      	mov	r3, sl
 800055a:	1900      	adds	r0, r0, r4
 800055c:	4169      	adcs	r1, r5
 800055e:	2b00      	cmp	r3, #0
 8000560:	db23      	blt.n	80005aa <__udivmoddi4+0x13e>
 8000562:	002b      	movs	r3, r5
 8000564:	4652      	mov	r2, sl
 8000566:	40d3      	lsrs	r3, r2
 8000568:	002a      	movs	r2, r5
 800056a:	4664      	mov	r4, ip
 800056c:	40e2      	lsrs	r2, r4
 800056e:	001c      	movs	r4, r3
 8000570:	4653      	mov	r3, sl
 8000572:	0015      	movs	r5, r2
 8000574:	2b00      	cmp	r3, #0
 8000576:	db2d      	blt.n	80005d4 <__udivmoddi4+0x168>
 8000578:	0026      	movs	r6, r4
 800057a:	4657      	mov	r7, sl
 800057c:	40be      	lsls	r6, r7
 800057e:	0033      	movs	r3, r6
 8000580:	0026      	movs	r6, r4
 8000582:	4667      	mov	r7, ip
 8000584:	40be      	lsls	r6, r7
 8000586:	0032      	movs	r2, r6
 8000588:	1a80      	subs	r0, r0, r2
 800058a:	4199      	sbcs	r1, r3
 800058c:	9000      	str	r0, [sp, #0]
 800058e:	9101      	str	r1, [sp, #4]
 8000590:	e7ac      	b.n	80004ec <__udivmoddi4+0x80>
 8000592:	4662      	mov	r2, ip
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	464a      	mov	r2, r9
 800059a:	40da      	lsrs	r2, r3
 800059c:	4661      	mov	r1, ip
 800059e:	0013      	movs	r3, r2
 80005a0:	4642      	mov	r2, r8
 80005a2:	408a      	lsls	r2, r1
 80005a4:	0017      	movs	r7, r2
 80005a6:	431f      	orrs	r7, r3
 80005a8:	e780      	b.n	80004ac <__udivmoddi4+0x40>
 80005aa:	4662      	mov	r2, ip
 80005ac:	2320      	movs	r3, #32
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	4666      	mov	r6, ip
 80005b4:	409a      	lsls	r2, r3
 80005b6:	0023      	movs	r3, r4
 80005b8:	40f3      	lsrs	r3, r6
 80005ba:	4313      	orrs	r3, r2
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0xfc>
 80005be:	4662      	mov	r2, ip
 80005c0:	2320      	movs	r3, #32
 80005c2:	2100      	movs	r1, #0
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	2200      	movs	r2, #0
 80005c8:	9100      	str	r1, [sp, #0]
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	e780      	b.n	80004d6 <__udivmoddi4+0x6a>
 80005d4:	2320      	movs	r3, #32
 80005d6:	4662      	mov	r2, ip
 80005d8:	0026      	movs	r6, r4
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	40de      	lsrs	r6, r3
 80005de:	002f      	movs	r7, r5
 80005e0:	46b0      	mov	r8, r6
 80005e2:	4666      	mov	r6, ip
 80005e4:	40b7      	lsls	r7, r6
 80005e6:	4646      	mov	r6, r8
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7c8      	b.n	8000580 <__udivmoddi4+0x114>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__aeabi_dmul>:
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	4657      	mov	r7, sl
 80005f4:	46de      	mov	lr, fp
 80005f6:	464e      	mov	r6, r9
 80005f8:	4645      	mov	r5, r8
 80005fa:	b5e0      	push	{r5, r6, r7, lr}
 80005fc:	4683      	mov	fp, r0
 80005fe:	0006      	movs	r6, r0
 8000600:	030f      	lsls	r7, r1, #12
 8000602:	0048      	lsls	r0, r1, #1
 8000604:	b087      	sub	sp, #28
 8000606:	4692      	mov	sl, r2
 8000608:	001d      	movs	r5, r3
 800060a:	0b3f      	lsrs	r7, r7, #12
 800060c:	0d40      	lsrs	r0, r0, #21
 800060e:	0fcc      	lsrs	r4, r1, #31
 8000610:	2800      	cmp	r0, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_dmul+0x26>
 8000614:	e06f      	b.n	80006f6 <__aeabi_dmul+0x106>
 8000616:	4bde      	ldr	r3, [pc, #888]	; (8000990 <__aeabi_dmul+0x3a0>)
 8000618:	4298      	cmp	r0, r3
 800061a:	d038      	beq.n	800068e <__aeabi_dmul+0x9e>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	00ff      	lsls	r7, r7, #3
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	431f      	orrs	r7, r3
 8000624:	0f73      	lsrs	r3, r6, #29
 8000626:	433b      	orrs	r3, r7
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	4bda      	ldr	r3, [pc, #872]	; (8000994 <__aeabi_dmul+0x3a4>)
 800062c:	2700      	movs	r7, #0
 800062e:	4699      	mov	r9, r3
 8000630:	2300      	movs	r3, #0
 8000632:	469b      	mov	fp, r3
 8000634:	00f6      	lsls	r6, r6, #3
 8000636:	4481      	add	r9, r0
 8000638:	032b      	lsls	r3, r5, #12
 800063a:	0069      	lsls	r1, r5, #1
 800063c:	0b1b      	lsrs	r3, r3, #12
 800063e:	4652      	mov	r2, sl
 8000640:	4698      	mov	r8, r3
 8000642:	0d49      	lsrs	r1, r1, #21
 8000644:	0fed      	lsrs	r5, r5, #31
 8000646:	2900      	cmp	r1, #0
 8000648:	d100      	bne.n	800064c <__aeabi_dmul+0x5c>
 800064a:	e085      	b.n	8000758 <__aeabi_dmul+0x168>
 800064c:	4bd0      	ldr	r3, [pc, #832]	; (8000990 <__aeabi_dmul+0x3a0>)
 800064e:	4299      	cmp	r1, r3
 8000650:	d100      	bne.n	8000654 <__aeabi_dmul+0x64>
 8000652:	e073      	b.n	800073c <__aeabi_dmul+0x14c>
 8000654:	4643      	mov	r3, r8
 8000656:	00da      	lsls	r2, r3, #3
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	041b      	lsls	r3, r3, #16
 800065c:	4313      	orrs	r3, r2
 800065e:	4652      	mov	r2, sl
 8000660:	48cc      	ldr	r0, [pc, #816]	; (8000994 <__aeabi_dmul+0x3a4>)
 8000662:	0f52      	lsrs	r2, r2, #29
 8000664:	4684      	mov	ip, r0
 8000666:	4313      	orrs	r3, r2
 8000668:	4652      	mov	r2, sl
 800066a:	2000      	movs	r0, #0
 800066c:	4461      	add	r1, ip
 800066e:	00d2      	lsls	r2, r2, #3
 8000670:	4489      	add	r9, r1
 8000672:	0021      	movs	r1, r4
 8000674:	4069      	eors	r1, r5
 8000676:	9100      	str	r1, [sp, #0]
 8000678:	468c      	mov	ip, r1
 800067a:	2101      	movs	r1, #1
 800067c:	4449      	add	r1, r9
 800067e:	468a      	mov	sl, r1
 8000680:	2f0f      	cmp	r7, #15
 8000682:	d900      	bls.n	8000686 <__aeabi_dmul+0x96>
 8000684:	e090      	b.n	80007a8 <__aeabi_dmul+0x1b8>
 8000686:	49c4      	ldr	r1, [pc, #784]	; (8000998 <__aeabi_dmul+0x3a8>)
 8000688:	00bf      	lsls	r7, r7, #2
 800068a:	59cf      	ldr	r7, [r1, r7]
 800068c:	46bf      	mov	pc, r7
 800068e:	465b      	mov	r3, fp
 8000690:	433b      	orrs	r3, r7
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	d000      	beq.n	8000698 <__aeabi_dmul+0xa8>
 8000696:	e16a      	b.n	800096e <__aeabi_dmul+0x37e>
 8000698:	2302      	movs	r3, #2
 800069a:	2708      	movs	r7, #8
 800069c:	2600      	movs	r6, #0
 800069e:	4681      	mov	r9, r0
 80006a0:	469b      	mov	fp, r3
 80006a2:	e7c9      	b.n	8000638 <__aeabi_dmul+0x48>
 80006a4:	0032      	movs	r2, r6
 80006a6:	4658      	mov	r0, fp
 80006a8:	9b01      	ldr	r3, [sp, #4]
 80006aa:	4661      	mov	r1, ip
 80006ac:	9100      	str	r1, [sp, #0]
 80006ae:	2802      	cmp	r0, #2
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dmul+0xc4>
 80006b2:	e075      	b.n	80007a0 <__aeabi_dmul+0x1b0>
 80006b4:	2803      	cmp	r0, #3
 80006b6:	d100      	bne.n	80006ba <__aeabi_dmul+0xca>
 80006b8:	e1fe      	b.n	8000ab8 <__aeabi_dmul+0x4c8>
 80006ba:	2801      	cmp	r0, #1
 80006bc:	d000      	beq.n	80006c0 <__aeabi_dmul+0xd0>
 80006be:	e12c      	b.n	800091a <__aeabi_dmul+0x32a>
 80006c0:	2300      	movs	r3, #0
 80006c2:	2700      	movs	r7, #0
 80006c4:	2600      	movs	r6, #0
 80006c6:	2500      	movs	r5, #0
 80006c8:	033f      	lsls	r7, r7, #12
 80006ca:	0d2a      	lsrs	r2, r5, #20
 80006cc:	0b3f      	lsrs	r7, r7, #12
 80006ce:	48b3      	ldr	r0, [pc, #716]	; (800099c <__aeabi_dmul+0x3ac>)
 80006d0:	0512      	lsls	r2, r2, #20
 80006d2:	433a      	orrs	r2, r7
 80006d4:	4002      	ands	r2, r0
 80006d6:	051b      	lsls	r3, r3, #20
 80006d8:	4313      	orrs	r3, r2
 80006da:	9a00      	ldr	r2, [sp, #0]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	07d1      	lsls	r1, r2, #31
 80006e0:	085b      	lsrs	r3, r3, #1
 80006e2:	430b      	orrs	r3, r1
 80006e4:	0030      	movs	r0, r6
 80006e6:	0019      	movs	r1, r3
 80006e8:	b007      	add	sp, #28
 80006ea:	bc3c      	pop	{r2, r3, r4, r5}
 80006ec:	4690      	mov	r8, r2
 80006ee:	4699      	mov	r9, r3
 80006f0:	46a2      	mov	sl, r4
 80006f2:	46ab      	mov	fp, r5
 80006f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f6:	465b      	mov	r3, fp
 80006f8:	433b      	orrs	r3, r7
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	d100      	bne.n	8000700 <__aeabi_dmul+0x110>
 80006fe:	e12f      	b.n	8000960 <__aeabi_dmul+0x370>
 8000700:	2f00      	cmp	r7, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_dmul+0x116>
 8000704:	e1a5      	b.n	8000a52 <__aeabi_dmul+0x462>
 8000706:	0038      	movs	r0, r7
 8000708:	f000 fdda 	bl	80012c0 <__clzsi2>
 800070c:	0003      	movs	r3, r0
 800070e:	3b0b      	subs	r3, #11
 8000710:	2b1c      	cmp	r3, #28
 8000712:	dd00      	ble.n	8000716 <__aeabi_dmul+0x126>
 8000714:	e196      	b.n	8000a44 <__aeabi_dmul+0x454>
 8000716:	221d      	movs	r2, #29
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	465a      	mov	r2, fp
 800071c:	0001      	movs	r1, r0
 800071e:	40da      	lsrs	r2, r3
 8000720:	465e      	mov	r6, fp
 8000722:	3908      	subs	r1, #8
 8000724:	408f      	lsls	r7, r1
 8000726:	0013      	movs	r3, r2
 8000728:	408e      	lsls	r6, r1
 800072a:	433b      	orrs	r3, r7
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	4b9c      	ldr	r3, [pc, #624]	; (80009a0 <__aeabi_dmul+0x3b0>)
 8000730:	2700      	movs	r7, #0
 8000732:	1a1b      	subs	r3, r3, r0
 8000734:	4699      	mov	r9, r3
 8000736:	2300      	movs	r3, #0
 8000738:	469b      	mov	fp, r3
 800073a:	e77d      	b.n	8000638 <__aeabi_dmul+0x48>
 800073c:	4641      	mov	r1, r8
 800073e:	4653      	mov	r3, sl
 8000740:	430b      	orrs	r3, r1
 8000742:	4993      	ldr	r1, [pc, #588]	; (8000990 <__aeabi_dmul+0x3a0>)
 8000744:	468c      	mov	ip, r1
 8000746:	44e1      	add	r9, ip
 8000748:	2b00      	cmp	r3, #0
 800074a:	d000      	beq.n	800074e <__aeabi_dmul+0x15e>
 800074c:	e11a      	b.n	8000984 <__aeabi_dmul+0x394>
 800074e:	2202      	movs	r2, #2
 8000750:	2002      	movs	r0, #2
 8000752:	4317      	orrs	r7, r2
 8000754:	2200      	movs	r2, #0
 8000756:	e78c      	b.n	8000672 <__aeabi_dmul+0x82>
 8000758:	4313      	orrs	r3, r2
 800075a:	d100      	bne.n	800075e <__aeabi_dmul+0x16e>
 800075c:	e10d      	b.n	800097a <__aeabi_dmul+0x38a>
 800075e:	4643      	mov	r3, r8
 8000760:	2b00      	cmp	r3, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_dmul+0x176>
 8000764:	e181      	b.n	8000a6a <__aeabi_dmul+0x47a>
 8000766:	4640      	mov	r0, r8
 8000768:	f000 fdaa 	bl	80012c0 <__clzsi2>
 800076c:	0002      	movs	r2, r0
 800076e:	3a0b      	subs	r2, #11
 8000770:	2a1c      	cmp	r2, #28
 8000772:	dd00      	ble.n	8000776 <__aeabi_dmul+0x186>
 8000774:	e172      	b.n	8000a5c <__aeabi_dmul+0x46c>
 8000776:	0001      	movs	r1, r0
 8000778:	4643      	mov	r3, r8
 800077a:	3908      	subs	r1, #8
 800077c:	408b      	lsls	r3, r1
 800077e:	4698      	mov	r8, r3
 8000780:	231d      	movs	r3, #29
 8000782:	1a9a      	subs	r2, r3, r2
 8000784:	4653      	mov	r3, sl
 8000786:	40d3      	lsrs	r3, r2
 8000788:	001a      	movs	r2, r3
 800078a:	4643      	mov	r3, r8
 800078c:	4313      	orrs	r3, r2
 800078e:	4652      	mov	r2, sl
 8000790:	408a      	lsls	r2, r1
 8000792:	4649      	mov	r1, r9
 8000794:	1a08      	subs	r0, r1, r0
 8000796:	4982      	ldr	r1, [pc, #520]	; (80009a0 <__aeabi_dmul+0x3b0>)
 8000798:	4689      	mov	r9, r1
 800079a:	4481      	add	r9, r0
 800079c:	2000      	movs	r0, #0
 800079e:	e768      	b.n	8000672 <__aeabi_dmul+0x82>
 80007a0:	4b7b      	ldr	r3, [pc, #492]	; (8000990 <__aeabi_dmul+0x3a0>)
 80007a2:	2700      	movs	r7, #0
 80007a4:	2600      	movs	r6, #0
 80007a6:	e78e      	b.n	80006c6 <__aeabi_dmul+0xd6>
 80007a8:	0c14      	lsrs	r4, r2, #16
 80007aa:	0412      	lsls	r2, r2, #16
 80007ac:	0c12      	lsrs	r2, r2, #16
 80007ae:	0011      	movs	r1, r2
 80007b0:	0c37      	lsrs	r7, r6, #16
 80007b2:	0436      	lsls	r6, r6, #16
 80007b4:	0c35      	lsrs	r5, r6, #16
 80007b6:	4379      	muls	r1, r7
 80007b8:	0028      	movs	r0, r5
 80007ba:	468c      	mov	ip, r1
 80007bc:	002e      	movs	r6, r5
 80007be:	4360      	muls	r0, r4
 80007c0:	4460      	add	r0, ip
 80007c2:	4683      	mov	fp, r0
 80007c4:	4356      	muls	r6, r2
 80007c6:	0021      	movs	r1, r4
 80007c8:	0c30      	lsrs	r0, r6, #16
 80007ca:	4680      	mov	r8, r0
 80007cc:	4658      	mov	r0, fp
 80007ce:	4379      	muls	r1, r7
 80007d0:	4440      	add	r0, r8
 80007d2:	9102      	str	r1, [sp, #8]
 80007d4:	4584      	cmp	ip, r0
 80007d6:	d906      	bls.n	80007e6 <__aeabi_dmul+0x1f6>
 80007d8:	4688      	mov	r8, r1
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	0249      	lsls	r1, r1, #9
 80007de:	468c      	mov	ip, r1
 80007e0:	44e0      	add	r8, ip
 80007e2:	4641      	mov	r1, r8
 80007e4:	9102      	str	r1, [sp, #8]
 80007e6:	0436      	lsls	r6, r6, #16
 80007e8:	0c01      	lsrs	r1, r0, #16
 80007ea:	0c36      	lsrs	r6, r6, #16
 80007ec:	0400      	lsls	r0, r0, #16
 80007ee:	468b      	mov	fp, r1
 80007f0:	1981      	adds	r1, r0, r6
 80007f2:	0c1e      	lsrs	r6, r3, #16
 80007f4:	041b      	lsls	r3, r3, #16
 80007f6:	0c1b      	lsrs	r3, r3, #16
 80007f8:	9103      	str	r1, [sp, #12]
 80007fa:	0019      	movs	r1, r3
 80007fc:	4379      	muls	r1, r7
 80007fe:	468c      	mov	ip, r1
 8000800:	0028      	movs	r0, r5
 8000802:	4375      	muls	r5, r6
 8000804:	4465      	add	r5, ip
 8000806:	46a8      	mov	r8, r5
 8000808:	4358      	muls	r0, r3
 800080a:	0c05      	lsrs	r5, r0, #16
 800080c:	4445      	add	r5, r8
 800080e:	4377      	muls	r7, r6
 8000810:	42a9      	cmp	r1, r5
 8000812:	d903      	bls.n	800081c <__aeabi_dmul+0x22c>
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0249      	lsls	r1, r1, #9
 8000818:	468c      	mov	ip, r1
 800081a:	4467      	add	r7, ip
 800081c:	0c29      	lsrs	r1, r5, #16
 800081e:	468c      	mov	ip, r1
 8000820:	0039      	movs	r1, r7
 8000822:	0400      	lsls	r0, r0, #16
 8000824:	0c00      	lsrs	r0, r0, #16
 8000826:	042d      	lsls	r5, r5, #16
 8000828:	182d      	adds	r5, r5, r0
 800082a:	4461      	add	r1, ip
 800082c:	44ab      	add	fp, r5
 800082e:	9105      	str	r1, [sp, #20]
 8000830:	4659      	mov	r1, fp
 8000832:	9104      	str	r1, [sp, #16]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	040f      	lsls	r7, r1, #16
 8000838:	0c3f      	lsrs	r7, r7, #16
 800083a:	0c08      	lsrs	r0, r1, #16
 800083c:	0039      	movs	r1, r7
 800083e:	4351      	muls	r1, r2
 8000840:	4342      	muls	r2, r0
 8000842:	4690      	mov	r8, r2
 8000844:	0002      	movs	r2, r0
 8000846:	468c      	mov	ip, r1
 8000848:	0c09      	lsrs	r1, r1, #16
 800084a:	468b      	mov	fp, r1
 800084c:	4362      	muls	r2, r4
 800084e:	437c      	muls	r4, r7
 8000850:	4444      	add	r4, r8
 8000852:	445c      	add	r4, fp
 8000854:	45a0      	cmp	r8, r4
 8000856:	d903      	bls.n	8000860 <__aeabi_dmul+0x270>
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0249      	lsls	r1, r1, #9
 800085c:	4688      	mov	r8, r1
 800085e:	4442      	add	r2, r8
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	4688      	mov	r8, r1
 8000864:	4661      	mov	r1, ip
 8000866:	0409      	lsls	r1, r1, #16
 8000868:	0c09      	lsrs	r1, r1, #16
 800086a:	468c      	mov	ip, r1
 800086c:	0039      	movs	r1, r7
 800086e:	4359      	muls	r1, r3
 8000870:	4343      	muls	r3, r0
 8000872:	4370      	muls	r0, r6
 8000874:	437e      	muls	r6, r7
 8000876:	0c0f      	lsrs	r7, r1, #16
 8000878:	18f6      	adds	r6, r6, r3
 800087a:	0424      	lsls	r4, r4, #16
 800087c:	19be      	adds	r6, r7, r6
 800087e:	4464      	add	r4, ip
 8000880:	4442      	add	r2, r8
 8000882:	468c      	mov	ip, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	d903      	bls.n	8000890 <__aeabi_dmul+0x2a0>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	025b      	lsls	r3, r3, #9
 800088c:	4698      	mov	r8, r3
 800088e:	4440      	add	r0, r8
 8000890:	9b02      	ldr	r3, [sp, #8]
 8000892:	4661      	mov	r1, ip
 8000894:	4698      	mov	r8, r3
 8000896:	9b04      	ldr	r3, [sp, #16]
 8000898:	0437      	lsls	r7, r6, #16
 800089a:	4443      	add	r3, r8
 800089c:	469b      	mov	fp, r3
 800089e:	45ab      	cmp	fp, r5
 80008a0:	41ad      	sbcs	r5, r5
 80008a2:	426b      	negs	r3, r5
 80008a4:	040d      	lsls	r5, r1, #16
 80008a6:	9905      	ldr	r1, [sp, #20]
 80008a8:	0c2d      	lsrs	r5, r5, #16
 80008aa:	468c      	mov	ip, r1
 80008ac:	197f      	adds	r7, r7, r5
 80008ae:	4467      	add	r7, ip
 80008b0:	18fd      	adds	r5, r7, r3
 80008b2:	46a8      	mov	r8, r5
 80008b4:	465d      	mov	r5, fp
 80008b6:	192d      	adds	r5, r5, r4
 80008b8:	42a5      	cmp	r5, r4
 80008ba:	41a4      	sbcs	r4, r4
 80008bc:	4693      	mov	fp, r2
 80008be:	4264      	negs	r4, r4
 80008c0:	46a4      	mov	ip, r4
 80008c2:	44c3      	add	fp, r8
 80008c4:	44dc      	add	ip, fp
 80008c6:	428f      	cmp	r7, r1
 80008c8:	41bf      	sbcs	r7, r7
 80008ca:	4598      	cmp	r8, r3
 80008cc:	419b      	sbcs	r3, r3
 80008ce:	4593      	cmp	fp, r2
 80008d0:	4192      	sbcs	r2, r2
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	41a4      	sbcs	r4, r4
 80008d6:	425b      	negs	r3, r3
 80008d8:	427f      	negs	r7, r7
 80008da:	431f      	orrs	r7, r3
 80008dc:	0c36      	lsrs	r6, r6, #16
 80008de:	4252      	negs	r2, r2
 80008e0:	4264      	negs	r4, r4
 80008e2:	19bf      	adds	r7, r7, r6
 80008e4:	4322      	orrs	r2, r4
 80008e6:	18bf      	adds	r7, r7, r2
 80008e8:	4662      	mov	r2, ip
 80008ea:	1838      	adds	r0, r7, r0
 80008ec:	0243      	lsls	r3, r0, #9
 80008ee:	0dd2      	lsrs	r2, r2, #23
 80008f0:	9903      	ldr	r1, [sp, #12]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	026a      	lsls	r2, r5, #9
 80008f6:	430a      	orrs	r2, r1
 80008f8:	1e50      	subs	r0, r2, #1
 80008fa:	4182      	sbcs	r2, r0
 80008fc:	4661      	mov	r1, ip
 80008fe:	0ded      	lsrs	r5, r5, #23
 8000900:	432a      	orrs	r2, r5
 8000902:	024e      	lsls	r6, r1, #9
 8000904:	4332      	orrs	r2, r6
 8000906:	01d9      	lsls	r1, r3, #7
 8000908:	d400      	bmi.n	800090c <__aeabi_dmul+0x31c>
 800090a:	e0b3      	b.n	8000a74 <__aeabi_dmul+0x484>
 800090c:	2601      	movs	r6, #1
 800090e:	0850      	lsrs	r0, r2, #1
 8000910:	4032      	ands	r2, r6
 8000912:	4302      	orrs	r2, r0
 8000914:	07de      	lsls	r6, r3, #31
 8000916:	4332      	orrs	r2, r6
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	4c22      	ldr	r4, [pc, #136]	; (80009a4 <__aeabi_dmul+0x3b4>)
 800091c:	4454      	add	r4, sl
 800091e:	2c00      	cmp	r4, #0
 8000920:	dd62      	ble.n	80009e8 <__aeabi_dmul+0x3f8>
 8000922:	0751      	lsls	r1, r2, #29
 8000924:	d009      	beq.n	800093a <__aeabi_dmul+0x34a>
 8000926:	200f      	movs	r0, #15
 8000928:	4010      	ands	r0, r2
 800092a:	2804      	cmp	r0, #4
 800092c:	d005      	beq.n	800093a <__aeabi_dmul+0x34a>
 800092e:	1d10      	adds	r0, r2, #4
 8000930:	4290      	cmp	r0, r2
 8000932:	4192      	sbcs	r2, r2
 8000934:	4252      	negs	r2, r2
 8000936:	189b      	adds	r3, r3, r2
 8000938:	0002      	movs	r2, r0
 800093a:	01d9      	lsls	r1, r3, #7
 800093c:	d504      	bpl.n	8000948 <__aeabi_dmul+0x358>
 800093e:	2480      	movs	r4, #128	; 0x80
 8000940:	4819      	ldr	r0, [pc, #100]	; (80009a8 <__aeabi_dmul+0x3b8>)
 8000942:	00e4      	lsls	r4, r4, #3
 8000944:	4003      	ands	r3, r0
 8000946:	4454      	add	r4, sl
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <__aeabi_dmul+0x3bc>)
 800094a:	4284      	cmp	r4, r0
 800094c:	dd00      	ble.n	8000950 <__aeabi_dmul+0x360>
 800094e:	e727      	b.n	80007a0 <__aeabi_dmul+0x1b0>
 8000950:	075e      	lsls	r6, r3, #29
 8000952:	025b      	lsls	r3, r3, #9
 8000954:	08d2      	lsrs	r2, r2, #3
 8000956:	0b1f      	lsrs	r7, r3, #12
 8000958:	0563      	lsls	r3, r4, #21
 800095a:	4316      	orrs	r6, r2
 800095c:	0d5b      	lsrs	r3, r3, #21
 800095e:	e6b2      	b.n	80006c6 <__aeabi_dmul+0xd6>
 8000960:	2300      	movs	r3, #0
 8000962:	4699      	mov	r9, r3
 8000964:	3301      	adds	r3, #1
 8000966:	2704      	movs	r7, #4
 8000968:	2600      	movs	r6, #0
 800096a:	469b      	mov	fp, r3
 800096c:	e664      	b.n	8000638 <__aeabi_dmul+0x48>
 800096e:	2303      	movs	r3, #3
 8000970:	9701      	str	r7, [sp, #4]
 8000972:	4681      	mov	r9, r0
 8000974:	270c      	movs	r7, #12
 8000976:	469b      	mov	fp, r3
 8000978:	e65e      	b.n	8000638 <__aeabi_dmul+0x48>
 800097a:	2201      	movs	r2, #1
 800097c:	2001      	movs	r0, #1
 800097e:	4317      	orrs	r7, r2
 8000980:	2200      	movs	r2, #0
 8000982:	e676      	b.n	8000672 <__aeabi_dmul+0x82>
 8000984:	2303      	movs	r3, #3
 8000986:	2003      	movs	r0, #3
 8000988:	431f      	orrs	r7, r3
 800098a:	4643      	mov	r3, r8
 800098c:	e671      	b.n	8000672 <__aeabi_dmul+0x82>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	000007ff 	.word	0x000007ff
 8000994:	fffffc01 	.word	0xfffffc01
 8000998:	08006830 	.word	0x08006830
 800099c:	800fffff 	.word	0x800fffff
 80009a0:	fffffc0d 	.word	0xfffffc0d
 80009a4:	000003ff 	.word	0x000003ff
 80009a8:	feffffff 	.word	0xfeffffff
 80009ac:	000007fe 	.word	0x000007fe
 80009b0:	2300      	movs	r3, #0
 80009b2:	2780      	movs	r7, #128	; 0x80
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	033f      	lsls	r7, r7, #12
 80009b8:	2600      	movs	r6, #0
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dmul+0x4d8>)
 80009bc:	e683      	b.n	80006c6 <__aeabi_dmul+0xd6>
 80009be:	9b01      	ldr	r3, [sp, #4]
 80009c0:	0032      	movs	r2, r6
 80009c2:	46a4      	mov	ip, r4
 80009c4:	4658      	mov	r0, fp
 80009c6:	e670      	b.n	80006aa <__aeabi_dmul+0xba>
 80009c8:	46ac      	mov	ip, r5
 80009ca:	e66e      	b.n	80006aa <__aeabi_dmul+0xba>
 80009cc:	2780      	movs	r7, #128	; 0x80
 80009ce:	9901      	ldr	r1, [sp, #4]
 80009d0:	033f      	lsls	r7, r7, #12
 80009d2:	4239      	tst	r1, r7
 80009d4:	d02d      	beq.n	8000a32 <__aeabi_dmul+0x442>
 80009d6:	423b      	tst	r3, r7
 80009d8:	d12b      	bne.n	8000a32 <__aeabi_dmul+0x442>
 80009da:	431f      	orrs	r7, r3
 80009dc:	033f      	lsls	r7, r7, #12
 80009de:	0b3f      	lsrs	r7, r7, #12
 80009e0:	9500      	str	r5, [sp, #0]
 80009e2:	0016      	movs	r6, r2
 80009e4:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dmul+0x4d8>)
 80009e6:	e66e      	b.n	80006c6 <__aeabi_dmul+0xd6>
 80009e8:	2501      	movs	r5, #1
 80009ea:	1b2d      	subs	r5, r5, r4
 80009ec:	2d38      	cmp	r5, #56	; 0x38
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_dmul+0x402>
 80009f0:	e666      	b.n	80006c0 <__aeabi_dmul+0xd0>
 80009f2:	2d1f      	cmp	r5, #31
 80009f4:	dc40      	bgt.n	8000a78 <__aeabi_dmul+0x488>
 80009f6:	4835      	ldr	r0, [pc, #212]	; (8000acc <__aeabi_dmul+0x4dc>)
 80009f8:	001c      	movs	r4, r3
 80009fa:	4450      	add	r0, sl
 80009fc:	0016      	movs	r6, r2
 80009fe:	4082      	lsls	r2, r0
 8000a00:	4084      	lsls	r4, r0
 8000a02:	40ee      	lsrs	r6, r5
 8000a04:	1e50      	subs	r0, r2, #1
 8000a06:	4182      	sbcs	r2, r0
 8000a08:	4334      	orrs	r4, r6
 8000a0a:	4314      	orrs	r4, r2
 8000a0c:	40eb      	lsrs	r3, r5
 8000a0e:	0762      	lsls	r2, r4, #29
 8000a10:	d009      	beq.n	8000a26 <__aeabi_dmul+0x436>
 8000a12:	220f      	movs	r2, #15
 8000a14:	4022      	ands	r2, r4
 8000a16:	2a04      	cmp	r2, #4
 8000a18:	d005      	beq.n	8000a26 <__aeabi_dmul+0x436>
 8000a1a:	0022      	movs	r2, r4
 8000a1c:	1d14      	adds	r4, r2, #4
 8000a1e:	4294      	cmp	r4, r2
 8000a20:	4180      	sbcs	r0, r0
 8000a22:	4240      	negs	r0, r0
 8000a24:	181b      	adds	r3, r3, r0
 8000a26:	021a      	lsls	r2, r3, #8
 8000a28:	d53e      	bpl.n	8000aa8 <__aeabi_dmul+0x4b8>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	2700      	movs	r7, #0
 8000a2e:	2600      	movs	r6, #0
 8000a30:	e649      	b.n	80006c6 <__aeabi_dmul+0xd6>
 8000a32:	2780      	movs	r7, #128	; 0x80
 8000a34:	9b01      	ldr	r3, [sp, #4]
 8000a36:	033f      	lsls	r7, r7, #12
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	033f      	lsls	r7, r7, #12
 8000a3c:	0b3f      	lsrs	r7, r7, #12
 8000a3e:	9400      	str	r4, [sp, #0]
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <__aeabi_dmul+0x4d8>)
 8000a42:	e640      	b.n	80006c6 <__aeabi_dmul+0xd6>
 8000a44:	0003      	movs	r3, r0
 8000a46:	465a      	mov	r2, fp
 8000a48:	3b28      	subs	r3, #40	; 0x28
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	9201      	str	r2, [sp, #4]
 8000a50:	e66d      	b.n	800072e <__aeabi_dmul+0x13e>
 8000a52:	4658      	mov	r0, fp
 8000a54:	f000 fc34 	bl	80012c0 <__clzsi2>
 8000a58:	3020      	adds	r0, #32
 8000a5a:	e657      	b.n	800070c <__aeabi_dmul+0x11c>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	4652      	mov	r2, sl
 8000a60:	3b28      	subs	r3, #40	; 0x28
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	2200      	movs	r2, #0
 8000a68:	e693      	b.n	8000792 <__aeabi_dmul+0x1a2>
 8000a6a:	4650      	mov	r0, sl
 8000a6c:	f000 fc28 	bl	80012c0 <__clzsi2>
 8000a70:	3020      	adds	r0, #32
 8000a72:	e67b      	b.n	800076c <__aeabi_dmul+0x17c>
 8000a74:	46ca      	mov	sl, r9
 8000a76:	e750      	b.n	800091a <__aeabi_dmul+0x32a>
 8000a78:	201f      	movs	r0, #31
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	4240      	negs	r0, r0
 8000a7e:	1b04      	subs	r4, r0, r4
 8000a80:	40e6      	lsrs	r6, r4
 8000a82:	2d20      	cmp	r5, #32
 8000a84:	d003      	beq.n	8000a8e <__aeabi_dmul+0x49e>
 8000a86:	4c12      	ldr	r4, [pc, #72]	; (8000ad0 <__aeabi_dmul+0x4e0>)
 8000a88:	4454      	add	r4, sl
 8000a8a:	40a3      	lsls	r3, r4
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	1e50      	subs	r0, r2, #1
 8000a90:	4182      	sbcs	r2, r0
 8000a92:	4332      	orrs	r2, r6
 8000a94:	2607      	movs	r6, #7
 8000a96:	2700      	movs	r7, #0
 8000a98:	4016      	ands	r6, r2
 8000a9a:	d009      	beq.n	8000ab0 <__aeabi_dmul+0x4c0>
 8000a9c:	200f      	movs	r0, #15
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4010      	ands	r0, r2
 8000aa2:	0014      	movs	r4, r2
 8000aa4:	2804      	cmp	r0, #4
 8000aa6:	d1b9      	bne.n	8000a1c <__aeabi_dmul+0x42c>
 8000aa8:	0022      	movs	r2, r4
 8000aaa:	075e      	lsls	r6, r3, #29
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0b1f      	lsrs	r7, r3, #12
 8000ab0:	08d2      	lsrs	r2, r2, #3
 8000ab2:	4316      	orrs	r6, r2
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e606      	b.n	80006c6 <__aeabi_dmul+0xd6>
 8000ab8:	2780      	movs	r7, #128	; 0x80
 8000aba:	033f      	lsls	r7, r7, #12
 8000abc:	431f      	orrs	r7, r3
 8000abe:	033f      	lsls	r7, r7, #12
 8000ac0:	0b3f      	lsrs	r7, r7, #12
 8000ac2:	0016      	movs	r6, r2
 8000ac4:	4b00      	ldr	r3, [pc, #0]	; (8000ac8 <__aeabi_dmul+0x4d8>)
 8000ac6:	e5fe      	b.n	80006c6 <__aeabi_dmul+0xd6>
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	0000041e 	.word	0x0000041e
 8000ad0:	0000043e 	.word	0x0000043e

08000ad4 <__aeabi_dsub>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	4657      	mov	r7, sl
 8000ad8:	464e      	mov	r6, r9
 8000ada:	4645      	mov	r5, r8
 8000adc:	46de      	mov	lr, fp
 8000ade:	000c      	movs	r4, r1
 8000ae0:	0309      	lsls	r1, r1, #12
 8000ae2:	b5e0      	push	{r5, r6, r7, lr}
 8000ae4:	0a49      	lsrs	r1, r1, #9
 8000ae6:	0f46      	lsrs	r6, r0, #29
 8000ae8:	005f      	lsls	r7, r3, #1
 8000aea:	4331      	orrs	r1, r6
 8000aec:	031e      	lsls	r6, r3, #12
 8000aee:	0fdb      	lsrs	r3, r3, #31
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	469b      	mov	fp, r3
 8000af4:	0f53      	lsrs	r3, r2, #29
 8000af6:	4333      	orrs	r3, r6
 8000af8:	4ec8      	ldr	r6, [pc, #800]	; (8000e1c <__aeabi_dsub+0x348>)
 8000afa:	0065      	lsls	r5, r4, #1
 8000afc:	00c0      	lsls	r0, r0, #3
 8000afe:	0fe4      	lsrs	r4, r4, #31
 8000b00:	00d2      	lsls	r2, r2, #3
 8000b02:	0d6d      	lsrs	r5, r5, #21
 8000b04:	46a2      	mov	sl, r4
 8000b06:	4681      	mov	r9, r0
 8000b08:	0d7f      	lsrs	r7, r7, #21
 8000b0a:	469c      	mov	ip, r3
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	42b7      	cmp	r7, r6
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dsub+0x40>
 8000b12:	e0b9      	b.n	8000c88 <__aeabi_dsub+0x1b4>
 8000b14:	465b      	mov	r3, fp
 8000b16:	2601      	movs	r6, #1
 8000b18:	4073      	eors	r3, r6
 8000b1a:	469b      	mov	fp, r3
 8000b1c:	1bee      	subs	r6, r5, r7
 8000b1e:	45a3      	cmp	fp, r4
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dsub+0x50>
 8000b22:	e083      	b.n	8000c2c <__aeabi_dsub+0x158>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	dd63      	ble.n	8000bf0 <__aeabi_dsub+0x11c>
 8000b28:	2f00      	cmp	r7, #0
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dsub+0x5a>
 8000b2c:	e0b1      	b.n	8000c92 <__aeabi_dsub+0x1be>
 8000b2e:	4663      	mov	r3, ip
 8000b30:	4313      	orrs	r3, r2
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dsub+0x62>
 8000b34:	e123      	b.n	8000d7e <__aeabi_dsub+0x2aa>
 8000b36:	1e73      	subs	r3, r6, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_dsub+0x6a>
 8000b3c:	e1ba      	b.n	8000eb4 <__aeabi_dsub+0x3e0>
 8000b3e:	1a86      	subs	r6, r0, r2
 8000b40:	4663      	mov	r3, ip
 8000b42:	42b0      	cmp	r0, r6
 8000b44:	4180      	sbcs	r0, r0
 8000b46:	2501      	movs	r5, #1
 8000b48:	1ac9      	subs	r1, r1, r3
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	1a09      	subs	r1, r1, r0
 8000b4e:	020b      	lsls	r3, r1, #8
 8000b50:	d400      	bmi.n	8000b54 <__aeabi_dsub+0x80>
 8000b52:	e147      	b.n	8000de4 <__aeabi_dsub+0x310>
 8000b54:	0249      	lsls	r1, r1, #9
 8000b56:	0a4b      	lsrs	r3, r1, #9
 8000b58:	4698      	mov	r8, r3
 8000b5a:	4643      	mov	r3, r8
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dsub+0x8e>
 8000b60:	e189      	b.n	8000e76 <__aeabi_dsub+0x3a2>
 8000b62:	4640      	mov	r0, r8
 8000b64:	f000 fbac 	bl	80012c0 <__clzsi2>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	3b08      	subs	r3, #8
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	dd00      	ble.n	8000b72 <__aeabi_dsub+0x9e>
 8000b70:	e17c      	b.n	8000e6c <__aeabi_dsub+0x398>
 8000b72:	2220      	movs	r2, #32
 8000b74:	0030      	movs	r0, r6
 8000b76:	1ad2      	subs	r2, r2, r3
 8000b78:	4641      	mov	r1, r8
 8000b7a:	40d0      	lsrs	r0, r2
 8000b7c:	4099      	lsls	r1, r3
 8000b7e:	0002      	movs	r2, r0
 8000b80:	409e      	lsls	r6, r3
 8000b82:	430a      	orrs	r2, r1
 8000b84:	429d      	cmp	r5, r3
 8000b86:	dd00      	ble.n	8000b8a <__aeabi_dsub+0xb6>
 8000b88:	e16a      	b.n	8000e60 <__aeabi_dsub+0x38c>
 8000b8a:	1b5d      	subs	r5, r3, r5
 8000b8c:	1c6b      	adds	r3, r5, #1
 8000b8e:	2b1f      	cmp	r3, #31
 8000b90:	dd00      	ble.n	8000b94 <__aeabi_dsub+0xc0>
 8000b92:	e194      	b.n	8000ebe <__aeabi_dsub+0x3ea>
 8000b94:	2120      	movs	r1, #32
 8000b96:	0010      	movs	r0, r2
 8000b98:	0035      	movs	r5, r6
 8000b9a:	1ac9      	subs	r1, r1, r3
 8000b9c:	408e      	lsls	r6, r1
 8000b9e:	40da      	lsrs	r2, r3
 8000ba0:	4088      	lsls	r0, r1
 8000ba2:	40dd      	lsrs	r5, r3
 8000ba4:	1e71      	subs	r1, r6, #1
 8000ba6:	418e      	sbcs	r6, r1
 8000ba8:	0011      	movs	r1, r2
 8000baa:	2207      	movs	r2, #7
 8000bac:	4328      	orrs	r0, r5
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4306      	orrs	r6, r0
 8000bb2:	4032      	ands	r2, r6
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	d009      	beq.n	8000bcc <__aeabi_dsub+0xf8>
 8000bb8:	230f      	movs	r3, #15
 8000bba:	4033      	ands	r3, r6
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d005      	beq.n	8000bcc <__aeabi_dsub+0xf8>
 8000bc0:	1d33      	adds	r3, r6, #4
 8000bc2:	42b3      	cmp	r3, r6
 8000bc4:	41b6      	sbcs	r6, r6
 8000bc6:	4276      	negs	r6, r6
 8000bc8:	1989      	adds	r1, r1, r6
 8000bca:	001e      	movs	r6, r3
 8000bcc:	020b      	lsls	r3, r1, #8
 8000bce:	d400      	bmi.n	8000bd2 <__aeabi_dsub+0xfe>
 8000bd0:	e23d      	b.n	800104e <__aeabi_dsub+0x57a>
 8000bd2:	1c6a      	adds	r2, r5, #1
 8000bd4:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <__aeabi_dsub+0x348>)
 8000bd6:	0555      	lsls	r5, r2, #21
 8000bd8:	0d6d      	lsrs	r5, r5, #21
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dsub+0x10c>
 8000bde:	e119      	b.n	8000e14 <__aeabi_dsub+0x340>
 8000be0:	4a8f      	ldr	r2, [pc, #572]	; (8000e20 <__aeabi_dsub+0x34c>)
 8000be2:	08f6      	lsrs	r6, r6, #3
 8000be4:	400a      	ands	r2, r1
 8000be6:	0757      	lsls	r7, r2, #29
 8000be8:	0252      	lsls	r2, r2, #9
 8000bea:	4337      	orrs	r7, r6
 8000bec:	0b12      	lsrs	r2, r2, #12
 8000bee:	e09b      	b.n	8000d28 <__aeabi_dsub+0x254>
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_dsub+0x122>
 8000bf4:	e0c5      	b.n	8000d82 <__aeabi_dsub+0x2ae>
 8000bf6:	1c6e      	adds	r6, r5, #1
 8000bf8:	0576      	lsls	r6, r6, #21
 8000bfa:	0d76      	lsrs	r6, r6, #21
 8000bfc:	2e01      	cmp	r6, #1
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_dsub+0x12e>
 8000c00:	e148      	b.n	8000e94 <__aeabi_dsub+0x3c0>
 8000c02:	4667      	mov	r7, ip
 8000c04:	1a86      	subs	r6, r0, r2
 8000c06:	1bcb      	subs	r3, r1, r7
 8000c08:	42b0      	cmp	r0, r6
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	427f      	negs	r7, r7
 8000c0e:	46b8      	mov	r8, r7
 8000c10:	001f      	movs	r7, r3
 8000c12:	4643      	mov	r3, r8
 8000c14:	1aff      	subs	r7, r7, r3
 8000c16:	003b      	movs	r3, r7
 8000c18:	46b8      	mov	r8, r7
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	d500      	bpl.n	8000c20 <__aeabi_dsub+0x14c>
 8000c1e:	e15f      	b.n	8000ee0 <__aeabi_dsub+0x40c>
 8000c20:	4337      	orrs	r7, r6
 8000c22:	d19a      	bne.n	8000b5a <__aeabi_dsub+0x86>
 8000c24:	2200      	movs	r2, #0
 8000c26:	2400      	movs	r4, #0
 8000c28:	2500      	movs	r5, #0
 8000c2a:	e079      	b.n	8000d20 <__aeabi_dsub+0x24c>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	dc00      	bgt.n	8000c32 <__aeabi_dsub+0x15e>
 8000c30:	e0fa      	b.n	8000e28 <__aeabi_dsub+0x354>
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dsub+0x164>
 8000c36:	e08d      	b.n	8000d54 <__aeabi_dsub+0x280>
 8000c38:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <__aeabi_dsub+0x348>)
 8000c3a:	429d      	cmp	r5, r3
 8000c3c:	d067      	beq.n	8000d0e <__aeabi_dsub+0x23a>
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	4667      	mov	r7, ip
 8000c42:	041b      	lsls	r3, r3, #16
 8000c44:	431f      	orrs	r7, r3
 8000c46:	46bc      	mov	ip, r7
 8000c48:	2e38      	cmp	r6, #56	; 0x38
 8000c4a:	dc00      	bgt.n	8000c4e <__aeabi_dsub+0x17a>
 8000c4c:	e152      	b.n	8000ef4 <__aeabi_dsub+0x420>
 8000c4e:	4663      	mov	r3, ip
 8000c50:	4313      	orrs	r3, r2
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	4193      	sbcs	r3, r2
 8000c56:	181e      	adds	r6, r3, r0
 8000c58:	4286      	cmp	r6, r0
 8000c5a:	4180      	sbcs	r0, r0
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	1809      	adds	r1, r1, r0
 8000c60:	020b      	lsls	r3, r1, #8
 8000c62:	d400      	bmi.n	8000c66 <__aeabi_dsub+0x192>
 8000c64:	e0be      	b.n	8000de4 <__aeabi_dsub+0x310>
 8000c66:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <__aeabi_dsub+0x348>)
 8000c68:	3501      	adds	r5, #1
 8000c6a:	429d      	cmp	r5, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dsub+0x19c>
 8000c6e:	e0d2      	b.n	8000e16 <__aeabi_dsub+0x342>
 8000c70:	4a6b      	ldr	r2, [pc, #428]	; (8000e20 <__aeabi_dsub+0x34c>)
 8000c72:	0873      	lsrs	r3, r6, #1
 8000c74:	400a      	ands	r2, r1
 8000c76:	2101      	movs	r1, #1
 8000c78:	400e      	ands	r6, r1
 8000c7a:	431e      	orrs	r6, r3
 8000c7c:	0851      	lsrs	r1, r2, #1
 8000c7e:	07d3      	lsls	r3, r2, #31
 8000c80:	2207      	movs	r2, #7
 8000c82:	431e      	orrs	r6, r3
 8000c84:	4032      	ands	r2, r6
 8000c86:	e795      	b.n	8000bb4 <__aeabi_dsub+0xe0>
 8000c88:	001e      	movs	r6, r3
 8000c8a:	4316      	orrs	r6, r2
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dsub+0x1bc>
 8000c8e:	e745      	b.n	8000b1c <__aeabi_dsub+0x48>
 8000c90:	e740      	b.n	8000b14 <__aeabi_dsub+0x40>
 8000c92:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <__aeabi_dsub+0x348>)
 8000c94:	429d      	cmp	r5, r3
 8000c96:	d03a      	beq.n	8000d0e <__aeabi_dsub+0x23a>
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	4667      	mov	r7, ip
 8000c9c:	041b      	lsls	r3, r3, #16
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	46bc      	mov	ip, r7
 8000ca2:	2e38      	cmp	r6, #56	; 0x38
 8000ca4:	dd00      	ble.n	8000ca8 <__aeabi_dsub+0x1d4>
 8000ca6:	e0eb      	b.n	8000e80 <__aeabi_dsub+0x3ac>
 8000ca8:	2e1f      	cmp	r6, #31
 8000caa:	dc00      	bgt.n	8000cae <__aeabi_dsub+0x1da>
 8000cac:	e13a      	b.n	8000f24 <__aeabi_dsub+0x450>
 8000cae:	0033      	movs	r3, r6
 8000cb0:	4667      	mov	r7, ip
 8000cb2:	3b20      	subs	r3, #32
 8000cb4:	40df      	lsrs	r7, r3
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	2e20      	cmp	r6, #32
 8000cba:	d005      	beq.n	8000cc8 <__aeabi_dsub+0x1f4>
 8000cbc:	2740      	movs	r7, #64	; 0x40
 8000cbe:	1bbf      	subs	r7, r7, r6
 8000cc0:	4666      	mov	r6, ip
 8000cc2:	40be      	lsls	r6, r7
 8000cc4:	4332      	orrs	r2, r6
 8000cc6:	4690      	mov	r8, r2
 8000cc8:	4646      	mov	r6, r8
 8000cca:	1e72      	subs	r2, r6, #1
 8000ccc:	4196      	sbcs	r6, r2
 8000cce:	4333      	orrs	r3, r6
 8000cd0:	e0da      	b.n	8000e88 <__aeabi_dsub+0x3b4>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_dsub+0x204>
 8000cd6:	e214      	b.n	8001102 <__aeabi_dsub+0x62e>
 8000cd8:	4663      	mov	r3, ip
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x20c>
 8000cde:	e168      	b.n	8000fb2 <__aeabi_dsub+0x4de>
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	074e      	lsls	r6, r1, #29
 8000ce4:	08c0      	lsrs	r0, r0, #3
 8000ce6:	08c9      	lsrs	r1, r1, #3
 8000ce8:	031b      	lsls	r3, r3, #12
 8000cea:	4306      	orrs	r6, r0
 8000cec:	4219      	tst	r1, r3
 8000cee:	d008      	beq.n	8000d02 <__aeabi_dsub+0x22e>
 8000cf0:	4660      	mov	r0, ip
 8000cf2:	08c0      	lsrs	r0, r0, #3
 8000cf4:	4218      	tst	r0, r3
 8000cf6:	d104      	bne.n	8000d02 <__aeabi_dsub+0x22e>
 8000cf8:	4663      	mov	r3, ip
 8000cfa:	0001      	movs	r1, r0
 8000cfc:	08d2      	lsrs	r2, r2, #3
 8000cfe:	075e      	lsls	r6, r3, #29
 8000d00:	4316      	orrs	r6, r2
 8000d02:	00f3      	lsls	r3, r6, #3
 8000d04:	4699      	mov	r9, r3
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	0f72      	lsrs	r2, r6, #29
 8000d0a:	4d44      	ldr	r5, [pc, #272]	; (8000e1c <__aeabi_dsub+0x348>)
 8000d0c:	4311      	orrs	r1, r2
 8000d0e:	464b      	mov	r3, r9
 8000d10:	08de      	lsrs	r6, r3, #3
 8000d12:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <__aeabi_dsub+0x348>)
 8000d14:	074f      	lsls	r7, r1, #29
 8000d16:	4337      	orrs	r7, r6
 8000d18:	08ca      	lsrs	r2, r1, #3
 8000d1a:	429d      	cmp	r5, r3
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dsub+0x24c>
 8000d1e:	e06e      	b.n	8000dfe <__aeabi_dsub+0x32a>
 8000d20:	0312      	lsls	r2, r2, #12
 8000d22:	056d      	lsls	r5, r5, #21
 8000d24:	0b12      	lsrs	r2, r2, #12
 8000d26:	0d6d      	lsrs	r5, r5, #21
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0312      	lsls	r2, r2, #12
 8000d2c:	0b13      	lsrs	r3, r2, #12
 8000d2e:	0d0a      	lsrs	r2, r1, #20
 8000d30:	0512      	lsls	r2, r2, #20
 8000d32:	431a      	orrs	r2, r3
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <__aeabi_dsub+0x350>)
 8000d36:	052d      	lsls	r5, r5, #20
 8000d38:	4013      	ands	r3, r2
 8000d3a:	432b      	orrs	r3, r5
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	07e4      	lsls	r4, r4, #31
 8000d40:	085b      	lsrs	r3, r3, #1
 8000d42:	4323      	orrs	r3, r4
 8000d44:	0038      	movs	r0, r7
 8000d46:	0019      	movs	r1, r3
 8000d48:	bc3c      	pop	{r2, r3, r4, r5}
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	4699      	mov	r9, r3
 8000d4e:	46a2      	mov	sl, r4
 8000d50:	46ab      	mov	fp, r5
 8000d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d54:	4663      	mov	r3, ip
 8000d56:	4313      	orrs	r3, r2
 8000d58:	d011      	beq.n	8000d7e <__aeabi_dsub+0x2aa>
 8000d5a:	1e73      	subs	r3, r6, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dsub+0x28e>
 8000d60:	e107      	b.n	8000f72 <__aeabi_dsub+0x49e>
 8000d62:	1886      	adds	r6, r0, r2
 8000d64:	4286      	cmp	r6, r0
 8000d66:	4180      	sbcs	r0, r0
 8000d68:	4461      	add	r1, ip
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	1809      	adds	r1, r1, r0
 8000d6e:	2501      	movs	r5, #1
 8000d70:	020b      	lsls	r3, r1, #8
 8000d72:	d537      	bpl.n	8000de4 <__aeabi_dsub+0x310>
 8000d74:	2502      	movs	r5, #2
 8000d76:	e77b      	b.n	8000c70 <__aeabi_dsub+0x19c>
 8000d78:	003e      	movs	r6, r7
 8000d7a:	4661      	mov	r1, ip
 8000d7c:	4691      	mov	r9, r2
 8000d7e:	0035      	movs	r5, r6
 8000d80:	e7c5      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8000d82:	465c      	mov	r4, fp
 8000d84:	2d00      	cmp	r5, #0
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dsub+0x2b6>
 8000d88:	e0e1      	b.n	8000f4e <__aeabi_dsub+0x47a>
 8000d8a:	000b      	movs	r3, r1
 8000d8c:	4303      	orrs	r3, r0
 8000d8e:	d0f3      	beq.n	8000d78 <__aeabi_dsub+0x2a4>
 8000d90:	1c73      	adds	r3, r6, #1
 8000d92:	d100      	bne.n	8000d96 <__aeabi_dsub+0x2c2>
 8000d94:	e1ac      	b.n	80010f0 <__aeabi_dsub+0x61c>
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <__aeabi_dsub+0x348>)
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dsub+0x2ca>
 8000d9c:	e13a      	b.n	8001014 <__aeabi_dsub+0x540>
 8000d9e:	43f3      	mvns	r3, r6
 8000da0:	2b38      	cmp	r3, #56	; 0x38
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_dsub+0x2d2>
 8000da4:	e16f      	b.n	8001086 <__aeabi_dsub+0x5b2>
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	dd00      	ble.n	8000dac <__aeabi_dsub+0x2d8>
 8000daa:	e18c      	b.n	80010c6 <__aeabi_dsub+0x5f2>
 8000dac:	2520      	movs	r5, #32
 8000dae:	000e      	movs	r6, r1
 8000db0:	1aed      	subs	r5, r5, r3
 8000db2:	40ae      	lsls	r6, r5
 8000db4:	46b0      	mov	r8, r6
 8000db6:	0006      	movs	r6, r0
 8000db8:	46aa      	mov	sl, r5
 8000dba:	40de      	lsrs	r6, r3
 8000dbc:	4645      	mov	r5, r8
 8000dbe:	4335      	orrs	r5, r6
 8000dc0:	002e      	movs	r6, r5
 8000dc2:	4655      	mov	r5, sl
 8000dc4:	40d9      	lsrs	r1, r3
 8000dc6:	40a8      	lsls	r0, r5
 8000dc8:	4663      	mov	r3, ip
 8000dca:	1e45      	subs	r5, r0, #1
 8000dcc:	41a8      	sbcs	r0, r5
 8000dce:	1a5b      	subs	r3, r3, r1
 8000dd0:	469c      	mov	ip, r3
 8000dd2:	4330      	orrs	r0, r6
 8000dd4:	1a16      	subs	r6, r2, r0
 8000dd6:	42b2      	cmp	r2, r6
 8000dd8:	4192      	sbcs	r2, r2
 8000dda:	4663      	mov	r3, ip
 8000ddc:	4252      	negs	r2, r2
 8000dde:	1a99      	subs	r1, r3, r2
 8000de0:	003d      	movs	r5, r7
 8000de2:	e6b4      	b.n	8000b4e <__aeabi_dsub+0x7a>
 8000de4:	2207      	movs	r2, #7
 8000de6:	4032      	ands	r2, r6
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d000      	beq.n	8000dee <__aeabi_dsub+0x31a>
 8000dec:	e6e4      	b.n	8000bb8 <__aeabi_dsub+0xe4>
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <__aeabi_dsub+0x348>)
 8000df0:	08f6      	lsrs	r6, r6, #3
 8000df2:	074f      	lsls	r7, r1, #29
 8000df4:	4337      	orrs	r7, r6
 8000df6:	08ca      	lsrs	r2, r1, #3
 8000df8:	429d      	cmp	r5, r3
 8000dfa:	d000      	beq.n	8000dfe <__aeabi_dsub+0x32a>
 8000dfc:	e790      	b.n	8000d20 <__aeabi_dsub+0x24c>
 8000dfe:	003b      	movs	r3, r7
 8000e00:	4313      	orrs	r3, r2
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dsub+0x332>
 8000e04:	e1a6      	b.n	8001154 <__aeabi_dsub+0x680>
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	031b      	lsls	r3, r3, #12
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	0312      	lsls	r2, r2, #12
 8000e0e:	0b12      	lsrs	r2, r2, #12
 8000e10:	4d02      	ldr	r5, [pc, #8]	; (8000e1c <__aeabi_dsub+0x348>)
 8000e12:	e789      	b.n	8000d28 <__aeabi_dsub+0x254>
 8000e14:	0015      	movs	r5, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e785      	b.n	8000d28 <__aeabi_dsub+0x254>
 8000e1c:	000007ff 	.word	0x000007ff
 8000e20:	ff7fffff 	.word	0xff7fffff
 8000e24:	800fffff 	.word	0x800fffff
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d000      	beq.n	8000e2e <__aeabi_dsub+0x35a>
 8000e2c:	e0c7      	b.n	8000fbe <__aeabi_dsub+0x4ea>
 8000e2e:	1c6b      	adds	r3, r5, #1
 8000e30:	055e      	lsls	r6, r3, #21
 8000e32:	0d76      	lsrs	r6, r6, #21
 8000e34:	2e01      	cmp	r6, #1
 8000e36:	dc00      	bgt.n	8000e3a <__aeabi_dsub+0x366>
 8000e38:	e0f0      	b.n	800101c <__aeabi_dsub+0x548>
 8000e3a:	4dc8      	ldr	r5, [pc, #800]	; (800115c <__aeabi_dsub+0x688>)
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dsub+0x36e>
 8000e40:	e0b9      	b.n	8000fb6 <__aeabi_dsub+0x4e2>
 8000e42:	1885      	adds	r5, r0, r2
 8000e44:	000a      	movs	r2, r1
 8000e46:	4285      	cmp	r5, r0
 8000e48:	4189      	sbcs	r1, r1
 8000e4a:	4462      	add	r2, ip
 8000e4c:	4249      	negs	r1, r1
 8000e4e:	1851      	adds	r1, r2, r1
 8000e50:	2207      	movs	r2, #7
 8000e52:	07ce      	lsls	r6, r1, #31
 8000e54:	086d      	lsrs	r5, r5, #1
 8000e56:	432e      	orrs	r6, r5
 8000e58:	0849      	lsrs	r1, r1, #1
 8000e5a:	4032      	ands	r2, r6
 8000e5c:	001d      	movs	r5, r3
 8000e5e:	e6a9      	b.n	8000bb4 <__aeabi_dsub+0xe0>
 8000e60:	49bf      	ldr	r1, [pc, #764]	; (8001160 <__aeabi_dsub+0x68c>)
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	4011      	ands	r1, r2
 8000e66:	2207      	movs	r2, #7
 8000e68:	4032      	ands	r2, r6
 8000e6a:	e6a3      	b.n	8000bb4 <__aeabi_dsub+0xe0>
 8000e6c:	0032      	movs	r2, r6
 8000e6e:	3828      	subs	r0, #40	; 0x28
 8000e70:	4082      	lsls	r2, r0
 8000e72:	2600      	movs	r6, #0
 8000e74:	e686      	b.n	8000b84 <__aeabi_dsub+0xb0>
 8000e76:	0030      	movs	r0, r6
 8000e78:	f000 fa22 	bl	80012c0 <__clzsi2>
 8000e7c:	3020      	adds	r0, #32
 8000e7e:	e673      	b.n	8000b68 <__aeabi_dsub+0x94>
 8000e80:	4663      	mov	r3, ip
 8000e82:	4313      	orrs	r3, r2
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	4193      	sbcs	r3, r2
 8000e88:	1ac6      	subs	r6, r0, r3
 8000e8a:	42b0      	cmp	r0, r6
 8000e8c:	4180      	sbcs	r0, r0
 8000e8e:	4240      	negs	r0, r0
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	e65c      	b.n	8000b4e <__aeabi_dsub+0x7a>
 8000e94:	000e      	movs	r6, r1
 8000e96:	4667      	mov	r7, ip
 8000e98:	4306      	orrs	r6, r0
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d15e      	bne.n	8000f5e <__aeabi_dsub+0x48a>
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	d000      	beq.n	8000ea6 <__aeabi_dsub+0x3d2>
 8000ea4:	e0f3      	b.n	800108e <__aeabi_dsub+0x5ba>
 8000ea6:	2f00      	cmp	r7, #0
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dsub+0x3d8>
 8000eaa:	e11e      	b.n	80010ea <__aeabi_dsub+0x616>
 8000eac:	465c      	mov	r4, fp
 8000eae:	4661      	mov	r1, ip
 8000eb0:	4691      	mov	r9, r2
 8000eb2:	e72c      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8000eb4:	4fa9      	ldr	r7, [pc, #676]	; (800115c <__aeabi_dsub+0x688>)
 8000eb6:	42be      	cmp	r6, r7
 8000eb8:	d07b      	beq.n	8000fb2 <__aeabi_dsub+0x4de>
 8000eba:	001e      	movs	r6, r3
 8000ebc:	e6f1      	b.n	8000ca2 <__aeabi_dsub+0x1ce>
 8000ebe:	0010      	movs	r0, r2
 8000ec0:	3d1f      	subs	r5, #31
 8000ec2:	40e8      	lsrs	r0, r5
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d003      	beq.n	8000ed0 <__aeabi_dsub+0x3fc>
 8000ec8:	2140      	movs	r1, #64	; 0x40
 8000eca:	1acb      	subs	r3, r1, r3
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	4316      	orrs	r6, r2
 8000ed0:	1e73      	subs	r3, r6, #1
 8000ed2:	419e      	sbcs	r6, r3
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	4306      	orrs	r6, r0
 8000ed8:	4032      	ands	r2, r6
 8000eda:	2100      	movs	r1, #0
 8000edc:	2500      	movs	r5, #0
 8000ede:	e783      	b.n	8000de8 <__aeabi_dsub+0x314>
 8000ee0:	1a16      	subs	r6, r2, r0
 8000ee2:	4663      	mov	r3, ip
 8000ee4:	42b2      	cmp	r2, r6
 8000ee6:	4180      	sbcs	r0, r0
 8000ee8:	1a59      	subs	r1, r3, r1
 8000eea:	4240      	negs	r0, r0
 8000eec:	1a0b      	subs	r3, r1, r0
 8000eee:	4698      	mov	r8, r3
 8000ef0:	465c      	mov	r4, fp
 8000ef2:	e632      	b.n	8000b5a <__aeabi_dsub+0x86>
 8000ef4:	2e1f      	cmp	r6, #31
 8000ef6:	dd00      	ble.n	8000efa <__aeabi_dsub+0x426>
 8000ef8:	e0ab      	b.n	8001052 <__aeabi_dsub+0x57e>
 8000efa:	2720      	movs	r7, #32
 8000efc:	1bbb      	subs	r3, r7, r6
 8000efe:	469a      	mov	sl, r3
 8000f00:	4663      	mov	r3, ip
 8000f02:	4657      	mov	r7, sl
 8000f04:	40bb      	lsls	r3, r7
 8000f06:	4699      	mov	r9, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	464f      	mov	r7, r9
 8000f0c:	40f3      	lsrs	r3, r6
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	003b      	movs	r3, r7
 8000f12:	4657      	mov	r7, sl
 8000f14:	40ba      	lsls	r2, r7
 8000f16:	1e57      	subs	r7, r2, #1
 8000f18:	41ba      	sbcs	r2, r7
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	40f2      	lsrs	r2, r6
 8000f20:	1889      	adds	r1, r1, r2
 8000f22:	e698      	b.n	8000c56 <__aeabi_dsub+0x182>
 8000f24:	2720      	movs	r7, #32
 8000f26:	1bbb      	subs	r3, r7, r6
 8000f28:	469a      	mov	sl, r3
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	4657      	mov	r7, sl
 8000f2e:	40bb      	lsls	r3, r7
 8000f30:	4699      	mov	r9, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	464f      	mov	r7, r9
 8000f36:	40f3      	lsrs	r3, r6
 8000f38:	431f      	orrs	r7, r3
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	4657      	mov	r7, sl
 8000f3e:	40ba      	lsls	r2, r7
 8000f40:	1e57      	subs	r7, r2, #1
 8000f42:	41ba      	sbcs	r2, r7
 8000f44:	4313      	orrs	r3, r2
 8000f46:	4662      	mov	r2, ip
 8000f48:	40f2      	lsrs	r2, r6
 8000f4a:	1a89      	subs	r1, r1, r2
 8000f4c:	e79c      	b.n	8000e88 <__aeabi_dsub+0x3b4>
 8000f4e:	4b83      	ldr	r3, [pc, #524]	; (800115c <__aeabi_dsub+0x688>)
 8000f50:	429f      	cmp	r7, r3
 8000f52:	d05f      	beq.n	8001014 <__aeabi_dsub+0x540>
 8000f54:	2580      	movs	r5, #128	; 0x80
 8000f56:	042d      	lsls	r5, r5, #16
 8000f58:	4273      	negs	r3, r6
 8000f5a:	4329      	orrs	r1, r5
 8000f5c:	e720      	b.n	8000da0 <__aeabi_dsub+0x2cc>
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d10c      	bne.n	8000f7c <__aeabi_dsub+0x4a8>
 8000f62:	2f00      	cmp	r7, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dsub+0x494>
 8000f66:	e0d0      	b.n	800110a <__aeabi_dsub+0x636>
 8000f68:	465c      	mov	r4, fp
 8000f6a:	4661      	mov	r1, ip
 8000f6c:	4691      	mov	r9, r2
 8000f6e:	4d7b      	ldr	r5, [pc, #492]	; (800115c <__aeabi_dsub+0x688>)
 8000f70:	e6cd      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8000f72:	4f7a      	ldr	r7, [pc, #488]	; (800115c <__aeabi_dsub+0x688>)
 8000f74:	42be      	cmp	r6, r7
 8000f76:	d01c      	beq.n	8000fb2 <__aeabi_dsub+0x4de>
 8000f78:	001e      	movs	r6, r3
 8000f7a:	e665      	b.n	8000c48 <__aeabi_dsub+0x174>
 8000f7c:	2f00      	cmp	r7, #0
 8000f7e:	d018      	beq.n	8000fb2 <__aeabi_dsub+0x4de>
 8000f80:	08c0      	lsrs	r0, r0, #3
 8000f82:	074e      	lsls	r6, r1, #29
 8000f84:	4306      	orrs	r6, r0
 8000f86:	2080      	movs	r0, #128	; 0x80
 8000f88:	08c9      	lsrs	r1, r1, #3
 8000f8a:	0300      	lsls	r0, r0, #12
 8000f8c:	4201      	tst	r1, r0
 8000f8e:	d008      	beq.n	8000fa2 <__aeabi_dsub+0x4ce>
 8000f90:	4663      	mov	r3, ip
 8000f92:	08dc      	lsrs	r4, r3, #3
 8000f94:	4204      	tst	r4, r0
 8000f96:	d104      	bne.n	8000fa2 <__aeabi_dsub+0x4ce>
 8000f98:	0021      	movs	r1, r4
 8000f9a:	46da      	mov	sl, fp
 8000f9c:	08d2      	lsrs	r2, r2, #3
 8000f9e:	075e      	lsls	r6, r3, #29
 8000fa0:	4316      	orrs	r6, r2
 8000fa2:	00f3      	lsls	r3, r6, #3
 8000fa4:	4699      	mov	r9, r3
 8000fa6:	2401      	movs	r4, #1
 8000fa8:	4653      	mov	r3, sl
 8000faa:	00c9      	lsls	r1, r1, #3
 8000fac:	0f72      	lsrs	r2, r6, #29
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	401c      	ands	r4, r3
 8000fb2:	4d6a      	ldr	r5, [pc, #424]	; (800115c <__aeabi_dsub+0x688>)
 8000fb4:	e6ab      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8000fb6:	001d      	movs	r5, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2700      	movs	r7, #0
 8000fbc:	e6b4      	b.n	8000d28 <__aeabi_dsub+0x254>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d159      	bne.n	8001076 <__aeabi_dsub+0x5a2>
 8000fc2:	000b      	movs	r3, r1
 8000fc4:	4303      	orrs	r3, r0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dsub+0x4f6>
 8000fc8:	e6d6      	b.n	8000d78 <__aeabi_dsub+0x2a4>
 8000fca:	1c73      	adds	r3, r6, #1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dsub+0x4fc>
 8000fce:	e0b2      	b.n	8001136 <__aeabi_dsub+0x662>
 8000fd0:	4b62      	ldr	r3, [pc, #392]	; (800115c <__aeabi_dsub+0x688>)
 8000fd2:	429f      	cmp	r7, r3
 8000fd4:	d01e      	beq.n	8001014 <__aeabi_dsub+0x540>
 8000fd6:	43f3      	mvns	r3, r6
 8000fd8:	2b38      	cmp	r3, #56	; 0x38
 8000fda:	dc6f      	bgt.n	80010bc <__aeabi_dsub+0x5e8>
 8000fdc:	2b1f      	cmp	r3, #31
 8000fde:	dd00      	ble.n	8000fe2 <__aeabi_dsub+0x50e>
 8000fe0:	e097      	b.n	8001112 <__aeabi_dsub+0x63e>
 8000fe2:	2520      	movs	r5, #32
 8000fe4:	000e      	movs	r6, r1
 8000fe6:	1aed      	subs	r5, r5, r3
 8000fe8:	40ae      	lsls	r6, r5
 8000fea:	46b0      	mov	r8, r6
 8000fec:	0006      	movs	r6, r0
 8000fee:	46aa      	mov	sl, r5
 8000ff0:	40de      	lsrs	r6, r3
 8000ff2:	4645      	mov	r5, r8
 8000ff4:	4335      	orrs	r5, r6
 8000ff6:	002e      	movs	r6, r5
 8000ff8:	4655      	mov	r5, sl
 8000ffa:	40a8      	lsls	r0, r5
 8000ffc:	40d9      	lsrs	r1, r3
 8000ffe:	1e45      	subs	r5, r0, #1
 8001000:	41a8      	sbcs	r0, r5
 8001002:	448c      	add	ip, r1
 8001004:	4306      	orrs	r6, r0
 8001006:	18b6      	adds	r6, r6, r2
 8001008:	4296      	cmp	r6, r2
 800100a:	4192      	sbcs	r2, r2
 800100c:	4251      	negs	r1, r2
 800100e:	4461      	add	r1, ip
 8001010:	003d      	movs	r5, r7
 8001012:	e625      	b.n	8000c60 <__aeabi_dsub+0x18c>
 8001014:	003d      	movs	r5, r7
 8001016:	4661      	mov	r1, ip
 8001018:	4691      	mov	r9, r2
 800101a:	e678      	b.n	8000d0e <__aeabi_dsub+0x23a>
 800101c:	000b      	movs	r3, r1
 800101e:	4303      	orrs	r3, r0
 8001020:	2d00      	cmp	r5, #0
 8001022:	d000      	beq.n	8001026 <__aeabi_dsub+0x552>
 8001024:	e655      	b.n	8000cd2 <__aeabi_dsub+0x1fe>
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f5      	beq.n	8001016 <__aeabi_dsub+0x542>
 800102a:	4663      	mov	r3, ip
 800102c:	4313      	orrs	r3, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dsub+0x55e>
 8001030:	e66d      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8001032:	1886      	adds	r6, r0, r2
 8001034:	4286      	cmp	r6, r0
 8001036:	4180      	sbcs	r0, r0
 8001038:	4461      	add	r1, ip
 800103a:	4240      	negs	r0, r0
 800103c:	1809      	adds	r1, r1, r0
 800103e:	2200      	movs	r2, #0
 8001040:	020b      	lsls	r3, r1, #8
 8001042:	d400      	bmi.n	8001046 <__aeabi_dsub+0x572>
 8001044:	e6d0      	b.n	8000de8 <__aeabi_dsub+0x314>
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <__aeabi_dsub+0x68c>)
 8001048:	3501      	adds	r5, #1
 800104a:	4019      	ands	r1, r3
 800104c:	e5b2      	b.n	8000bb4 <__aeabi_dsub+0xe0>
 800104e:	46b1      	mov	r9, r6
 8001050:	e65d      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8001052:	0033      	movs	r3, r6
 8001054:	4667      	mov	r7, ip
 8001056:	3b20      	subs	r3, #32
 8001058:	40df      	lsrs	r7, r3
 800105a:	003b      	movs	r3, r7
 800105c:	2e20      	cmp	r6, #32
 800105e:	d005      	beq.n	800106c <__aeabi_dsub+0x598>
 8001060:	2740      	movs	r7, #64	; 0x40
 8001062:	1bbf      	subs	r7, r7, r6
 8001064:	4666      	mov	r6, ip
 8001066:	40be      	lsls	r6, r7
 8001068:	4332      	orrs	r2, r6
 800106a:	4690      	mov	r8, r2
 800106c:	4646      	mov	r6, r8
 800106e:	1e72      	subs	r2, r6, #1
 8001070:	4196      	sbcs	r6, r2
 8001072:	4333      	orrs	r3, r6
 8001074:	e5ef      	b.n	8000c56 <__aeabi_dsub+0x182>
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <__aeabi_dsub+0x688>)
 8001078:	429f      	cmp	r7, r3
 800107a:	d0cb      	beq.n	8001014 <__aeabi_dsub+0x540>
 800107c:	2580      	movs	r5, #128	; 0x80
 800107e:	042d      	lsls	r5, r5, #16
 8001080:	4273      	negs	r3, r6
 8001082:	4329      	orrs	r1, r5
 8001084:	e7a8      	b.n	8000fd8 <__aeabi_dsub+0x504>
 8001086:	4308      	orrs	r0, r1
 8001088:	1e41      	subs	r1, r0, #1
 800108a:	4188      	sbcs	r0, r1
 800108c:	e6a2      	b.n	8000dd4 <__aeabi_dsub+0x300>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_dsub+0x5c0>
 8001092:	e63c      	b.n	8000d0e <__aeabi_dsub+0x23a>
 8001094:	4663      	mov	r3, ip
 8001096:	1a86      	subs	r6, r0, r2
 8001098:	1acf      	subs	r7, r1, r3
 800109a:	42b0      	cmp	r0, r6
 800109c:	419b      	sbcs	r3, r3
 800109e:	425b      	negs	r3, r3
 80010a0:	1afb      	subs	r3, r7, r3
 80010a2:	4698      	mov	r8, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	d54e      	bpl.n	8001146 <__aeabi_dsub+0x672>
 80010a8:	1a16      	subs	r6, r2, r0
 80010aa:	4663      	mov	r3, ip
 80010ac:	42b2      	cmp	r2, r6
 80010ae:	4192      	sbcs	r2, r2
 80010b0:	1a59      	subs	r1, r3, r1
 80010b2:	4252      	negs	r2, r2
 80010b4:	1a89      	subs	r1, r1, r2
 80010b6:	465c      	mov	r4, fp
 80010b8:	2200      	movs	r2, #0
 80010ba:	e57b      	b.n	8000bb4 <__aeabi_dsub+0xe0>
 80010bc:	4301      	orrs	r1, r0
 80010be:	000e      	movs	r6, r1
 80010c0:	1e71      	subs	r1, r6, #1
 80010c2:	418e      	sbcs	r6, r1
 80010c4:	e79f      	b.n	8001006 <__aeabi_dsub+0x532>
 80010c6:	001d      	movs	r5, r3
 80010c8:	000e      	movs	r6, r1
 80010ca:	3d20      	subs	r5, #32
 80010cc:	40ee      	lsrs	r6, r5
 80010ce:	46b0      	mov	r8, r6
 80010d0:	2b20      	cmp	r3, #32
 80010d2:	d004      	beq.n	80010de <__aeabi_dsub+0x60a>
 80010d4:	2540      	movs	r5, #64	; 0x40
 80010d6:	1aeb      	subs	r3, r5, r3
 80010d8:	4099      	lsls	r1, r3
 80010da:	4308      	orrs	r0, r1
 80010dc:	4681      	mov	r9, r0
 80010de:	4648      	mov	r0, r9
 80010e0:	4643      	mov	r3, r8
 80010e2:	1e41      	subs	r1, r0, #1
 80010e4:	4188      	sbcs	r0, r1
 80010e6:	4318      	orrs	r0, r3
 80010e8:	e674      	b.n	8000dd4 <__aeabi_dsub+0x300>
 80010ea:	2200      	movs	r2, #0
 80010ec:	2400      	movs	r4, #0
 80010ee:	e617      	b.n	8000d20 <__aeabi_dsub+0x24c>
 80010f0:	1a16      	subs	r6, r2, r0
 80010f2:	4663      	mov	r3, ip
 80010f4:	42b2      	cmp	r2, r6
 80010f6:	4192      	sbcs	r2, r2
 80010f8:	1a59      	subs	r1, r3, r1
 80010fa:	4252      	negs	r2, r2
 80010fc:	1a89      	subs	r1, r1, r2
 80010fe:	003d      	movs	r5, r7
 8001100:	e525      	b.n	8000b4e <__aeabi_dsub+0x7a>
 8001102:	4661      	mov	r1, ip
 8001104:	4691      	mov	r9, r2
 8001106:	4d15      	ldr	r5, [pc, #84]	; (800115c <__aeabi_dsub+0x688>)
 8001108:	e601      	b.n	8000d0e <__aeabi_dsub+0x23a>
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	2400      	movs	r4, #0
 800110e:	0312      	lsls	r2, r2, #12
 8001110:	e679      	b.n	8000e06 <__aeabi_dsub+0x332>
 8001112:	001d      	movs	r5, r3
 8001114:	000e      	movs	r6, r1
 8001116:	3d20      	subs	r5, #32
 8001118:	40ee      	lsrs	r6, r5
 800111a:	46b0      	mov	r8, r6
 800111c:	2b20      	cmp	r3, #32
 800111e:	d004      	beq.n	800112a <__aeabi_dsub+0x656>
 8001120:	2540      	movs	r5, #64	; 0x40
 8001122:	1aeb      	subs	r3, r5, r3
 8001124:	4099      	lsls	r1, r3
 8001126:	4308      	orrs	r0, r1
 8001128:	4681      	mov	r9, r0
 800112a:	464e      	mov	r6, r9
 800112c:	4643      	mov	r3, r8
 800112e:	1e71      	subs	r1, r6, #1
 8001130:	418e      	sbcs	r6, r1
 8001132:	431e      	orrs	r6, r3
 8001134:	e767      	b.n	8001006 <__aeabi_dsub+0x532>
 8001136:	1886      	adds	r6, r0, r2
 8001138:	4296      	cmp	r6, r2
 800113a:	419b      	sbcs	r3, r3
 800113c:	4461      	add	r1, ip
 800113e:	425b      	negs	r3, r3
 8001140:	18c9      	adds	r1, r1, r3
 8001142:	003d      	movs	r5, r7
 8001144:	e58c      	b.n	8000c60 <__aeabi_dsub+0x18c>
 8001146:	4647      	mov	r7, r8
 8001148:	4337      	orrs	r7, r6
 800114a:	d0ce      	beq.n	80010ea <__aeabi_dsub+0x616>
 800114c:	2207      	movs	r2, #7
 800114e:	4641      	mov	r1, r8
 8001150:	4032      	ands	r2, r6
 8001152:	e649      	b.n	8000de8 <__aeabi_dsub+0x314>
 8001154:	2700      	movs	r7, #0
 8001156:	003a      	movs	r2, r7
 8001158:	e5e6      	b.n	8000d28 <__aeabi_dsub+0x254>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	000007ff 	.word	0x000007ff
 8001160:	ff7fffff 	.word	0xff7fffff

08001164 <__aeabi_d2iz>:
 8001164:	b530      	push	{r4, r5, lr}
 8001166:	4d14      	ldr	r5, [pc, #80]	; (80011b8 <__aeabi_d2iz+0x54>)
 8001168:	030a      	lsls	r2, r1, #12
 800116a:	004b      	lsls	r3, r1, #1
 800116c:	0b12      	lsrs	r2, r2, #12
 800116e:	0d5b      	lsrs	r3, r3, #21
 8001170:	0fc9      	lsrs	r1, r1, #31
 8001172:	2400      	movs	r4, #0
 8001174:	42ab      	cmp	r3, r5
 8001176:	dd11      	ble.n	800119c <__aeabi_d2iz+0x38>
 8001178:	4c10      	ldr	r4, [pc, #64]	; (80011bc <__aeabi_d2iz+0x58>)
 800117a:	42a3      	cmp	r3, r4
 800117c:	dc10      	bgt.n	80011a0 <__aeabi_d2iz+0x3c>
 800117e:	2480      	movs	r4, #128	; 0x80
 8001180:	0364      	lsls	r4, r4, #13
 8001182:	4322      	orrs	r2, r4
 8001184:	4c0e      	ldr	r4, [pc, #56]	; (80011c0 <__aeabi_d2iz+0x5c>)
 8001186:	1ae4      	subs	r4, r4, r3
 8001188:	2c1f      	cmp	r4, #31
 800118a:	dd0c      	ble.n	80011a6 <__aeabi_d2iz+0x42>
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <__aeabi_d2iz+0x60>)
 800118e:	1ac3      	subs	r3, r0, r3
 8001190:	40da      	lsrs	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	425c      	negs	r4, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d100      	bne.n	800119c <__aeabi_d2iz+0x38>
 800119a:	001c      	movs	r4, r3
 800119c:	0020      	movs	r0, r4
 800119e:	bd30      	pop	{r4, r5, pc}
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <__aeabi_d2iz+0x64>)
 80011a2:	18cc      	adds	r4, r1, r3
 80011a4:	e7fa      	b.n	800119c <__aeabi_d2iz+0x38>
 80011a6:	4d09      	ldr	r5, [pc, #36]	; (80011cc <__aeabi_d2iz+0x68>)
 80011a8:	40e0      	lsrs	r0, r4
 80011aa:	46ac      	mov	ip, r5
 80011ac:	4463      	add	r3, ip
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	4303      	orrs	r3, r0
 80011b4:	e7ee      	b.n	8001194 <__aeabi_d2iz+0x30>
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	000003fe 	.word	0x000003fe
 80011bc:	0000041d 	.word	0x0000041d
 80011c0:	00000433 	.word	0x00000433
 80011c4:	00000413 	.word	0x00000413
 80011c8:	7fffffff 	.word	0x7fffffff
 80011cc:	fffffbed 	.word	0xfffffbed

080011d0 <__aeabi_i2d>:
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d02d      	beq.n	8001232 <__aeabi_i2d+0x62>
 80011d6:	17c3      	asrs	r3, r0, #31
 80011d8:	18c5      	adds	r5, r0, r3
 80011da:	405d      	eors	r5, r3
 80011dc:	0fc4      	lsrs	r4, r0, #31
 80011de:	0028      	movs	r0, r5
 80011e0:	f000 f86e 	bl	80012c0 <__clzsi2>
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <__aeabi_i2d+0x6c>)
 80011e6:	1a1b      	subs	r3, r3, r0
 80011e8:	055b      	lsls	r3, r3, #21
 80011ea:	0d5b      	lsrs	r3, r3, #21
 80011ec:	280a      	cmp	r0, #10
 80011ee:	dd15      	ble.n	800121c <__aeabi_i2d+0x4c>
 80011f0:	380b      	subs	r0, #11
 80011f2:	4085      	lsls	r5, r0
 80011f4:	2200      	movs	r2, #0
 80011f6:	032d      	lsls	r5, r5, #12
 80011f8:	0b2d      	lsrs	r5, r5, #12
 80011fa:	2100      	movs	r1, #0
 80011fc:	0010      	movs	r0, r2
 80011fe:	032d      	lsls	r5, r5, #12
 8001200:	0d0a      	lsrs	r2, r1, #20
 8001202:	0b2d      	lsrs	r5, r5, #12
 8001204:	0512      	lsls	r2, r2, #20
 8001206:	432a      	orrs	r2, r5
 8001208:	4d0d      	ldr	r5, [pc, #52]	; (8001240 <__aeabi_i2d+0x70>)
 800120a:	051b      	lsls	r3, r3, #20
 800120c:	402a      	ands	r2, r5
 800120e:	4313      	orrs	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	07e4      	lsls	r4, r4, #31
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	4323      	orrs	r3, r4
 8001218:	0019      	movs	r1, r3
 800121a:	bd70      	pop	{r4, r5, r6, pc}
 800121c:	0002      	movs	r2, r0
 800121e:	0029      	movs	r1, r5
 8001220:	3215      	adds	r2, #21
 8001222:	4091      	lsls	r1, r2
 8001224:	000a      	movs	r2, r1
 8001226:	210b      	movs	r1, #11
 8001228:	1a08      	subs	r0, r1, r0
 800122a:	40c5      	lsrs	r5, r0
 800122c:	032d      	lsls	r5, r5, #12
 800122e:	0b2d      	lsrs	r5, r5, #12
 8001230:	e7e3      	b.n	80011fa <__aeabi_i2d+0x2a>
 8001232:	2400      	movs	r4, #0
 8001234:	2300      	movs	r3, #0
 8001236:	2500      	movs	r5, #0
 8001238:	2200      	movs	r2, #0
 800123a:	e7de      	b.n	80011fa <__aeabi_i2d+0x2a>
 800123c:	0000041e 	.word	0x0000041e
 8001240:	800fffff 	.word	0x800fffff

08001244 <__aeabi_cdrcmple>:
 8001244:	4684      	mov	ip, r0
 8001246:	1c10      	adds	r0, r2, #0
 8001248:	4662      	mov	r2, ip
 800124a:	468c      	mov	ip, r1
 800124c:	1c19      	adds	r1, r3, #0
 800124e:	4663      	mov	r3, ip
 8001250:	e000      	b.n	8001254 <__aeabi_cdcmpeq>
 8001252:	46c0      	nop			; (mov r8, r8)

08001254 <__aeabi_cdcmpeq>:
 8001254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001256:	f000 f8fd 	bl	8001454 <__ledf2>
 800125a:	2800      	cmp	r0, #0
 800125c:	d401      	bmi.n	8001262 <__aeabi_cdcmpeq+0xe>
 800125e:	2100      	movs	r1, #0
 8001260:	42c8      	cmn	r0, r1
 8001262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001264 <__aeabi_dcmpeq>:
 8001264:	b510      	push	{r4, lr}
 8001266:	f000 f855 	bl	8001314 <__eqdf2>
 800126a:	4240      	negs	r0, r0
 800126c:	3001      	adds	r0, #1
 800126e:	bd10      	pop	{r4, pc}

08001270 <__aeabi_dcmplt>:
 8001270:	b510      	push	{r4, lr}
 8001272:	f000 f8ef 	bl	8001454 <__ledf2>
 8001276:	2800      	cmp	r0, #0
 8001278:	db01      	blt.n	800127e <__aeabi_dcmplt+0xe>
 800127a:	2000      	movs	r0, #0
 800127c:	bd10      	pop	{r4, pc}
 800127e:	2001      	movs	r0, #1
 8001280:	bd10      	pop	{r4, pc}
 8001282:	46c0      	nop			; (mov r8, r8)

08001284 <__aeabi_dcmple>:
 8001284:	b510      	push	{r4, lr}
 8001286:	f000 f8e5 	bl	8001454 <__ledf2>
 800128a:	2800      	cmp	r0, #0
 800128c:	dd01      	ble.n	8001292 <__aeabi_dcmple+0xe>
 800128e:	2000      	movs	r0, #0
 8001290:	bd10      	pop	{r4, pc}
 8001292:	2001      	movs	r0, #1
 8001294:	bd10      	pop	{r4, pc}
 8001296:	46c0      	nop			; (mov r8, r8)

08001298 <__aeabi_dcmpgt>:
 8001298:	b510      	push	{r4, lr}
 800129a:	f000 f877 	bl	800138c <__gedf2>
 800129e:	2800      	cmp	r0, #0
 80012a0:	dc01      	bgt.n	80012a6 <__aeabi_dcmpgt+0xe>
 80012a2:	2000      	movs	r0, #0
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	2001      	movs	r0, #1
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)

080012ac <__aeabi_dcmpge>:
 80012ac:	b510      	push	{r4, lr}
 80012ae:	f000 f86d 	bl	800138c <__gedf2>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	da01      	bge.n	80012ba <__aeabi_dcmpge+0xe>
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd10      	pop	{r4, pc}
 80012ba:	2001      	movs	r0, #1
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	46c0      	nop			; (mov r8, r8)

080012c0 <__clzsi2>:
 80012c0:	211c      	movs	r1, #28
 80012c2:	2301      	movs	r3, #1
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d301      	bcc.n	80012ce <__clzsi2+0xe>
 80012ca:	0c00      	lsrs	r0, r0, #16
 80012cc:	3910      	subs	r1, #16
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	4298      	cmp	r0, r3
 80012d2:	d301      	bcc.n	80012d8 <__clzsi2+0x18>
 80012d4:	0a00      	lsrs	r0, r0, #8
 80012d6:	3908      	subs	r1, #8
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	4298      	cmp	r0, r3
 80012dc:	d301      	bcc.n	80012e2 <__clzsi2+0x22>
 80012de:	0900      	lsrs	r0, r0, #4
 80012e0:	3904      	subs	r1, #4
 80012e2:	a202      	add	r2, pc, #8	; (adr r2, 80012ec <__clzsi2+0x2c>)
 80012e4:	5c10      	ldrb	r0, [r2, r0]
 80012e6:	1840      	adds	r0, r0, r1
 80012e8:	4770      	bx	lr
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	02020304 	.word	0x02020304
 80012f0:	01010101 	.word	0x01010101
	...

080012fc <__clzdi2>:
 80012fc:	b510      	push	{r4, lr}
 80012fe:	2900      	cmp	r1, #0
 8001300:	d103      	bne.n	800130a <__clzdi2+0xe>
 8001302:	f7ff ffdd 	bl	80012c0 <__clzsi2>
 8001306:	3020      	adds	r0, #32
 8001308:	e002      	b.n	8001310 <__clzdi2+0x14>
 800130a:	1c08      	adds	r0, r1, #0
 800130c:	f7ff ffd8 	bl	80012c0 <__clzsi2>
 8001310:	bd10      	pop	{r4, pc}
 8001312:	46c0      	nop			; (mov r8, r8)

08001314 <__eqdf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	464f      	mov	r7, r9
 8001318:	4646      	mov	r6, r8
 800131a:	46d6      	mov	lr, sl
 800131c:	4684      	mov	ip, r0
 800131e:	b5c0      	push	{r6, r7, lr}
 8001320:	4680      	mov	r8, r0
 8001322:	4e19      	ldr	r6, [pc, #100]	; (8001388 <__eqdf2+0x74>)
 8001324:	0318      	lsls	r0, r3, #12
 8001326:	030f      	lsls	r7, r1, #12
 8001328:	004d      	lsls	r5, r1, #1
 800132a:	0b00      	lsrs	r0, r0, #12
 800132c:	005c      	lsls	r4, r3, #1
 800132e:	4682      	mov	sl, r0
 8001330:	0b3f      	lsrs	r7, r7, #12
 8001332:	0d6d      	lsrs	r5, r5, #21
 8001334:	0fc9      	lsrs	r1, r1, #31
 8001336:	4691      	mov	r9, r2
 8001338:	0d64      	lsrs	r4, r4, #21
 800133a:	0fdb      	lsrs	r3, r3, #31
 800133c:	2001      	movs	r0, #1
 800133e:	42b5      	cmp	r5, r6
 8001340:	d00a      	beq.n	8001358 <__eqdf2+0x44>
 8001342:	42b4      	cmp	r4, r6
 8001344:	d003      	beq.n	800134e <__eqdf2+0x3a>
 8001346:	42a5      	cmp	r5, r4
 8001348:	d101      	bne.n	800134e <__eqdf2+0x3a>
 800134a:	4557      	cmp	r7, sl
 800134c:	d00c      	beq.n	8001368 <__eqdf2+0x54>
 800134e:	bc1c      	pop	{r2, r3, r4}
 8001350:	4690      	mov	r8, r2
 8001352:	4699      	mov	r9, r3
 8001354:	46a2      	mov	sl, r4
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001358:	4666      	mov	r6, ip
 800135a:	433e      	orrs	r6, r7
 800135c:	d1f7      	bne.n	800134e <__eqdf2+0x3a>
 800135e:	42ac      	cmp	r4, r5
 8001360:	d1f5      	bne.n	800134e <__eqdf2+0x3a>
 8001362:	4654      	mov	r4, sl
 8001364:	4314      	orrs	r4, r2
 8001366:	d1f2      	bne.n	800134e <__eqdf2+0x3a>
 8001368:	2001      	movs	r0, #1
 800136a:	45c8      	cmp	r8, r9
 800136c:	d1ef      	bne.n	800134e <__eqdf2+0x3a>
 800136e:	4299      	cmp	r1, r3
 8001370:	d007      	beq.n	8001382 <__eqdf2+0x6e>
 8001372:	2d00      	cmp	r5, #0
 8001374:	d1eb      	bne.n	800134e <__eqdf2+0x3a>
 8001376:	4663      	mov	r3, ip
 8001378:	431f      	orrs	r7, r3
 800137a:	0038      	movs	r0, r7
 800137c:	1e47      	subs	r7, r0, #1
 800137e:	41b8      	sbcs	r0, r7
 8001380:	e7e5      	b.n	800134e <__eqdf2+0x3a>
 8001382:	2000      	movs	r0, #0
 8001384:	e7e3      	b.n	800134e <__eqdf2+0x3a>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	000007ff 	.word	0x000007ff

0800138c <__gedf2>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	464f      	mov	r7, r9
 8001390:	4646      	mov	r6, r8
 8001392:	46d6      	mov	lr, sl
 8001394:	004d      	lsls	r5, r1, #1
 8001396:	b5c0      	push	{r6, r7, lr}
 8001398:	030e      	lsls	r6, r1, #12
 800139a:	0fc9      	lsrs	r1, r1, #31
 800139c:	468a      	mov	sl, r1
 800139e:	492c      	ldr	r1, [pc, #176]	; (8001450 <__gedf2+0xc4>)
 80013a0:	031f      	lsls	r7, r3, #12
 80013a2:	005c      	lsls	r4, r3, #1
 80013a4:	4680      	mov	r8, r0
 80013a6:	0b36      	lsrs	r6, r6, #12
 80013a8:	0d6d      	lsrs	r5, r5, #21
 80013aa:	4691      	mov	r9, r2
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d64      	lsrs	r4, r4, #21
 80013b0:	0fdb      	lsrs	r3, r3, #31
 80013b2:	428d      	cmp	r5, r1
 80013b4:	d01e      	beq.n	80013f4 <__gedf2+0x68>
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d016      	beq.n	80013e8 <__gedf2+0x5c>
 80013ba:	2d00      	cmp	r5, #0
 80013bc:	d11e      	bne.n	80013fc <__gedf2+0x70>
 80013be:	4330      	orrs	r0, r6
 80013c0:	4684      	mov	ip, r0
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d101      	bne.n	80013ca <__gedf2+0x3e>
 80013c6:	433a      	orrs	r2, r7
 80013c8:	d023      	beq.n	8001412 <__gedf2+0x86>
 80013ca:	4662      	mov	r2, ip
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	d01a      	beq.n	8001406 <__gedf2+0x7a>
 80013d0:	459a      	cmp	sl, r3
 80013d2:	d029      	beq.n	8001428 <__gedf2+0x9c>
 80013d4:	4651      	mov	r1, sl
 80013d6:	2002      	movs	r0, #2
 80013d8:	3901      	subs	r1, #1
 80013da:	4008      	ands	r0, r1
 80013dc:	3801      	subs	r0, #1
 80013de:	bc1c      	pop	{r2, r3, r4}
 80013e0:	4690      	mov	r8, r2
 80013e2:	4699      	mov	r9, r3
 80013e4:	46a2      	mov	sl, r4
 80013e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e8:	0039      	movs	r1, r7
 80013ea:	4311      	orrs	r1, r2
 80013ec:	d0e5      	beq.n	80013ba <__gedf2+0x2e>
 80013ee:	2002      	movs	r0, #2
 80013f0:	4240      	negs	r0, r0
 80013f2:	e7f4      	b.n	80013de <__gedf2+0x52>
 80013f4:	4330      	orrs	r0, r6
 80013f6:	d1fa      	bne.n	80013ee <__gedf2+0x62>
 80013f8:	42ac      	cmp	r4, r5
 80013fa:	d00f      	beq.n	800141c <__gedf2+0x90>
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d10f      	bne.n	8001420 <__gedf2+0x94>
 8001400:	433a      	orrs	r2, r7
 8001402:	d0e7      	beq.n	80013d4 <__gedf2+0x48>
 8001404:	e00c      	b.n	8001420 <__gedf2+0x94>
 8001406:	2201      	movs	r2, #1
 8001408:	3b01      	subs	r3, #1
 800140a:	4393      	bics	r3, r2
 800140c:	0018      	movs	r0, r3
 800140e:	3001      	adds	r0, #1
 8001410:	e7e5      	b.n	80013de <__gedf2+0x52>
 8001412:	4663      	mov	r3, ip
 8001414:	2000      	movs	r0, #0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0e1      	beq.n	80013de <__gedf2+0x52>
 800141a:	e7db      	b.n	80013d4 <__gedf2+0x48>
 800141c:	433a      	orrs	r2, r7
 800141e:	d1e6      	bne.n	80013ee <__gedf2+0x62>
 8001420:	459a      	cmp	sl, r3
 8001422:	d1d7      	bne.n	80013d4 <__gedf2+0x48>
 8001424:	42a5      	cmp	r5, r4
 8001426:	dcd5      	bgt.n	80013d4 <__gedf2+0x48>
 8001428:	42a5      	cmp	r5, r4
 800142a:	db05      	blt.n	8001438 <__gedf2+0xac>
 800142c:	42be      	cmp	r6, r7
 800142e:	d8d1      	bhi.n	80013d4 <__gedf2+0x48>
 8001430:	d008      	beq.n	8001444 <__gedf2+0xb8>
 8001432:	2000      	movs	r0, #0
 8001434:	42be      	cmp	r6, r7
 8001436:	d2d2      	bcs.n	80013de <__gedf2+0x52>
 8001438:	4650      	mov	r0, sl
 800143a:	2301      	movs	r3, #1
 800143c:	3801      	subs	r0, #1
 800143e:	4398      	bics	r0, r3
 8001440:	3001      	adds	r0, #1
 8001442:	e7cc      	b.n	80013de <__gedf2+0x52>
 8001444:	45c8      	cmp	r8, r9
 8001446:	d8c5      	bhi.n	80013d4 <__gedf2+0x48>
 8001448:	2000      	movs	r0, #0
 800144a:	45c8      	cmp	r8, r9
 800144c:	d3f4      	bcc.n	8001438 <__gedf2+0xac>
 800144e:	e7c6      	b.n	80013de <__gedf2+0x52>
 8001450:	000007ff 	.word	0x000007ff

08001454 <__ledf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464f      	mov	r7, r9
 8001458:	4646      	mov	r6, r8
 800145a:	46d6      	mov	lr, sl
 800145c:	004d      	lsls	r5, r1, #1
 800145e:	b5c0      	push	{r6, r7, lr}
 8001460:	030e      	lsls	r6, r1, #12
 8001462:	0fc9      	lsrs	r1, r1, #31
 8001464:	468a      	mov	sl, r1
 8001466:	492e      	ldr	r1, [pc, #184]	; (8001520 <__ledf2+0xcc>)
 8001468:	031f      	lsls	r7, r3, #12
 800146a:	005c      	lsls	r4, r3, #1
 800146c:	4680      	mov	r8, r0
 800146e:	0b36      	lsrs	r6, r6, #12
 8001470:	0d6d      	lsrs	r5, r5, #21
 8001472:	4691      	mov	r9, r2
 8001474:	0b3f      	lsrs	r7, r7, #12
 8001476:	0d64      	lsrs	r4, r4, #21
 8001478:	0fdb      	lsrs	r3, r3, #31
 800147a:	428d      	cmp	r5, r1
 800147c:	d018      	beq.n	80014b0 <__ledf2+0x5c>
 800147e:	428c      	cmp	r4, r1
 8001480:	d011      	beq.n	80014a6 <__ledf2+0x52>
 8001482:	2d00      	cmp	r5, #0
 8001484:	d118      	bne.n	80014b8 <__ledf2+0x64>
 8001486:	4330      	orrs	r0, r6
 8001488:	4684      	mov	ip, r0
 800148a:	2c00      	cmp	r4, #0
 800148c:	d11e      	bne.n	80014cc <__ledf2+0x78>
 800148e:	433a      	orrs	r2, r7
 8001490:	d11c      	bne.n	80014cc <__ledf2+0x78>
 8001492:	4663      	mov	r3, ip
 8001494:	2000      	movs	r0, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d030      	beq.n	80014fc <__ledf2+0xa8>
 800149a:	4651      	mov	r1, sl
 800149c:	2002      	movs	r0, #2
 800149e:	3901      	subs	r1, #1
 80014a0:	4008      	ands	r0, r1
 80014a2:	3801      	subs	r0, #1
 80014a4:	e02a      	b.n	80014fc <__ledf2+0xa8>
 80014a6:	0039      	movs	r1, r7
 80014a8:	4311      	orrs	r1, r2
 80014aa:	d0ea      	beq.n	8001482 <__ledf2+0x2e>
 80014ac:	2002      	movs	r0, #2
 80014ae:	e025      	b.n	80014fc <__ledf2+0xa8>
 80014b0:	4330      	orrs	r0, r6
 80014b2:	d1fb      	bne.n	80014ac <__ledf2+0x58>
 80014b4:	42ac      	cmp	r4, r5
 80014b6:	d026      	beq.n	8001506 <__ledf2+0xb2>
 80014b8:	2c00      	cmp	r4, #0
 80014ba:	d126      	bne.n	800150a <__ledf2+0xb6>
 80014bc:	433a      	orrs	r2, r7
 80014be:	d124      	bne.n	800150a <__ledf2+0xb6>
 80014c0:	4651      	mov	r1, sl
 80014c2:	2002      	movs	r0, #2
 80014c4:	3901      	subs	r1, #1
 80014c6:	4008      	ands	r0, r1
 80014c8:	3801      	subs	r0, #1
 80014ca:	e017      	b.n	80014fc <__ledf2+0xa8>
 80014cc:	4662      	mov	r2, ip
 80014ce:	2a00      	cmp	r2, #0
 80014d0:	d00f      	beq.n	80014f2 <__ledf2+0x9e>
 80014d2:	459a      	cmp	sl, r3
 80014d4:	d1e1      	bne.n	800149a <__ledf2+0x46>
 80014d6:	42a5      	cmp	r5, r4
 80014d8:	db05      	blt.n	80014e6 <__ledf2+0x92>
 80014da:	42be      	cmp	r6, r7
 80014dc:	d8dd      	bhi.n	800149a <__ledf2+0x46>
 80014de:	d019      	beq.n	8001514 <__ledf2+0xc0>
 80014e0:	2000      	movs	r0, #0
 80014e2:	42be      	cmp	r6, r7
 80014e4:	d20a      	bcs.n	80014fc <__ledf2+0xa8>
 80014e6:	4650      	mov	r0, sl
 80014e8:	2301      	movs	r3, #1
 80014ea:	3801      	subs	r0, #1
 80014ec:	4398      	bics	r0, r3
 80014ee:	3001      	adds	r0, #1
 80014f0:	e004      	b.n	80014fc <__ledf2+0xa8>
 80014f2:	2201      	movs	r2, #1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4393      	bics	r3, r2
 80014f8:	0018      	movs	r0, r3
 80014fa:	3001      	adds	r0, #1
 80014fc:	bc1c      	pop	{r2, r3, r4}
 80014fe:	4690      	mov	r8, r2
 8001500:	4699      	mov	r9, r3
 8001502:	46a2      	mov	sl, r4
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	433a      	orrs	r2, r7
 8001508:	d1d0      	bne.n	80014ac <__ledf2+0x58>
 800150a:	459a      	cmp	sl, r3
 800150c:	d1c5      	bne.n	800149a <__ledf2+0x46>
 800150e:	42a5      	cmp	r5, r4
 8001510:	dcc3      	bgt.n	800149a <__ledf2+0x46>
 8001512:	e7e0      	b.n	80014d6 <__ledf2+0x82>
 8001514:	45c8      	cmp	r8, r9
 8001516:	d8c0      	bhi.n	800149a <__ledf2+0x46>
 8001518:	2000      	movs	r0, #0
 800151a:	45c8      	cmp	r8, r9
 800151c:	d3e3      	bcc.n	80014e6 <__ledf2+0x92>
 800151e:	e7ed      	b.n	80014fc <__ledf2+0xa8>
 8001520:	000007ff 	.word	0x000007ff

08001524 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8001528:	201e      	movs	r0, #30
 800152a:	f000 fe31 	bl	8002190 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 800152e:	23a0      	movs	r3, #160	; 0xa0
 8001530:	05db      	lsls	r3, r3, #23
 8001532:	2200      	movs	r2, #0
 8001534:	2104      	movs	r1, #4
 8001536:	0018      	movs	r0, r3
 8001538:	f001 ffdc 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 800153c:	23a0      	movs	r3, #160	; 0xa0
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	2201      	movs	r2, #1
 8001542:	2108      	movs	r1, #8
 8001544:	0018      	movs	r0, r3
 8001546:	f001 ffd5 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 800154a:	23a0      	movs	r3, #160	; 0xa0
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	2200      	movs	r2, #0
 8001550:	2110      	movs	r1, #16
 8001552:	0018      	movs	r0, r3
 8001554:	f001 ffce 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8001558:	23a0      	movs	r3, #160	; 0xa0
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	2200      	movs	r2, #0
 800155e:	2120      	movs	r1, #32
 8001560:	0018      	movs	r0, r3
 8001562:	f001 ffc7 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8001566:	23a0      	movs	r3, #160	; 0xa0
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	2200      	movs	r2, #0
 800156c:	2101      	movs	r1, #1
 800156e:	0018      	movs	r0, r3
 8001570:	f001 ffc0 	bl	80034f4 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8001574:	23a0      	movs	r3, #160	; 0xa0
 8001576:	05db      	lsls	r3, r3, #23
 8001578:	2201      	movs	r2, #1
 800157a:	2102      	movs	r1, #2
 800157c:	0018      	movs	r0, r3
 800157e:	f001 ffb9 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001582:	23a0      	movs	r3, #160	; 0xa0
 8001584:	05db      	lsls	r3, r3, #23
 8001586:	2200      	movs	r2, #0
 8001588:	2102      	movs	r1, #2
 800158a:	0018      	movs	r0, r3
 800158c:	f001 ffb2 	bl	80034f4 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8001590:	2128      	movs	r1, #40	; 0x28
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f80f 	bl	80015b6 <lcd_write>
	lcd_write(0,0x0c);
 8001598:	210c      	movs	r1, #12
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f80b 	bl	80015b6 <lcd_write>
	lcd_write(0,0x06);
 80015a0:	2106      	movs	r1, #6
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f807 	bl	80015b6 <lcd_write>
	lcd_write(0,0x01);
 80015a8:	2101      	movs	r1, #1
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f803 	bl	80015b6 <lcd_write>
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	0002      	movs	r2, r0
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	1dbb      	adds	r3, r7, #6
 80015c4:	1c0a      	adds	r2, r1, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80015c8:	2002      	movs	r0, #2
 80015ca:	f000 fde1 	bl	8002190 <HAL_Delay>
	if(type)
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80015d6:	23a0      	movs	r3, #160	; 0xa0
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	2201      	movs	r2, #1
 80015dc:	2101      	movs	r1, #1
 80015de:	0018      	movs	r0, r3
 80015e0:	f001 ff88 	bl	80034f4 <HAL_GPIO_WritePin>
 80015e4:	e006      	b.n	80015f4 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80015e6:	23a0      	movs	r3, #160	; 0xa0
 80015e8:	05db      	lsls	r3, r3, #23
 80015ea:	2200      	movs	r2, #0
 80015ec:	2101      	movs	r1, #1
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 ff80 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da07      	bge.n	800160e <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	2201      	movs	r2, #1
 8001604:	2120      	movs	r1, #32
 8001606:	0018      	movs	r0, r3
 8001608:	f001 ff74 	bl	80034f4 <HAL_GPIO_WritePin>
 800160c:	e006      	b.n	800161c <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800160e:	23a0      	movs	r3, #160	; 0xa0
 8001610:	05db      	lsls	r3, r3, #23
 8001612:	2200      	movs	r2, #0
 8001614:	2120      	movs	r1, #32
 8001616:	0018      	movs	r0, r3
 8001618:	f001 ff6c 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	4013      	ands	r3, r2
 8001624:	d007      	beq.n	8001636 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	05db      	lsls	r3, r3, #23
 800162a:	2201      	movs	r2, #1
 800162c:	2110      	movs	r1, #16
 800162e:	0018      	movs	r0, r3
 8001630:	f001 ff60 	bl	80034f4 <HAL_GPIO_WritePin>
 8001634:	e006      	b.n	8001644 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	2200      	movs	r2, #0
 800163c:	2110      	movs	r1, #16
 800163e:	0018      	movs	r0, r3
 8001640:	f001 ff58 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8001644:	1dbb      	adds	r3, r7, #6
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2220      	movs	r2, #32
 800164a:	4013      	ands	r3, r2
 800164c:	d007      	beq.n	800165e <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800164e:	23a0      	movs	r3, #160	; 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	2201      	movs	r2, #1
 8001654:	2108      	movs	r1, #8
 8001656:	0018      	movs	r0, r3
 8001658:	f001 ff4c 	bl	80034f4 <HAL_GPIO_WritePin>
 800165c:	e006      	b.n	800166c <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800165e:	23a0      	movs	r3, #160	; 0xa0
 8001660:	05db      	lsls	r3, r3, #23
 8001662:	2200      	movs	r2, #0
 8001664:	2108      	movs	r1, #8
 8001666:	0018      	movs	r0, r3
 8001668:	f001 ff44 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 800166c:	1dbb      	adds	r3, r7, #6
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2210      	movs	r2, #16
 8001672:	4013      	ands	r3, r2
 8001674:	d007      	beq.n	8001686 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001676:	23a0      	movs	r3, #160	; 0xa0
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	2201      	movs	r2, #1
 800167c:	2104      	movs	r1, #4
 800167e:	0018      	movs	r0, r3
 8001680:	f001 ff38 	bl	80034f4 <HAL_GPIO_WritePin>
 8001684:	e006      	b.n	8001694 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	2200      	movs	r2, #0
 800168c:	2104      	movs	r1, #4
 800168e:	0018      	movs	r0, r3
 8001690:	f001 ff30 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8001694:	23a0      	movs	r3, #160	; 0xa0
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	2201      	movs	r2, #1
 800169a:	2102      	movs	r1, #2
 800169c:	0018      	movs	r0, r3
 800169e:	f001 ff29 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	05db      	lsls	r3, r3, #23
 80016a6:	2200      	movs	r2, #0
 80016a8:	2102      	movs	r1, #2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f001 ff22 	bl	80034f4 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80016b0:	1dbb      	adds	r3, r7, #6
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4013      	ands	r3, r2
 80016b8:	d007      	beq.n	80016ca <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	2201      	movs	r2, #1
 80016c0:	2120      	movs	r1, #32
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 ff16 	bl	80034f4 <HAL_GPIO_WritePin>
 80016c8:	e006      	b.n	80016d8 <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	0018      	movs	r0, r3
 80016d4:	f001 ff0e 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	d007      	beq.n	80016f2 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80016e2:	23a0      	movs	r3, #160	; 0xa0
 80016e4:	05db      	lsls	r3, r3, #23
 80016e6:	2201      	movs	r2, #1
 80016e8:	2110      	movs	r1, #16
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 ff02 	bl	80034f4 <HAL_GPIO_WritePin>
 80016f0:	e006      	b.n	8001700 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80016f2:	23a0      	movs	r3, #160	; 0xa0
 80016f4:	05db      	lsls	r3, r3, #23
 80016f6:	2200      	movs	r2, #0
 80016f8:	2110      	movs	r1, #16
 80016fa:	0018      	movs	r0, r3
 80016fc:	f001 fefa 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d007      	beq.n	800171a <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800170a:	23a0      	movs	r3, #160	; 0xa0
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	2201      	movs	r2, #1
 8001710:	2108      	movs	r1, #8
 8001712:	0018      	movs	r0, r3
 8001714:	f001 feee 	bl	80034f4 <HAL_GPIO_WritePin>
 8001718:	e006      	b.n	8001728 <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800171a:	23a0      	movs	r3, #160	; 0xa0
 800171c:	05db      	lsls	r3, r3, #23
 800171e:	2200      	movs	r2, #0
 8001720:	2108      	movs	r1, #8
 8001722:	0018      	movs	r0, r3
 8001724:	f001 fee6 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8001728:	1dbb      	adds	r3, r7, #6
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	d007      	beq.n	8001742 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	2201      	movs	r2, #1
 8001738:	2104      	movs	r1, #4
 800173a:	0018      	movs	r0, r3
 800173c:	f001 feda 	bl	80034f4 <HAL_GPIO_WritePin>
 8001740:	e006      	b.n	8001750 <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	2200      	movs	r2, #0
 8001748:	2104      	movs	r1, #4
 800174a:	0018      	movs	r0, r3
 800174c:	f001 fed2 	bl	80034f4 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8001750:	23a0      	movs	r3, #160	; 0xa0
 8001752:	05db      	lsls	r3, r3, #23
 8001754:	2201      	movs	r2, #1
 8001756:	2102      	movs	r1, #2
 8001758:	0018      	movs	r0, r3
 800175a:	f001 fecb 	bl	80034f4 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800175e:	23a0      	movs	r3, #160	; 0xa0
 8001760:	05db      	lsls	r3, r3, #23
 8001762:	2200      	movs	r2, #0
 8001764:	2102      	movs	r1, #2
 8001766:	0018      	movs	r0, r3
 8001768:	f001 fec4 	bl	80034f4 <HAL_GPIO_WritePin>
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	603a      	str	r2, [r7, #0]
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	1c02      	adds	r2, r0, #0
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	1dbb      	adds	r3, r7, #6
 8001784:	1c0a      	adds	r2, r1, #0
 8001786:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d011      	beq.n	80017b4 <lcd_puts+0x40>
 8001790:	dc02      	bgt.n	8001798 <lcd_puts+0x24>
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <lcd_puts+0x2e>
 8001796:	e028      	b.n	80017ea <lcd_puts+0x76>
 8001798:	2b02      	cmp	r3, #2
 800179a:	d014      	beq.n	80017c6 <lcd_puts+0x52>
 800179c:	2b03      	cmp	r3, #3
 800179e:	d01b      	beq.n	80017d8 <lcd_puts+0x64>
 80017a0:	e023      	b.n	80017ea <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	3b80      	subs	r3, #128	; 0x80
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	0019      	movs	r1, r3
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ff02 	bl	80015b6 <lcd_write>
			break;
 80017b2:	e01a      	b.n	80017ea <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80017b4:	1dbb      	adds	r3, r7, #6
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3b40      	subs	r3, #64	; 0x40
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	0019      	movs	r1, r3
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fef9 	bl	80015b6 <lcd_write>
			break;
 80017c4:	e011      	b.n	80017ea <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80017c6:	1dbb      	adds	r3, r7, #6
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	3b70      	subs	r3, #112	; 0x70
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	0019      	movs	r1, r3
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fef0 	bl	80015b6 <lcd_write>
			break;
 80017d6:	e008      	b.n	80017ea <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3b30      	subs	r3, #48	; 0x30
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	0019      	movs	r1, r3
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fee7 	bl	80015b6 <lcd_write>
			break;
 80017e8:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80017ea:	e00a      	b.n	8001802 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	0019      	movs	r1, r3
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff fedd 	bl	80015b6 <lcd_write>
		string++;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	603b      	str	r3, [r7, #0]
	while(*string)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b25b      	sxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ef      	bne.n	80017ec <lcd_puts+0x78>
	}
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <lcd_clear>:
void lcd_clear(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8001818:	2101      	movs	r1, #1
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fecb 	bl	80015b6 <lcd_write>
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <main>:
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);


int main(void)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182c:	f000 fc2a 	bl	8002084 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8001830:	f000 f8b4 	bl	800199c <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001834:	f000 fa30 	bl	8001c98 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001838:	f000 f914 	bl	8001a64 <MX_ADC1_Init>
  MX_TIM2_Init();
 800183c:	f000 f97e 	bl	8001b3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001840:	f000 f9dc 	bl	8001bfc <MX_USART1_UART_Init>

  lcd_init();
 8001844:	f7ff fe6e 	bl	8001524 <lcd_init>
  lcd_clear();
 8001848:	f7ff ffe4 	bl	8001814 <lcd_clear>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <main+0x134>)
 800184e:	2104      	movs	r1, #4
 8001850:	0018      	movs	r0, r3
 8001852:	f002 fe79 	bl	8004548 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <main+0x138>)
 8001858:	0018      	movs	r0, r3
 800185a:	f001 fba9 	bl	8002fb0 <HAL_ADCEx_Calibration_Start>

  while (1)
  {
	          // Start ADC Conversion
	 	      HAL_ADC_Start(&hadc1);
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <main+0x138>)
 8001860:	0018      	movs	r0, r3
 8001862:	f000 ffe9 	bl	8002838 <HAL_ADC_Start>
	 	      // Poll ADC1 Perihperal & TimeOut = 1mSec
	 	      HAL_ADC_PollForConversion(&hadc1, 1);
 8001866:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <main+0x138>)
 8001868:	2101      	movs	r1, #1
 800186a:	0018      	movs	r0, r3
 800186c:	f001 f832 	bl	80028d4 <HAL_ADC_PollForConversion>
	 	      // Read The ADC Conversion Result
	 	      adc_value = HAL_ADC_GetValue(&hadc1);
 8001870:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <main+0x138>)
 8001872:	0018      	movs	r0, r3
 8001874:	f001 f8bc 	bl	80029f0 <HAL_ADC_GetValue>
 8001878:	0003      	movs	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <main+0x13c>)
 800187e:	801a      	strh	r2, [r3, #0]
	 	      voltage= adc_value*(0.8057);
 8001880:	4b38      	ldr	r3, [pc, #224]	; (8001964 <main+0x13c>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff fca3 	bl	80011d0 <__aeabi_i2d>
 800188a:	4a37      	ldr	r2, [pc, #220]	; (8001968 <main+0x140>)
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <main+0x144>)
 800188e:	f7fe feaf 	bl	80005f0 <__aeabi_dmul>
 8001892:	0003      	movs	r3, r0
 8001894:	000c      	movs	r4, r1
 8001896:	0018      	movs	r0, r3
 8001898:	0021      	movs	r1, r4
 800189a:	f7fe fdc9 	bl	8000430 <__aeabi_d2uiz>
 800189e:	0003      	movs	r3, r0
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <main+0x148>)
 80018a4:	801a      	strh	r2, [r3, #0]
	 	      TIM2->CCR2 = (adc_value<<4);
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <main+0x13c>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	011a      	lsls	r2, r3, #4
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	05db      	lsls	r3, r3, #23
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38

	 	      sprintf(buffer, "voltage=%d mv", voltage);
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <main+0x148>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	001a      	movs	r2, r3
 80018b8:	492e      	ldr	r1, [pc, #184]	; (8001974 <main+0x14c>)
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <main+0x150>)
 80018bc:	0018      	movs	r0, r3
 80018be:	f004 fb6f 	bl	8005fa0 <siprintf>
	 	      str=(int8_t*)buffer;
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <main+0x154>)
 80018c4:	4a2c      	ldr	r2, [pc, #176]	; (8001978 <main+0x150>)
 80018c6:	601a      	str	r2, [r3, #0]
	 		  lcd_puts(0,0,str);
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <main+0x154>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	001a      	movs	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ff4f 	bl	8001774 <lcd_puts>

	 	      sprintf(buffer, "ADC=%d", adc_value);
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <main+0x13c>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	001a      	movs	r2, r3
 80018dc:	4928      	ldr	r1, [pc, #160]	; (8001980 <main+0x158>)
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <main+0x150>)
 80018e0:	0018      	movs	r0, r3
 80018e2:	f004 fb5d 	bl	8005fa0 <siprintf>
	 	      str=(int8_t*)buffer;
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <main+0x154>)
 80018e8:	4a23      	ldr	r2, [pc, #140]	; (8001978 <main+0x150>)
 80018ea:	601a      	str	r2, [r3, #0]
	 		  lcd_puts(1,0,str);
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <main+0x154>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff ff3d 	bl	8001774 <lcd_puts>

	 	     sprintf(MSG, "Hello Dudes! Tracing X = %03d \n", X);
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <main+0x15c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	4921      	ldr	r1, [pc, #132]	; (8001988 <main+0x160>)
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <main+0x164>)
 8001904:	0018      	movs	r0, r3
 8001906:	f004 fb4b 	bl	8005fa0 <siprintf>
	 	     HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 800190a:	4920      	ldr	r1, [pc, #128]	; (800198c <main+0x164>)
 800190c:	4820      	ldr	r0, [pc, #128]	; (8001990 <main+0x168>)
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	2223      	movs	r2, #35	; 0x23
 8001912:	f003 fc3d 	bl	8005190 <HAL_UART_Transmit>
	 	     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <main+0x16c>)
 8001918:	2101      	movs	r1, #1
 800191a:	0018      	movs	r0, r3
 800191c:	f001 fe07 	bl	800352e <HAL_GPIO_TogglePin>
	 	     sprintf(MSG, "STM32 ADC=%04d voltage=%04dmv\n\n", adc_value,voltage);
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <main+0x13c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	001a      	movs	r2, r3
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <main+0x148>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	491b      	ldr	r1, [pc, #108]	; (8001998 <main+0x170>)
 800192c:	4817      	ldr	r0, [pc, #92]	; (800198c <main+0x164>)
 800192e:	f004 fb37 	bl	8005fa0 <siprintf>
	 	     HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8001932:	4916      	ldr	r1, [pc, #88]	; (800198c <main+0x164>)
 8001934:	4816      	ldr	r0, [pc, #88]	; (8001990 <main+0x168>)
 8001936:	2364      	movs	r3, #100	; 0x64
 8001938:	2223      	movs	r2, #35	; 0x23
 800193a:	f003 fc29 	bl	8005190 <HAL_UART_Transmit>

	 	     HAL_Delay(500);
 800193e:	23fa      	movs	r3, #250	; 0xfa
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	0018      	movs	r0, r3
 8001944:	f000 fc24 	bl	8002190 <HAL_Delay>
	 	     X++;
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <main+0x15c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <main+0x15c>)
 8001952:	701a      	strb	r2, [r3, #0]
 	         lcd_clear();
 8001954:	f7ff ff5e 	bl	8001814 <lcd_clear>
	 	      HAL_ADC_Start(&hadc1);
 8001958:	e781      	b.n	800185e <main+0x36>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	200001c4 	.word	0x200001c4
 8001960:	200000c0 	.word	0x200000c0
 8001964:	2000008c 	.word	0x2000008c
 8001968:	5dcc63f1 	.word	0x5dcc63f1
 800196c:	3fe9c84b 	.word	0x3fe9c84b
 8001970:	2000008e 	.word	0x2000008e
 8001974:	080067c8 	.word	0x080067c8
 8001978:	200001b4 	.word	0x200001b4
 800197c:	20000210 	.word	0x20000210
 8001980:	080067d8 	.word	0x080067d8
 8001984:	200000b3 	.word	0x200000b3
 8001988:	080067e0 	.word	0x080067e0
 800198c:	20000090 	.word	0x20000090
 8001990:	20000124 	.word	0x20000124
 8001994:	50000400 	.word	0x50000400
 8001998:	08006800 	.word	0x08006800

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b0a7      	sub	sp, #156	; 0x9c
 80019a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	245c      	movs	r4, #92	; 0x5c
 80019a4:	193b      	adds	r3, r7, r4
 80019a6:	0018      	movs	r0, r3
 80019a8:	233c      	movs	r3, #60	; 0x3c
 80019aa:	001a      	movs	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f004 faef 	bl	8005f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b2:	234c      	movs	r3, #76	; 0x4c
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	0018      	movs	r0, r3
 80019b8:	2310      	movs	r3, #16
 80019ba:	001a      	movs	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	f004 fae7 	bl	8005f90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c2:	003b      	movs	r3, r7
 80019c4:	0018      	movs	r0, r3
 80019c6:	234c      	movs	r3, #76	; 0x4c
 80019c8:	001a      	movs	r2, r3
 80019ca:	2100      	movs	r1, #0
 80019cc:	f004 fae0 	bl	8005f90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 fdc5 	bl	8003564 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2202      	movs	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	0052      	lsls	r2, r2, #1
 80019e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	0018      	movs	r0, r3
 80019fe:	f001 fdfd 	bl	80035fc <HAL_RCC_OscConfig>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001a06:	f000 f9a5 	bl	8001d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0a:	214c      	movs	r1, #76	; 0x4c
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2207      	movs	r2, #7
 8001a10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2100      	movs	r1, #0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f002 f94d 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a32:	f000 f98f 	bl	8001d54 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8001a36:	003b      	movs	r3, r7
 8001a38:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <SystemClock_Config+0xc4>)
 8001a3a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a3c:	003b      	movs	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a42:	003b      	movs	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a48:	003b      	movs	r3, r7
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f002 fae6 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001a54:	f000 f97e 	bl	8001d54 <Error_Handler>
  }
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b027      	add	sp, #156	; 0x9c
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	00004001 	.word	0x00004001

08001a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	230c      	movs	r3, #12
 8001a70:	001a      	movs	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	f004 fa8c 	bl	8005f90 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001a7a:	4a2e      	ldr	r2, [pc, #184]	; (8001b34 <MX_ADC1_Init+0xd0>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	05d2      	lsls	r2, r2, #23
 8001a84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a92:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001acc:	222c      	movs	r2, #44	; 0x2c
 8001ace:	2100      	movs	r1, #0
 8001ad0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001ae6:	223c      	movs	r2, #60	; 0x3c
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001af4:	0018      	movs	r0, r3
 8001af6:	f000 fcc3 	bl	8002480 <HAL_ADC_Init>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001afe:	f000 f929 	bl	8001d54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <MX_ADC1_Init+0xd4>)
 8001b06:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b14:	1d3a      	adds	r2, r7, #4
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_ADC1_Init+0xcc>)
 8001b18:	0011      	movs	r1, r2
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 ff74 	bl	8002a08 <HAL_ADC_ConfigChannel>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001b24:	f000 f916 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200000c0 	.word	0x200000c0
 8001b34:	40012400 	.word	0x40012400
 8001b38:	1c000080 	.word	0x1c000080

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b42:	231c      	movs	r3, #28
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	0018      	movs	r0, r3
 8001b48:	230c      	movs	r3, #12
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f004 fa1f 	bl	8005f90 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b52:	003b      	movs	r3, r7
 8001b54:	0018      	movs	r0, r3
 8001b56:	231c      	movs	r3, #28
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f004 fa18 	bl	8005f90 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	05d2      	lsls	r2, r2, #23
 8001b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65500;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <MX_TIM2_Init+0xbc>)
 8001b78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f002 fc85 	bl	8004498 <HAL_TIM_PWM_Init>
 8001b8e:	1e03      	subs	r3, r0, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b92:	f000 f8df 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	211c      	movs	r1, #28
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba4:	187a      	adds	r2, r7, r1
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f003 fa24 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	1e03      	subs	r3, r0, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001bb4:	f000 f8ce 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	003b      	movs	r3, r7
 8001bba:	2260      	movs	r2, #96	; 0x60
 8001bbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bbe:	003b      	movs	r3, r7
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc4:	003b      	movs	r3, r7
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bca:	003b      	movs	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd0:	0039      	movs	r1, r7
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 fda6 	bl	8004728 <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001be0:	f000 f8b8 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <MX_TIM2_Init+0xb8>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 f940 	bl	8001e6c <HAL_TIM_MspPostInit>

}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b00a      	add	sp, #40	; 0x28
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200001c4 	.word	0x200001c4
 8001bf8:	0000ffdc 	.word	0x0000ffdc

08001bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c02:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <MX_USART1_UART_Init+0x98>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c08:	22e1      	movs	r2, #225	; 0xe1
 8001c0a:	0252      	lsls	r2, r2, #9
 8001c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c46:	0018      	movs	r0, r3
 8001c48:	f003 fa4c 	bl	80050e4 <HAL_UART_Init>
 8001c4c:	1e03      	subs	r3, r0, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c50:	f000 f880 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f004 f883 	bl	8005d64 <HAL_UARTEx_SetTxFifoThreshold>
 8001c5e:	1e03      	subs	r3, r0, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c62:	f000 f877 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f004 f8ba 	bl	8005de4 <HAL_UARTEx_SetRxFifoThreshold>
 8001c70:	1e03      	subs	r3, r0, #0
 8001c72:	d001      	beq.n	8001c78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c74:	f000 f86e 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <MX_USART1_UART_Init+0x94>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f004 f838 	bl	8005cf0 <HAL_UARTEx_DisableFifoMode>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c84:	f000 f866 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	20000124 	.word	0x20000124
 8001c94:	40013800 	.word	0x40013800

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	240c      	movs	r4, #12
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f004 f971 	bl	8005f90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <MX_GPIO_Init+0xb4>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <MX_GPIO_Init+0xb4>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <MX_GPIO_Init+0xb4>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <MX_GPIO_Init+0xb4>)
 8001cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_GPIO_Init+0xb4>)
 8001ccc:	2102      	movs	r1, #2
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_GPIO_Init+0xb4>)
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cde:	23a0      	movs	r3, #160	; 0xa0
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	213f      	movs	r1, #63	; 0x3f
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f001 fc04 	bl	80034f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_GPIO_Init+0xb8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f001 fbfe 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	223f      	movs	r2, #63	; 0x3f
 8001cfc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	193b      	adds	r3, r7, r4
 8001d00:	2201      	movs	r2, #1
 8001d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	193b      	adds	r3, r7, r4
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	193a      	adds	r2, r7, r4
 8001d12:	23a0      	movs	r3, #160	; 0xa0
 8001d14:	05db      	lsls	r3, r3, #23
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f001 fa7f 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d1e:	0021      	movs	r1, r4
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	2201      	movs	r2, #1
 8001d2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <MX_GPIO_Init+0xb8>)
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	0010      	movs	r0, r2
 8001d40:	f001 fa6c 	bl	800321c <HAL_GPIO_Init>

}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b009      	add	sp, #36	; 0x24
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	50000400 	.word	0x50000400

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <Error_Handler+0x6>

08001d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d68:	2101      	movs	r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2201      	movs	r2, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0549      	lsls	r1, r1, #21
 8001d84:	430a      	orrs	r2, r1
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_MspInit+0x4c>)
 8001d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	055b      	lsls	r3, r3, #21
 8001d90:	4013      	ands	r3, r2
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001d96:	23c0      	movs	r3, #192	; 0xc0
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fa1a 	bl	80021d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	2314      	movs	r3, #20
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	0018      	movs	r0, r3
 8001dba:	2314      	movs	r3, #20
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	f004 f8e6 	bl	8005f90 <memset>
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_ADC_MspInit+0x80>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d12a      	bne.n	8001e24 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0349      	lsls	r1, r1, #13
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	035b      	lsls	r3, r3, #13
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_ADC_MspInit+0x84>)
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e02:	2114      	movs	r1, #20
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	187a      	adds	r2, r7, r1
 8001e18:	23a0      	movs	r3, #160	; 0xa0
 8001e1a:	05db      	lsls	r3, r3, #23
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f001 f9fc 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b00a      	add	sp, #40	; 0x28
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40012400 	.word	0x40012400
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	05db      	lsls	r3, r3, #23
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10b      	bne.n	8001e60 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_TIM_PWM_MspInit+0x34>)
 8001e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_TIM_PWM_MspInit+0x34>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_TIM_PWM_MspInit+0x34>)
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	230c      	movs	r3, #12
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	0018      	movs	r0, r3
 8001e7a:	2314      	movs	r3, #20
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f004 f886 	bl	8005f90 <memset>
  if(htim->Instance==TIM2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	05db      	lsls	r3, r3, #23
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d121      	bne.n	8001ed4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_TIM_MspPostInit+0x70>)
 8001e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_TIM_MspPostInit+0x70>)
 8001e96:	2102      	movs	r1, #2
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_TIM_MspPostInit+0x70>)
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ea8:	210c      	movs	r1, #12
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2208      	movs	r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_TIM_MspPostInit+0x74>)
 8001ecc:	0019      	movs	r1, r3
 8001ece:	0010      	movs	r0, r2
 8001ed0:	f001 f9a4 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b008      	add	sp, #32
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	50000400 	.word	0x50000400

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	2314      	movs	r3, #20
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	f004 f84a 	bl	8005f90 <memset>
  if(huart->Instance==USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_UART_MspInit+0x90>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d131      	bne.n	8001f6a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0x94>)
 8001f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0x94>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	01c9      	lsls	r1, r1, #7
 8001f10:	430a      	orrs	r2, r1
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_UART_MspInit+0x94>)
 8001f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	01db      	lsls	r3, r3, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x94>)
 8001f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x94>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_MspInit+0x94>)
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f3a:	2114      	movs	r1, #20
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	22c0      	movs	r2, #192	; 0xc0
 8001f40:	00d2      	lsls	r2, r2, #3
 8001f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2202      	movs	r2, #2
 8001f48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	187b      	adds	r3, r7, r1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2201      	movs	r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	187a      	adds	r2, r7, r1
 8001f5e:	23a0      	movs	r3, #160	; 0xa0
 8001f60:	05db      	lsls	r3, r3, #23
 8001f62:	0011      	movs	r1, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	f001 f959 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b00a      	add	sp, #40	; 0x28
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40021000 	.word	0x40021000

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <NMI_Handler+0x4>

08001f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler+0x4>

08001f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 f8da 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	18d3      	adds	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f003 ffae 	bl	8005f3c <__errno>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	425b      	negs	r3, r3
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	18d2      	adds	r2, r2, r3
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <_sbrk+0x64>)
 8001ffc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b006      	add	sp, #24
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20024000 	.word	0x20024000
 800200c:	00000400 	.word	0x00000400
 8002010:	200000b4 	.word	0x200000b4
 8002014:	20000220 	.word	0x20000220

08002018 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <SystemInit+0x14>)
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	0512      	lsls	r2, r2, #20
 8002022:	609a      	str	r2, [r3, #8]
#endif
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002032:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002034:	f7ff fff0 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <LoopForever+0x6>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	; (8002070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <LoopForever+0xe>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	; (800207c <LoopForever+0x16>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800205e:	f003 ff73 	bl	8005f48 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002062:	f7ff fbe1 	bl	8001828 <main>

08002066 <LoopForever>:

LoopForever:
  b LoopForever
 8002066:	e7fe      	b.n	8002066 <LoopForever>
  ldr   r0, =_estack
 8002068:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002074:	08006980 	.word	0x08006980
  ldr r2, =_sbss
 8002078:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800207c:	2000021c 	.word	0x2000021c

08002080 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC1_COMP_IRQHandler>
	...

08002084 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_Init+0x3c>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_Init+0x3c>)
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0049      	lsls	r1, r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f810 	bl	80020c4 <HAL_InitTick>
 80020a4:	1e03      	subs	r3, r0, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020a8:	1dfb      	adds	r3, r7, #7
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e001      	b.n	80020b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fe54 	bl	8001d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020cc:	230f      	movs	r3, #15
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_InitTick+0x88>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02b      	beq.n	8002134 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_InitTick+0x8c>)
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_InitTick+0x88>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	0019      	movs	r1, r3
 80020e6:	23fa      	movs	r3, #250	; 0xfa
 80020e8:	0098      	lsls	r0, r3, #2
 80020ea:	f7fe f80b 	bl	8000104 <__udivsi3>
 80020ee:	0003      	movs	r3, r0
 80020f0:	0019      	movs	r1, r3
 80020f2:	0020      	movs	r0, r4
 80020f4:	f7fe f806 	bl	8000104 <__udivsi3>
 80020f8:	0003      	movs	r3, r0
 80020fa:	0018      	movs	r0, r3
 80020fc:	f001 f881 	bl	8003202 <HAL_SYSTICK_Config>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d112      	bne.n	800212a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d80a      	bhi.n	8002120 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	2301      	movs	r3, #1
 800210e:	425b      	negs	r3, r3
 8002110:	2200      	movs	r2, #0
 8002112:	0018      	movs	r0, r3
 8002114:	f001 f860 	bl	80031d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_InitTick+0x90>)
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e00d      	b.n	800213c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002120:	230f      	movs	r3, #15
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e008      	b.n	800213c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800212a:	230f      	movs	r3, #15
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e003      	b.n	800213c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002134:	230f      	movs	r3, #15
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800213c:	230f      	movs	r3, #15
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	781b      	ldrb	r3, [r3, #0]
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b005      	add	sp, #20
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000008 	.word	0x20000008
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_IncTick+0x1c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	001a      	movs	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_IncTick+0x20>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	18d2      	adds	r2, r2, r3
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_IncTick+0x20>)
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	20000008 	.word	0x20000008
 8002178:	20000214 	.word	0x20000214

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_GetTick+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	20000214 	.word	0x20000214

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fff0 	bl	800217c <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3301      	adds	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_Delay+0x40>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	001a      	movs	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	f7ff ffe0 	bl	800217c <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	40010000 	.word	0x40010000
 80021fc:	fffff9ff 	.word	0xfffff9ff

08002200 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002210:	401a      	ands	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b002      	add	sp, #8
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	fe3fffff 	.word	0xfe3fffff

08002228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	23e0      	movs	r3, #224	; 0xe0
 8002236:	045b      	lsls	r3, r3, #17
 8002238:	4013      	ands	r3, r2
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b002      	add	sp, #8
 8002240:	bd80      	pop	{r7, pc}

08002242 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	2104      	movs	r1, #4
 8002256:	400a      	ands	r2, r1
 8002258:	2107      	movs	r1, #7
 800225a:	4091      	lsls	r1, r2
 800225c:	000a      	movs	r2, r1
 800225e:	43d2      	mvns	r2, r2
 8002260:	401a      	ands	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2104      	movs	r1, #4
 8002266:	400b      	ands	r3, r1
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4099      	lsls	r1, r3
 800226c:	000b      	movs	r3, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}

0800227c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4013      	ands	r3, r2
 800228e:	d101      	bne.n	8002294 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002294:	2300      	movs	r3, #0
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b002      	add	sp, #8
 800229c:	bd80      	pop	{r7, pc}

0800229e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	211f      	movs	r1, #31
 80022b2:	400a      	ands	r2, r1
 80022b4:	210f      	movs	r1, #15
 80022b6:	4091      	lsls	r1, r2
 80022b8:	000a      	movs	r2, r1
 80022ba:	43d2      	mvns	r2, r2
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	210f      	movs	r1, #15
 80022c4:	4019      	ands	r1, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	201f      	movs	r0, #31
 80022ca:	4003      	ands	r3, r0
 80022cc:	4099      	lsls	r1, r3
 80022ce:	000b      	movs	r3, r1
 80022d0:	431a      	orrs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}

080022de <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	035b      	lsls	r3, r3, #13
 80022f0:	0b5b      	lsrs	r3, r3, #13
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	0352      	lsls	r2, r2, #13
 8002312:	0b52      	lsrs	r2, r2, #13
 8002314:	43d2      	mvns	r2, r2
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	0212      	lsls	r2, r2, #8
 8002338:	43d2      	mvns	r2, r2
 800233a:	401a      	ands	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	400b      	ands	r3, r1
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002346:	400b      	ands	r3, r1
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b004      	add	sp, #16
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	07ffff00 	.word	0x07ffff00

0800235c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a05      	ldr	r2, [pc, #20]	; (8002380 <LL_ADC_EnableInternalRegulator+0x24>)
 800236a:	4013      	ands	r3, r2
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	0552      	lsls	r2, r2, #21
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	b002      	add	sp, #8
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	6fffffe8 	.word	0x6fffffe8

08002384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	055b      	lsls	r3, r3, #21
 8002394:	401a      	ands	r2, r3
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	055b      	lsls	r3, r3, #21
 800239a:	429a      	cmp	r2, r3
 800239c:	d101      	bne.n	80023a2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <LL_ADC_Enable+0x20>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	2201      	movs	r2, #1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	7fffffe8 	.word	0x7fffffe8

080023d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <LL_ADC_Disable+0x20>)
 80023de:	4013      	ands	r3, r2
 80023e0:	2202      	movs	r2, #2
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	7fffffe8 	.word	0x7fffffe8

080023f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2201      	movs	r2, #1
 8002402:	4013      	ands	r3, r2
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <LL_ADC_IsEnabled+0x18>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <LL_ADC_IsEnabled+0x1a>
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}

08002416 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d101      	bne.n	800242e <LL_ADC_IsDisableOngoing+0x18>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_ADC_IsDisableOngoing+0x1a>
 800242e:	2300      	movs	r3, #0
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <LL_ADC_REG_StartConversion+0x20>)
 8002446:	4013      	ands	r3, r2
 8002448:	2204      	movs	r2, #4
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}
 8002458:	7fffffe8 	.word	0x7fffffe8

0800245c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2204      	movs	r2, #4
 800246a:	4013      	ands	r3, r2
 800246c:	2b04      	cmp	r3, #4
 800246e:	d101      	bne.n	8002474 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002488:	231f      	movs	r3, #31
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1ad      	b.n	8002802 <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff fc7b 	bl	8001dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2254      	movs	r2, #84	; 0x54
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ff5b 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d114      	bne.n	80024fc <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7ff ff40 	bl	800235c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024dc:	4bcb      	ldr	r3, [pc, #812]	; (800280c <HAL_ADC_Init+0x38c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	49cb      	ldr	r1, [pc, #812]	; (8002810 <HAL_ADC_Init+0x390>)
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7fd fe0e 	bl	8000104 <__udivsi3>
 80024e8:	0003      	movs	r3, r0
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024ee:	e002      	b.n	80024f6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f9      	bne.n	80024f0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff ff3f 	bl	8002384 <LL_ADC_IsInternalRegulatorEnabled>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d10f      	bne.n	800252a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	2210      	movs	r2, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	2201      	movs	r2, #1
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002522:	231f      	movs	r3, #31
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff ff94 	bl	800245c <LL_ADC_REG_IsConversionOngoing>
 8002534:	0003      	movs	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	2210      	movs	r2, #16
 800253e:	4013      	ands	r3, r2
 8002540:	d000      	beq.n	8002544 <HAL_ADC_Init+0xc4>
 8002542:	e151      	b.n	80027e8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d000      	beq.n	800254c <HAL_ADC_Init+0xcc>
 800254a:	e14d      	b.n	80027e8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	4ab0      	ldr	r2, [pc, #704]	; (8002814 <HAL_ADC_Init+0x394>)
 8002552:	4013      	ands	r3, r2
 8002554:	2202      	movs	r2, #2
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ff47 	bl	80023f4 <LL_ADC_IsEnabled>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d151      	bne.n	800260e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2218      	movs	r2, #24
 8002572:	4393      	bics	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	0f9b      	lsrs	r3, r3, #30
 8002588:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800258e:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8002594:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 800259a:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 80025a0:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	223c      	movs	r2, #60	; 0x3c
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d103      	bne.n	80025ba <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a95      	ldr	r2, [pc, #596]	; (8002818 <HAL_ADC_Init+0x398>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	23c0      	movs	r3, #192	; 0xc0
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	429a      	cmp	r2, r3
 80025da:	d018      	beq.n	800260e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	05db      	lsls	r3, r3, #23
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d012      	beq.n	800260e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d00c      	beq.n	800260e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80025f4:	4b89      	ldr	r3, [pc, #548]	; (800281c <HAL_ADC_Init+0x39c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a89      	ldr	r2, [pc, #548]	; (8002820 <HAL_ADC_Init+0x3a0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	23f0      	movs	r3, #240	; 0xf0
 8002604:	039b      	lsls	r3, r3, #14
 8002606:	401a      	ands	r2, r3
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_ADC_Init+0x39c>)
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7e1b      	ldrb	r3, [r3, #24]
 8002612:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7e5b      	ldrb	r3, [r3, #25]
 8002618:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800261a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e9b      	ldrb	r3, [r3, #26]
 8002620:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002622:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_ADC_Init+0x1b2>
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	e000      	b.n	8002634 <HAL_ADC_Init+0x1b4>
 8002632:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002634:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800263a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da04      	bge.n	800264e <HAL_ADC_Init+0x1ce>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	e001      	b.n	8002652 <HAL_ADC_Init+0x1d2>
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002652:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	5c5b      	ldrb	r3, [r3, r1]
 800265a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800265c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d115      	bne.n	800269a <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7e9b      	ldrb	r3, [r3, #26]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0252      	lsls	r2, r2, #9
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	e00b      	b.n	800269a <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	2220      	movs	r2, #32
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	2201      	movs	r2, #1
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a6:	23e0      	movs	r3, #224	; 0xe0
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80026b0:	4313      	orrs	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a59      	ldr	r2, [pc, #356]	; (8002824 <HAL_ADC_Init+0x3a4>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	4a54      	ldr	r2, [pc, #336]	; (8002828 <HAL_ADC_Init+0x3a8>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	0019      	movs	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	001a      	movs	r2, r3
 80026ee:	2100      	movs	r1, #0
 80026f0:	f7ff fda7 	bl	8002242 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	494b      	ldr	r1, [pc, #300]	; (800282c <HAL_ADC_Init+0x3ac>)
 80026fe:	001a      	movs	r2, r3
 8002700:	f7ff fd9f 	bl	8002242 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2110      	movs	r1, #16
 8002718:	4249      	negs	r1, r1
 800271a:	430a      	orrs	r2, r1
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
 800271e:	e03c      	b.n	800279a <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	429a      	cmp	r2, r3
 800272a:	d136      	bne.n	800279a <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e00c      	b.n	800274c <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	40da      	lsrs	r2, r3
 800273c:	0013      	movs	r3, r2
 800273e:	220f      	movs	r2, #15
 8002740:	4013      	ands	r3, r2
 8002742:	2b0f      	cmp	r3, #15
 8002744:	d006      	beq.n	8002754 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	3301      	adds	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d9ef      	bls.n	8002732 <HAL_ADC_Init+0x2b2>
 8002752:	e000      	b.n	8002756 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8002754:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d109      	bne.n	8002770 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2110      	movs	r1, #16
 8002768:	4249      	negs	r1, r1
 800276a:	430a      	orrs	r2, r1
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
 800276e:	e014      	b.n	800279a <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <HAL_ADC_Init+0x3b0>)
 800277c:	4694      	mov	ip, r2
 800277e:	4463      	add	r3, ip
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	221c      	movs	r2, #28
 8002784:	4013      	ands	r3, r2
 8002786:	2210      	movs	r2, #16
 8002788:	4252      	negs	r2, r2
 800278a:	409a      	lsls	r2, r3
 800278c:	0011      	movs	r1, r2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_ADC_Init+0x3b4>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d10b      	bne.n	80027c2 <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	2203      	movs	r2, #3
 80027b6:	4393      	bics	r3, r2
 80027b8:	2201      	movs	r2, #1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80027c0:	e01c      	b.n	80027fc <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	2212      	movs	r2, #18
 80027c8:	4393      	bics	r3, r2
 80027ca:	2210      	movs	r2, #16
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2201      	movs	r2, #1
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80027de:	231f      	movs	r3, #31
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80027e6:	e009      	b.n	80027fc <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	2210      	movs	r2, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027f4:	231f      	movs	r3, #31
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80027fc:	231f      	movs	r3, #31
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b008      	add	sp, #32
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20000000 	.word	0x20000000
 8002810:	00030d40 	.word	0x00030d40
 8002814:	fffffefd 	.word	0xfffffefd
 8002818:	1ffffc02 	.word	0x1ffffc02
 800281c:	40012708 	.word	0x40012708
 8002820:	ffc3ffff 	.word	0xffc3ffff
 8002824:	fffe0219 	.word	0xfffe0219
 8002828:	dffffc02 	.word	0xdffffc02
 800282c:	07ffff04 	.word	0x07ffff04
 8002830:	3fffffff 	.word	0x3fffffff
 8002834:	833fffe7 	.word	0x833fffe7

08002838 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff fe09 	bl	800245c <LL_ADC_REG_IsConversionOngoing>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d135      	bne.n	80028ba <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2254      	movs	r2, #84	; 0x54
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_ADC_Start+0x24>
 8002858:	2302      	movs	r3, #2
 800285a:	e035      	b.n	80028c8 <HAL_ADC_Start+0x90>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2254      	movs	r2, #84	; 0x54
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002864:	250f      	movs	r5, #15
 8002866:	197c      	adds	r4, r7, r5
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 faa6 	bl	8002dbc <ADC_Enable>
 8002870:	0003      	movs	r3, r0
 8002872:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002874:	197b      	adds	r3, r7, r5
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d119      	bne.n	80028b0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_ADC_Start+0x98>)
 8002882:	4013      	ands	r3, r2
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0052      	lsls	r2, r2, #1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	221c      	movs	r2, #28
 800289a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2254      	movs	r2, #84	; 0x54
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff fdc5 	bl	8002438 <LL_ADC_REG_StartConversion>
 80028ae:	e008      	b.n	80028c2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2254      	movs	r2, #84	; 0x54
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ba:	230f      	movs	r3, #15
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c2:	230f      	movs	r3, #15
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bdb0      	pop	{r4, r5, r7, pc}
 80028d0:	fffff0fe 	.word	0xfffff0fe

080028d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d102      	bne.n	80028ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028e6:	2308      	movs	r3, #8
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e00f      	b.n	800290c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d007      	beq.n	8002908 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	2220      	movs	r2, #32
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e06c      	b.n	80029e2 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002908:	2304      	movs	r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800290c:	f7ff fc36 	bl	800217c <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002914:	e019      	b.n	800294a <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	d016      	beq.n	800294a <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800291c:	f7ff fc2e 	bl	800217c <HAL_GetTick>
 8002920:	0002      	movs	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <HAL_ADC_PollForConversion+0x5e>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10b      	bne.n	800294a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	2204      	movs	r2, #4
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2254      	movs	r2, #84	; 0x54
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04b      	b.n	80029e2 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	d0df      	beq.n	8002916 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff fc87 	bl	800227c <LL_ADC_REG_IsTriggerSourceSWStart>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d02e      	beq.n	80029d0 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e9b      	ldrb	r3, [r3, #26]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12a      	bne.n	80029d0 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2208      	movs	r2, #8
 8002982:	4013      	ands	r3, r2
 8002984:	2b08      	cmp	r3, #8
 8002986:	d123      	bne.n	80029d0 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff fd65 	bl	800245c <LL_ADC_REG_IsConversionOngoing>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d110      	bne.n	80029b8 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	210c      	movs	r1, #12
 80029a2:	438a      	bics	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_ADC_PollForConversion+0x118>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	2201      	movs	r2, #1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58
 80029b6:	e00b      	b.n	80029d0 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	2220      	movs	r2, #32
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2201      	movs	r2, #1
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	220c      	movs	r2, #12
 80029de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	fffffefe 	.word	0xfffffefe

080029f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2254      	movs	r2, #84	; 0x54
 8002a22:	5c9b      	ldrb	r3, [r3, r2]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x24>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e1c2      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x3aa>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2254      	movs	r2, #84	; 0x54
 8002a30:	2101      	movs	r1, #1
 8002a32:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7ff fd0f 	bl	800245c <LL_ADC_REG_IsConversionOngoing>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d000      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x3c>
 8002a42:	e1a5      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d100      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x46>
 8002a4c:	e144      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a5e:	4ac2      	ldr	r2, [pc, #776]	; (8002d68 <HAL_ADC_ConfigChannel+0x360>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d108      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	0010      	movs	r0, r2
 8002a70:	f7ff fc35 	bl	80022de <LL_ADC_REG_SetSequencerChAdd>
 8002a74:	e0c9      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	211f      	movs	r1, #31
 8002a80:	400b      	ands	r3, r1
 8002a82:	210f      	movs	r1, #15
 8002a84:	4099      	lsls	r1, r3
 8002a86:	000b      	movs	r3, r1
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	035b      	lsls	r3, r3, #13
 8002a94:	0b5b      	lsrs	r3, r3, #13
 8002a96:	d105      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x9c>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	e098      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d000      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0xa8>
 8002aae:	e091      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d000      	beq.n	8002abc <HAL_ADC_ConfigChannel+0xb4>
 8002aba:	e089      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x1c8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d000      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0xc0>
 8002ac6:	e081      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x1c4>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2208      	movs	r2, #8
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d000      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0xcc>
 8002ad2:	e079      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x1c0>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	4013      	ands	r3, r2
 8002adc:	d000      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0xd8>
 8002ade:	e071      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x1bc>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d000      	beq.n	8002aec <HAL_ADC_ConfigChannel+0xe4>
 8002aea:	e069      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1b8>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2240      	movs	r2, #64	; 0x40
 8002af2:	4013      	ands	r3, r2
 8002af4:	d000      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0xf0>
 8002af6:	e061      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x1b4>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	4013      	ands	r3, r2
 8002b00:	d000      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0xfc>
 8002b02:	e059      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x1b0>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d151      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1ac>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d149      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1a8>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	d141      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1a4>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d139      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1a0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	015b      	lsls	r3, r3, #5
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d131      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x19c>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	019b      	lsls	r3, r3, #6
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d129      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x198>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	01db      	lsls	r3, r3, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	d121      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x194>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	4013      	ands	r3, r2
 8002b62:	d119      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x190>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x18c>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d109      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x188>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	02db      	lsls	r3, r3, #11
 8002b84:	4013      	ands	r3, r2
 8002b86:	d001      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x184>
 8002b88:	2312      	movs	r3, #18
 8002b8a:	e024      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e022      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002b90:	2311      	movs	r3, #17
 8002b92:	e020      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002b94:	2310      	movs	r3, #16
 8002b96:	e01e      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002b98:	230f      	movs	r3, #15
 8002b9a:	e01c      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002b9c:	230e      	movs	r3, #14
 8002b9e:	e01a      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ba0:	230d      	movs	r3, #13
 8002ba2:	e018      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	e016      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002ba8:	230b      	movs	r3, #11
 8002baa:	e014      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bac:	230a      	movs	r3, #10
 8002bae:	e012      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bb0:	2309      	movs	r3, #9
 8002bb2:	e010      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	e00e      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bb8:	2307      	movs	r3, #7
 8002bba:	e00c      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bbc:	2306      	movs	r3, #6
 8002bbe:	e00a      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bc0:	2305      	movs	r3, #5
 8002bc2:	e008      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	e006      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e004      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e002      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ce>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	6852      	ldr	r2, [r2, #4]
 8002bda:	201f      	movs	r0, #31
 8002bdc:	4002      	ands	r2, r0
 8002bde:	4093      	lsls	r3, r2
 8002be0:	000a      	movs	r2, r1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d808      	bhi.n	8002c0a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	001a      	movs	r2, r3
 8002c06:	f7ff fb4a 	bl	800229e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	001a      	movs	r2, r3
 8002c18:	f7ff fb84 	bl	8002324 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	db00      	blt.n	8002c26 <HAL_ADC_ConfigChannel+0x21e>
 8002c24:	e0be      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff fafd 	bl	8002228 <LL_ADC_GetCommonPathInternalCh>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <HAL_ADC_ConfigChannel+0x368>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d123      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c44:	d11e      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0412      	lsls	r2, r2, #16
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	4a47      	ldr	r2, [pc, #284]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002c50:	0019      	movs	r1, r3
 8002c52:	0010      	movs	r0, r2
 8002c54:	f7ff fad4 	bl	8002200 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_ADC_ConfigChannel+0x36c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4946      	ldr	r1, [pc, #280]	; (8002d78 <HAL_ADC_ConfigChannel+0x370>)
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7fd fa50 	bl	8000104 <__udivsi3>
 8002c64:	0003      	movs	r3, r0
 8002c66:	001a      	movs	r2, r3
 8002c68:	0013      	movs	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	189b      	adds	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3301      	adds	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c74:	e002      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f9      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c82:	e08f      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a3c      	ldr	r2, [pc, #240]	; (8002d7c <HAL_ADC_ConfigChannel+0x374>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10e      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x2a4>
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	045b      	lsls	r3, r3, #17
 8002c94:	4013      	ands	r3, r2
 8002c96:	d109      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	0452      	lsls	r2, r2, #17
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	4a32      	ldr	r2, [pc, #200]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f7ff faab 	bl	8002200 <LL_ADC_SetCommonPathInternalCh>
 8002caa:	e07b      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <HAL_ADC_ConfigChannel+0x378>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d000      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x2b0>
 8002cb6:	e075      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	03db      	lsls	r3, r3, #15
 8002cbe:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002cc0:	d000      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x2bc>
 8002cc2:	e06f      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	03d2      	lsls	r2, r2, #15
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002cce:	0019      	movs	r1, r3
 8002cd0:	0010      	movs	r0, r2
 8002cd2:	f7ff fa95 	bl	8002200 <LL_ADC_SetCommonPathInternalCh>
 8002cd6:	e065      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_ADC_ConfigChannel+0x360>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d107      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	f7ff fb01 	bl	8002300 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	da4e      	bge.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7ff fa8d 	bl	8002228 <LL_ADC_GetCommonPathInternalCh>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_ADC_ConfigChannel+0x368>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d108      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_ADC_ConfigChannel+0x37c>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002d24:	0019      	movs	r1, r3
 8002d26:	0010      	movs	r0, r2
 8002d28:	f7ff fa6a 	bl	8002200 <LL_ADC_SetCommonPathInternalCh>
 8002d2c:	e03a      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <HAL_ADC_ConfigChannel+0x374>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d108      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_ADC_ConfigChannel+0x380>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002d40:	0019      	movs	r1, r3
 8002d42:	0010      	movs	r0, r2
 8002d44:	f7ff fa5c 	bl	8002200 <LL_ADC_SetCommonPathInternalCh>
 8002d48:	e02c      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_ADC_ConfigChannel+0x378>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d127      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_ADC_ConfigChannel+0x384>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_ADC_ConfigChannel+0x364>)
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f7ff fa4e 	bl	8002200 <LL_ADC_SetCommonPathInternalCh>
 8002d64:	e01e      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x39c>
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	80000004 	.word	0x80000004
 8002d6c:	40012708 	.word	0x40012708
 8002d70:	b0001000 	.word	0xb0001000
 8002d74:	20000000 	.word	0x20000000
 8002d78:	00030d40 	.word	0x00030d40
 8002d7c:	b8004000 	.word	0xb8004000
 8002d80:	b4002000 	.word	0xb4002000
 8002d84:	ff7fffff 	.word	0xff7fffff
 8002d88:	feffffff 	.word	0xfeffffff
 8002d8c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	2220      	movs	r2, #32
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d9c:	2317      	movs	r3, #23
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2254      	movs	r2, #84	; 0x54
 8002da8:	2100      	movs	r1, #0
 8002daa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002dac:	2317      	movs	r3, #23
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b006      	add	sp, #24
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)

08002dbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff fb11 	bl	80023f4 <LL_ADC_IsEnabled>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d162      	bne.n	8002e9c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <ADC_Enable+0xec>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	2210      	movs	r2, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	2201      	movs	r2, #1
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e04f      	b.n	8002e9e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fad2 	bl	80023ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <ADC_Enable+0xf0>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff fa0c 	bl	8002228 <LL_ADC_GetCommonPathInternalCh>
 8002e10:	0002      	movs	r2, r0
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00f      	beq.n	8002e3a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <ADC_Enable+0xf4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4925      	ldr	r1, [pc, #148]	; (8002eb4 <ADC_Enable+0xf8>)
 8002e20:	0018      	movs	r0, r3
 8002e22:	f7fd f96f 	bl	8000104 <__udivsi3>
 8002e26:	0003      	movs	r3, r0
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e2c:	e002      	b.n	8002e34 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7e5b      	ldrb	r3, [r3, #25]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d02c      	beq.n	8002e9c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f99b 	bl	800217c <HAL_GetTick>
 8002e46:	0003      	movs	r3, r0
 8002e48:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4a:	e020      	b.n	8002e8e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff facf 	bl	80023f4 <LL_ADC_IsEnabled>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d104      	bne.n	8002e64 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7ff faa4 	bl	80023ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e64:	f7ff f98a 	bl	800217c <HAL_GetTick>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d90d      	bls.n	8002e8e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	2210      	movs	r2, #16
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2201      	movs	r2, #1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e007      	b.n	8002e9e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d1d7      	bne.n	8002e4c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	80000017 	.word	0x80000017
 8002eac:	40012708 	.word	0x40012708
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	00030d40 	.word	0x00030d40

08002eb8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff faa6 	bl	8002416 <LL_ADC_IsDisableOngoing>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fa8e 	bl	80023f4 <LL_ADC_IsEnabled>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d040      	beq.n	8002f5e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d13d      	bne.n	8002f5e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10d      	bne.n	8002f0c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff fa6b 	bl	80023d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2203      	movs	r2, #3
 8002f00:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f02:	f7ff f93b 	bl	800217c <HAL_GetTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f0a:	e022      	b.n	8002f52 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	2210      	movs	r2, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e01b      	b.n	8002f60 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f28:	f7ff f928 	bl	800217c <HAL_GetTick>
 8002f2c:	0002      	movs	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d90d      	bls.n	8002f52 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	2201      	movs	r2, #1
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e006      	b.n	8002f60 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d1e4      	bne.n	8002f28 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <LL_ADC_IsEnabled>:
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2201      	movs	r2, #1
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <LL_ADC_IsEnabled+0x18>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <LL_ADC_IsEnabled+0x1a>
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <LL_ADC_IsCalibrationOnGoing>:
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0fdb      	lsrs	r3, r3, #31
 8002f98:	07da      	lsls	r2, r3, #31
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2254      	movs	r2, #84	; 0x54
 8002fc0:	5c9b      	ldrb	r3, [r3, r2]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADCEx_Calibration_Start+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e06c      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0xf4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2254      	movs	r2, #84	; 0x54
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fd2:	2317      	movs	r3, #23
 8002fd4:	18fc      	adds	r4, r7, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff ff6d 	bl	8002eb8 <ADC_Disable>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff ffbe 	bl	8002f68 <LL_ADC_IsEnabled>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d14c      	bne.n	800308a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <HAL_ADCEx_Calibration_Start+0xfc>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2203      	movs	r2, #3
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2103      	movs	r1, #3
 8003018:	438a      	bics	r2, r1
 800301a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	0609      	lsls	r1, r1, #24
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800302e:	e014      	b.n	800305a <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_ADCEx_Calibration_Start+0x100>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d90d      	bls.n	800305a <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	2212      	movs	r2, #18
 8003044:	4393      	bics	r3, r2
 8003046:	2210      	movs	r2, #16
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2254      	movs	r2, #84	; 0x54
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e024      	b.n	80030a4 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff ff93 	bl	8002f8a <LL_ADC_IsCalibrationOnGoing>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d1e3      	bne.n	8003030 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68d9      	ldr	r1, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	430a      	orrs	r2, r1
 8003076:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	2203      	movs	r2, #3
 800307e:	4393      	bics	r3, r2
 8003080:	2201      	movs	r2, #1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	659a      	str	r2, [r3, #88]	; 0x58
 8003088:	e005      	b.n	8003096 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	2210      	movs	r2, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2254      	movs	r2, #84	; 0x54
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800309e:	2317      	movs	r3, #23
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b007      	add	sp, #28
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	fffffefd 	.word	0xfffffefd
 80030b0:	0002f1ff 	.word	0x0002f1ff

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	0002      	movs	r2, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b7f      	cmp	r3, #127	; 0x7f
 80030c8:	d828      	bhi.n	800311c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ca:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <__NVIC_SetPriority+0xd4>)
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	33c0      	adds	r3, #192	; 0xc0
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	589b      	ldr	r3, [r3, r2]
 80030da:	1dfa      	adds	r2, r7, #7
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	0011      	movs	r1, r2
 80030e0:	2203      	movs	r2, #3
 80030e2:	400a      	ands	r2, r1
 80030e4:	00d2      	lsls	r2, r2, #3
 80030e6:	21ff      	movs	r1, #255	; 0xff
 80030e8:	4091      	lsls	r1, r2
 80030ea:	000a      	movs	r2, r1
 80030ec:	43d2      	mvns	r2, r2
 80030ee:	401a      	ands	r2, r3
 80030f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	22ff      	movs	r2, #255	; 0xff
 80030f8:	401a      	ands	r2, r3
 80030fa:	1dfb      	adds	r3, r7, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	0018      	movs	r0, r3
 8003100:	2303      	movs	r3, #3
 8003102:	4003      	ands	r3, r0
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003108:	481f      	ldr	r0, [pc, #124]	; (8003188 <__NVIC_SetPriority+0xd4>)
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b25b      	sxtb	r3, r3
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	430a      	orrs	r2, r1
 8003114:	33c0      	adds	r3, #192	; 0xc0
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800311a:	e031      	b.n	8003180 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <__NVIC_SetPriority+0xd8>)
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	0019      	movs	r1, r3
 8003124:	230f      	movs	r3, #15
 8003126:	400b      	ands	r3, r1
 8003128:	3b08      	subs	r3, #8
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3306      	adds	r3, #6
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	3304      	adds	r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1dfa      	adds	r2, r7, #7
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	0011      	movs	r1, r2
 800313c:	2203      	movs	r2, #3
 800313e:	400a      	ands	r2, r1
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	21ff      	movs	r1, #255	; 0xff
 8003144:	4091      	lsls	r1, r2
 8003146:	000a      	movs	r2, r1
 8003148:	43d2      	mvns	r2, r2
 800314a:	401a      	ands	r2, r3
 800314c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	401a      	ands	r2, r3
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	2303      	movs	r3, #3
 800315e:	4003      	ands	r3, r0
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003164:	4809      	ldr	r0, [pc, #36]	; (800318c <__NVIC_SetPriority+0xd8>)
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	001c      	movs	r4, r3
 800316c:	230f      	movs	r3, #15
 800316e:	4023      	ands	r3, r4
 8003170:	3b08      	subs	r3, #8
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	430a      	orrs	r2, r1
 8003176:	3306      	adds	r3, #6
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	18c3      	adds	r3, r0, r3
 800317c:	3304      	adds	r3, #4
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b003      	add	sp, #12
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <SysTick_Config+0x40>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e010      	b.n	80031c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <SysTick_Config+0x44>)
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	3a01      	subs	r2, #1
 80031ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	2301      	movs	r3, #1
 80031b0:	425b      	negs	r3, r3
 80031b2:	2103      	movs	r1, #3
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff ff7d 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <SysTick_Config+0x44>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x44>)
 80031c2:	2207      	movs	r2, #7
 80031c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	00ffffff 	.word	0x00ffffff
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	210f      	movs	r1, #15
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	1c02      	adds	r2, r0, #0
 80031e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f7ff ffbf 	bl	8003190 <SysTick_Config>
 8003212:	0003      	movs	r3, r0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800322a:	e14d      	b.n	80034c8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4091      	lsls	r1, r2
 8003236:	000a      	movs	r2, r1
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d100      	bne.n	8003244 <HAL_GPIO_Init+0x28>
 8003242:	e13e      	b.n	80034c2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d00b      	beq.n	8003264 <HAL_GPIO_Init+0x48>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003258:	2b11      	cmp	r3, #17
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b12      	cmp	r3, #18
 8003262:	d130      	bne.n	80032c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	409a      	lsls	r2, r3
 8003272:	0013      	movs	r3, r2
 8003274:	43da      	mvns	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	0013      	movs	r3, r2
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800329a:	2201      	movs	r2, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	43da      	mvns	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	2201      	movs	r2, #1
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
 80032b8:	0013      	movs	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2203      	movs	r2, #3
 80032d2:	409a      	lsls	r2, r3
 80032d4:	0013      	movs	r3, r2
 80032d6:	43da      	mvns	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	0013      	movs	r3, r2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0xea>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b12      	cmp	r3, #18
 8003304:	d123      	bne.n	800334e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3208      	adds	r2, #8
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	58d3      	ldr	r3, [r2, r3]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2207      	movs	r2, #7
 8003318:	4013      	ands	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	409a      	lsls	r2, r3
 8003320:	0013      	movs	r3, r2
 8003322:	43da      	mvns	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2107      	movs	r1, #7
 8003332:	400b      	ands	r3, r1
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	409a      	lsls	r2, r3
 8003338:	0013      	movs	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	6939      	ldr	r1, [r7, #16]
 800334c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	409a      	lsls	r2, r3
 800335c:	0013      	movs	r3, r2
 800335e:	43da      	mvns	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2203      	movs	r2, #3
 800336c:	401a      	ands	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	0013      	movs	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	055b      	lsls	r3, r3, #21
 800338a:	4013      	ands	r3, r2
 800338c:	d100      	bne.n	8003390 <HAL_GPIO_Init+0x174>
 800338e:	e098      	b.n	80034c2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003390:	4a53      	ldr	r2, [pc, #332]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3318      	adds	r3, #24
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	589b      	ldr	r3, [r3, r2]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2203      	movs	r2, #3
 80033a2:	4013      	ands	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	220f      	movs	r2, #15
 80033a8:	409a      	lsls	r2, r3
 80033aa:	0013      	movs	r3, r2
 80033ac:	43da      	mvns	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	23a0      	movs	r3, #160	; 0xa0
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d019      	beq.n	80033f2 <HAL_GPIO_Init+0x1d6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a48      	ldr	r2, [pc, #288]	; (80034e4 <HAL_GPIO_Init+0x2c8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_GPIO_Init+0x1d2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <HAL_GPIO_Init+0x2cc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00d      	beq.n	80033ea <HAL_GPIO_Init+0x1ce>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a46      	ldr	r2, [pc, #280]	; (80034ec <HAL_GPIO_Init+0x2d0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <HAL_GPIO_Init+0x1ca>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a45      	ldr	r2, [pc, #276]	; (80034f0 <HAL_GPIO_Init+0x2d4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_GPIO_Init+0x1c6>
 80033de:	2304      	movs	r3, #4
 80033e0:	e008      	b.n	80033f4 <HAL_GPIO_Init+0x1d8>
 80033e2:	2305      	movs	r3, #5
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x1d8>
 80033e6:	2303      	movs	r3, #3
 80033e8:	e004      	b.n	80033f4 <HAL_GPIO_Init+0x1d8>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_Init+0x1d8>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_GPIO_Init+0x1d8>
 80033f2:	2300      	movs	r3, #0
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	2103      	movs	r1, #3
 80033f8:	400a      	ands	r2, r1
 80033fa:	00d2      	lsls	r2, r2, #3
 80033fc:	4093      	lsls	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003404:	4936      	ldr	r1, [pc, #216]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3318      	adds	r3, #24
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003412:	4a33      	ldr	r2, [pc, #204]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	58d3      	ldr	r3, [r2, r3]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43da      	mvns	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	025b      	lsls	r3, r3, #9
 800342c:	4013      	ands	r3, r2
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003438:	4929      	ldr	r1, [pc, #164]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003440:	4a27      	ldr	r2, [pc, #156]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003442:	2384      	movs	r3, #132	; 0x84
 8003444:	58d3      	ldr	r3, [r2, r3]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43da      	mvns	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	029b      	lsls	r3, r3, #10
 800345a:	4013      	ands	r3, r2
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003466:	491e      	ldr	r1, [pc, #120]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003468:	2284      	movs	r2, #132	; 0x84
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	43da      	mvns	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	035b      	lsls	r3, r3, #13
 8003486:	4013      	ands	r3, r2
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	039b      	lsls	r3, r3, #14
 80034b0:	4013      	ands	r3, r2
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <HAL_GPIO_Init+0x2c4>)
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3301      	adds	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	40da      	lsrs	r2, r3
 80034d0:	1e13      	subs	r3, r2, #0
 80034d2:	d000      	beq.n	80034d6 <HAL_GPIO_Init+0x2ba>
 80034d4:	e6aa      	b.n	800322c <HAL_GPIO_Init+0x10>
  }
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b006      	add	sp, #24
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	40021800 	.word	0x40021800
 80034e4:	50000400 	.word	0x50000400
 80034e8:	50000800 	.word	0x50000800
 80034ec:	50000c00 	.word	0x50000c00
 80034f0:	50001000 	.word	0x50001000

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	0008      	movs	r0, r1
 80034fe:	0011      	movs	r1, r2
 8003500:	1cbb      	adds	r3, r7, #2
 8003502:	1c02      	adds	r2, r0, #0
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	1c7b      	adds	r3, r7, #1
 8003508:	1c0a      	adds	r2, r1, #0
 800350a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800350c:	1c7b      	adds	r3, r7, #1
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003514:	1cbb      	adds	r3, r7, #2
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800351c:	e003      	b.n	8003526 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800351e:	1cbb      	adds	r3, r7, #2
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	000a      	movs	r2, r1
 8003538:	1cbb      	adds	r3, r7, #2
 800353a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003542:	1cbb      	adds	r3, r7, #2
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4013      	ands	r3, r2
 800354a:	041a      	lsls	r2, r3, #16
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	43db      	mvns	r3, r3
 8003550:	1cb9      	adds	r1, r7, #2
 8003552:	8809      	ldrh	r1, [r1, #0]
 8003554:	400b      	ands	r3, r1
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	619a      	str	r2, [r3, #24]
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	429a      	cmp	r2, r3
 8003586:	d11f      	bne.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	0013      	movs	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	189b      	adds	r3, r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4912      	ldr	r1, [pc, #72]	; (80035e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003596:	0018      	movs	r0, r3
 8003598:	f7fc fdb4 	bl	8000104 <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a2:	e008      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e001      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e009      	b.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	401a      	ands	r2, r3
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0ed      	beq.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40007000 	.word	0x40007000
 80035d8:	fffff9ff 	.word	0xfffff9ff
 80035dc:	20000000 	.word	0x20000000
 80035e0:	000f4240 	.word	0x000f4240

080035e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	23e0      	movs	r3, #224	; 0xe0
 80035ee:	01db      	lsls	r3, r3, #7
 80035f0:	4013      	ands	r3, r2
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f000 fb56 	bl	8003cbc <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	d100      	bne.n	800361c <HAL_RCC_OscConfig+0x20>
 800361a:	e07d      	b.n	8003718 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361c:	4bc3      	ldr	r3, [pc, #780]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2238      	movs	r2, #56	; 0x38
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003626:	4bc1      	ldr	r3, [pc, #772]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2203      	movs	r2, #3
 800362c:	4013      	ands	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b10      	cmp	r3, #16
 8003634:	d102      	bne.n	800363c <HAL_RCC_OscConfig+0x40>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d002      	beq.n	8003642 <HAL_RCC_OscConfig+0x46>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003642:	4bba      	ldr	r3, [pc, #744]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	029b      	lsls	r3, r3, #10
 800364a:	4013      	ands	r3, r2
 800364c:	d063      	beq.n	8003716 <HAL_RCC_OscConfig+0x11a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d15f      	bne.n	8003716 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f000 fb30 	bl	8003cbc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x7c>
 8003668:	4bb0      	ldr	r3, [pc, #704]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4baf      	ldr	r3, [pc, #700]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	0249      	lsls	r1, r1, #9
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e020      	b.n	80036ba <HAL_RCC_OscConfig+0xbe>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	23a0      	movs	r3, #160	; 0xa0
 800367e:	02db      	lsls	r3, r3, #11
 8003680:	429a      	cmp	r2, r3
 8003682:	d10e      	bne.n	80036a2 <HAL_RCC_OscConfig+0xa6>
 8003684:	4ba9      	ldr	r3, [pc, #676]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4ba8      	ldr	r3, [pc, #672]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	02c9      	lsls	r1, r1, #11
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	4ba6      	ldr	r3, [pc, #664]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4ba5      	ldr	r3, [pc, #660]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	0249      	lsls	r1, r1, #9
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e00b      	b.n	80036ba <HAL_RCC_OscConfig+0xbe>
 80036a2:	4ba2      	ldr	r3, [pc, #648]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4ba1      	ldr	r3, [pc, #644]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80036a8:	49a1      	ldr	r1, [pc, #644]	; (8003930 <HAL_RCC_OscConfig+0x334>)
 80036aa:	400a      	ands	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	4b9f      	ldr	r3, [pc, #636]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b9e      	ldr	r3, [pc, #632]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80036b4:	499f      	ldr	r1, [pc, #636]	; (8003934 <HAL_RCC_OscConfig+0x338>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe fd5b 	bl	800217c <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe fd56 	bl	800217c <HAL_GetTick>
 80036d0:	0002      	movs	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e2ee      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	4b93      	ldr	r3, [pc, #588]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	4013      	ands	r3, r2
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xd0>
 80036ea:	e015      	b.n	8003718 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fd46 	bl	800217c <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f6:	f7fe fd41 	bl	800217c <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	; 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e2d9      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003708:	4b88      	ldr	r3, [pc, #544]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	4013      	ands	r3, r2
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0xfa>
 8003714:	e000      	b.n	8003718 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d100      	bne.n	8003724 <HAL_RCC_OscConfig+0x128>
 8003722:	e099      	b.n	8003858 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003724:	4b81      	ldr	r3, [pc, #516]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2238      	movs	r2, #56	; 0x38
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800372e:	4b7f      	ldr	r3, [pc, #508]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2203      	movs	r2, #3
 8003734:	4013      	ands	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b10      	cmp	r3, #16
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x148>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d002      	beq.n	800374a <HAL_RCC_OscConfig+0x14e>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d135      	bne.n	80037b6 <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374a:	4b78      	ldr	r3, [pc, #480]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4013      	ands	r3, r2
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x166>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e2ac      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4b72      	ldr	r3, [pc, #456]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a74      	ldr	r2, [pc, #464]	; (8003938 <HAL_RCC_OscConfig+0x33c>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	4b6e      	ldr	r3, [pc, #440]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d112      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800377e:	4b6b      	ldr	r3, [pc, #428]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_RCC_OscConfig+0x340>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b67      	ldr	r3, [pc, #412]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003792:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0adb      	lsrs	r3, r3, #11
 8003798:	2207      	movs	r2, #7
 800379a:	4013      	ands	r3, r2
 800379c:	4a68      	ldr	r2, [pc, #416]	; (8003940 <HAL_RCC_OscConfig+0x344>)
 800379e:	40da      	lsrs	r2, r3
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x348>)
 80037a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x34c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7fe fc8b 	bl	80020c4 <HAL_InitTick>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d051      	beq.n	8003856 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e282      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d030      	beq.n	8003820 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037be:	4b5b      	ldr	r3, [pc, #364]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5e      	ldr	r2, [pc, #376]	; (800393c <HAL_RCC_OscConfig+0x340>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	4b57      	ldr	r3, [pc, #348]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80037d2:	4b56      	ldr	r3, [pc, #344]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b55      	ldr	r3, [pc, #340]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	0049      	lsls	r1, r1, #1
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fccc 	bl	800217c <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fe fcc7 	bl	800217c <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e25f      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fc:	4b4b      	ldr	r3, [pc, #300]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4013      	ands	r3, r2
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b48      	ldr	r3, [pc, #288]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a4a      	ldr	r2, [pc, #296]	; (8003938 <HAL_RCC_OscConfig+0x33c>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e01b      	b.n	8003858 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003820:	4b42      	ldr	r3, [pc, #264]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003826:	4949      	ldr	r1, [pc, #292]	; (800394c <HAL_RCC_OscConfig+0x350>)
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fca6 	bl	800217c <HAL_GetTick>
 8003830:	0003      	movs	r3, r0
 8003832:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe fca1 	bl	800217c <HAL_GetTick>
 800383a:	0002      	movs	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e239      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003848:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4013      	ands	r3, r2
 8003852:	d1f0      	bne.n	8003836 <HAL_RCC_OscConfig+0x23a>
 8003854:	e000      	b.n	8003858 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003856:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	4013      	ands	r3, r2
 8003860:	d047      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003862:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2238      	movs	r2, #56	; 0x38
 8003868:	4013      	ands	r3, r2
 800386a:	2b18      	cmp	r3, #24
 800386c:	d10a      	bne.n	8003884 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800386e:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	2202      	movs	r2, #2
 8003874:	4013      	ands	r3, r2
 8003876:	d03c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d138      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e21b      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d019      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_RCC_OscConfig+0x330>)
 800388e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003890:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fc70 	bl	800217c <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fe fc6b 	bl	800217c <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e203      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	2202      	movs	r2, #2
 80038ba:	4013      	ands	r3, r2
 80038bc:	d0f1      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2a6>
 80038be:	e018      	b.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80038c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80038c6:	2101      	movs	r1, #1
 80038c8:	438a      	bics	r2, r1
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fc56 	bl	800217c <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fe fc51 	bl	800217c <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1e9      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <HAL_RCC_OscConfig+0x330>)
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d1f1      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	4013      	ands	r3, r2
 80038fa:	d100      	bne.n	80038fe <HAL_RCC_OscConfig+0x302>
 80038fc:	e0c6      	b.n	8003a8c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	231f      	movs	r3, #31
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2238      	movs	r2, #56	; 0x38
 800390c:	4013      	ands	r3, r2
 800390e:	2b20      	cmp	r3, #32
 8003910:	d11e      	bne.n	8003950 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_OscConfig+0x330>)
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	2202      	movs	r2, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d100      	bne.n	800391e <HAL_RCC_OscConfig+0x322>
 800391c:	e0b6      	b.n	8003a8c <HAL_RCC_OscConfig+0x490>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d000      	beq.n	8003928 <HAL_RCC_OscConfig+0x32c>
 8003926:	e0b1      	b.n	8003a8c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e1c7      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
 800392c:	40021000 	.word	0x40021000
 8003930:	fffeffff 	.word	0xfffeffff
 8003934:	fffbffff 	.word	0xfffbffff
 8003938:	ffff80ff 	.word	0xffff80ff
 800393c:	ffffc7ff 	.word	0xffffc7ff
 8003940:	00f42400 	.word	0x00f42400
 8003944:	20000000 	.word	0x20000000
 8003948:	20000004 	.word	0x20000004
 800394c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003950:	4bb8      	ldr	r3, [pc, #736]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	055b      	lsls	r3, r3, #21
 8003958:	4013      	ands	r3, r2
 800395a:	d101      	bne.n	8003960 <HAL_RCC_OscConfig+0x364>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x366>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d011      	beq.n	800398a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4bb3      	ldr	r3, [pc, #716]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396a:	4bb2      	ldr	r3, [pc, #712]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	0549      	lsls	r1, r1, #21
 8003970:	430a      	orrs	r2, r1
 8003972:	63da      	str	r2, [r3, #60]	; 0x3c
 8003974:	4baf      	ldr	r3, [pc, #700]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	055b      	lsls	r3, r3, #21
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003982:	231f      	movs	r3, #31
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398a:	4bab      	ldr	r3, [pc, #684]	; (8003c38 <HAL_RCC_OscConfig+0x63c>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003996:	4ba8      	ldr	r3, [pc, #672]	; (8003c38 <HAL_RCC_OscConfig+0x63c>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4ba7      	ldr	r3, [pc, #668]	; (8003c38 <HAL_RCC_OscConfig+0x63c>)
 800399c:	2180      	movs	r1, #128	; 0x80
 800399e:	0049      	lsls	r1, r1, #1
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fbea 	bl	800217c <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ae:	f7fe fbe5 	bl	800217c <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e17d      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	4b9d      	ldr	r3, [pc, #628]	; (8003c38 <HAL_RCC_OscConfig+0x63c>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4013      	ands	r3, r2
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3e6>
 80039d4:	4b97      	ldr	r3, [pc, #604]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 80039d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d8:	4b96      	ldr	r3, [pc, #600]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 80039da:	2101      	movs	r1, #1
 80039dc:	430a      	orrs	r2, r1
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c
 80039e0:	e01c      	b.n	8003a1c <HAL_RCC_OscConfig+0x420>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x408>
 80039ea:	4b92      	ldr	r3, [pc, #584]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 80039ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039ee:	4b91      	ldr	r3, [pc, #580]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 80039f0:	2104      	movs	r1, #4
 80039f2:	430a      	orrs	r2, r1
 80039f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80039f6:	4b8f      	ldr	r3, [pc, #572]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 80039f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039fa:	4b8e      	ldr	r3, [pc, #568]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 80039fc:	2101      	movs	r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x420>
 8003a04:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a08:	4b8a      	ldr	r3, [pc, #552]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a10:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a14:	4b87      	ldr	r3, [pc, #540]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a16:	2104      	movs	r1, #4
 8003a18:	438a      	bics	r2, r1
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d014      	beq.n	8003a4e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fbaa 	bl	800217c <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fe fba5 	bl	800217c <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	4a80      	ldr	r2, [pc, #512]	; (8003c3c <HAL_RCC_OscConfig+0x640>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e13c      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	4b7c      	ldr	r3, [pc, #496]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x432>
 8003a4c:	e013      	b.n	8003a76 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fb95 	bl	800217c <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a56:	e009      	b.n	8003a6c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a58:	f7fe fb90 	bl	800217c <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a76      	ldr	r2, [pc, #472]	; (8003c3c <HAL_RCC_OscConfig+0x640>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e127      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a6c:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2202      	movs	r2, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a76:	231f      	movs	r3, #31
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a84:	4b6b      	ldr	r3, [pc, #428]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003a86:	496e      	ldr	r1, [pc, #440]	; (8003c40 <HAL_RCC_OscConfig+0x644>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	4013      	ands	r3, r2
 8003a94:	d039      	beq.n	8003b0a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	03c9      	lsls	r1, r1, #15
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe fb66 	bl	800217c <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab6:	f7fe fb61 	bl	800217c <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0f9      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ac8:	4b5a      	ldr	r3, [pc, #360]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x4ba>
 8003ad4:	e019      	b.n	8003b0a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ad6:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b56      	ldr	r3, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003adc:	4959      	ldr	r1, [pc, #356]	; (8003c44 <HAL_RCC_OscConfig+0x648>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fb4b 	bl	800217c <HAL_GetTick>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aec:	f7fe fb46 	bl	800217c <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0de      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003afe:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	4013      	ands	r3, r2
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d100      	bne.n	8003b14 <HAL_RCC_OscConfig+0x518>
 8003b12:	e0d2      	b.n	8003cba <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b14:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2238      	movs	r2, #56	; 0x38
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d100      	bne.n	8003b22 <HAL_RCC_OscConfig+0x526>
 8003b20:	e081      	b.n	8003c26 <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d156      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b30:	4945      	ldr	r1, [pc, #276]	; (8003c48 <HAL_RCC_OscConfig+0x64c>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fe fb21 	bl	800217c <HAL_GetTick>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fb1c 	bl	800217c <HAL_GetTick>
 8003b44:	0002      	movs	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0b4      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b52:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	049b      	lsls	r3, r3, #18
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b5e:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4a3a      	ldr	r2, [pc, #232]	; (8003c4c <HAL_RCC_OscConfig+0x650>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b92:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0449      	lsls	r1, r1, #17
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	0549      	lsls	r1, r1, #21
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe fae5 	bl	800217c <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe fae0 	bl	800217c <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e078      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	049b      	lsls	r3, r3, #18
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x5bc>
 8003bd6:	e070      	b.n	8003cba <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003bde:	491a      	ldr	r1, [pc, #104]	; (8003c48 <HAL_RCC_OscConfig+0x64c>)
 8003be0:	400a      	ands	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003bea:	2103      	movs	r1, #3
 8003bec:	438a      	bics	r2, r1
 8003bee:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003bf0:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003bf6:	4916      	ldr	r1, [pc, #88]	; (8003c50 <HAL_RCC_OscConfig+0x654>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fabe 	bl	800217c <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe fab9 	bl	800217c <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e051      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x638>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	049b      	lsls	r3, r3, #18
 8003c20:	4013      	ands	r3, r2
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x60a>
 8003c24:	e049      	b.n	8003cba <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d112      	bne.n	8003c54 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e044      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	00001388 	.word	0x00001388
 8003c40:	efffffff 	.word	0xefffffff
 8003c44:	ffbfffff 	.word	0xffbfffff
 8003c48:	feffffff 	.word	0xfeffffff
 8003c4c:	11c1808c 	.word	0x11c1808c
 8003c50:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_OscConfig+0x6c8>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	401a      	ands	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d126      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2270      	movs	r2, #112	; 0x70
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d11f      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	23fe      	movs	r3, #254	; 0xfe
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d116      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	23f8      	movs	r3, #248	; 0xf8
 8003c8c:	039b      	lsls	r3, r3, #14
 8003c8e:	401a      	ands	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d10e      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	23e0      	movs	r3, #224	; 0xe0
 8003c9c:	051b      	lsls	r3, r3, #20
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	0f5b      	lsrs	r3, r3, #29
 8003cac:	075a      	lsls	r2, r3, #29
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b008      	add	sp, #32
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0e9      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d91e      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b73      	ldr	r3, [pc, #460]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2207      	movs	r2, #7
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	4b70      	ldr	r3, [pc, #448]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe fa3e 	bl	800217c <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d04:	e009      	b.n	8003d1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d06:	f7fe fa39 	bl	800217c <HAL_GetTick>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <HAL_RCC_ClockConfig+0x1f4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0ca      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d1a:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2207      	movs	r2, #7
 8003d20:	4013      	ands	r3, r2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1ee      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d015      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2204      	movs	r2, #4
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d006      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d3c:	4b60      	ldr	r3, [pc, #384]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d42:	21e0      	movs	r1, #224	; 0xe0
 8003d44:	01c9      	lsls	r1, r1, #7
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	4a5d      	ldr	r2, [pc, #372]	; (8003ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4013      	ands	r3, r2
 8003d66:	d057      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d12b      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e097      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d88:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	049b      	lsls	r3, r3, #18
 8003d90:	4013      	ands	r3, r2
 8003d92:	d11f      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e08b      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da0:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4013      	ands	r3, r2
 8003daa:	d113      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e07f      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db8:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e074      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e06d      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dd4:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2207      	movs	r2, #7
 8003dda:	4393      	bics	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de8:	f7fe f9c8 	bl	800217c <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	e009      	b.n	8003e06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df2:	f7fe f9c3 	bl	800217c <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <HAL_RCC_ClockConfig+0x1f4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e054      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2238      	movs	r2, #56	; 0x38
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1ec      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	4013      	ands	r3, r2
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d21e      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e38:	f7fe f9a0 	bl	800217c <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e40:	e009      	b.n	8003e56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e42:	f7fe f99b 	bl	800217c <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_RCC_ClockConfig+0x1f4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e02c      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <HAL_RCC_ClockConfig+0x200>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e82:	f000 f829 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003e86:	0001      	movs	r1, r0
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	220f      	movs	r2, #15
 8003e90:	401a      	ands	r2, r3
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_RCC_ClockConfig+0x204>)
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	58d3      	ldr	r3, [r2, r3]
 8003e98:	221f      	movs	r2, #31
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	000a      	movs	r2, r1
 8003e9e:	40da      	lsrs	r2, r3
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x208>)
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_ClockConfig+0x20c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7fe f90b 	bl	80020c4 <HAL_InitTick>
 8003eae:	0003      	movs	r3, r0
}
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	00001388 	.word	0x00001388
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	fffff0ff 	.word	0xfffff0ff
 8003ec8:	ffff8fff 	.word	0xffff8fff
 8003ecc:	08006870 	.word	0x08006870
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	20000004 	.word	0x20000004

08003ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ede:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2238      	movs	r2, #56	; 0x38
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d10f      	bne.n	8003f08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	0adb      	lsrs	r3, r3, #11
 8003eee:	2207      	movs	r2, #7
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	4835      	ldr	r0, [pc, #212]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003efe:	f7fc f901 	bl	8000104 <__udivsi3>
 8003f02:	0003      	movs	r3, r0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	e05d      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2238      	movs	r2, #56	; 0x38
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d102      	bne.n	8003f1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f14:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	e054      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2238      	movs	r2, #56	; 0x38
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d138      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f26:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	2207      	movs	r2, #7
 8003f38:	4013      	ands	r3, r2
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4824      	ldr	r0, [pc, #144]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f48:	f7fc f8dc 	bl	8000104 <__udivsi3>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	0019      	movs	r1, r3
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	227f      	movs	r2, #127	; 0x7f
 8003f58:	4013      	ands	r3, r2
 8003f5a:	434b      	muls	r3, r1
 8003f5c:	617b      	str	r3, [r7, #20]
        break;
 8003f5e:	e00d      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	481c      	ldr	r0, [pc, #112]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f64:	f7fc f8ce 	bl	8000104 <__udivsi3>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	227f      	movs	r2, #127	; 0x7f
 8003f74:	4013      	ands	r3, r2
 8003f76:	434b      	muls	r3, r1
 8003f78:	617b      	str	r3, [r7, #20]
        break;
 8003f7a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003f7c:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0f5b      	lsrs	r3, r3, #29
 8003f82:	2207      	movs	r2, #7
 8003f84:	4013      	ands	r3, r2
 8003f86:	3301      	adds	r3, #1
 8003f88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7fc f8b9 	bl	8000104 <__udivsi3>
 8003f92:	0003      	movs	r3, r0
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e015      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2238      	movs	r2, #56	; 0x38
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d103      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2238      	movs	r2, #56	; 0x38
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b18      	cmp	r3, #24
 8003fb6:	d103      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003fb8:	23fa      	movs	r3, #250	; 0xfa
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e001      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fc4:	693b      	ldr	r3, [r7, #16]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b006      	add	sp, #24
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200

08003fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b02      	ldr	r3, [pc, #8]	; (8003fec <HAL_RCC_GetHCLKFreq+0x10>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b5b0      	push	{r4, r5, r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ff4:	f7ff fff2 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ff8:	0004      	movs	r4, r0
 8003ffa:	f7ff faf3 	bl	80035e4 <LL_RCC_GetAPB1Prescaler>
 8003ffe:	0003      	movs	r3, r0
 8004000:	0b1a      	lsrs	r2, r3, #12
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004004:	0092      	lsls	r2, r2, #2
 8004006:	58d3      	ldr	r3, [r2, r3]
 8004008:	221f      	movs	r2, #31
 800400a:	4013      	ands	r3, r2
 800400c:	40dc      	lsrs	r4, r3
 800400e:	0023      	movs	r3, r4
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	bdb0      	pop	{r4, r5, r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	080068b0 	.word	0x080068b0

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004024:	2313      	movs	r3, #19
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800402c:	2312      	movs	r3, #18
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	4013      	ands	r3, r2
 800403e:	d100      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004040:	e0af      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2311      	movs	r3, #17
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b48      	ldr	r3, [pc, #288]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800404c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	055b      	lsls	r3, r3, #21
 8004052:	4013      	ands	r3, r2
 8004054:	d111      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	4b45      	ldr	r3, [pc, #276]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800405a:	4b44      	ldr	r3, [pc, #272]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0549      	lsls	r1, r1, #21
 8004060:	430a      	orrs	r2, r1
 8004062:	63da      	str	r2, [r3, #60]	; 0x3c
 8004064:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	055b      	lsls	r3, r3, #21
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004072:	2311      	movs	r3, #17
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407a:	4b3d      	ldr	r3, [pc, #244]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b3c      	ldr	r3, [pc, #240]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0049      	lsls	r1, r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004088:	f7fe f878 	bl	800217c <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004090:	e00b      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fe f873 	bl	800217c <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d904      	bls.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80040a0:	2313      	movs	r3, #19
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	2203      	movs	r2, #3
 80040a6:	701a      	strb	r2, [r3, #0]
        break;
 80040a8:	e005      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4013      	ands	r3, r2
 80040b4:	d0ed      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80040b6:	2313      	movs	r3, #19
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d15f      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c0:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c4:	23c0      	movs	r3, #192	; 0xc0
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4013      	ands	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d019      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d014      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040dc:	4b23      	ldr	r3, [pc, #140]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	4a24      	ldr	r2, [pc, #144]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	0249      	lsls	r1, r1, #9
 80040f0:	430a      	orrs	r2, r1
 80040f2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f8:	4b1c      	ldr	r3, [pc, #112]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040fa:	491f      	ldr	r1, [pc, #124]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2201      	movs	r2, #1
 800410a:	4013      	ands	r3, r2
 800410c:	d016      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fe f835 	bl	800217c <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fe f830 	bl	800217c <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d904      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004128:	2313      	movs	r3, #19
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2203      	movs	r2, #3
 800412e:	701a      	strb	r2, [r3, #0]
            break;
 8004130:	e004      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	2202      	movs	r2, #2
 8004138:	4013      	ands	r3, r2
 800413a:	d0ed      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800413c:	2313      	movs	r3, #19
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800414c:	4013      	ands	r3, r2
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004156:	430a      	orrs	r2, r1
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
 800415a:	e017      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800415c:	2312      	movs	r3, #18
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2213      	movs	r2, #19
 8004162:	18ba      	adds	r2, r7, r2
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e010      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x170>
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	40021000 	.word	0x40021000
 8004170:	40007000 	.word	0x40007000
 8004174:	fffffcff 	.word	0xfffffcff
 8004178:	fffeffff 	.word	0xfffeffff
 800417c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	2312      	movs	r3, #18
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2213      	movs	r2, #19
 8004186:	18ba      	adds	r2, r7, r2
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800418c:	2311      	movs	r3, #17
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d105      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004196:	4bb6      	ldr	r3, [pc, #728]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419a:	4bb5      	ldr	r3, [pc, #724]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800419c:	49b5      	ldr	r1, [pc, #724]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800419e:	400a      	ands	r2, r1
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2201      	movs	r2, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ac:	4bb0      	ldr	r3, [pc, #704]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	2203      	movs	r2, #3
 80041b2:	4393      	bics	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	4bad      	ldr	r3, [pc, #692]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ca:	4ba9      	ldr	r3, [pc, #676]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	220c      	movs	r2, #12
 80041d0:	4393      	bics	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4ba5      	ldr	r3, [pc, #660]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2204      	movs	r2, #4
 80041e4:	4013      	ands	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e8:	4ba1      	ldr	r3, [pc, #644]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	2230      	movs	r2, #48	; 0x30
 80041ee:	4393      	bics	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	4b9e      	ldr	r3, [pc, #632]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041f8:	430a      	orrs	r2, r1
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2210      	movs	r2, #16
 8004202:	4013      	ands	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004206:	4b9a      	ldr	r3, [pc, #616]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	4a9b      	ldr	r2, [pc, #620]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	4b96      	ldr	r3, [pc, #600]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004216:	430a      	orrs	r2, r1
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	015b      	lsls	r3, r3, #5
 8004222:	4013      	ands	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004226:	4b92      	ldr	r3, [pc, #584]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	4a94      	ldr	r2, [pc, #592]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	4b8e      	ldr	r3, [pc, #568]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004236:	430a      	orrs	r2, r1
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4013      	ands	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004246:	4b8a      	ldr	r3, [pc, #552]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	4a8d      	ldr	r2, [pc, #564]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800424c:	4013      	ands	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004254:	4b86      	ldr	r3, [pc, #536]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004256:	430a      	orrs	r2, r1
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4013      	ands	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004266:	4b82      	ldr	r3, [pc, #520]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	4a86      	ldr	r2, [pc, #536]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b7e      	ldr	r3, [pc, #504]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004276:	430a      	orrs	r2, r1
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2220      	movs	r2, #32
 8004280:	4013      	ands	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004284:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	4a7f      	ldr	r2, [pc, #508]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	4b77      	ldr	r3, [pc, #476]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004294:	430a      	orrs	r2, r1
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	4013      	ands	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042a2:	4b73      	ldr	r3, [pc, #460]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	4a79      	ldr	r2, [pc, #484]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	4013      	ands	r3, r2
 80042c0:	d015      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c2:	4b6b      	ldr	r3, [pc, #428]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	0899      	lsrs	r1, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ce:	4b68      	ldr	r3, [pc, #416]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	05db      	lsls	r3, r3, #23
 80042dc:	429a      	cmp	r2, r3
 80042de:	d106      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042e0:	4b63      	ldr	r3, [pc, #396]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	4b62      	ldr	r3, [pc, #392]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	0249      	lsls	r1, r1, #9
 80042ea:	430a      	orrs	r2, r1
 80042ec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	4013      	ands	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042fa:	4b5d      	ldr	r3, [pc, #372]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	4393      	bics	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	4b59      	ldr	r3, [pc, #356]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800430a:	430a      	orrs	r2, r1
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	039b      	lsls	r3, r3, #14
 8004316:	4013      	ands	r3, r2
 8004318:	d016      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800431a:	4b55      	ldr	r3, [pc, #340]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	4a5c      	ldr	r2, [pc, #368]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004320:	4013      	ands	r3, r2
 8004322:	0019      	movs	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004328:	4b51      	ldr	r3, [pc, #324]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800432a:	430a      	orrs	r2, r1
 800432c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	03db      	lsls	r3, r3, #15
 8004336:	429a      	cmp	r2, r3
 8004338:	d106      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800433a:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	0449      	lsls	r1, r1, #17
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	03db      	lsls	r3, r3, #15
 8004350:	4013      	ands	r3, r2
 8004352:	d016      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004354:	4b46      	ldr	r3, [pc, #280]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800435a:	4013      	ands	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004364:	430a      	orrs	r2, r1
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800436c:	2380      	movs	r3, #128	; 0x80
 800436e:	045b      	lsls	r3, r3, #17
 8004370:	429a      	cmp	r2, r3
 8004372:	d106      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004374:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	4b3d      	ldr	r3, [pc, #244]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	0449      	lsls	r1, r1, #17
 800437e:	430a      	orrs	r2, r1
 8004380:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	4013      	ands	r3, r2
 800438c:	d014      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	2203      	movs	r2, #3
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d106      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	4b30      	ldr	r3, [pc, #192]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	0249      	lsls	r1, r1, #9
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	4013      	ands	r3, r2
 80043c2:	d014      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	220c      	movs	r2, #12
 80043ca:	4393      	bics	r3, r2
 80043cc:	0019      	movs	r1, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043d4:	430a      	orrs	r2, r1
 80043d6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d106      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	0249      	lsls	r1, r1, #9
 80043ea:	430a      	orrs	r2, r1
 80043ec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	045b      	lsls	r3, r3, #17
 80043f6:	4013      	ands	r3, r2
 80043f8:	d016      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800440a:	430a      	orrs	r2, r1
 800440c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	429a      	cmp	r2, r3
 8004418:	d106      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	0449      	lsls	r1, r1, #17
 8004424:	430a      	orrs	r2, r1
 8004426:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	049b      	lsls	r3, r3, #18
 8004430:	4013      	ands	r3, r2
 8004432:	d016      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	4a10      	ldr	r2, [pc, #64]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800443a:	4013      	ands	r3, r2
 800443c:	0019      	movs	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004444:	430a      	orrs	r2, r1
 8004446:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	429a      	cmp	r2, r3
 8004452:	d106      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	0449      	lsls	r1, r1, #17
 800445e:	430a      	orrs	r2, r1
 8004460:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004462:	2312      	movs	r3, #18
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	781b      	ldrb	r3, [r3, #0]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b006      	add	sp, #24
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000
 8004474:	efffffff 	.word	0xefffffff
 8004478:	fffff3ff 	.word	0xfffff3ff
 800447c:	fffffcff 	.word	0xfffffcff
 8004480:	fff3ffff 	.word	0xfff3ffff
 8004484:	ffcfffff 	.word	0xffcfffff
 8004488:	ffffcfff 	.word	0xffffcfff
 800448c:	ffff3fff 	.word	0xffff3fff
 8004490:	ffbfffff 	.word	0xffbfffff
 8004494:	feffffff 	.word	0xfeffffff

08004498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e04a      	b.n	8004540 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	223d      	movs	r2, #61	; 0x3d
 80044ae:	5c9b      	ldrb	r3, [r3, r2]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fd fcb7 	bl	8001e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	223d      	movs	r2, #61	; 0x3d
 80044ca:	2102      	movs	r1, #2
 80044cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	0019      	movs	r1, r3
 80044d8:	0010      	movs	r0, r2
 80044da:	f000 fa1b 	bl	8004914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2248      	movs	r2, #72	; 0x48
 80044e2:	2101      	movs	r1, #1
 80044e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	223e      	movs	r2, #62	; 0x3e
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	223f      	movs	r2, #63	; 0x3f
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2240      	movs	r2, #64	; 0x40
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2241      	movs	r2, #65	; 0x41
 8004502:	2101      	movs	r1, #1
 8004504:	5499      	strb	r1, [r3, r2]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2242      	movs	r2, #66	; 0x42
 800450a:	2101      	movs	r1, #1
 800450c:	5499      	strb	r1, [r3, r2]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2243      	movs	r2, #67	; 0x43
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2244      	movs	r2, #68	; 0x44
 800451a:	2101      	movs	r1, #1
 800451c:	5499      	strb	r1, [r3, r2]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2245      	movs	r2, #69	; 0x45
 8004522:	2101      	movs	r1, #1
 8004524:	5499      	strb	r1, [r3, r2]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2246      	movs	r2, #70	; 0x46
 800452a:	2101      	movs	r1, #1
 800452c:	5499      	strb	r1, [r3, r2]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2247      	movs	r2, #71	; 0x47
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	223d      	movs	r2, #61	; 0x3d
 800453a:	2101      	movs	r1, #1
 800453c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <HAL_TIM_PWM_Start+0x22>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	223e      	movs	r2, #62	; 0x3e
 800455c:	5c9b      	ldrb	r3, [r3, r2]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	4193      	sbcs	r3, r2
 8004566:	b2db      	uxtb	r3, r3
 8004568:	e037      	b.n	80045da <HAL_TIM_PWM_Start+0x92>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d108      	bne.n	8004582 <HAL_TIM_PWM_Start+0x3a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	223f      	movs	r2, #63	; 0x3f
 8004574:	5c9b      	ldrb	r3, [r3, r2]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	1e5a      	subs	r2, r3, #1
 800457c:	4193      	sbcs	r3, r2
 800457e:	b2db      	uxtb	r3, r3
 8004580:	e02b      	b.n	80045da <HAL_TIM_PWM_Start+0x92>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d108      	bne.n	800459a <HAL_TIM_PWM_Start+0x52>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2240      	movs	r2, #64	; 0x40
 800458c:	5c9b      	ldrb	r3, [r3, r2]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	1e5a      	subs	r2, r3, #1
 8004594:	4193      	sbcs	r3, r2
 8004596:	b2db      	uxtb	r3, r3
 8004598:	e01f      	b.n	80045da <HAL_TIM_PWM_Start+0x92>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d108      	bne.n	80045b2 <HAL_TIM_PWM_Start+0x6a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2241      	movs	r2, #65	; 0x41
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	1e5a      	subs	r2, r3, #1
 80045ac:	4193      	sbcs	r3, r2
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e013      	b.n	80045da <HAL_TIM_PWM_Start+0x92>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d108      	bne.n	80045ca <HAL_TIM_PWM_Start+0x82>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2242      	movs	r2, #66	; 0x42
 80045bc:	5c9b      	ldrb	r3, [r3, r2]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	4193      	sbcs	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	e007      	b.n	80045da <HAL_TIM_PWM_Start+0x92>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2243      	movs	r2, #67	; 0x43
 80045ce:	5c9b      	ldrb	r3, [r3, r2]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	4193      	sbcs	r3, r2
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e090      	b.n	8004704 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0xaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223e      	movs	r2, #62	; 0x3e
 80045ec:	2102      	movs	r1, #2
 80045ee:	5499      	strb	r1, [r3, r2]
 80045f0:	e023      	b.n	800463a <HAL_TIM_PWM_Start+0xf2>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0xba>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	223f      	movs	r2, #63	; 0x3f
 80045fc:	2102      	movs	r1, #2
 80045fe:	5499      	strb	r1, [r3, r2]
 8004600:	e01b      	b.n	800463a <HAL_TIM_PWM_Start+0xf2>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0xca>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	2102      	movs	r1, #2
 800460e:	5499      	strb	r1, [r3, r2]
 8004610:	e013      	b.n	800463a <HAL_TIM_PWM_Start+0xf2>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0xda>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	2102      	movs	r1, #2
 800461e:	5499      	strb	r1, [r3, r2]
 8004620:	e00b      	b.n	800463a <HAL_TIM_PWM_Start+0xf2>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b10      	cmp	r3, #16
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xea>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2242      	movs	r2, #66	; 0x42
 800462c:	2102      	movs	r1, #2
 800462e:	5499      	strb	r1, [r3, r2]
 8004630:	e003      	b.n	800463a <HAL_TIM_PWM_Start+0xf2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2243      	movs	r2, #67	; 0x43
 8004636:	2102      	movs	r1, #2
 8004638:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6839      	ldr	r1, [r7, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	0018      	movs	r0, r3
 8004644:	f000 fcb4 	bl	8004fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a2f      	ldr	r2, [pc, #188]	; (800470c <HAL_TIM_PWM_Start+0x1c4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_PWM_Start+0x128>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a2e      	ldr	r2, [pc, #184]	; (8004710 <HAL_TIM_PWM_Start+0x1c8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_PWM_Start+0x128>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a2c      	ldr	r2, [pc, #176]	; (8004714 <HAL_TIM_PWM_Start+0x1cc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_PWM_Start+0x128>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2b      	ldr	r2, [pc, #172]	; (8004718 <HAL_TIM_PWM_Start+0x1d0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_TIM_PWM_Start+0x12c>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_TIM_PWM_Start+0x12e>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	0209      	lsls	r1, r1, #8
 8004688:	430a      	orrs	r2, r1
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <HAL_TIM_PWM_Start+0x1c4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d014      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x178>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	05db      	lsls	r3, r3, #23
 800469e:	429a      	cmp	r2, r3
 80046a0:	d00e      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x178>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_TIM_PWM_Start+0x1d4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x178>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_TIM_PWM_Start+0x1d8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_TIM_PWM_Start+0x178>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_TIM_PWM_Start+0x1c8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d116      	bne.n	80046ee <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_TIM_PWM_Start+0x1dc>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d016      	beq.n	8004700 <HAL_TIM_PWM_Start+0x1b8>
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	025b      	lsls	r3, r3, #9
 80046d8:	429a      	cmp	r2, r3
 80046da:	d011      	beq.n	8004700 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2101      	movs	r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	e008      	b.n	8004700 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e000      	b.n	8004702 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b004      	add	sp, #16
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	00010007 	.word	0x00010007

08004728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	223c      	movs	r2, #60	; 0x3c
 8004738:	5c9b      	ldrb	r3, [r3, r2]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800473e:	2302      	movs	r3, #2
 8004740:	e0df      	b.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	223c      	movs	r2, #60	; 0x3c
 8004746:	2101      	movs	r1, #1
 8004748:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b14      	cmp	r3, #20
 800474e:	d900      	bls.n	8004752 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004750:	e0d1      	b.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	009a      	lsls	r2, r3, #2
 8004756:	4b6d      	ldr	r3, [pc, #436]	; (800490c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8004758:	18d3      	adds	r3, r2, r3
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f95e 	bl	8004a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2108      	movs	r1, #8
 8004778:	430a      	orrs	r2, r1
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2104      	movs	r1, #4
 8004788:	438a      	bics	r2, r1
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	619a      	str	r2, [r3, #24]
      break;
 800479e:	e0ab      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	0011      	movs	r1, r2
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 f9c7 	bl	8004b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	0109      	lsls	r1, r1, #4
 80047bc:	430a      	orrs	r2, r1
 80047be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4951      	ldr	r1, [pc, #324]	; (8004910 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6999      	ldr	r1, [r3, #24]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	619a      	str	r2, [r3, #24]
      break;
 80047e4:	e088      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0011      	movs	r1, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 fa28 	bl	8004c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2108      	movs	r1, #8
 8004800:	430a      	orrs	r2, r1
 8004802:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2104      	movs	r1, #4
 8004810:	438a      	bics	r2, r1
 8004812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69d9      	ldr	r1, [r3, #28]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	61da      	str	r2, [r3, #28]
      break;
 8004826:	e067      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	0011      	movs	r1, r2
 8004830:	0018      	movs	r0, r3
 8004832:	f000 fa8f 	bl	8004d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	0109      	lsls	r1, r1, #4
 8004844:	430a      	orrs	r2, r1
 8004846:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	492f      	ldr	r1, [pc, #188]	; (8004910 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004854:	400a      	ands	r2, r1
 8004856:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69d9      	ldr	r1, [r3, #28]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	61da      	str	r2, [r3, #28]
      break;
 800486c:	e044      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	0011      	movs	r1, r2
 8004876:	0018      	movs	r0, r3
 8004878:	f000 fad6 	bl	8004e28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2108      	movs	r1, #8
 8004888:	430a      	orrs	r2, r1
 800488a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2104      	movs	r1, #4
 8004898:	438a      	bics	r2, r1
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ae:	e023      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	0011      	movs	r1, r2
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 fb15 	bl	8004ee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	0109      	lsls	r1, r1, #4
 80048cc:	430a      	orrs	r2, r1
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	490d      	ldr	r1, [pc, #52]	; (8004910 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80048dc:	400a      	ands	r2, r1
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048f4:	e000      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80048f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	223c      	movs	r2, #60	; 0x3c
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b004      	add	sp, #16
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	080068d0 	.word	0x080068d0
 8004910:	fffffbff 	.word	0xfffffbff

08004914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a38      	ldr	r2, [pc, #224]	; (8004a08 <TIM_Base_SetConfig+0xf4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00c      	beq.n	8004946 <TIM_Base_SetConfig+0x32>
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	2380      	movs	r3, #128	; 0x80
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	429a      	cmp	r2, r3
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0x32>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <TIM_Base_SetConfig+0xf8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0x32>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <TIM_Base_SetConfig+0xfc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2270      	movs	r2, #112	; 0x70
 800494a:	4393      	bics	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <TIM_Base_SetConfig+0xf4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01c      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	05db      	lsls	r3, r3, #23
 8004966:	429a      	cmp	r2, r3
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a27      	ldr	r2, [pc, #156]	; (8004a0c <TIM_Base_SetConfig+0xf8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a26      	ldr	r2, [pc, #152]	; (8004a10 <TIM_Base_SetConfig+0xfc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <TIM_Base_SetConfig+0x100>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <TIM_Base_SetConfig+0x104>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <TIM_Base_SetConfig+0x108>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0x86>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <TIM_Base_SetConfig+0x10c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <TIM_Base_SetConfig+0x110>)
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	4393      	bics	r3, r2
 80049b2:	001a      	movs	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <TIM_Base_SetConfig+0xf4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00b      	beq.n	80049f2 <TIM_Base_SetConfig+0xde>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <TIM_Base_SetConfig+0x104>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <TIM_Base_SetConfig+0xde>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <TIM_Base_SetConfig+0x108>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_Base_SetConfig+0xde>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <TIM_Base_SetConfig+0x10c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d103      	bne.n	80049fa <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	691a      	ldr	r2, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	615a      	str	r2, [r3, #20]
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40002000 	.word	0x40002000
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800
 8004a24:	fffffcff 	.word	0xfffffcff

08004a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4393      	bics	r3, r2
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a32      	ldr	r2, [pc, #200]	; (8004b20 <TIM_OC1_SetConfig+0xf8>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	4393      	bics	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	4393      	bics	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a28      	ldr	r2, [pc, #160]	; (8004b24 <TIM_OC1_SetConfig+0xfc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_OC1_SetConfig+0x76>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <TIM_OC1_SetConfig+0x100>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_OC1_SetConfig+0x76>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <TIM_OC1_SetConfig+0x104>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC1_SetConfig+0x76>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <TIM_OC1_SetConfig+0x108>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10c      	bne.n	8004ab8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	4393      	bics	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <TIM_OC1_SetConfig+0xfc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00b      	beq.n	8004ad8 <TIM_OC1_SetConfig+0xb0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <TIM_OC1_SetConfig+0x100>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_OC1_SetConfig+0xb0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <TIM_OC1_SetConfig+0x104>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC1_SetConfig+0xb0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <TIM_OC1_SetConfig+0x108>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d111      	bne.n	8004afc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <TIM_OC1_SetConfig+0x10c>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <TIM_OC1_SetConfig+0x110>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	621a      	str	r2, [r3, #32]
}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b006      	add	sp, #24
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	fffeff8f 	.word	0xfffeff8f
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	fffffeff 	.word	0xfffffeff
 8004b38:	fffffdff 	.word	0xfffffdff

08004b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	001a      	movs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <TIM_OC2_SetConfig+0xe8>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <TIM_OC2_SetConfig+0xec>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	021b      	lsls	r3, r3, #8
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2220      	movs	r2, #32
 8004b86:	4393      	bics	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a24      	ldr	r2, [pc, #144]	; (8004c2c <TIM_OC2_SetConfig+0xf0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d10d      	bne.n	8004bba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2240      	movs	r2, #64	; 0x40
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <TIM_OC2_SetConfig+0xf0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_OC2_SetConfig+0x9e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <TIM_OC2_SetConfig+0xf4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d007      	beq.n	8004bda <TIM_OC2_SetConfig+0x9e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <TIM_OC2_SetConfig+0xf8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_OC2_SetConfig+0x9e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <TIM_OC2_SetConfig+0xfc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d113      	bne.n	8004c02 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <TIM_OC2_SetConfig+0x100>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <TIM_OC2_SetConfig+0x104>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b006      	add	sp, #24
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	feff8fff 	.word	0xfeff8fff
 8004c28:	fffffcff 	.word	0xfffffcff
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
 8004c3c:	fffffbff 	.word	0xfffffbff
 8004c40:	fffff7ff 	.word	0xfffff7ff

08004c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	4a35      	ldr	r2, [pc, #212]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004c54:	401a      	ands	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_OC3_SetConfig+0xe8>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2203      	movs	r2, #3
 8004c78:	4393      	bics	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <TIM_OC3_SetConfig+0xec>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <TIM_OC3_SetConfig+0xf0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d10d      	bne.n	8004cbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <TIM_OC3_SetConfig+0xf4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <TIM_OC3_SetConfig+0xf8>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <TIM_OC3_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <TIM_OC3_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_OC3_SetConfig+0xfc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d007      	beq.n	8004cde <TIM_OC3_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <TIM_OC3_SetConfig+0x100>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d003      	beq.n	8004cde <TIM_OC3_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <TIM_OC3_SetConfig+0x104>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d113      	bne.n	8004d06 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <TIM_OC3_SetConfig+0x108>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <TIM_OC3_SetConfig+0x10c>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b006      	add	sp, #24
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	fffffeff 	.word	0xfffffeff
 8004d2c:	fffeff8f 	.word	0xfffeff8f
 8004d30:	fffffdff 	.word	0xfffffdff
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	fffff7ff 	.word	0xfffff7ff
 8004d3c:	fffffbff 	.word	0xfffffbff
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800
 8004d4c:	ffffefff 	.word	0xffffefff
 8004d50:	ffffdfff 	.word	0xffffdfff

08004d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <TIM_OC4_SetConfig+0xb0>)
 8004d64:	401a      	ands	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <TIM_OC4_SetConfig+0xb4>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <TIM_OC4_SetConfig+0xb8>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <TIM_OC4_SetConfig+0xbc>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a19      	ldr	r2, [pc, #100]	; (8004e14 <TIM_OC4_SetConfig+0xc0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC4_SetConfig+0x78>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <TIM_OC4_SetConfig+0xc4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC4_SetConfig+0x78>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <TIM_OC4_SetConfig+0xc8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC4_SetConfig+0x78>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <TIM_OC4_SetConfig+0xcc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d109      	bne.n	8004de0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <TIM_OC4_SetConfig+0xd0>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	621a      	str	r2, [r3, #32]
}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b006      	add	sp, #24
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	ffffefff 	.word	0xffffefff
 8004e08:	feff8fff 	.word	0xfeff8fff
 8004e0c:	fffffcff 	.word	0xfffffcff
 8004e10:	ffffdfff 	.word	0xffffdfff
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400
 8004e20:	40014800 	.word	0x40014800
 8004e24:	ffffbfff 	.word	0xffffbfff

08004e28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <TIM_OC5_SetConfig+0xa4>)
 8004e38:	401a      	ands	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <TIM_OC5_SetConfig+0xa8>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <TIM_OC5_SetConfig+0xac>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	041b      	lsls	r3, r3, #16
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <TIM_OC5_SetConfig+0xb0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_OC5_SetConfig+0x6e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a16      	ldr	r2, [pc, #88]	; (8004edc <TIM_OC5_SetConfig+0xb4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_OC5_SetConfig+0x6e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <TIM_OC5_SetConfig+0xb8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC5_SetConfig+0x6e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <TIM_OC5_SetConfig+0xbc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d109      	bne.n	8004eaa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <TIM_OC5_SetConfig+0xa4>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b006      	add	sp, #24
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	fffeffff 	.word	0xfffeffff
 8004ed0:	fffeff8f 	.word	0xfffeff8f
 8004ed4:	fffdffff 	.word	0xfffdffff
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <TIM_OC6_SetConfig+0xa8>)
 8004ef8:	401a      	ands	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <TIM_OC6_SetConfig+0xac>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <TIM_OC6_SetConfig+0xb0>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	051b      	lsls	r3, r3, #20
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <TIM_OC6_SetConfig+0xb4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_OC6_SetConfig+0x70>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <TIM_OC6_SetConfig+0xb8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_OC6_SetConfig+0x70>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <TIM_OC6_SetConfig+0xbc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_OC6_SetConfig+0x70>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <TIM_OC6_SetConfig+0xc0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d109      	bne.n	8004f6c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4a14      	ldr	r2, [pc, #80]	; (8004fac <TIM_OC6_SetConfig+0xc4>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b006      	add	sp, #24
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	ffefffff 	.word	0xffefffff
 8004f94:	feff8fff 	.word	0xfeff8fff
 8004f98:	ffdfffff 	.word	0xffdfffff
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	fffbffff 	.word	0xfffbffff

08004fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	221f      	movs	r2, #31
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	43d2      	mvns	r2, r2
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	211f      	movs	r1, #31
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4099      	lsls	r1, r3
 8004fe6:	000b      	movs	r3, r1
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b006      	add	sp, #24
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	223c      	movs	r2, #60	; 0x3c
 8005006:	5c9b      	ldrb	r3, [r3, r2]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800500c:	2302      	movs	r3, #2
 800500e:	e05a      	b.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	223c      	movs	r2, #60	; 0x3c
 8005014:	2101      	movs	r1, #1
 8005016:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	223d      	movs	r2, #61	; 0x3d
 800501c:	2102      	movs	r1, #2
 800501e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a26      	ldr	r2, [pc, #152]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800503e:	4013      	ands	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2270      	movs	r2, #112	; 0x70
 8005050:	4393      	bics	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d014      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	05db      	lsls	r3, r3, #23
 8005078:	429a      	cmp	r2, r3
 800507a:	d00e      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a14      	ldr	r2, [pc, #80]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10c      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2280      	movs	r2, #128	; 0x80
 800509e:	4393      	bics	r3, r2
 80050a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	223d      	movs	r2, #61	; 0x3d
 80050b8:	2101      	movs	r1, #1
 80050ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223c      	movs	r2, #60	; 0x3c
 80050c0:	2100      	movs	r1, #0
 80050c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b004      	add	sp, #16
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	ff0fffff 	.word	0xff0fffff
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40014000 	.word	0x40014000

080050e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e046      	b.n	8005184 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2284      	movs	r2, #132	; 0x84
 80050fa:	589b      	ldr	r3, [r3, r2]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2280      	movs	r2, #128	; 0x80
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	0018      	movs	r0, r3
 800510c:	f7fc feea 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2284      	movs	r2, #132	; 0x84
 8005114:	2124      	movs	r1, #36	; 0x24
 8005116:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2101      	movs	r1, #1
 8005124:	438a      	bics	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	0018      	movs	r0, r3
 800512c:	f000 f8dc 	bl	80052e8 <UART_SetConfig>
 8005130:	0003      	movs	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e024      	b.n	8005184 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 fc51 	bl	80059ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	490d      	ldr	r1, [pc, #52]	; (800518c <HAL_UART_Init+0xa8>)
 8005156:	400a      	ands	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	212a      	movs	r1, #42	; 0x2a
 8005166:	438a      	bics	r2, r1
 8005168:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2101      	movs	r1, #1
 8005176:	430a      	orrs	r2, r1
 8005178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	0018      	movs	r0, r3
 800517e:	f000 fce9 	bl	8005b54 <UART_CheckIdleState>
 8005182:	0003      	movs	r3, r0
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}
 800518c:	ffffb7ff 	.word	0xffffb7ff

08005190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	1dbb      	adds	r3, r7, #6
 800519e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2284      	movs	r2, #132	; 0x84
 80051a4:	589b      	ldr	r3, [r3, r2]
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d000      	beq.n	80051ac <HAL_UART_Transmit+0x1c>
 80051aa:	e097      	b.n	80052dc <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_UART_Transmit+0x2a>
 80051b2:	1dbb      	adds	r3, r7, #6
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e08f      	b.n	80052de <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	015b      	lsls	r3, r3, #5
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d109      	bne.n	80051de <HAL_UART_Transmit+0x4e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2201      	movs	r2, #1
 80051d6:	4013      	ands	r3, r2
 80051d8:	d001      	beq.n	80051de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e07f      	b.n	80052de <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	5c9b      	ldrb	r3, [r3, r2]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Transmit+0x5c>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e078      	b.n	80052de <HAL_UART_Transmit+0x14e>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2280      	movs	r2, #128	; 0x80
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	228c      	movs	r2, #140	; 0x8c
 80051f8:	2100      	movs	r1, #0
 80051fa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2284      	movs	r2, #132	; 0x84
 8005200:	2121      	movs	r1, #33	; 0x21
 8005202:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005204:	f7fc ffba 	bl	800217c <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1dba      	adds	r2, r7, #6
 8005210:	2154      	movs	r1, #84	; 0x54
 8005212:	8812      	ldrh	r2, [r2, #0]
 8005214:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1dba      	adds	r2, r7, #6
 800521a:	2156      	movs	r1, #86	; 0x56
 800521c:	8812      	ldrh	r2, [r2, #0]
 800521e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	015b      	lsls	r3, r3, #5
 8005228:	429a      	cmp	r2, r3
 800522a:	d108      	bne.n	800523e <HAL_UART_Transmit+0xae>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	e003      	b.n	8005246 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	2100      	movs	r1, #0
 800524c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800524e:	e02c      	b.n	80052aa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	0013      	movs	r3, r2
 800525a:	2200      	movs	r2, #0
 800525c:	2180      	movs	r1, #128	; 0x80
 800525e:	f000 fcc5 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e039      	b.n	80052de <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	001a      	movs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	05d2      	lsls	r2, r2, #23
 800527c:	0dd2      	lsrs	r2, r2, #23
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	3302      	adds	r3, #2
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	e007      	b.n	8005298 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3301      	adds	r3, #1
 8005296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2256      	movs	r2, #86	; 0x56
 800529c:	5a9b      	ldrh	r3, [r3, r2]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b299      	uxth	r1, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2256      	movs	r2, #86	; 0x56
 80052a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2256      	movs	r2, #86	; 0x56
 80052ae:	5a9b      	ldrh	r3, [r3, r2]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1cc      	bne.n	8005250 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	0013      	movs	r3, r2
 80052c0:	2200      	movs	r2, #0
 80052c2:	2140      	movs	r1, #64	; 0x40
 80052c4:	f000 fc92 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e006      	b.n	80052de <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2284      	movs	r2, #132	; 0x84
 80052d4:	2120      	movs	r1, #32
 80052d6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b008      	add	sp, #32
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ea:	b091      	sub	sp, #68	; 0x44
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f0:	231a      	movs	r3, #26
 80052f2:	2220      	movs	r2, #32
 80052f4:	4694      	mov	ip, r2
 80052f6:	44bc      	add	ip, r7
 80052f8:	4463      	add	r3, ip
 80052fa:	2200      	movs	r2, #0
 80052fc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	431a      	orrs	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800531c:	4313      	orrs	r3, r2
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4ac7      	ldr	r2, [pc, #796]	; (8005644 <UART_SetConfig+0x35c>)
 8005328:	4013      	ands	r3, r2
 800532a:	0019      	movs	r1, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005332:	430b      	orrs	r3, r1
 8005334:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4ac2      	ldr	r2, [pc, #776]	; (8005648 <UART_SetConfig+0x360>)
 800533e:	4013      	ands	r3, r2
 8005340:	0018      	movs	r0, r3
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	0003      	movs	r3, r0
 800534c:	430b      	orrs	r3, r1
 800534e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4abc      	ldr	r2, [pc, #752]	; (800564c <UART_SetConfig+0x364>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <UART_SetConfig+0x8c>
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4aba      	ldr	r2, [pc, #744]	; (8005650 <UART_SetConfig+0x368>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005370:	4313      	orrs	r3, r2
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	4ab6      	ldr	r2, [pc, #728]	; (8005654 <UART_SetConfig+0x36c>)
 800537c:	4013      	ands	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	430b      	orrs	r3, r1
 8005388:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	220f      	movs	r2, #15
 8005392:	4393      	bics	r3, r2
 8005394:	0018      	movs	r0, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	0003      	movs	r3, r0
 80053a0:	430b      	orrs	r3, r1
 80053a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4aab      	ldr	r2, [pc, #684]	; (8005658 <UART_SetConfig+0x370>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d134      	bne.n	8005418 <UART_SetConfig+0x130>
 80053ae:	4bab      	ldr	r3, [pc, #684]	; (800565c <UART_SetConfig+0x374>)
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	2203      	movs	r2, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d015      	beq.n	80053e6 <UART_SetConfig+0xfe>
 80053ba:	d304      	bcc.n	80053c6 <UART_SetConfig+0xde>
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d00a      	beq.n	80053d6 <UART_SetConfig+0xee>
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d018      	beq.n	80053f6 <UART_SetConfig+0x10e>
 80053c4:	e01f      	b.n	8005406 <UART_SetConfig+0x11e>
 80053c6:	231b      	movs	r3, #27
 80053c8:	2220      	movs	r2, #32
 80053ca:	4694      	mov	ip, r2
 80053cc:	44bc      	add	ip, r7
 80053ce:	4463      	add	r3, ip
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e16e      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80053d6:	231b      	movs	r3, #27
 80053d8:	2220      	movs	r2, #32
 80053da:	4694      	mov	ip, r2
 80053dc:	44bc      	add	ip, r7
 80053de:	4463      	add	r3, ip
 80053e0:	2202      	movs	r2, #2
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e166      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80053e6:	231b      	movs	r3, #27
 80053e8:	2220      	movs	r2, #32
 80053ea:	4694      	mov	ip, r2
 80053ec:	44bc      	add	ip, r7
 80053ee:	4463      	add	r3, ip
 80053f0:	2204      	movs	r2, #4
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e15e      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80053f6:	231b      	movs	r3, #27
 80053f8:	2220      	movs	r2, #32
 80053fa:	4694      	mov	ip, r2
 80053fc:	44bc      	add	ip, r7
 80053fe:	4463      	add	r3, ip
 8005400:	2208      	movs	r2, #8
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	e156      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005406:	231b      	movs	r3, #27
 8005408:	2220      	movs	r2, #32
 800540a:	4694      	mov	ip, r2
 800540c:	44bc      	add	ip, r7
 800540e:	4463      	add	r3, ip
 8005410:	2210      	movs	r2, #16
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	e14d      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a90      	ldr	r2, [pc, #576]	; (8005660 <UART_SetConfig+0x378>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d137      	bne.n	8005492 <UART_SetConfig+0x1aa>
 8005422:	4b8e      	ldr	r3, [pc, #568]	; (800565c <UART_SetConfig+0x374>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	220c      	movs	r2, #12
 8005428:	4013      	ands	r3, r2
 800542a:	2b04      	cmp	r3, #4
 800542c:	d018      	beq.n	8005460 <UART_SetConfig+0x178>
 800542e:	d802      	bhi.n	8005436 <UART_SetConfig+0x14e>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <UART_SetConfig+0x158>
 8005434:	e024      	b.n	8005480 <UART_SetConfig+0x198>
 8005436:	2b08      	cmp	r3, #8
 8005438:	d00a      	beq.n	8005450 <UART_SetConfig+0x168>
 800543a:	2b0c      	cmp	r3, #12
 800543c:	d018      	beq.n	8005470 <UART_SetConfig+0x188>
 800543e:	e01f      	b.n	8005480 <UART_SetConfig+0x198>
 8005440:	231b      	movs	r3, #27
 8005442:	2220      	movs	r2, #32
 8005444:	4694      	mov	ip, r2
 8005446:	44bc      	add	ip, r7
 8005448:	4463      	add	r3, ip
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e131      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005450:	231b      	movs	r3, #27
 8005452:	2220      	movs	r2, #32
 8005454:	4694      	mov	ip, r2
 8005456:	44bc      	add	ip, r7
 8005458:	4463      	add	r3, ip
 800545a:	2202      	movs	r2, #2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e129      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005460:	231b      	movs	r3, #27
 8005462:	2220      	movs	r2, #32
 8005464:	4694      	mov	ip, r2
 8005466:	44bc      	add	ip, r7
 8005468:	4463      	add	r3, ip
 800546a:	2204      	movs	r2, #4
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e121      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005470:	231b      	movs	r3, #27
 8005472:	2220      	movs	r2, #32
 8005474:	4694      	mov	ip, r2
 8005476:	44bc      	add	ip, r7
 8005478:	4463      	add	r3, ip
 800547a:	2208      	movs	r2, #8
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e119      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005480:	231b      	movs	r3, #27
 8005482:	2220      	movs	r2, #32
 8005484:	4694      	mov	ip, r2
 8005486:	44bc      	add	ip, r7
 8005488:	4463      	add	r3, ip
 800548a:	2210      	movs	r2, #16
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	e110      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a73      	ldr	r2, [pc, #460]	; (8005664 <UART_SetConfig+0x37c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d137      	bne.n	800550c <UART_SetConfig+0x224>
 800549c:	4b6f      	ldr	r3, [pc, #444]	; (800565c <UART_SetConfig+0x374>)
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	2230      	movs	r2, #48	; 0x30
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d018      	beq.n	80054da <UART_SetConfig+0x1f2>
 80054a8:	d802      	bhi.n	80054b0 <UART_SetConfig+0x1c8>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <UART_SetConfig+0x1d2>
 80054ae:	e024      	b.n	80054fa <UART_SetConfig+0x212>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d00a      	beq.n	80054ca <UART_SetConfig+0x1e2>
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d018      	beq.n	80054ea <UART_SetConfig+0x202>
 80054b8:	e01f      	b.n	80054fa <UART_SetConfig+0x212>
 80054ba:	231b      	movs	r3, #27
 80054bc:	2220      	movs	r2, #32
 80054be:	4694      	mov	ip, r2
 80054c0:	44bc      	add	ip, r7
 80054c2:	4463      	add	r3, ip
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e0f4      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80054ca:	231b      	movs	r3, #27
 80054cc:	2220      	movs	r2, #32
 80054ce:	4694      	mov	ip, r2
 80054d0:	44bc      	add	ip, r7
 80054d2:	4463      	add	r3, ip
 80054d4:	2202      	movs	r2, #2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e0ec      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80054da:	231b      	movs	r3, #27
 80054dc:	2220      	movs	r2, #32
 80054de:	4694      	mov	ip, r2
 80054e0:	44bc      	add	ip, r7
 80054e2:	4463      	add	r3, ip
 80054e4:	2204      	movs	r2, #4
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	e0e4      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80054ea:	231b      	movs	r3, #27
 80054ec:	2220      	movs	r2, #32
 80054ee:	4694      	mov	ip, r2
 80054f0:	44bc      	add	ip, r7
 80054f2:	4463      	add	r3, ip
 80054f4:	2208      	movs	r2, #8
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	e0dc      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80054fa:	231b      	movs	r3, #27
 80054fc:	2220      	movs	r2, #32
 80054fe:	4694      	mov	ip, r2
 8005500:	44bc      	add	ip, r7
 8005502:	4463      	add	r3, ip
 8005504:	2210      	movs	r2, #16
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	46c0      	nop			; (mov r8, r8)
 800550a:	e0d3      	b.n	80056b4 <UART_SetConfig+0x3cc>
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a55      	ldr	r2, [pc, #340]	; (8005668 <UART_SetConfig+0x380>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d107      	bne.n	8005526 <UART_SetConfig+0x23e>
 8005516:	231b      	movs	r3, #27
 8005518:	2220      	movs	r2, #32
 800551a:	4694      	mov	ip, r2
 800551c:	44bc      	add	ip, r7
 800551e:	4463      	add	r3, ip
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e0c6      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a50      	ldr	r2, [pc, #320]	; (800566c <UART_SetConfig+0x384>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d107      	bne.n	8005540 <UART_SetConfig+0x258>
 8005530:	231b      	movs	r3, #27
 8005532:	2220      	movs	r2, #32
 8005534:	4694      	mov	ip, r2
 8005536:	44bc      	add	ip, r7
 8005538:	4463      	add	r3, ip
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	e0b9      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a4a      	ldr	r2, [pc, #296]	; (8005670 <UART_SetConfig+0x388>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d107      	bne.n	800555a <UART_SetConfig+0x272>
 800554a:	231b      	movs	r3, #27
 800554c:	2220      	movs	r2, #32
 800554e:	4694      	mov	ip, r2
 8005550:	44bc      	add	ip, r7
 8005552:	4463      	add	r3, ip
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e0ac      	b.n	80056b4 <UART_SetConfig+0x3cc>
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3b      	ldr	r2, [pc, #236]	; (800564c <UART_SetConfig+0x364>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d141      	bne.n	80055e8 <UART_SetConfig+0x300>
 8005564:	4b3d      	ldr	r3, [pc, #244]	; (800565c <UART_SetConfig+0x374>)
 8005566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005568:	23c0      	movs	r3, #192	; 0xc0
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4013      	ands	r3, r2
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	00d2      	lsls	r2, r2, #3
 8005572:	4293      	cmp	r3, r2
 8005574:	d01f      	beq.n	80055b6 <UART_SetConfig+0x2ce>
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	00d2      	lsls	r2, r2, #3
 800557a:	4293      	cmp	r3, r2
 800557c:	d802      	bhi.n	8005584 <UART_SetConfig+0x29c>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <UART_SetConfig+0x2ae>
 8005582:	e028      	b.n	80055d6 <UART_SetConfig+0x2ee>
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	0112      	lsls	r2, r2, #4
 8005588:	4293      	cmp	r3, r2
 800558a:	d00c      	beq.n	80055a6 <UART_SetConfig+0x2be>
 800558c:	22c0      	movs	r2, #192	; 0xc0
 800558e:	0112      	lsls	r2, r2, #4
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <UART_SetConfig+0x2de>
 8005594:	e01f      	b.n	80055d6 <UART_SetConfig+0x2ee>
 8005596:	231b      	movs	r3, #27
 8005598:	2220      	movs	r2, #32
 800559a:	4694      	mov	ip, r2
 800559c:	44bc      	add	ip, r7
 800559e:	4463      	add	r3, ip
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	e086      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80055a6:	231b      	movs	r3, #27
 80055a8:	2220      	movs	r2, #32
 80055aa:	4694      	mov	ip, r2
 80055ac:	44bc      	add	ip, r7
 80055ae:	4463      	add	r3, ip
 80055b0:	2202      	movs	r2, #2
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e07e      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80055b6:	231b      	movs	r3, #27
 80055b8:	2220      	movs	r2, #32
 80055ba:	4694      	mov	ip, r2
 80055bc:	44bc      	add	ip, r7
 80055be:	4463      	add	r3, ip
 80055c0:	2204      	movs	r2, #4
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	e076      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80055c6:	231b      	movs	r3, #27
 80055c8:	2220      	movs	r2, #32
 80055ca:	4694      	mov	ip, r2
 80055cc:	44bc      	add	ip, r7
 80055ce:	4463      	add	r3, ip
 80055d0:	2208      	movs	r2, #8
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e06e      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80055d6:	231b      	movs	r3, #27
 80055d8:	2220      	movs	r2, #32
 80055da:	4694      	mov	ip, r2
 80055dc:	44bc      	add	ip, r7
 80055de:	4463      	add	r3, ip
 80055e0:	2210      	movs	r2, #16
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	e065      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a18      	ldr	r2, [pc, #96]	; (8005650 <UART_SetConfig+0x368>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d159      	bne.n	80056a6 <UART_SetConfig+0x3be>
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <UART_SetConfig+0x374>)
 80055f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055f6:	23c0      	movs	r3, #192	; 0xc0
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4013      	ands	r3, r2
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	0052      	lsls	r2, r2, #1
 8005600:	4293      	cmp	r3, r2
 8005602:	d037      	beq.n	8005674 <UART_SetConfig+0x38c>
 8005604:	2280      	movs	r2, #128	; 0x80
 8005606:	0052      	lsls	r2, r2, #1
 8005608:	4293      	cmp	r3, r2
 800560a:	d802      	bhi.n	8005612 <UART_SetConfig+0x32a>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <UART_SetConfig+0x33c>
 8005610:	e040      	b.n	8005694 <UART_SetConfig+0x3ac>
 8005612:	2280      	movs	r2, #128	; 0x80
 8005614:	0092      	lsls	r2, r2, #2
 8005616:	4293      	cmp	r3, r2
 8005618:	d00c      	beq.n	8005634 <UART_SetConfig+0x34c>
 800561a:	22c0      	movs	r2, #192	; 0xc0
 800561c:	0092      	lsls	r2, r2, #2
 800561e:	4293      	cmp	r3, r2
 8005620:	d030      	beq.n	8005684 <UART_SetConfig+0x39c>
 8005622:	e037      	b.n	8005694 <UART_SetConfig+0x3ac>
 8005624:	231b      	movs	r3, #27
 8005626:	2220      	movs	r2, #32
 8005628:	4694      	mov	ip, r2
 800562a:	44bc      	add	ip, r7
 800562c:	4463      	add	r3, ip
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e03f      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005634:	231b      	movs	r3, #27
 8005636:	2220      	movs	r2, #32
 8005638:	4694      	mov	ip, r2
 800563a:	44bc      	add	ip, r7
 800563c:	4463      	add	r3, ip
 800563e:	2202      	movs	r2, #2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e037      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005644:	cfff69f3 	.word	0xcfff69f3
 8005648:	ffffcfff 	.word	0xffffcfff
 800564c:	40008000 	.word	0x40008000
 8005650:	40008400 	.word	0x40008400
 8005654:	11fff4ff 	.word	0x11fff4ff
 8005658:	40013800 	.word	0x40013800
 800565c:	40021000 	.word	0x40021000
 8005660:	40004400 	.word	0x40004400
 8005664:	40004800 	.word	0x40004800
 8005668:	40004c00 	.word	0x40004c00
 800566c:	40005000 	.word	0x40005000
 8005670:	40013c00 	.word	0x40013c00
 8005674:	231b      	movs	r3, #27
 8005676:	2220      	movs	r2, #32
 8005678:	4694      	mov	ip, r2
 800567a:	44bc      	add	ip, r7
 800567c:	4463      	add	r3, ip
 800567e:	2204      	movs	r2, #4
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e017      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005684:	231b      	movs	r3, #27
 8005686:	2220      	movs	r2, #32
 8005688:	4694      	mov	ip, r2
 800568a:	44bc      	add	ip, r7
 800568c:	4463      	add	r3, ip
 800568e:	2208      	movs	r2, #8
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e00f      	b.n	80056b4 <UART_SetConfig+0x3cc>
 8005694:	231b      	movs	r3, #27
 8005696:	2220      	movs	r2, #32
 8005698:	4694      	mov	ip, r2
 800569a:	44bc      	add	ip, r7
 800569c:	4463      	add	r3, ip
 800569e:	2210      	movs	r2, #16
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	e006      	b.n	80056b4 <UART_SetConfig+0x3cc>
 80056a6:	231b      	movs	r3, #27
 80056a8:	2220      	movs	r2, #32
 80056aa:	4694      	mov	ip, r2
 80056ac:	44bc      	add	ip, r7
 80056ae:	4463      	add	r3, ip
 80056b0:	2210      	movs	r2, #16
 80056b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4ac5      	ldr	r2, [pc, #788]	; (80059d0 <UART_SetConfig+0x6e8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d005      	beq.n	80056ca <UART_SetConfig+0x3e2>
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4ac4      	ldr	r2, [pc, #784]	; (80059d4 <UART_SetConfig+0x6ec>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d000      	beq.n	80056ca <UART_SetConfig+0x3e2>
 80056c8:	e094      	b.n	80057f4 <UART_SetConfig+0x50c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ca:	231b      	movs	r3, #27
 80056cc:	2220      	movs	r2, #32
 80056ce:	4694      	mov	ip, r2
 80056d0:	44bc      	add	ip, r7
 80056d2:	4463      	add	r3, ip
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d00d      	beq.n	80056f6 <UART_SetConfig+0x40e>
 80056da:	dc02      	bgt.n	80056e2 <UART_SetConfig+0x3fa>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <UART_SetConfig+0x404>
 80056e0:	e015      	b.n	800570e <UART_SetConfig+0x426>
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d00a      	beq.n	80056fc <UART_SetConfig+0x414>
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d00d      	beq.n	8005706 <UART_SetConfig+0x41e>
 80056ea:	e010      	b.n	800570e <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ec:	f7fe fc80 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 80056f0:	0003      	movs	r3, r0
 80056f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056f4:	e015      	b.n	8005722 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f6:	4bb8      	ldr	r3, [pc, #736]	; (80059d8 <UART_SetConfig+0x6f0>)
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056fa:	e012      	b.n	8005722 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fc:	f7fe fbec 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8005700:	0003      	movs	r3, r0
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005704:	e00d      	b.n	8005722 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	2380      	movs	r3, #128	; 0x80
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800570c:	e009      	b.n	8005722 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005712:	231a      	movs	r3, #26
 8005714:	2220      	movs	r2, #32
 8005716:	4694      	mov	ip, r2
 8005718:	44bc      	add	ip, r7
 800571a:	4463      	add	r3, ip
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
        break;
 8005720:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	d100      	bne.n	800572a <UART_SetConfig+0x442>
 8005728:	e139      	b.n	800599e <UART_SetConfig+0x6b6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572e:	4bab      	ldr	r3, [pc, #684]	; (80059dc <UART_SetConfig+0x6f4>)
 8005730:	0052      	lsls	r2, r2, #1
 8005732:	5ad3      	ldrh	r3, [r2, r3]
 8005734:	0019      	movs	r1, r3
 8005736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005738:	f7fa fce4 	bl	8000104 <__udivsi3>
 800573c:	0003      	movs	r3, r0
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	0013      	movs	r3, r2
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	189b      	adds	r3, r3, r2
 800574a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574c:	429a      	cmp	r2, r3
 800574e:	d305      	bcc.n	800575c <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005758:	429a      	cmp	r2, r3
 800575a:	d907      	bls.n	800576c <UART_SetConfig+0x484>
      {
        ret = HAL_ERROR;
 800575c:	231a      	movs	r3, #26
 800575e:	2220      	movs	r2, #32
 8005760:	4694      	mov	ip, r2
 8005762:	44bc      	add	ip, r7
 8005764:	4463      	add	r3, ip
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e042      	b.n	80057f2 <UART_SetConfig+0x50a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005778:	4b98      	ldr	r3, [pc, #608]	; (80059dc <UART_SetConfig+0x6f4>)
 800577a:	0052      	lsls	r2, r2, #1
 800577c:	5ad3      	ldrh	r3, [r2, r3]
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	69b8      	ldr	r0, [r7, #24]
 800578a:	69f9      	ldr	r1, [r7, #28]
 800578c:	f7fa fe30 	bl	80003f0 <__aeabi_uldivmod>
 8005790:	0003      	movs	r3, r0
 8005792:	000c      	movs	r4, r1
 8005794:	0e1a      	lsrs	r2, r3, #24
 8005796:	0226      	lsls	r6, r4, #8
 8005798:	4316      	orrs	r6, r2
 800579a:	021d      	lsls	r5, r3, #8
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68b8      	ldr	r0, [r7, #8]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	1940      	adds	r0, r0, r5
 80057ae:	4171      	adcs	r1, r6
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f7fa fe17 	bl	80003f0 <__aeabi_uldivmod>
 80057c2:	0003      	movs	r3, r0
 80057c4:	000c      	movs	r4, r1
 80057c6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	4a85      	ldr	r2, [pc, #532]	; (80059e0 <UART_SetConfig+0x6f8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d908      	bls.n	80057e2 <UART_SetConfig+0x4fa>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	4a84      	ldr	r2, [pc, #528]	; (80059e4 <UART_SetConfig+0x6fc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d804      	bhi.n	80057e2 <UART_SetConfig+0x4fa>
        {
          huart->Instance->BRR = usartdiv;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e007      	b.n	80057f2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80057e2:	231a      	movs	r3, #26
 80057e4:	2220      	movs	r2, #32
 80057e6:	4694      	mov	ip, r2
 80057e8:	44bc      	add	ip, r7
 80057ea:	4463      	add	r3, ip
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80057f0:	e0d5      	b.n	800599e <UART_SetConfig+0x6b6>
 80057f2:	e0d4      	b.n	800599e <UART_SetConfig+0x6b6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d000      	beq.n	8005802 <UART_SetConfig+0x51a>
 8005800:	e073      	b.n	80058ea <UART_SetConfig+0x602>
  {
    switch (clocksource)
 8005802:	231b      	movs	r3, #27
 8005804:	2220      	movs	r2, #32
 8005806:	4694      	mov	ip, r2
 8005808:	44bc      	add	ip, r7
 800580a:	4463      	add	r3, ip
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d00d      	beq.n	800582e <UART_SetConfig+0x546>
 8005812:	dc02      	bgt.n	800581a <UART_SetConfig+0x532>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <UART_SetConfig+0x53c>
 8005818:	e015      	b.n	8005846 <UART_SetConfig+0x55e>
 800581a:	2b04      	cmp	r3, #4
 800581c:	d00a      	beq.n	8005834 <UART_SetConfig+0x54c>
 800581e:	2b08      	cmp	r3, #8
 8005820:	d00d      	beq.n	800583e <UART_SetConfig+0x556>
 8005822:	e010      	b.n	8005846 <UART_SetConfig+0x55e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fe fbe4 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005828:	0003      	movs	r3, r0
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800582c:	e015      	b.n	800585a <UART_SetConfig+0x572>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582e:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <UART_SetConfig+0x6f0>)
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005832:	e012      	b.n	800585a <UART_SetConfig+0x572>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005834:	f7fe fb50 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8005838:	0003      	movs	r3, r0
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800583c:	e00d      	b.n	800585a <UART_SetConfig+0x572>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005844:	e009      	b.n	800585a <UART_SetConfig+0x572>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800584a:	231a      	movs	r3, #26
 800584c:	2220      	movs	r2, #32
 800584e:	4694      	mov	ip, r2
 8005850:	44bc      	add	ip, r7
 8005852:	4463      	add	r3, ip
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
        break;
 8005858:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d100      	bne.n	8005862 <UART_SetConfig+0x57a>
 8005860:	e09d      	b.n	800599e <UART_SetConfig+0x6b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005866:	4b5d      	ldr	r3, [pc, #372]	; (80059dc <UART_SetConfig+0x6f4>)
 8005868:	0052      	lsls	r2, r2, #1
 800586a:	5ad3      	ldrh	r3, [r2, r3]
 800586c:	0019      	movs	r1, r3
 800586e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005870:	f7fa fc48 	bl	8000104 <__udivsi3>
 8005874:	0003      	movs	r3, r0
 8005876:	005a      	lsls	r2, r3, #1
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	18d2      	adds	r2, r2, r3
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	0019      	movs	r1, r3
 8005886:	0010      	movs	r0, r2
 8005888:	f7fa fc3c 	bl	8000104 <__udivsi3>
 800588c:	0003      	movs	r3, r0
 800588e:	b29b      	uxth	r3, r3
 8005890:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	2b0f      	cmp	r3, #15
 8005896:	d920      	bls.n	80058da <UART_SetConfig+0x5f2>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	4a53      	ldr	r2, [pc, #332]	; (80059e8 <UART_SetConfig+0x700>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d81c      	bhi.n	80058da <UART_SetConfig+0x5f2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	200e      	movs	r0, #14
 80058a6:	2420      	movs	r4, #32
 80058a8:	193b      	adds	r3, r7, r4
 80058aa:	181b      	adds	r3, r3, r0
 80058ac:	210f      	movs	r1, #15
 80058ae:	438a      	bics	r2, r1
 80058b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2207      	movs	r2, #7
 80058ba:	4013      	ands	r3, r2
 80058bc:	b299      	uxth	r1, r3
 80058be:	193b      	adds	r3, r7, r4
 80058c0:	181b      	adds	r3, r3, r0
 80058c2:	193a      	adds	r2, r7, r4
 80058c4:	1812      	adds	r2, r2, r0
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	193a      	adds	r2, r7, r4
 80058d2:	1812      	adds	r2, r2, r0
 80058d4:	8812      	ldrh	r2, [r2, #0]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	e061      	b.n	800599e <UART_SetConfig+0x6b6>
      }
      else
      {
        ret = HAL_ERROR;
 80058da:	231a      	movs	r3, #26
 80058dc:	2220      	movs	r2, #32
 80058de:	4694      	mov	ip, r2
 80058e0:	44bc      	add	ip, r7
 80058e2:	4463      	add	r3, ip
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	e059      	b.n	800599e <UART_SetConfig+0x6b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ea:	231b      	movs	r3, #27
 80058ec:	2220      	movs	r2, #32
 80058ee:	4694      	mov	ip, r2
 80058f0:	44bc      	add	ip, r7
 80058f2:	4463      	add	r3, ip
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d00d      	beq.n	8005916 <UART_SetConfig+0x62e>
 80058fa:	dc02      	bgt.n	8005902 <UART_SetConfig+0x61a>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <UART_SetConfig+0x624>
 8005900:	e015      	b.n	800592e <UART_SetConfig+0x646>
 8005902:	2b04      	cmp	r3, #4
 8005904:	d00a      	beq.n	800591c <UART_SetConfig+0x634>
 8005906:	2b08      	cmp	r3, #8
 8005908:	d00d      	beq.n	8005926 <UART_SetConfig+0x63e>
 800590a:	e010      	b.n	800592e <UART_SetConfig+0x646>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fe fb70 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005910:	0003      	movs	r3, r0
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005914:	e015      	b.n	8005942 <UART_SetConfig+0x65a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <UART_SetConfig+0x6f0>)
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800591a:	e012      	b.n	8005942 <UART_SetConfig+0x65a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591c:	f7fe fadc 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8005920:	0003      	movs	r3, r0
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005924:	e00d      	b.n	8005942 <UART_SetConfig+0x65a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	2380      	movs	r3, #128	; 0x80
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800592c:	e009      	b.n	8005942 <UART_SetConfig+0x65a>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005932:	231a      	movs	r3, #26
 8005934:	2220      	movs	r2, #32
 8005936:	4694      	mov	ip, r2
 8005938:	44bc      	add	ip, r7
 800593a:	4463      	add	r3, ip
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
        break;
 8005940:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02a      	beq.n	800599e <UART_SetConfig+0x6b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800594c:	4b23      	ldr	r3, [pc, #140]	; (80059dc <UART_SetConfig+0x6f4>)
 800594e:	0052      	lsls	r2, r2, #1
 8005950:	5ad3      	ldrh	r3, [r2, r3]
 8005952:	0019      	movs	r1, r3
 8005954:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005956:	f7fa fbd5 	bl	8000104 <__udivsi3>
 800595a:	0003      	movs	r3, r0
 800595c:	001a      	movs	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	18d2      	adds	r2, r2, r3
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	0019      	movs	r1, r3
 800596c:	0010      	movs	r0, r2
 800596e:	f7fa fbc9 	bl	8000104 <__udivsi3>
 8005972:	0003      	movs	r3, r0
 8005974:	b29b      	uxth	r3, r3
 8005976:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2b0f      	cmp	r3, #15
 800597c:	d908      	bls.n	8005990 <UART_SetConfig+0x6a8>
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <UART_SetConfig+0x700>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d804      	bhi.n	8005990 <UART_SetConfig+0x6a8>
      {
        huart->Instance->BRR = usartdiv;
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	e006      	b.n	800599e <UART_SetConfig+0x6b6>
      }
      else
      {
        ret = HAL_ERROR;
 8005990:	231a      	movs	r3, #26
 8005992:	2220      	movs	r2, #32
 8005994:	4694      	mov	ip, r2
 8005996:	44bc      	add	ip, r7
 8005998:	4463      	add	r3, ip
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	226a      	movs	r2, #106	; 0x6a
 80059a2:	2101      	movs	r1, #1
 80059a4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	2268      	movs	r2, #104	; 0x68
 80059aa:	2101      	movs	r1, #1
 80059ac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2200      	movs	r2, #0
 80059b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	2200      	movs	r2, #0
 80059b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059ba:	231a      	movs	r3, #26
 80059bc:	2220      	movs	r2, #32
 80059be:	4694      	mov	ip, r2
 80059c0:	44bc      	add	ip, r7
 80059c2:	4463      	add	r3, ip
 80059c4:	781b      	ldrb	r3, [r3, #0]
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b011      	add	sp, #68	; 0x44
 80059cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	40008000 	.word	0x40008000
 80059d4:	40008400 	.word	0x40008400
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	08006924 	.word	0x08006924
 80059e0:	000002ff 	.word	0x000002ff
 80059e4:	000fffff 	.word	0x000fffff
 80059e8:	0000ffff 	.word	0x0000ffff

080059ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	2201      	movs	r2, #1
 80059fa:	4013      	ands	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4a4a      	ldr	r2, [pc, #296]	; (8005b30 <UART_AdvFeatureConfig+0x144>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	0019      	movs	r1, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4a43      	ldr	r2, [pc, #268]	; (8005b34 <UART_AdvFeatureConfig+0x148>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4a3b      	ldr	r2, [pc, #236]	; (8005b38 <UART_AdvFeatureConfig+0x14c>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	2208      	movs	r2, #8
 8005a60:	4013      	ands	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4a34      	ldr	r2, [pc, #208]	; (8005b3c <UART_AdvFeatureConfig+0x150>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	0019      	movs	r1, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	2210      	movs	r2, #16
 8005a82:	4013      	ands	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a2c      	ldr	r2, [pc, #176]	; (8005b40 <UART_AdvFeatureConfig+0x154>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	0019      	movs	r1, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <UART_AdvFeatureConfig+0x158>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	0019      	movs	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	2240      	movs	r2, #64	; 0x40
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <UART_AdvFeatureConfig+0x15c>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	0019      	movs	r1, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	035b      	lsls	r3, r3, #13
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10b      	bne.n	8005b06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <UART_AdvFeatureConfig+0x160>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	0019      	movs	r1, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d00b      	beq.n	8005b28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <UART_AdvFeatureConfig+0x164>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }
}
 8005b28:	46c0      	nop			; (mov r8, r8)
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	fffdffff 	.word	0xfffdffff
 8005b34:	fffeffff 	.word	0xfffeffff
 8005b38:	fffbffff 	.word	0xfffbffff
 8005b3c:	ffff7fff 	.word	0xffff7fff
 8005b40:	ffffefff 	.word	0xffffefff
 8005b44:	ffffdfff 	.word	0xffffdfff
 8005b48:	ffefffff 	.word	0xffefffff
 8005b4c:	ff9fffff 	.word	0xff9fffff
 8005b50:	fff7ffff 	.word	0xfff7ffff

08005b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	228c      	movs	r2, #140	; 0x8c
 8005b60:	2100      	movs	r1, #0
 8005b62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b64:	f7fc fb0a 	bl	800217c <HAL_GetTick>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2208      	movs	r2, #8
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d10d      	bne.n	8005b96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	0399      	lsls	r1, r3, #14
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <UART_CheckIdleState+0x94>)
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	0013      	movs	r3, r2
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f000 f82f 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005b8e:	1e03      	subs	r3, r0, #0
 8005b90:	d001      	beq.n	8005b96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e024      	b.n	8005be0 <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d10d      	bne.n	8005bc0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	2380      	movs	r3, #128	; 0x80
 8005ba8:	03d9      	lsls	r1, r3, #15
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <UART_CheckIdleState+0x94>)
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f000 f81a 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005bb8:	1e03      	subs	r3, r0, #0
 8005bba:	d001      	beq.n	8005bc0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e00f      	b.n	8005be0 <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2284      	movs	r2, #132	; 0x84
 8005bc4:	2120      	movs	r1, #32
 8005bc6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2288      	movs	r2, #136	; 0x88
 8005bcc:	2120      	movs	r1, #32
 8005bce:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	01ffffff 	.word	0x01ffffff

08005bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	1dfb      	adds	r3, r7, #7
 8005bfa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfc:	e062      	b.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	3301      	adds	r3, #1
 8005c02:	d05f      	beq.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c04:	f7fc faba 	bl	800217c <HAL_GetTick>
 8005c08:	0002      	movs	r2, r0
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d11d      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4931      	ldr	r1, [pc, #196]	; (8005cec <UART_WaitOnFlagUntilTimeout+0x100>)
 8005c26:	400a      	ands	r2, r1
 8005c28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2101      	movs	r1, #1
 8005c36:	438a      	bics	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2284      	movs	r2, #132	; 0x84
 8005c3e:	2120      	movs	r1, #32
 8005c40:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2288      	movs	r2, #136	; 0x88
 8005c46:	2120      	movs	r1, #32
 8005c48:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	2100      	movs	r1, #0
 8005c50:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e046      	b.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d030      	beq.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	401a      	ands	r2, r3
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d126      	bne.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	0112      	lsls	r2, r2, #4
 8005c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4918      	ldr	r1, [pc, #96]	; (8005cec <UART_WaitOnFlagUntilTimeout+0x100>)
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	438a      	bics	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2284      	movs	r2, #132	; 0x84
 8005ca4:	2120      	movs	r1, #32
 8005ca6:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2288      	movs	r2, #136	; 0x88
 8005cac:	2120      	movs	r1, #32
 8005cae:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	228c      	movs	r2, #140	; 0x8c
 8005cb4:	2120      	movs	r1, #32
 8005cb6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2280      	movs	r2, #128	; 0x80
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e00f      	b.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	425a      	negs	r2, r3
 8005cd4:	4153      	adcs	r3, r2
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	001a      	movs	r2, r3
 8005cda:	1dfb      	adds	r3, r7, #7
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d08d      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b004      	add	sp, #16
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	fffffe5f 	.word	0xfffffe5f

08005cf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2280      	movs	r2, #128	; 0x80
 8005cfc:	5c9b      	ldrb	r3, [r3, r2]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e027      	b.n	8005d56 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2284      	movs	r2, #132	; 0x84
 8005d12:	2124      	movs	r1, #36	; 0x24
 8005d14:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	438a      	bics	r2, r1
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2284      	movs	r2, #132	; 0x84
 8005d48:	2120      	movs	r1, #32
 8005d4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2280      	movs	r2, #128	; 0x80
 8005d50:	2100      	movs	r1, #0
 8005d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b004      	add	sp, #16
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	dfffffff 	.word	0xdfffffff

08005d64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	5c9b      	ldrb	r3, [r3, r2]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e02e      	b.n	8005dda <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2280      	movs	r2, #128	; 0x80
 8005d80:	2101      	movs	r1, #1
 8005d82:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2284      	movs	r2, #132	; 0x84
 8005d88:	2124      	movs	r1, #36	; 0x24
 8005d8a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2101      	movs	r1, #1
 8005da0:	438a      	bics	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	08d9      	lsrs	r1, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f000 f854 	bl	8005e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2284      	movs	r2, #132	; 0x84
 8005dcc:	2120      	movs	r1, #32
 8005dce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b004      	add	sp, #16
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2280      	movs	r2, #128	; 0x80
 8005df2:	5c9b      	ldrb	r3, [r3, r2]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e02f      	b.n	8005e5c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	2101      	movs	r1, #1
 8005e02:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2284      	movs	r2, #132	; 0x84
 8005e08:	2124      	movs	r1, #36	; 0x24
 8005e0a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	438a      	bics	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	0019      	movs	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 f813 	bl	8005e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2284      	movs	r2, #132	; 0x84
 8005e4e:	2120      	movs	r1, #32
 8005e50:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2280      	movs	r2, #128	; 0x80
 8005e56:	2100      	movs	r1, #0
 8005e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b004      	add	sp, #16
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	f1ffffff 	.word	0xf1ffffff

08005e68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e70:	2314      	movs	r3, #20
 8005e72:	18fb      	adds	r3, r7, r3
 8005e74:	4a2f      	ldr	r2, [pc, #188]	; (8005f34 <UARTEx_SetNbDataToProcess+0xcc>)
 8005e76:	ca03      	ldmia	r2!, {r0, r1}
 8005e78:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <UARTEx_SetNbDataToProcess+0xd0>)
 8005e80:	ca03      	ldmia	r2!, {r0, r1}
 8005e82:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d108      	bne.n	8005e9e <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	226a      	movs	r2, #106	; 0x6a
 8005e90:	2101      	movs	r1, #1
 8005e92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2268      	movs	r2, #104	; 0x68
 8005e98:	2101      	movs	r1, #1
 8005e9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e9c:	e046      	b.n	8005f2c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e9e:	261f      	movs	r6, #31
 8005ea0:	19bb      	adds	r3, r7, r6
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ea6:	201e      	movs	r0, #30
 8005ea8:	183b      	adds	r3, r7, r0
 8005eaa:	2208      	movs	r2, #8
 8005eac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	0e5b      	lsrs	r3, r3, #25
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	241d      	movs	r4, #29
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	2107      	movs	r1, #7
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	0f5b      	lsrs	r3, r3, #29
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	251c      	movs	r5, #28
 8005ece:	197b      	adds	r3, r7, r5
 8005ed0:	2107      	movs	r1, #7
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ed6:	183b      	adds	r3, r7, r0
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	197a      	adds	r2, r7, r5
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	2114      	movs	r1, #20
 8005ee0:	1879      	adds	r1, r7, r1
 8005ee2:	5c8a      	ldrb	r2, [r1, r2]
 8005ee4:	435a      	muls	r2, r3
 8005ee6:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ee8:	197b      	adds	r3, r7, r5
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	250c      	movs	r5, #12
 8005eee:	197a      	adds	r2, r7, r5
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	f7fa f990 	bl	8000218 <__divsi3>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	b299      	uxth	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	226a      	movs	r2, #106	; 0x6a
 8005f00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f02:	19bb      	adds	r3, r7, r6
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	193a      	adds	r2, r7, r4
 8005f08:	7812      	ldrb	r2, [r2, #0]
 8005f0a:	2114      	movs	r1, #20
 8005f0c:	1879      	adds	r1, r7, r1
 8005f0e:	5c8a      	ldrb	r2, [r1, r2]
 8005f10:	435a      	muls	r2, r3
 8005f12:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f14:	193b      	adds	r3, r7, r4
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	197a      	adds	r2, r7, r5
 8005f1a:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	f7fa f97b 	bl	8000218 <__divsi3>
 8005f22:	0003      	movs	r3, r0
 8005f24:	b299      	uxth	r1, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2268      	movs	r2, #104	; 0x68
 8005f2a:	5299      	strh	r1, [r3, r2]
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b009      	add	sp, #36	; 0x24
 8005f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f34:	08006820 	.word	0x08006820
 8005f38:	08006828 	.word	0x08006828

08005f3c <__errno>:
 8005f3c:	4b01      	ldr	r3, [pc, #4]	; (8005f44 <__errno+0x8>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	4770      	bx	lr
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	2000000c 	.word	0x2000000c

08005f48 <__libc_init_array>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	4d0c      	ldr	r5, [pc, #48]	; (8005f80 <__libc_init_array+0x38>)
 8005f4e:	4c0d      	ldr	r4, [pc, #52]	; (8005f84 <__libc_init_array+0x3c>)
 8005f50:	1b64      	subs	r4, r4, r5
 8005f52:	10a4      	asrs	r4, r4, #2
 8005f54:	42a6      	cmp	r6, r4
 8005f56:	d109      	bne.n	8005f6c <__libc_init_array+0x24>
 8005f58:	2600      	movs	r6, #0
 8005f5a:	f000 fc29 	bl	80067b0 <_init>
 8005f5e:	4d0a      	ldr	r5, [pc, #40]	; (8005f88 <__libc_init_array+0x40>)
 8005f60:	4c0a      	ldr	r4, [pc, #40]	; (8005f8c <__libc_init_array+0x44>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d105      	bne.n	8005f76 <__libc_init_array+0x2e>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	00b3      	lsls	r3, r6, #2
 8005f6e:	58eb      	ldr	r3, [r5, r3]
 8005f70:	4798      	blx	r3
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7ee      	b.n	8005f54 <__libc_init_array+0xc>
 8005f76:	00b3      	lsls	r3, r6, #2
 8005f78:	58eb      	ldr	r3, [r5, r3]
 8005f7a:	4798      	blx	r3
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e7f2      	b.n	8005f66 <__libc_init_array+0x1e>
 8005f80:	08006978 	.word	0x08006978
 8005f84:	08006978 	.word	0x08006978
 8005f88:	08006978 	.word	0x08006978
 8005f8c:	0800697c 	.word	0x0800697c

08005f90 <memset>:
 8005f90:	0003      	movs	r3, r0
 8005f92:	1812      	adds	r2, r2, r0
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d100      	bne.n	8005f9a <memset+0xa>
 8005f98:	4770      	bx	lr
 8005f9a:	7019      	strb	r1, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	e7f9      	b.n	8005f94 <memset+0x4>

08005fa0 <siprintf>:
 8005fa0:	b40e      	push	{r1, r2, r3}
 8005fa2:	b500      	push	{lr}
 8005fa4:	490b      	ldr	r1, [pc, #44]	; (8005fd4 <siprintf+0x34>)
 8005fa6:	b09c      	sub	sp, #112	; 0x70
 8005fa8:	ab1d      	add	r3, sp, #116	; 0x74
 8005faa:	9002      	str	r0, [sp, #8]
 8005fac:	9006      	str	r0, [sp, #24]
 8005fae:	9107      	str	r1, [sp, #28]
 8005fb0:	9104      	str	r1, [sp, #16]
 8005fb2:	4809      	ldr	r0, [pc, #36]	; (8005fd8 <siprintf+0x38>)
 8005fb4:	4909      	ldr	r1, [pc, #36]	; (8005fdc <siprintf+0x3c>)
 8005fb6:	cb04      	ldmia	r3!, {r2}
 8005fb8:	9105      	str	r1, [sp, #20]
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	a902      	add	r1, sp, #8
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	f000 f870 	bl	80060a4 <_svfiprintf_r>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9a02      	ldr	r2, [sp, #8]
 8005fc8:	7013      	strb	r3, [r2, #0]
 8005fca:	b01c      	add	sp, #112	; 0x70
 8005fcc:	bc08      	pop	{r3}
 8005fce:	b003      	add	sp, #12
 8005fd0:	4718      	bx	r3
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	7fffffff 	.word	0x7fffffff
 8005fd8:	2000000c 	.word	0x2000000c
 8005fdc:	ffff0208 	.word	0xffff0208

08005fe0 <__ssputs_r>:
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	688e      	ldr	r6, [r1, #8]
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	0007      	movs	r7, r0
 8005fe8:	000c      	movs	r4, r1
 8005fea:	9203      	str	r2, [sp, #12]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	429e      	cmp	r6, r3
 8005ff0:	d83c      	bhi.n	800606c <__ssputs_r+0x8c>
 8005ff2:	2390      	movs	r3, #144	; 0x90
 8005ff4:	898a      	ldrh	r2, [r1, #12]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	421a      	tst	r2, r3
 8005ffa:	d034      	beq.n	8006066 <__ssputs_r+0x86>
 8005ffc:	2503      	movs	r5, #3
 8005ffe:	6909      	ldr	r1, [r1, #16]
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	1a5b      	subs	r3, r3, r1
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	6963      	ldr	r3, [r4, #20]
 8006008:	9802      	ldr	r0, [sp, #8]
 800600a:	435d      	muls	r5, r3
 800600c:	0feb      	lsrs	r3, r5, #31
 800600e:	195d      	adds	r5, r3, r5
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	106d      	asrs	r5, r5, #1
 8006014:	3301      	adds	r3, #1
 8006016:	181b      	adds	r3, r3, r0
 8006018:	42ab      	cmp	r3, r5
 800601a:	d900      	bls.n	800601e <__ssputs_r+0x3e>
 800601c:	001d      	movs	r5, r3
 800601e:	0553      	lsls	r3, r2, #21
 8006020:	d532      	bpl.n	8006088 <__ssputs_r+0xa8>
 8006022:	0029      	movs	r1, r5
 8006024:	0038      	movs	r0, r7
 8006026:	f000 fb23 	bl	8006670 <_malloc_r>
 800602a:	1e06      	subs	r6, r0, #0
 800602c:	d109      	bne.n	8006042 <__ssputs_r+0x62>
 800602e:	230c      	movs	r3, #12
 8006030:	603b      	str	r3, [r7, #0]
 8006032:	2340      	movs	r3, #64	; 0x40
 8006034:	2001      	movs	r0, #1
 8006036:	89a2      	ldrh	r2, [r4, #12]
 8006038:	4240      	negs	r0, r0
 800603a:	4313      	orrs	r3, r2
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	b005      	add	sp, #20
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	9a02      	ldr	r2, [sp, #8]
 8006044:	6921      	ldr	r1, [r4, #16]
 8006046:	f000 faac 	bl	80065a2 <memcpy>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	4a14      	ldr	r2, [pc, #80]	; (80060a0 <__ssputs_r+0xc0>)
 800604e:	401a      	ands	r2, r3
 8006050:	2380      	movs	r3, #128	; 0x80
 8006052:	4313      	orrs	r3, r2
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	6126      	str	r6, [r4, #16]
 800605a:	18f6      	adds	r6, r6, r3
 800605c:	6026      	str	r6, [r4, #0]
 800605e:	6165      	str	r5, [r4, #20]
 8006060:	9e01      	ldr	r6, [sp, #4]
 8006062:	1aed      	subs	r5, r5, r3
 8006064:	60a5      	str	r5, [r4, #8]
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	429e      	cmp	r6, r3
 800606a:	d900      	bls.n	800606e <__ssputs_r+0x8e>
 800606c:	9e01      	ldr	r6, [sp, #4]
 800606e:	0032      	movs	r2, r6
 8006070:	9903      	ldr	r1, [sp, #12]
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	f000 fa9e 	bl	80065b4 <memmove>
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	2000      	movs	r0, #0
 800607c:	1b9b      	subs	r3, r3, r6
 800607e:	60a3      	str	r3, [r4, #8]
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	199e      	adds	r6, r3, r6
 8006084:	6026      	str	r6, [r4, #0]
 8006086:	e7da      	b.n	800603e <__ssputs_r+0x5e>
 8006088:	002a      	movs	r2, r5
 800608a:	0038      	movs	r0, r7
 800608c:	f000 fb4e 	bl	800672c <_realloc_r>
 8006090:	1e06      	subs	r6, r0, #0
 8006092:	d1e0      	bne.n	8006056 <__ssputs_r+0x76>
 8006094:	6921      	ldr	r1, [r4, #16]
 8006096:	0038      	movs	r0, r7
 8006098:	f000 faa0 	bl	80065dc <_free_r>
 800609c:	e7c7      	b.n	800602e <__ssputs_r+0x4e>
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	fffffb7f 	.word	0xfffffb7f

080060a4 <_svfiprintf_r>:
 80060a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a6:	b0a1      	sub	sp, #132	; 0x84
 80060a8:	9003      	str	r0, [sp, #12]
 80060aa:	001d      	movs	r5, r3
 80060ac:	898b      	ldrh	r3, [r1, #12]
 80060ae:	000f      	movs	r7, r1
 80060b0:	0016      	movs	r6, r2
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	d511      	bpl.n	80060da <_svfiprintf_r+0x36>
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10e      	bne.n	80060da <_svfiprintf_r+0x36>
 80060bc:	2140      	movs	r1, #64	; 0x40
 80060be:	f000 fad7 	bl	8006670 <_malloc_r>
 80060c2:	6038      	str	r0, [r7, #0]
 80060c4:	6138      	str	r0, [r7, #16]
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d105      	bne.n	80060d6 <_svfiprintf_r+0x32>
 80060ca:	230c      	movs	r3, #12
 80060cc:	9a03      	ldr	r2, [sp, #12]
 80060ce:	3801      	subs	r0, #1
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	b021      	add	sp, #132	; 0x84
 80060d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	2300      	movs	r3, #0
 80060dc:	ac08      	add	r4, sp, #32
 80060de:	6163      	str	r3, [r4, #20]
 80060e0:	3320      	adds	r3, #32
 80060e2:	7663      	strb	r3, [r4, #25]
 80060e4:	3310      	adds	r3, #16
 80060e6:	76a3      	strb	r3, [r4, #26]
 80060e8:	9507      	str	r5, [sp, #28]
 80060ea:	0035      	movs	r5, r6
 80060ec:	782b      	ldrb	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <_svfiprintf_r+0x52>
 80060f2:	2b25      	cmp	r3, #37	; 0x25
 80060f4:	d146      	bne.n	8006184 <_svfiprintf_r+0xe0>
 80060f6:	1bab      	subs	r3, r5, r6
 80060f8:	9305      	str	r3, [sp, #20]
 80060fa:	d00c      	beq.n	8006116 <_svfiprintf_r+0x72>
 80060fc:	0032      	movs	r2, r6
 80060fe:	0039      	movs	r1, r7
 8006100:	9803      	ldr	r0, [sp, #12]
 8006102:	f7ff ff6d 	bl	8005fe0 <__ssputs_r>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d100      	bne.n	800610c <_svfiprintf_r+0x68>
 800610a:	e0ae      	b.n	800626a <_svfiprintf_r+0x1c6>
 800610c:	6962      	ldr	r2, [r4, #20]
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	4694      	mov	ip, r2
 8006112:	4463      	add	r3, ip
 8006114:	6163      	str	r3, [r4, #20]
 8006116:	782b      	ldrb	r3, [r5, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d100      	bne.n	800611e <_svfiprintf_r+0x7a>
 800611c:	e0a5      	b.n	800626a <_svfiprintf_r+0x1c6>
 800611e:	2201      	movs	r2, #1
 8006120:	2300      	movs	r3, #0
 8006122:	4252      	negs	r2, r2
 8006124:	6062      	str	r2, [r4, #4]
 8006126:	a904      	add	r1, sp, #16
 8006128:	3254      	adds	r2, #84	; 0x54
 800612a:	1852      	adds	r2, r2, r1
 800612c:	1c6e      	adds	r6, r5, #1
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	60e3      	str	r3, [r4, #12]
 8006132:	60a3      	str	r3, [r4, #8]
 8006134:	7013      	strb	r3, [r2, #0]
 8006136:	65a3      	str	r3, [r4, #88]	; 0x58
 8006138:	7831      	ldrb	r1, [r6, #0]
 800613a:	2205      	movs	r2, #5
 800613c:	4853      	ldr	r0, [pc, #332]	; (800628c <_svfiprintf_r+0x1e8>)
 800613e:	f000 fa25 	bl	800658c <memchr>
 8006142:	1c75      	adds	r5, r6, #1
 8006144:	2800      	cmp	r0, #0
 8006146:	d11f      	bne.n	8006188 <_svfiprintf_r+0xe4>
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	06d3      	lsls	r3, r2, #27
 800614c:	d504      	bpl.n	8006158 <_svfiprintf_r+0xb4>
 800614e:	2353      	movs	r3, #83	; 0x53
 8006150:	a904      	add	r1, sp, #16
 8006152:	185b      	adds	r3, r3, r1
 8006154:	2120      	movs	r1, #32
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	0713      	lsls	r3, r2, #28
 800615a:	d504      	bpl.n	8006166 <_svfiprintf_r+0xc2>
 800615c:	2353      	movs	r3, #83	; 0x53
 800615e:	a904      	add	r1, sp, #16
 8006160:	185b      	adds	r3, r3, r1
 8006162:	212b      	movs	r1, #43	; 0x2b
 8006164:	7019      	strb	r1, [r3, #0]
 8006166:	7833      	ldrb	r3, [r6, #0]
 8006168:	2b2a      	cmp	r3, #42	; 0x2a
 800616a:	d016      	beq.n	800619a <_svfiprintf_r+0xf6>
 800616c:	0035      	movs	r5, r6
 800616e:	2100      	movs	r1, #0
 8006170:	200a      	movs	r0, #10
 8006172:	68e3      	ldr	r3, [r4, #12]
 8006174:	782a      	ldrb	r2, [r5, #0]
 8006176:	1c6e      	adds	r6, r5, #1
 8006178:	3a30      	subs	r2, #48	; 0x30
 800617a:	2a09      	cmp	r2, #9
 800617c:	d94e      	bls.n	800621c <_svfiprintf_r+0x178>
 800617e:	2900      	cmp	r1, #0
 8006180:	d018      	beq.n	80061b4 <_svfiprintf_r+0x110>
 8006182:	e010      	b.n	80061a6 <_svfiprintf_r+0x102>
 8006184:	3501      	adds	r5, #1
 8006186:	e7b1      	b.n	80060ec <_svfiprintf_r+0x48>
 8006188:	4b40      	ldr	r3, [pc, #256]	; (800628c <_svfiprintf_r+0x1e8>)
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	1ac0      	subs	r0, r0, r3
 800618e:	2301      	movs	r3, #1
 8006190:	4083      	lsls	r3, r0
 8006192:	4313      	orrs	r3, r2
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	002e      	movs	r6, r5
 8006198:	e7ce      	b.n	8006138 <_svfiprintf_r+0x94>
 800619a:	9b07      	ldr	r3, [sp, #28]
 800619c:	1d19      	adds	r1, r3, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	9107      	str	r1, [sp, #28]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	db01      	blt.n	80061aa <_svfiprintf_r+0x106>
 80061a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a8:	e004      	b.n	80061b4 <_svfiprintf_r+0x110>
 80061aa:	425b      	negs	r3, r3
 80061ac:	60e3      	str	r3, [r4, #12]
 80061ae:	2302      	movs	r3, #2
 80061b0:	4313      	orrs	r3, r2
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	782b      	ldrb	r3, [r5, #0]
 80061b6:	2b2e      	cmp	r3, #46	; 0x2e
 80061b8:	d10a      	bne.n	80061d0 <_svfiprintf_r+0x12c>
 80061ba:	786b      	ldrb	r3, [r5, #1]
 80061bc:	2b2a      	cmp	r3, #42	; 0x2a
 80061be:	d135      	bne.n	800622c <_svfiprintf_r+0x188>
 80061c0:	9b07      	ldr	r3, [sp, #28]
 80061c2:	3502      	adds	r5, #2
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	9207      	str	r2, [sp, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	db2b      	blt.n	8006226 <_svfiprintf_r+0x182>
 80061ce:	9309      	str	r3, [sp, #36]	; 0x24
 80061d0:	4e2f      	ldr	r6, [pc, #188]	; (8006290 <_svfiprintf_r+0x1ec>)
 80061d2:	7829      	ldrb	r1, [r5, #0]
 80061d4:	2203      	movs	r2, #3
 80061d6:	0030      	movs	r0, r6
 80061d8:	f000 f9d8 	bl	800658c <memchr>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d006      	beq.n	80061ee <_svfiprintf_r+0x14a>
 80061e0:	2340      	movs	r3, #64	; 0x40
 80061e2:	1b80      	subs	r0, r0, r6
 80061e4:	4083      	lsls	r3, r0
 80061e6:	6822      	ldr	r2, [r4, #0]
 80061e8:	3501      	adds	r5, #1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	7829      	ldrb	r1, [r5, #0]
 80061f0:	2206      	movs	r2, #6
 80061f2:	4828      	ldr	r0, [pc, #160]	; (8006294 <_svfiprintf_r+0x1f0>)
 80061f4:	1c6e      	adds	r6, r5, #1
 80061f6:	7621      	strb	r1, [r4, #24]
 80061f8:	f000 f9c8 	bl	800658c <memchr>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d03c      	beq.n	800627a <_svfiprintf_r+0x1d6>
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <_svfiprintf_r+0x1f4>)
 8006202:	2b00      	cmp	r3, #0
 8006204:	d125      	bne.n	8006252 <_svfiprintf_r+0x1ae>
 8006206:	2207      	movs	r2, #7
 8006208:	9b07      	ldr	r3, [sp, #28]
 800620a:	3307      	adds	r3, #7
 800620c:	4393      	bics	r3, r2
 800620e:	3308      	adds	r3, #8
 8006210:	9307      	str	r3, [sp, #28]
 8006212:	6963      	ldr	r3, [r4, #20]
 8006214:	9a04      	ldr	r2, [sp, #16]
 8006216:	189b      	adds	r3, r3, r2
 8006218:	6163      	str	r3, [r4, #20]
 800621a:	e766      	b.n	80060ea <_svfiprintf_r+0x46>
 800621c:	4343      	muls	r3, r0
 800621e:	2101      	movs	r1, #1
 8006220:	189b      	adds	r3, r3, r2
 8006222:	0035      	movs	r5, r6
 8006224:	e7a6      	b.n	8006174 <_svfiprintf_r+0xd0>
 8006226:	2301      	movs	r3, #1
 8006228:	425b      	negs	r3, r3
 800622a:	e7d0      	b.n	80061ce <_svfiprintf_r+0x12a>
 800622c:	2300      	movs	r3, #0
 800622e:	200a      	movs	r0, #10
 8006230:	001a      	movs	r2, r3
 8006232:	3501      	adds	r5, #1
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	7829      	ldrb	r1, [r5, #0]
 8006238:	1c6e      	adds	r6, r5, #1
 800623a:	3930      	subs	r1, #48	; 0x30
 800623c:	2909      	cmp	r1, #9
 800623e:	d903      	bls.n	8006248 <_svfiprintf_r+0x1a4>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0c5      	beq.n	80061d0 <_svfiprintf_r+0x12c>
 8006244:	9209      	str	r2, [sp, #36]	; 0x24
 8006246:	e7c3      	b.n	80061d0 <_svfiprintf_r+0x12c>
 8006248:	4342      	muls	r2, r0
 800624a:	2301      	movs	r3, #1
 800624c:	1852      	adds	r2, r2, r1
 800624e:	0035      	movs	r5, r6
 8006250:	e7f1      	b.n	8006236 <_svfiprintf_r+0x192>
 8006252:	ab07      	add	r3, sp, #28
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	003a      	movs	r2, r7
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <_svfiprintf_r+0x1f8>)
 800625a:	0021      	movs	r1, r4
 800625c:	9803      	ldr	r0, [sp, #12]
 800625e:	e000      	b.n	8006262 <_svfiprintf_r+0x1be>
 8006260:	bf00      	nop
 8006262:	9004      	str	r0, [sp, #16]
 8006264:	9b04      	ldr	r3, [sp, #16]
 8006266:	3301      	adds	r3, #1
 8006268:	d1d3      	bne.n	8006212 <_svfiprintf_r+0x16e>
 800626a:	89bb      	ldrh	r3, [r7, #12]
 800626c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800626e:	065b      	lsls	r3, r3, #25
 8006270:	d400      	bmi.n	8006274 <_svfiprintf_r+0x1d0>
 8006272:	e72e      	b.n	80060d2 <_svfiprintf_r+0x2e>
 8006274:	2001      	movs	r0, #1
 8006276:	4240      	negs	r0, r0
 8006278:	e72b      	b.n	80060d2 <_svfiprintf_r+0x2e>
 800627a:	ab07      	add	r3, sp, #28
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	003a      	movs	r2, r7
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <_svfiprintf_r+0x1f8>)
 8006282:	0021      	movs	r1, r4
 8006284:	9803      	ldr	r0, [sp, #12]
 8006286:	f000 f879 	bl	800637c <_printf_i>
 800628a:	e7ea      	b.n	8006262 <_svfiprintf_r+0x1be>
 800628c:	0800693c 	.word	0x0800693c
 8006290:	08006942 	.word	0x08006942
 8006294:	08006946 	.word	0x08006946
 8006298:	00000000 	.word	0x00000000
 800629c:	08005fe1 	.word	0x08005fe1

080062a0 <_printf_common>:
 80062a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062a2:	0015      	movs	r5, r2
 80062a4:	9301      	str	r3, [sp, #4]
 80062a6:	688a      	ldr	r2, [r1, #8]
 80062a8:	690b      	ldr	r3, [r1, #16]
 80062aa:	9000      	str	r0, [sp, #0]
 80062ac:	000c      	movs	r4, r1
 80062ae:	4293      	cmp	r3, r2
 80062b0:	da00      	bge.n	80062b4 <_printf_common+0x14>
 80062b2:	0013      	movs	r3, r2
 80062b4:	0022      	movs	r2, r4
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	3243      	adds	r2, #67	; 0x43
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	2a00      	cmp	r2, #0
 80062be:	d001      	beq.n	80062c4 <_printf_common+0x24>
 80062c0:	3301      	adds	r3, #1
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	069b      	lsls	r3, r3, #26
 80062c8:	d502      	bpl.n	80062d0 <_printf_common+0x30>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	3302      	adds	r3, #2
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	2706      	movs	r7, #6
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	401f      	ands	r7, r3
 80062d6:	d027      	beq.n	8006328 <_printf_common+0x88>
 80062d8:	0023      	movs	r3, r4
 80062da:	3343      	adds	r3, #67	; 0x43
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	1e5a      	subs	r2, r3, #1
 80062e0:	4193      	sbcs	r3, r2
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	0692      	lsls	r2, r2, #26
 80062e6:	d430      	bmi.n	800634a <_printf_common+0xaa>
 80062e8:	0022      	movs	r2, r4
 80062ea:	9901      	ldr	r1, [sp, #4]
 80062ec:	3243      	adds	r2, #67	; 0x43
 80062ee:	9800      	ldr	r0, [sp, #0]
 80062f0:	9e08      	ldr	r6, [sp, #32]
 80062f2:	47b0      	blx	r6
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d025      	beq.n	8006344 <_printf_common+0xa4>
 80062f8:	2306      	movs	r3, #6
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	682a      	ldr	r2, [r5, #0]
 80062fe:	68e1      	ldr	r1, [r4, #12]
 8006300:	4003      	ands	r3, r0
 8006302:	2500      	movs	r5, #0
 8006304:	2b04      	cmp	r3, #4
 8006306:	d103      	bne.n	8006310 <_printf_common+0x70>
 8006308:	1a8d      	subs	r5, r1, r2
 800630a:	43eb      	mvns	r3, r5
 800630c:	17db      	asrs	r3, r3, #31
 800630e:	401d      	ands	r5, r3
 8006310:	68a3      	ldr	r3, [r4, #8]
 8006312:	6922      	ldr	r2, [r4, #16]
 8006314:	4293      	cmp	r3, r2
 8006316:	dd01      	ble.n	800631c <_printf_common+0x7c>
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	18ed      	adds	r5, r5, r3
 800631c:	2700      	movs	r7, #0
 800631e:	42bd      	cmp	r5, r7
 8006320:	d120      	bne.n	8006364 <_printf_common+0xc4>
 8006322:	2000      	movs	r0, #0
 8006324:	e010      	b.n	8006348 <_printf_common+0xa8>
 8006326:	3701      	adds	r7, #1
 8006328:	68e3      	ldr	r3, [r4, #12]
 800632a:	682a      	ldr	r2, [r5, #0]
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	42bb      	cmp	r3, r7
 8006330:	ddd2      	ble.n	80062d8 <_printf_common+0x38>
 8006332:	0022      	movs	r2, r4
 8006334:	2301      	movs	r3, #1
 8006336:	3219      	adds	r2, #25
 8006338:	9901      	ldr	r1, [sp, #4]
 800633a:	9800      	ldr	r0, [sp, #0]
 800633c:	9e08      	ldr	r6, [sp, #32]
 800633e:	47b0      	blx	r6
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d1f0      	bne.n	8006326 <_printf_common+0x86>
 8006344:	2001      	movs	r0, #1
 8006346:	4240      	negs	r0, r0
 8006348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800634a:	2030      	movs	r0, #48	; 0x30
 800634c:	18e1      	adds	r1, r4, r3
 800634e:	3143      	adds	r1, #67	; 0x43
 8006350:	7008      	strb	r0, [r1, #0]
 8006352:	0021      	movs	r1, r4
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	3145      	adds	r1, #69	; 0x45
 8006358:	7809      	ldrb	r1, [r1, #0]
 800635a:	18a2      	adds	r2, r4, r2
 800635c:	3243      	adds	r2, #67	; 0x43
 800635e:	3302      	adds	r3, #2
 8006360:	7011      	strb	r1, [r2, #0]
 8006362:	e7c1      	b.n	80062e8 <_printf_common+0x48>
 8006364:	0022      	movs	r2, r4
 8006366:	2301      	movs	r3, #1
 8006368:	321a      	adds	r2, #26
 800636a:	9901      	ldr	r1, [sp, #4]
 800636c:	9800      	ldr	r0, [sp, #0]
 800636e:	9e08      	ldr	r6, [sp, #32]
 8006370:	47b0      	blx	r6
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d0e6      	beq.n	8006344 <_printf_common+0xa4>
 8006376:	3701      	adds	r7, #1
 8006378:	e7d1      	b.n	800631e <_printf_common+0x7e>
	...

0800637c <_printf_i>:
 800637c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	9204      	str	r2, [sp, #16]
 8006382:	000a      	movs	r2, r1
 8006384:	3243      	adds	r2, #67	; 0x43
 8006386:	9305      	str	r3, [sp, #20]
 8006388:	9003      	str	r0, [sp, #12]
 800638a:	9202      	str	r2, [sp, #8]
 800638c:	7e0a      	ldrb	r2, [r1, #24]
 800638e:	000c      	movs	r4, r1
 8006390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006392:	2a6e      	cmp	r2, #110	; 0x6e
 8006394:	d100      	bne.n	8006398 <_printf_i+0x1c>
 8006396:	e086      	b.n	80064a6 <_printf_i+0x12a>
 8006398:	d81f      	bhi.n	80063da <_printf_i+0x5e>
 800639a:	2a63      	cmp	r2, #99	; 0x63
 800639c:	d033      	beq.n	8006406 <_printf_i+0x8a>
 800639e:	d808      	bhi.n	80063b2 <_printf_i+0x36>
 80063a0:	2a00      	cmp	r2, #0
 80063a2:	d100      	bne.n	80063a6 <_printf_i+0x2a>
 80063a4:	e08c      	b.n	80064c0 <_printf_i+0x144>
 80063a6:	2a58      	cmp	r2, #88	; 0x58
 80063a8:	d04d      	beq.n	8006446 <_printf_i+0xca>
 80063aa:	0025      	movs	r5, r4
 80063ac:	3542      	adds	r5, #66	; 0x42
 80063ae:	702a      	strb	r2, [r5, #0]
 80063b0:	e030      	b.n	8006414 <_printf_i+0x98>
 80063b2:	2a64      	cmp	r2, #100	; 0x64
 80063b4:	d001      	beq.n	80063ba <_printf_i+0x3e>
 80063b6:	2a69      	cmp	r2, #105	; 0x69
 80063b8:	d1f7      	bne.n	80063aa <_printf_i+0x2e>
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	6825      	ldr	r5, [r4, #0]
 80063be:	1d0a      	adds	r2, r1, #4
 80063c0:	0628      	lsls	r0, r5, #24
 80063c2:	d529      	bpl.n	8006418 <_printf_i+0x9c>
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	2800      	cmp	r0, #0
 80063ca:	da03      	bge.n	80063d4 <_printf_i+0x58>
 80063cc:	232d      	movs	r3, #45	; 0x2d
 80063ce:	9a02      	ldr	r2, [sp, #8]
 80063d0:	4240      	negs	r0, r0
 80063d2:	7013      	strb	r3, [r2, #0]
 80063d4:	4e6b      	ldr	r6, [pc, #428]	; (8006584 <_printf_i+0x208>)
 80063d6:	270a      	movs	r7, #10
 80063d8:	e04f      	b.n	800647a <_printf_i+0xfe>
 80063da:	2a73      	cmp	r2, #115	; 0x73
 80063dc:	d074      	beq.n	80064c8 <_printf_i+0x14c>
 80063de:	d808      	bhi.n	80063f2 <_printf_i+0x76>
 80063e0:	2a6f      	cmp	r2, #111	; 0x6f
 80063e2:	d01f      	beq.n	8006424 <_printf_i+0xa8>
 80063e4:	2a70      	cmp	r2, #112	; 0x70
 80063e6:	d1e0      	bne.n	80063aa <_printf_i+0x2e>
 80063e8:	2220      	movs	r2, #32
 80063ea:	6809      	ldr	r1, [r1, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	6022      	str	r2, [r4, #0]
 80063f0:	e003      	b.n	80063fa <_printf_i+0x7e>
 80063f2:	2a75      	cmp	r2, #117	; 0x75
 80063f4:	d016      	beq.n	8006424 <_printf_i+0xa8>
 80063f6:	2a78      	cmp	r2, #120	; 0x78
 80063f8:	d1d7      	bne.n	80063aa <_printf_i+0x2e>
 80063fa:	0022      	movs	r2, r4
 80063fc:	2178      	movs	r1, #120	; 0x78
 80063fe:	3245      	adds	r2, #69	; 0x45
 8006400:	7011      	strb	r1, [r2, #0]
 8006402:	4e61      	ldr	r6, [pc, #388]	; (8006588 <_printf_i+0x20c>)
 8006404:	e022      	b.n	800644c <_printf_i+0xd0>
 8006406:	0025      	movs	r5, r4
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	3542      	adds	r5, #66	; 0x42
 800640c:	1d11      	adds	r1, r2, #4
 800640e:	6019      	str	r1, [r3, #0]
 8006410:	6813      	ldr	r3, [r2, #0]
 8006412:	702b      	strb	r3, [r5, #0]
 8006414:	2301      	movs	r3, #1
 8006416:	e065      	b.n	80064e4 <_printf_i+0x168>
 8006418:	6808      	ldr	r0, [r1, #0]
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	0669      	lsls	r1, r5, #25
 800641e:	d5d3      	bpl.n	80063c8 <_printf_i+0x4c>
 8006420:	b200      	sxth	r0, r0
 8006422:	e7d1      	b.n	80063c8 <_printf_i+0x4c>
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	6825      	ldr	r5, [r4, #0]
 8006428:	1d08      	adds	r0, r1, #4
 800642a:	6018      	str	r0, [r3, #0]
 800642c:	6808      	ldr	r0, [r1, #0]
 800642e:	062e      	lsls	r6, r5, #24
 8006430:	d505      	bpl.n	800643e <_printf_i+0xc2>
 8006432:	4e54      	ldr	r6, [pc, #336]	; (8006584 <_printf_i+0x208>)
 8006434:	2708      	movs	r7, #8
 8006436:	2a6f      	cmp	r2, #111	; 0x6f
 8006438:	d01b      	beq.n	8006472 <_printf_i+0xf6>
 800643a:	270a      	movs	r7, #10
 800643c:	e019      	b.n	8006472 <_printf_i+0xf6>
 800643e:	066d      	lsls	r5, r5, #25
 8006440:	d5f7      	bpl.n	8006432 <_printf_i+0xb6>
 8006442:	b280      	uxth	r0, r0
 8006444:	e7f5      	b.n	8006432 <_printf_i+0xb6>
 8006446:	3145      	adds	r1, #69	; 0x45
 8006448:	4e4e      	ldr	r6, [pc, #312]	; (8006584 <_printf_i+0x208>)
 800644a:	700a      	strb	r2, [r1, #0]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	1d01      	adds	r1, r0, #4
 8006452:	6800      	ldr	r0, [r0, #0]
 8006454:	6019      	str	r1, [r3, #0]
 8006456:	0615      	lsls	r5, r2, #24
 8006458:	d521      	bpl.n	800649e <_printf_i+0x122>
 800645a:	07d3      	lsls	r3, r2, #31
 800645c:	d502      	bpl.n	8006464 <_printf_i+0xe8>
 800645e:	2320      	movs	r3, #32
 8006460:	431a      	orrs	r2, r3
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	2710      	movs	r7, #16
 8006466:	2800      	cmp	r0, #0
 8006468:	d103      	bne.n	8006472 <_printf_i+0xf6>
 800646a:	2320      	movs	r3, #32
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	439a      	bics	r2, r3
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	0023      	movs	r3, r4
 8006474:	2200      	movs	r2, #0
 8006476:	3343      	adds	r3, #67	; 0x43
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	db58      	blt.n	8006534 <_printf_i+0x1b8>
 8006482:	2204      	movs	r2, #4
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	4391      	bics	r1, r2
 8006488:	6021      	str	r1, [r4, #0]
 800648a:	2800      	cmp	r0, #0
 800648c:	d154      	bne.n	8006538 <_printf_i+0x1bc>
 800648e:	9d02      	ldr	r5, [sp, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d05a      	beq.n	800654a <_printf_i+0x1ce>
 8006494:	0025      	movs	r5, r4
 8006496:	7833      	ldrb	r3, [r6, #0]
 8006498:	3542      	adds	r5, #66	; 0x42
 800649a:	702b      	strb	r3, [r5, #0]
 800649c:	e055      	b.n	800654a <_printf_i+0x1ce>
 800649e:	0655      	lsls	r5, r2, #25
 80064a0:	d5db      	bpl.n	800645a <_printf_i+0xde>
 80064a2:	b280      	uxth	r0, r0
 80064a4:	e7d9      	b.n	800645a <_printf_i+0xde>
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	680d      	ldr	r5, [r1, #0]
 80064aa:	1d10      	adds	r0, r2, #4
 80064ac:	6949      	ldr	r1, [r1, #20]
 80064ae:	6018      	str	r0, [r3, #0]
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	062e      	lsls	r6, r5, #24
 80064b4:	d501      	bpl.n	80064ba <_printf_i+0x13e>
 80064b6:	6019      	str	r1, [r3, #0]
 80064b8:	e002      	b.n	80064c0 <_printf_i+0x144>
 80064ba:	066d      	lsls	r5, r5, #25
 80064bc:	d5fb      	bpl.n	80064b6 <_printf_i+0x13a>
 80064be:	8019      	strh	r1, [r3, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	9d02      	ldr	r5, [sp, #8]
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	e04f      	b.n	8006568 <_printf_i+0x1ec>
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	1d11      	adds	r1, r2, #4
 80064cc:	6019      	str	r1, [r3, #0]
 80064ce:	6815      	ldr	r5, [r2, #0]
 80064d0:	2100      	movs	r1, #0
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	0028      	movs	r0, r5
 80064d6:	f000 f859 	bl	800658c <memchr>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d001      	beq.n	80064e2 <_printf_i+0x166>
 80064de:	1b40      	subs	r0, r0, r5
 80064e0:	6060      	str	r0, [r4, #4]
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9a02      	ldr	r2, [sp, #8]
 80064ea:	7013      	strb	r3, [r2, #0]
 80064ec:	e03c      	b.n	8006568 <_printf_i+0x1ec>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	002a      	movs	r2, r5
 80064f2:	9904      	ldr	r1, [sp, #16]
 80064f4:	9803      	ldr	r0, [sp, #12]
 80064f6:	9d05      	ldr	r5, [sp, #20]
 80064f8:	47a8      	blx	r5
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d03e      	beq.n	800657c <_printf_i+0x200>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	079b      	lsls	r3, r3, #30
 8006502:	d415      	bmi.n	8006530 <_printf_i+0x1b4>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	68e0      	ldr	r0, [r4, #12]
 8006508:	4298      	cmp	r0, r3
 800650a:	da39      	bge.n	8006580 <_printf_i+0x204>
 800650c:	0018      	movs	r0, r3
 800650e:	e037      	b.n	8006580 <_printf_i+0x204>
 8006510:	0022      	movs	r2, r4
 8006512:	2301      	movs	r3, #1
 8006514:	3219      	adds	r2, #25
 8006516:	9904      	ldr	r1, [sp, #16]
 8006518:	9803      	ldr	r0, [sp, #12]
 800651a:	9e05      	ldr	r6, [sp, #20]
 800651c:	47b0      	blx	r6
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d02c      	beq.n	800657c <_printf_i+0x200>
 8006522:	3501      	adds	r5, #1
 8006524:	68e3      	ldr	r3, [r4, #12]
 8006526:	9a07      	ldr	r2, [sp, #28]
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	42ab      	cmp	r3, r5
 800652c:	dcf0      	bgt.n	8006510 <_printf_i+0x194>
 800652e:	e7e9      	b.n	8006504 <_printf_i+0x188>
 8006530:	2500      	movs	r5, #0
 8006532:	e7f7      	b.n	8006524 <_printf_i+0x1a8>
 8006534:	2800      	cmp	r0, #0
 8006536:	d0ad      	beq.n	8006494 <_printf_i+0x118>
 8006538:	9d02      	ldr	r5, [sp, #8]
 800653a:	0039      	movs	r1, r7
 800653c:	f7f9 fe68 	bl	8000210 <__aeabi_uidivmod>
 8006540:	5c73      	ldrb	r3, [r6, r1]
 8006542:	3d01      	subs	r5, #1
 8006544:	702b      	strb	r3, [r5, #0]
 8006546:	2800      	cmp	r0, #0
 8006548:	d1f7      	bne.n	800653a <_printf_i+0x1be>
 800654a:	2f08      	cmp	r7, #8
 800654c:	d109      	bne.n	8006562 <_printf_i+0x1e6>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	07db      	lsls	r3, r3, #31
 8006552:	d506      	bpl.n	8006562 <_printf_i+0x1e6>
 8006554:	6863      	ldr	r3, [r4, #4]
 8006556:	6922      	ldr	r2, [r4, #16]
 8006558:	4293      	cmp	r3, r2
 800655a:	dc02      	bgt.n	8006562 <_printf_i+0x1e6>
 800655c:	2330      	movs	r3, #48	; 0x30
 800655e:	3d01      	subs	r5, #1
 8006560:	702b      	strb	r3, [r5, #0]
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	1b5b      	subs	r3, r3, r5
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	9b05      	ldr	r3, [sp, #20]
 800656a:	aa07      	add	r2, sp, #28
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	0021      	movs	r1, r4
 8006570:	9b04      	ldr	r3, [sp, #16]
 8006572:	9803      	ldr	r0, [sp, #12]
 8006574:	f7ff fe94 	bl	80062a0 <_printf_common>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d1b8      	bne.n	80064ee <_printf_i+0x172>
 800657c:	2001      	movs	r0, #1
 800657e:	4240      	negs	r0, r0
 8006580:	b009      	add	sp, #36	; 0x24
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	0800694d 	.word	0x0800694d
 8006588:	0800695e 	.word	0x0800695e

0800658c <memchr>:
 800658c:	b2c9      	uxtb	r1, r1
 800658e:	1882      	adds	r2, r0, r2
 8006590:	4290      	cmp	r0, r2
 8006592:	d101      	bne.n	8006598 <memchr+0xc>
 8006594:	2000      	movs	r0, #0
 8006596:	4770      	bx	lr
 8006598:	7803      	ldrb	r3, [r0, #0]
 800659a:	428b      	cmp	r3, r1
 800659c:	d0fb      	beq.n	8006596 <memchr+0xa>
 800659e:	3001      	adds	r0, #1
 80065a0:	e7f6      	b.n	8006590 <memchr+0x4>

080065a2 <memcpy>:
 80065a2:	2300      	movs	r3, #0
 80065a4:	b510      	push	{r4, lr}
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d100      	bne.n	80065ac <memcpy+0xa>
 80065aa:	bd10      	pop	{r4, pc}
 80065ac:	5ccc      	ldrb	r4, [r1, r3]
 80065ae:	54c4      	strb	r4, [r0, r3]
 80065b0:	3301      	adds	r3, #1
 80065b2:	e7f8      	b.n	80065a6 <memcpy+0x4>

080065b4 <memmove>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4288      	cmp	r0, r1
 80065b8:	d902      	bls.n	80065c0 <memmove+0xc>
 80065ba:	188b      	adds	r3, r1, r2
 80065bc:	4298      	cmp	r0, r3
 80065be:	d303      	bcc.n	80065c8 <memmove+0x14>
 80065c0:	2300      	movs	r3, #0
 80065c2:	e007      	b.n	80065d4 <memmove+0x20>
 80065c4:	5c8b      	ldrb	r3, [r1, r2]
 80065c6:	5483      	strb	r3, [r0, r2]
 80065c8:	3a01      	subs	r2, #1
 80065ca:	d2fb      	bcs.n	80065c4 <memmove+0x10>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	5ccc      	ldrb	r4, [r1, r3]
 80065d0:	54c4      	strb	r4, [r0, r3]
 80065d2:	3301      	adds	r3, #1
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d1fa      	bne.n	80065ce <memmove+0x1a>
 80065d8:	e7f8      	b.n	80065cc <memmove+0x18>
	...

080065dc <_free_r>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	0005      	movs	r5, r0
 80065e0:	2900      	cmp	r1, #0
 80065e2:	d010      	beq.n	8006606 <_free_r+0x2a>
 80065e4:	1f0c      	subs	r4, r1, #4
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	da00      	bge.n	80065ee <_free_r+0x12>
 80065ec:	18e4      	adds	r4, r4, r3
 80065ee:	0028      	movs	r0, r5
 80065f0:	f000 f8d4 	bl	800679c <__malloc_lock>
 80065f4:	4a1d      	ldr	r2, [pc, #116]	; (800666c <_free_r+0x90>)
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <_free_r+0x2c>
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	6014      	str	r4, [r2, #0]
 8006600:	0028      	movs	r0, r5
 8006602:	f000 f8cc 	bl	800679e <__malloc_unlock>
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	42a3      	cmp	r3, r4
 800660a:	d909      	bls.n	8006620 <_free_r+0x44>
 800660c:	6821      	ldr	r1, [r4, #0]
 800660e:	1860      	adds	r0, r4, r1
 8006610:	4283      	cmp	r3, r0
 8006612:	d1f3      	bne.n	80065fc <_free_r+0x20>
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	1841      	adds	r1, r0, r1
 800661a:	6021      	str	r1, [r4, #0]
 800661c:	e7ee      	b.n	80065fc <_free_r+0x20>
 800661e:	0013      	movs	r3, r2
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	2a00      	cmp	r2, #0
 8006624:	d001      	beq.n	800662a <_free_r+0x4e>
 8006626:	42a2      	cmp	r2, r4
 8006628:	d9f9      	bls.n	800661e <_free_r+0x42>
 800662a:	6819      	ldr	r1, [r3, #0]
 800662c:	1858      	adds	r0, r3, r1
 800662e:	42a0      	cmp	r0, r4
 8006630:	d10b      	bne.n	800664a <_free_r+0x6e>
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	1809      	adds	r1, r1, r0
 8006636:	1858      	adds	r0, r3, r1
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	4282      	cmp	r2, r0
 800663c:	d1e0      	bne.n	8006600 <_free_r+0x24>
 800663e:	6810      	ldr	r0, [r2, #0]
 8006640:	6852      	ldr	r2, [r2, #4]
 8006642:	1841      	adds	r1, r0, r1
 8006644:	6019      	str	r1, [r3, #0]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	e7da      	b.n	8006600 <_free_r+0x24>
 800664a:	42a0      	cmp	r0, r4
 800664c:	d902      	bls.n	8006654 <_free_r+0x78>
 800664e:	230c      	movs	r3, #12
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	e7d5      	b.n	8006600 <_free_r+0x24>
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	1860      	adds	r0, r4, r1
 8006658:	4282      	cmp	r2, r0
 800665a:	d103      	bne.n	8006664 <_free_r+0x88>
 800665c:	6810      	ldr	r0, [r2, #0]
 800665e:	6852      	ldr	r2, [r2, #4]
 8006660:	1841      	adds	r1, r0, r1
 8006662:	6021      	str	r1, [r4, #0]
 8006664:	6062      	str	r2, [r4, #4]
 8006666:	605c      	str	r4, [r3, #4]
 8006668:	e7ca      	b.n	8006600 <_free_r+0x24>
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	200000b8 	.word	0x200000b8

08006670 <_malloc_r>:
 8006670:	2303      	movs	r3, #3
 8006672:	b570      	push	{r4, r5, r6, lr}
 8006674:	1ccd      	adds	r5, r1, #3
 8006676:	439d      	bics	r5, r3
 8006678:	3508      	adds	r5, #8
 800667a:	0006      	movs	r6, r0
 800667c:	2d0c      	cmp	r5, #12
 800667e:	d21e      	bcs.n	80066be <_malloc_r+0x4e>
 8006680:	250c      	movs	r5, #12
 8006682:	42a9      	cmp	r1, r5
 8006684:	d81d      	bhi.n	80066c2 <_malloc_r+0x52>
 8006686:	0030      	movs	r0, r6
 8006688:	f000 f888 	bl	800679c <__malloc_lock>
 800668c:	4a25      	ldr	r2, [pc, #148]	; (8006724 <_malloc_r+0xb4>)
 800668e:	6814      	ldr	r4, [r2, #0]
 8006690:	0021      	movs	r1, r4
 8006692:	2900      	cmp	r1, #0
 8006694:	d119      	bne.n	80066ca <_malloc_r+0x5a>
 8006696:	4c24      	ldr	r4, [pc, #144]	; (8006728 <_malloc_r+0xb8>)
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <_malloc_r+0x36>
 800669e:	0030      	movs	r0, r6
 80066a0:	f000 f86a 	bl	8006778 <_sbrk_r>
 80066a4:	6020      	str	r0, [r4, #0]
 80066a6:	0029      	movs	r1, r5
 80066a8:	0030      	movs	r0, r6
 80066aa:	f000 f865 	bl	8006778 <_sbrk_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d12b      	bne.n	800670a <_malloc_r+0x9a>
 80066b2:	230c      	movs	r3, #12
 80066b4:	0030      	movs	r0, r6
 80066b6:	6033      	str	r3, [r6, #0]
 80066b8:	f000 f871 	bl	800679e <__malloc_unlock>
 80066bc:	e003      	b.n	80066c6 <_malloc_r+0x56>
 80066be:	2d00      	cmp	r5, #0
 80066c0:	dadf      	bge.n	8006682 <_malloc_r+0x12>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	2000      	movs	r0, #0
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	680b      	ldr	r3, [r1, #0]
 80066cc:	1b5b      	subs	r3, r3, r5
 80066ce:	d419      	bmi.n	8006704 <_malloc_r+0x94>
 80066d0:	2b0b      	cmp	r3, #11
 80066d2:	d903      	bls.n	80066dc <_malloc_r+0x6c>
 80066d4:	600b      	str	r3, [r1, #0]
 80066d6:	18cc      	adds	r4, r1, r3
 80066d8:	6025      	str	r5, [r4, #0]
 80066da:	e003      	b.n	80066e4 <_malloc_r+0x74>
 80066dc:	684b      	ldr	r3, [r1, #4]
 80066de:	428c      	cmp	r4, r1
 80066e0:	d10d      	bne.n	80066fe <_malloc_r+0x8e>
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	0030      	movs	r0, r6
 80066e6:	f000 f85a 	bl	800679e <__malloc_unlock>
 80066ea:	0020      	movs	r0, r4
 80066ec:	2207      	movs	r2, #7
 80066ee:	300b      	adds	r0, #11
 80066f0:	1d23      	adds	r3, r4, #4
 80066f2:	4390      	bics	r0, r2
 80066f4:	1ac3      	subs	r3, r0, r3
 80066f6:	d0e7      	beq.n	80066c8 <_malloc_r+0x58>
 80066f8:	425a      	negs	r2, r3
 80066fa:	50e2      	str	r2, [r4, r3]
 80066fc:	e7e4      	b.n	80066c8 <_malloc_r+0x58>
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	000c      	movs	r4, r1
 8006702:	e7ef      	b.n	80066e4 <_malloc_r+0x74>
 8006704:	000c      	movs	r4, r1
 8006706:	6849      	ldr	r1, [r1, #4]
 8006708:	e7c3      	b.n	8006692 <_malloc_r+0x22>
 800670a:	2303      	movs	r3, #3
 800670c:	1cc4      	adds	r4, r0, #3
 800670e:	439c      	bics	r4, r3
 8006710:	42a0      	cmp	r0, r4
 8006712:	d0e1      	beq.n	80066d8 <_malloc_r+0x68>
 8006714:	1a21      	subs	r1, r4, r0
 8006716:	0030      	movs	r0, r6
 8006718:	f000 f82e 	bl	8006778 <_sbrk_r>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d1db      	bne.n	80066d8 <_malloc_r+0x68>
 8006720:	e7c7      	b.n	80066b2 <_malloc_r+0x42>
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	200000b8 	.word	0x200000b8
 8006728:	200000bc 	.word	0x200000bc

0800672c <_realloc_r>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	0007      	movs	r7, r0
 8006730:	000d      	movs	r5, r1
 8006732:	0016      	movs	r6, r2
 8006734:	2900      	cmp	r1, #0
 8006736:	d105      	bne.n	8006744 <_realloc_r+0x18>
 8006738:	0011      	movs	r1, r2
 800673a:	f7ff ff99 	bl	8006670 <_malloc_r>
 800673e:	0004      	movs	r4, r0
 8006740:	0020      	movs	r0, r4
 8006742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006744:	2a00      	cmp	r2, #0
 8006746:	d103      	bne.n	8006750 <_realloc_r+0x24>
 8006748:	f7ff ff48 	bl	80065dc <_free_r>
 800674c:	0034      	movs	r4, r6
 800674e:	e7f7      	b.n	8006740 <_realloc_r+0x14>
 8006750:	f000 f826 	bl	80067a0 <_malloc_usable_size_r>
 8006754:	002c      	movs	r4, r5
 8006756:	42b0      	cmp	r0, r6
 8006758:	d2f2      	bcs.n	8006740 <_realloc_r+0x14>
 800675a:	0031      	movs	r1, r6
 800675c:	0038      	movs	r0, r7
 800675e:	f7ff ff87 	bl	8006670 <_malloc_r>
 8006762:	1e04      	subs	r4, r0, #0
 8006764:	d0ec      	beq.n	8006740 <_realloc_r+0x14>
 8006766:	0029      	movs	r1, r5
 8006768:	0032      	movs	r2, r6
 800676a:	f7ff ff1a 	bl	80065a2 <memcpy>
 800676e:	0029      	movs	r1, r5
 8006770:	0038      	movs	r0, r7
 8006772:	f7ff ff33 	bl	80065dc <_free_r>
 8006776:	e7e3      	b.n	8006740 <_realloc_r+0x14>

08006778 <_sbrk_r>:
 8006778:	2300      	movs	r3, #0
 800677a:	b570      	push	{r4, r5, r6, lr}
 800677c:	4c06      	ldr	r4, [pc, #24]	; (8006798 <_sbrk_r+0x20>)
 800677e:	0005      	movs	r5, r0
 8006780:	0008      	movs	r0, r1
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	f7fb fc12 	bl	8001fac <_sbrk>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d103      	bne.n	8006794 <_sbrk_r+0x1c>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d000      	beq.n	8006794 <_sbrk_r+0x1c>
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	20000218 	.word	0x20000218

0800679c <__malloc_lock>:
 800679c:	4770      	bx	lr

0800679e <__malloc_unlock>:
 800679e:	4770      	bx	lr

080067a0 <_malloc_usable_size_r>:
 80067a0:	1f0b      	subs	r3, r1, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1f18      	subs	r0, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da01      	bge.n	80067ae <_malloc_usable_size_r+0xe>
 80067aa:	580b      	ldr	r3, [r1, r0]
 80067ac:	18c0      	adds	r0, r0, r3
 80067ae:	4770      	bx	lr

080067b0 <_init>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr

080067bc <_fini>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr
