
s7_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa0  08001fa0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa0  08001fa0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa0  08001fa0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002018  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002018  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055e3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001250  00000000  00000000  0002567c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000608  00000000  00000000  000268d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  00026ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c2b  00000000  00000000  00027468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005293  00000000  00000000  0003d093  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007daf4  00000000  00000000  00042326  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfe1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a48  00000000  00000000  000bfe98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f1c 	.word	0x08001f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001f1c 	.word	0x08001f1c

0800014c <main>:


static void MX_USART2_UART_Init(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0


  HAL_Init();
 8000150:	f000 f9e0 	bl	8000514 <HAL_Init>

  SystemClock_Config();
 8000154:	f000 f82c 	bl	80001b0 <SystemClock_Config>

  MX_GPIO_Init();
 8000158:	f000 f894 	bl	8000284 <MX_GPIO_Init>

  MX_USART2_UART_Init();
 800015c:	f000 f868 	bl	8000230 <MX_USART2_UART_Init>

  while (1)
  {
	  sprintf(buffer, "ADC=%04d",  X);
 8000160:	4b0e      	ldr	r3, [pc, #56]	; (800019c <main+0x50>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	461a      	mov	r2, r3
 8000166:	490e      	ldr	r1, [pc, #56]	; (80001a0 <main+0x54>)
 8000168:	480e      	ldr	r0, [pc, #56]	; (80001a4 <main+0x58>)
 800016a:	f001 fac5 	bl	80016f8 <siprintf>
	  //sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
     HAL_UART_Transmit(&huart2, buffer, 16, 1000);
 800016e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000172:	2210      	movs	r2, #16
 8000174:	490b      	ldr	r1, [pc, #44]	; (80001a4 <main+0x58>)
 8000176:	480c      	ldr	r0, [pc, #48]	; (80001a8 <main+0x5c>)
 8000178:	f001 f921 	bl	80013be <HAL_UART_Transmit>
     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800017c:	2101      	movs	r1, #1
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <main+0x60>)
 8000180:	f000 fc9a 	bl	8000ab8 <HAL_GPIO_TogglePin>
     HAL_Delay(500);
 8000184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000188:	f000 fa26 	bl	80005d8 <HAL_Delay>
     X++;
 800018c:	4b03      	ldr	r3, [pc, #12]	; (800019c <main+0x50>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	3301      	adds	r3, #1
 8000192:	b2da      	uxtb	r2, r3
 8000194:	4b01      	ldr	r3, [pc, #4]	; (800019c <main+0x50>)
 8000196:	701a      	strb	r2, [r3, #0]
  {
 8000198:	e7e2      	b.n	8000160 <main+0x14>
 800019a:	bf00      	nop
 800019c:	2000008c 	.word	0x2000008c
 80001a0:	08001f34 	.word	0x08001f34
 80001a4:	2000009c 	.word	0x2000009c
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fa92 	bl	80016e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001da:	2310      	movs	r3, #16
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001de:	2302      	movs	r3, #2
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e2:	2300      	movs	r3, #0
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80001e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80001ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fc7b 	bl	8000aec <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001fc:	f000 f880 	bl	8000300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fee7 	bl	8000fec <HAL_RCC_ClockConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000224:	f000 f86c 	bl	8000300 <Error_Handler>
  }
}
 8000228:	bf00      	nop
 800022a:	3740      	adds	r7, #64	; 0x40
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000236:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_USART2_UART_Init+0x50>)
 8000238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800023c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000256:	220c      	movs	r2, #12
 8000258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000268:	f001 f85c 	bl	8001324 <HAL_UART_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000272:	f000 f845 	bl	8000300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	200000ac 	.word	0x200000ac
 8000280:	40004400 	.word	0x40004400

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_GPIO_Init+0x74>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <MX_GPIO_Init+0x74>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_GPIO_Init+0x74>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_GPIO_Init+0x74>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <MX_GPIO_Init+0x74>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_GPIO_Init+0x74>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <MX_GPIO_Init+0x78>)
 80002ce:	f000 fbdb 	bl	8000a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	2302      	movs	r3, #2
 80002e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	4619      	mov	r1, r3
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <MX_GPIO_Init+0x78>)
 80002ea:	f000 fa7b 	bl	80007e4 <HAL_GPIO_Init>

}
 80002ee:	bf00      	nop
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010c00 	.word	0x40010c00

08000300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000306:	e7fe      	b.n	8000306 <Error_Handler+0x6>

08000308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <HAL_MspInit+0x5c>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a14      	ldr	r2, [pc, #80]	; (8000364 <HAL_MspInit+0x5c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <HAL_MspInit+0x5c>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_MspInit+0x5c>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <HAL_MspInit+0x5c>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000330:	61d3      	str	r3, [r2, #28]
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_MspInit+0x5c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <HAL_MspInit+0x60>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <HAL_MspInit+0x60>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000

0800036c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000374:	f107 0310 	add.w	r3, r7, #16
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <HAL_UART_MspInit+0x88>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d12f      	bne.n	80003ec <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800038c:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <HAL_UART_MspInit+0x8c>)
 800038e:	69db      	ldr	r3, [r3, #28]
 8000390:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <HAL_UART_MspInit+0x8c>)
 8000392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000396:	61d3      	str	r3, [r2, #28]
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <HAL_UART_MspInit+0x8c>)
 800039a:	69db      	ldr	r3, [r3, #28]
 800039c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <HAL_UART_MspInit+0x8c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <HAL_UART_MspInit+0x8c>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <HAL_UART_MspInit+0x8c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003bc:	2304      	movs	r3, #4
 80003be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c0:	2302      	movs	r3, #2
 80003c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c4:	2303      	movs	r3, #3
 80003c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	480b      	ldr	r0, [pc, #44]	; (80003fc <HAL_UART_MspInit+0x90>)
 80003d0:	f000 fa08 	bl	80007e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003d4:	2308      	movs	r3, #8
 80003d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <HAL_UART_MspInit+0x90>)
 80003e8:	f000 f9fc 	bl	80007e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40004400 	.word	0x40004400
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010800 	.word	0x40010800

08000400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <NMI_Handler+0x4>

08000406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <HardFault_Handler+0x4>

0800040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <MemManage_Handler+0x4>

08000412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <BusFault_Handler+0x4>

08000418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <UsageFault_Handler+0x4>

0800041e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000446:	f000 f8ab 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <_sbrk+0x5c>)
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <_sbrk+0x60>)
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d102      	bne.n	8000472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <_sbrk+0x64>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <_sbrk+0x68>)
 8000470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <_sbrk+0x64>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	429a      	cmp	r2, r3
 800047e:	d207      	bcs.n	8000490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000480:	f001 f908 	bl	8001694 <__errno>
 8000484:	4602      	mov	r2, r0
 8000486:	230c      	movs	r3, #12
 8000488:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	e009      	b.n	80004a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <_sbrk+0x64>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <_sbrk+0x64>)
 80004a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a2:	68fb      	ldr	r3, [r7, #12]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20001800 	.word	0x20001800
 80004b0:	00000400 	.word	0x00000400
 80004b4:	20000090 	.word	0x20000090
 80004b8:	200000f8 	.word	0x200000f8

080004bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopFillZerobss+0x22>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ee:	f7ff ffe5 	bl	80004bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f2:	f001 f8d5 	bl	80016a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fe29 	bl	800014c <main>
  bx lr
 80004fa:	4770      	bx	lr
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000504:	08001fa8 	.word	0x08001fa8
  ldr r2, =_sbss
 8000508:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800050c:	200000f8 	.word	0x200000f8

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>
	...

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x28>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x28>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f929 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f7ff feea 	bl	8000308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40022000 	.word	0x40022000

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f933 	bl	80007ca <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f909 	bl	8000792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000000 	.word	0x20000000
 8000598:	20000008 	.word	0x20000008
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_IncTick+0x1c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_IncTick+0x20>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <HAL_IncTick+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	20000008 	.word	0x20000008
 80005c0:	200000f0 	.word	0x200000f0

080005c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <HAL_GetTick+0x10>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	200000f0 	.word	0x200000f0

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff0 	bl	80005c4 <HAL_GetTick>
 80005e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d005      	beq.n	80005fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_Delay+0x40>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4413      	add	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005fe:	bf00      	nop
 8000600:	f7ff ffe0 	bl	80005c4 <HAL_GetTick>
 8000604:	4602      	mov	r2, r0
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	429a      	cmp	r2, r3
 800060e:	d8f7      	bhi.n	8000600 <HAL_Delay+0x28>
  {
  }
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f7ff ff90 	bl	8000680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff49 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff5e 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff90 	bl	80006d4 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5f 	bl	8000680 <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffb0 	bl	8000738 <SysTick_Config>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b08b      	sub	sp, #44	; 0x2c
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e121      	b.n	8000a3c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007f8:	2201      	movs	r2, #1
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	4013      	ands	r3, r2
 800080a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 8110 	bne.w	8000a36 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b12      	cmp	r3, #18
 800081c:	d034      	beq.n	8000888 <HAL_GPIO_Init+0xa4>
 800081e:	2b12      	cmp	r3, #18
 8000820:	d80d      	bhi.n	800083e <HAL_GPIO_Init+0x5a>
 8000822:	2b02      	cmp	r3, #2
 8000824:	d02b      	beq.n	800087e <HAL_GPIO_Init+0x9a>
 8000826:	2b02      	cmp	r3, #2
 8000828:	d804      	bhi.n	8000834 <HAL_GPIO_Init+0x50>
 800082a:	2b00      	cmp	r3, #0
 800082c:	d031      	beq.n	8000892 <HAL_GPIO_Init+0xae>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d01c      	beq.n	800086c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000832:	e048      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000834:	2b03      	cmp	r3, #3
 8000836:	d043      	beq.n	80008c0 <HAL_GPIO_Init+0xdc>
 8000838:	2b11      	cmp	r3, #17
 800083a:	d01b      	beq.n	8000874 <HAL_GPIO_Init+0x90>
          break;
 800083c:	e043      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800083e:	4a86      	ldr	r2, [pc, #536]	; (8000a58 <HAL_GPIO_Init+0x274>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d026      	beq.n	8000892 <HAL_GPIO_Init+0xae>
 8000844:	4a84      	ldr	r2, [pc, #528]	; (8000a58 <HAL_GPIO_Init+0x274>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d806      	bhi.n	8000858 <HAL_GPIO_Init+0x74>
 800084a:	4a84      	ldr	r2, [pc, #528]	; (8000a5c <HAL_GPIO_Init+0x278>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d020      	beq.n	8000892 <HAL_GPIO_Init+0xae>
 8000850:	4a83      	ldr	r2, [pc, #524]	; (8000a60 <HAL_GPIO_Init+0x27c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d01d      	beq.n	8000892 <HAL_GPIO_Init+0xae>
          break;
 8000856:	e036      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000858:	4a82      	ldr	r2, [pc, #520]	; (8000a64 <HAL_GPIO_Init+0x280>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d019      	beq.n	8000892 <HAL_GPIO_Init+0xae>
 800085e:	4a82      	ldr	r2, [pc, #520]	; (8000a68 <HAL_GPIO_Init+0x284>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d016      	beq.n	8000892 <HAL_GPIO_Init+0xae>
 8000864:	4a81      	ldr	r2, [pc, #516]	; (8000a6c <HAL_GPIO_Init+0x288>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d013      	beq.n	8000892 <HAL_GPIO_Init+0xae>
          break;
 800086a:	e02c      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	623b      	str	r3, [r7, #32]
          break;
 8000872:	e028      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	3304      	adds	r3, #4
 800087a:	623b      	str	r3, [r7, #32]
          break;
 800087c:	e023      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	3308      	adds	r3, #8
 8000884:	623b      	str	r3, [r7, #32]
          break;
 8000886:	e01e      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	330c      	adds	r3, #12
 800088e:	623b      	str	r3, [r7, #32]
          break;
 8000890:	e019      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800089a:	2304      	movs	r3, #4
 800089c:	623b      	str	r3, [r7, #32]
          break;
 800089e:	e012      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d105      	bne.n	80008b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a8:	2308      	movs	r3, #8
 80008aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	611a      	str	r2, [r3, #16]
          break;
 80008b2:	e008      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	615a      	str	r2, [r3, #20]
          break;
 80008be:	e002      	b.n	80008c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d801      	bhi.n	80008d0 <HAL_GPIO_Init+0xec>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	e001      	b.n	80008d4 <HAL_GPIO_Init+0xf0>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3304      	adds	r3, #4
 80008d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2bff      	cmp	r3, #255	; 0xff
 80008da:	d802      	bhi.n	80008e2 <HAL_GPIO_Init+0xfe>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	e002      	b.n	80008e8 <HAL_GPIO_Init+0x104>
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	3b08      	subs	r3, #8
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	210f      	movs	r1, #15
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	401a      	ands	r2, r3
 80008fa:	6a39      	ldr	r1, [r7, #32]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	431a      	orrs	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 8090 	beq.w	8000a36 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4b56      	ldr	r3, [pc, #344]	; (8000a70 <HAL_GPIO_Init+0x28c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a55      	ldr	r2, [pc, #340]	; (8000a70 <HAL_GPIO_Init+0x28c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <HAL_GPIO_Init+0x28c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800092e:	4a51      	ldr	r2, [pc, #324]	; (8000a74 <HAL_GPIO_Init+0x290>)
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3302      	adds	r3, #2
 8000936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	220f      	movs	r2, #15
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a48      	ldr	r2, [pc, #288]	; (8000a78 <HAL_GPIO_Init+0x294>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d00d      	beq.n	8000976 <HAL_GPIO_Init+0x192>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a47      	ldr	r2, [pc, #284]	; (8000a7c <HAL_GPIO_Init+0x298>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d007      	beq.n	8000972 <HAL_GPIO_Init+0x18e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <HAL_GPIO_Init+0x29c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_GPIO_Init+0x18a>
 800096a:	2302      	movs	r3, #2
 800096c:	e004      	b.n	8000978 <HAL_GPIO_Init+0x194>
 800096e:	2303      	movs	r3, #3
 8000970:	e002      	b.n	8000978 <HAL_GPIO_Init+0x194>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <HAL_GPIO_Init+0x194>
 8000976:	2300      	movs	r3, #0
 8000978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097a:	f002 0203 	and.w	r2, r2, #3
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	4093      	lsls	r3, r2
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000988:	493a      	ldr	r1, [pc, #232]	; (8000a74 <HAL_GPIO_Init+0x290>)
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	3302      	adds	r3, #2
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d006      	beq.n	80009b0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4937      	ldr	r1, [pc, #220]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	600b      	str	r3, [r1, #0]
 80009ae:	e006      	b.n	80009be <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009b0:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	4932      	ldr	r1, [pc, #200]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	492d      	ldr	r1, [pc, #180]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	604b      	str	r3, [r1, #4]
 80009d6:	e006      	b.n	80009e6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	43db      	mvns	r3, r3
 80009e0:	4928      	ldr	r1, [pc, #160]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	4923      	ldr	r1, [pc, #140]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	608b      	str	r3, [r1, #8]
 80009fe:	e006      	b.n	8000a0e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	491e      	ldr	r1, [pc, #120]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	4919      	ldr	r1, [pc, #100]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60cb      	str	r3, [r1, #12]
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	4914      	ldr	r1, [pc, #80]	; (8000a84 <HAL_GPIO_Init+0x2a0>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	3301      	adds	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	fa22 f303 	lsr.w	r3, r2, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f47f aed6 	bne.w	80007f8 <HAL_GPIO_Init+0x14>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	372c      	adds	r7, #44	; 0x2c
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	10210000 	.word	0x10210000
 8000a5c:	10110000 	.word	0x10110000
 8000a60:	10120000 	.word	0x10120000
 8000a64:	10310000 	.word	0x10310000
 8000a68:	10320000 	.word	0x10320000
 8000a6c:	10220000 	.word	0x10220000
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010000 	.word	0x40010000
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	40010c00 	.word	0x40010c00
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40010400 	.word	0x40010400

08000a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a98:	787b      	ldrb	r3, [r7, #1]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aa4:	e003      	b.n	8000aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	041a      	lsls	r2, r3, #16
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	041a      	lsls	r2, r3, #16
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43d9      	mvns	r1, r3
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	400b      	ands	r3, r1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	611a      	str	r2, [r3, #16]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e26c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8087 	beq.w	8000c1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b0c:	4b92      	ldr	r3, [pc, #584]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 030c 	and.w	r3, r3, #12
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d00c      	beq.n	8000b32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b18:	4b8f      	ldr	r3, [pc, #572]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 030c 	and.w	r3, r3, #12
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d112      	bne.n	8000b4a <HAL_RCC_OscConfig+0x5e>
 8000b24:	4b8c      	ldr	r3, [pc, #560]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b30:	d10b      	bne.n	8000b4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b32:	4b89      	ldr	r3, [pc, #548]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d06c      	beq.n	8000c18 <HAL_RCC_OscConfig+0x12c>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d168      	bne.n	8000c18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e246      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b52:	d106      	bne.n	8000b62 <HAL_RCC_OscConfig+0x76>
 8000b54:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a7f      	ldr	r2, [pc, #508]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e02e      	b.n	8000bc0 <HAL_RCC_OscConfig+0xd4>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10c      	bne.n	8000b84 <HAL_RCC_OscConfig+0x98>
 8000b6a:	4b7b      	ldr	r3, [pc, #492]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a7a      	ldr	r2, [pc, #488]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4b78      	ldr	r3, [pc, #480]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a77      	ldr	r2, [pc, #476]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e01d      	b.n	8000bc0 <HAL_RCC_OscConfig+0xd4>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xbc>
 8000b8e:	4b72      	ldr	r3, [pc, #456]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a71      	ldr	r2, [pc, #452]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4b6f      	ldr	r3, [pc, #444]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a6e      	ldr	r2, [pc, #440]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_RCC_OscConfig+0xd4>
 8000ba8:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a6a      	ldr	r2, [pc, #424]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b68      	ldr	r3, [pc, #416]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a67      	ldr	r2, [pc, #412]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d013      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcfc 	bl	80005c4 <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bd0:	f7ff fcf8 	bl	80005c4 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e1fa      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f0      	beq.n	8000bd0 <HAL_RCC_OscConfig+0xe4>
 8000bee:	e014      	b.n	8000c1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fce8 	bl	80005c4 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fce4 	bl	80005c4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e1e6      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x10c>
 8000c16:	e000      	b.n	8000c1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d063      	beq.n	8000cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c26:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c32:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d11c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x18c>
 8000c3e:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d116      	bne.n	8000c78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	4b43      	ldr	r3, [pc, #268]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_OscConfig+0x176>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e1ba      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4939      	ldr	r1, [pc, #228]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	e03a      	b.n	8000cee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d020      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_RCC_OscConfig+0x270>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff fc9d 	bl	80005c4 <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc99 	bl	80005c4 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e19b      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f0      	beq.n	8000c8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <HAL_RCC_OscConfig+0x270>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc7c 	bl	80005c4 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc78 	bl	80005c4 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e17a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d03a      	beq.n	8000d70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d019      	beq.n	8000d36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_RCC_OscConfig+0x274>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc5c 	bl	80005c4 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc58 	bl	80005c4 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e15a      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 fada 	bl	80012e8 <RCC_Delay>
 8000d34:	e01c      	b.n	8000d70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_RCC_OscConfig+0x274>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3c:	f7ff fc42 	bl	80005c4 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d42:	e00f      	b.n	8000d64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d44:	f7ff fc3e 	bl	80005c4 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d908      	bls.n	8000d64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e140      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	42420000 	.word	0x42420000
 8000d60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	4b9e      	ldr	r3, [pc, #632]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e9      	bne.n	8000d44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80a6 	beq.w	8000eca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b97      	ldr	r3, [pc, #604]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10d      	bne.n	8000daa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b94      	ldr	r3, [pc, #592]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a93      	ldr	r2, [pc, #588]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b91      	ldr	r3, [pc, #580]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000daa:	4b8e      	ldr	r3, [pc, #568]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d118      	bne.n	8000de8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db6:	4b8b      	ldr	r3, [pc, #556]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a8a      	ldr	r2, [pc, #552]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fbff 	bl	80005c4 <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fbfb 	bl	80005c4 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e0fd      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4b81      	ldr	r3, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x4f8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x312>
 8000df0:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a7a      	ldr	r2, [pc, #488]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6213      	str	r3, [r2, #32]
 8000dfc:	e02d      	b.n	8000e5a <HAL_RCC_OscConfig+0x36e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x334>
 8000e06:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	4a75      	ldr	r2, [pc, #468]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6213      	str	r3, [r2, #32]
 8000e12:	4b73      	ldr	r3, [pc, #460]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4a72      	ldr	r2, [pc, #456]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e18:	f023 0304 	bic.w	r3, r3, #4
 8000e1c:	6213      	str	r3, [r2, #32]
 8000e1e:	e01c      	b.n	8000e5a <HAL_RCC_OscConfig+0x36e>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x356>
 8000e28:	4b6d      	ldr	r3, [pc, #436]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4a6c      	ldr	r2, [pc, #432]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6213      	str	r3, [r2, #32]
 8000e34:	4b6a      	ldr	r3, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a69      	ldr	r2, [pc, #420]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6213      	str	r3, [r2, #32]
 8000e40:	e00b      	b.n	8000e5a <HAL_RCC_OscConfig+0x36e>
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4a66      	ldr	r2, [pc, #408]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6213      	str	r3, [r2, #32]
 8000e4e:	4b64      	ldr	r3, [pc, #400]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4a63      	ldr	r2, [pc, #396]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d015      	beq.n	8000e8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fbaf 	bl	80005c4 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fbab 	bl	80005c4 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e0ab      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	4b57      	ldr	r3, [pc, #348]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ee      	beq.n	8000e6a <HAL_RCC_OscConfig+0x37e>
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fb99 	bl	80005c4 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fb95 	bl	80005c4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e095      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ee      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d105      	bne.n	8000eca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ebe:	4b48      	ldr	r3, [pc, #288]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8081 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed4:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d061      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d146      	bne.n	8000f76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_RCC_OscConfig+0x4fc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fb69 	bl	80005c4 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff fb65 	bl	80005c4 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e067      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f08:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f0      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d108      	bne.n	8000f30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	492d      	ldr	r1, [pc, #180]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a19      	ldr	r1, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	430b      	orrs	r3, r1
 8000f42:	4927      	ldr	r1, [pc, #156]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_RCC_OscConfig+0x4fc>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fb39 	bl	80005c4 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fb35 	bl	80005c4 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e037      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x46a>
 8000f74:	e02f      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_RCC_OscConfig+0x4fc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb22 	bl	80005c4 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f84:	f7ff fb1e 	bl	80005c4 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e020      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x498>
 8000fa2:	e018      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e013      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	42420060 	.word	0x42420060

08000fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0d0      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001000:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d910      	bls.n	8001030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 0207 	bic.w	r2, r3, #7
 8001016:	4965      	ldr	r1, [pc, #404]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	4b63      	ldr	r3, [pc, #396]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d001      	beq.n	8001030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0b8      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001048:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001060:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800106a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106c:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	494d      	ldr	r1, [pc, #308]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d040      	beq.n	800110c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d115      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e07f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e073      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e06b      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f023 0203 	bic.w	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4936      	ldr	r1, [pc, #216]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010dc:	f7ff fa72 	bl	80005c4 <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e4:	f7ff fa6e 	bl	80005c4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e053      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 020c 	and.w	r2, r3, #12
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	429a      	cmp	r2, r3
 800110a:	d1eb      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d210      	bcs.n	800113c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 0207 	bic.w	r2, r3, #7
 8001122:	4922      	ldr	r1, [pc, #136]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e032      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4916      	ldr	r1, [pc, #88]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800117a:	f000 f821 	bl	80011c0 <HAL_RCC_GetSysClockFreq>
 800117e:	4601      	mov	r1, r0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_RCC_ClockConfig+0x1c8>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	fa21 f303 	lsr.w	r3, r1, r3
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_ClockConfig+0x1d0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d0 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08001f54 	.word	0x08001f54
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c0:	b490      	push	{r4, r7}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011c8:	1d3c      	adds	r4, r7, #4
 80011ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x40>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x46>
 80011fe:	e02d      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001202:	623b      	str	r3, [r7, #32]
      break;
 8001204:	e02d      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001212:	4413      	add	r3, r2
 8001214:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001218:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	0c5b      	lsrs	r3, r3, #17
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001232:	4413      	add	r3, r2
 8001234:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001238:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_RCC_GetSysClockFreq+0xbc>)
 800123e:	fb02 f203 	mul.w	r2, r2, r3
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e004      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	623b      	str	r3, [r7, #32]
      break;
 800125a:	e002      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_RCC_GetSysClockFreq+0xbc>)
 800125e:	623b      	str	r3, [r7, #32]
      break;
 8001260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001262:	6a3b      	ldr	r3, [r7, #32]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bc90      	pop	{r4, r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	08001f40 	.word	0x08001f40
 8001274:	08001f50 	.word	0x08001f50
 8001278:	40021000 	.word	0x40021000
 800127c:	007a1200 	.word	0x007a1200
 8001280:	003d0900 	.word	0x003d0900

08001284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_RCC_GetHCLKFreq+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000000 	.word	0x20000000

08001298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800129c:	f7ff fff2 	bl	8001284 <HAL_RCC_GetHCLKFreq>
 80012a0:	4601      	mov	r1, r0
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	08001f64 	.word	0x08001f64

080012c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012c4:	f7ff ffde 	bl	8001284 <HAL_RCC_GetHCLKFreq>
 80012c8:	4601      	mov	r1, r0
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0adb      	lsrs	r3, r3, #11
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	08001f64 	.word	0x08001f64

080012e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <RCC_Delay+0x34>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <RCC_Delay+0x38>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0a5b      	lsrs	r3, r3, #9
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001304:	bf00      	nop
  }
  while (Delay --);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	60fa      	str	r2, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f9      	bne.n	8001304 <RCC_Delay+0x1c>
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000
 8001320:	10624dd3 	.word	0x10624dd3

08001324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e03f      	b.n	80013b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff f80e 	bl	800036c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f905 	bl	8001578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800137c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800138c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800139c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b08a      	sub	sp, #40	; 0x28
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d17c      	bne.n	80014d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_UART_Transmit+0x2c>
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e075      	b.n	80014da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_UART_Transmit+0x3e>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e06e      	b.n	80014da <HAL_UART_Transmit+0x11c>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2221      	movs	r2, #33	; 0x21
 800140e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001412:	f7ff f8d7 	bl	80005c4 <HAL_GetTick>
 8001416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	88fa      	ldrh	r2, [r7, #6]
 8001422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142c:	d108      	bne.n	8001440 <HAL_UART_Transmit+0x82>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	e003      	b.n	8001448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001450:	e02a      	b.n	80014a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2200      	movs	r2, #0
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f840 	bl	80014e2 <UART_WaitOnFlagUntilTimeout>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e036      	b.n	80014da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10b      	bne.n	800148a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3302      	adds	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	e007      	b.n	800149a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1cf      	bne.n	8001452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2200      	movs	r2, #0
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 f810 	bl	80014e2 <UART_WaitOnFlagUntilTimeout>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e006      	b.n	80014da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2220      	movs	r2, #32
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e000      	b.n	80014da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80014d8:	2302      	movs	r3, #2
  }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4613      	mov	r3, r2
 80014f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014f2:	e02c      	b.n	800154e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fa:	d028      	beq.n	800154e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <UART_WaitOnFlagUntilTimeout+0x30>
 8001502:	f7ff f85f 	bl	80005c4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d21d      	bcs.n	800154e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001520:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2220      	movs	r2, #32
 8001536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e00f      	b.n	800156e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4013      	ands	r3, r2
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	429a      	cmp	r2, r3
 800155c:	bf0c      	ite	eq
 800155e:	2301      	moveq	r3, #1
 8001560:	2300      	movne	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	429a      	cmp	r2, r3
 800156a:	d0c3      	beq.n	80014f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80015b2:	f023 030c 	bic.w	r3, r3, #12
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	430b      	orrs	r3, r1
 80015be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2c      	ldr	r2, [pc, #176]	; (800168c <UART_SetConfig+0x114>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d103      	bne.n	80015e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015e0:	f7ff fe6e 	bl	80012c0 <HAL_RCC_GetPCLK2Freq>
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	e002      	b.n	80015ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015e8:	f7ff fe56 	bl	8001298 <HAL_RCC_GetPCLK1Freq>
 80015ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009a      	lsls	r2, r3, #2
 80015f8:	441a      	add	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <UART_SetConfig+0x118>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	0119      	lsls	r1, r3, #4
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009a      	lsls	r2, r3, #2
 8001618:	441a      	add	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fbb2 f2f3 	udiv	r2, r2, r3
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <UART_SetConfig+0x118>)
 8001626:	fba3 0302 	umull	r0, r3, r3, r2
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2064      	movs	r0, #100	; 0x64
 800162e:	fb00 f303 	mul.w	r3, r0, r3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	3332      	adds	r3, #50	; 0x32
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <UART_SetConfig+0x118>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001644:	4419      	add	r1, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	009a      	lsls	r2, r3, #2
 8001650:	441a      	add	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fbb2 f2f3 	udiv	r2, r2, r3
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <UART_SetConfig+0x118>)
 800165e:	fba3 0302 	umull	r0, r3, r3, r2
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	fb00 f303 	mul.w	r3, r0, r3
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	3332      	adds	r3, #50	; 0x32
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <UART_SetConfig+0x118>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	f003 020f 	and.w	r2, r3, #15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	440a      	add	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013800 	.word	0x40013800
 8001690:	51eb851f 	.word	0x51eb851f

08001694 <__errno>:
 8001694:	4b01      	ldr	r3, [pc, #4]	; (800169c <__errno+0x8>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000000c 	.word	0x2000000c

080016a0 <__libc_init_array>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	2500      	movs	r5, #0
 80016a4:	4e0c      	ldr	r6, [pc, #48]	; (80016d8 <__libc_init_array+0x38>)
 80016a6:	4c0d      	ldr	r4, [pc, #52]	; (80016dc <__libc_init_array+0x3c>)
 80016a8:	1ba4      	subs	r4, r4, r6
 80016aa:	10a4      	asrs	r4, r4, #2
 80016ac:	42a5      	cmp	r5, r4
 80016ae:	d109      	bne.n	80016c4 <__libc_init_array+0x24>
 80016b0:	f000 fc34 	bl	8001f1c <_init>
 80016b4:	2500      	movs	r5, #0
 80016b6:	4e0a      	ldr	r6, [pc, #40]	; (80016e0 <__libc_init_array+0x40>)
 80016b8:	4c0a      	ldr	r4, [pc, #40]	; (80016e4 <__libc_init_array+0x44>)
 80016ba:	1ba4      	subs	r4, r4, r6
 80016bc:	10a4      	asrs	r4, r4, #2
 80016be:	42a5      	cmp	r5, r4
 80016c0:	d105      	bne.n	80016ce <__libc_init_array+0x2e>
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c8:	4798      	blx	r3
 80016ca:	3501      	adds	r5, #1
 80016cc:	e7ee      	b.n	80016ac <__libc_init_array+0xc>
 80016ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016d2:	4798      	blx	r3
 80016d4:	3501      	adds	r5, #1
 80016d6:	e7f2      	b.n	80016be <__libc_init_array+0x1e>
 80016d8:	08001fa0 	.word	0x08001fa0
 80016dc:	08001fa0 	.word	0x08001fa0
 80016e0:	08001fa0 	.word	0x08001fa0
 80016e4:	08001fa4 	.word	0x08001fa4

080016e8 <memset>:
 80016e8:	4603      	mov	r3, r0
 80016ea:	4402      	add	r2, r0
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d100      	bne.n	80016f2 <memset+0xa>
 80016f0:	4770      	bx	lr
 80016f2:	f803 1b01 	strb.w	r1, [r3], #1
 80016f6:	e7f9      	b.n	80016ec <memset+0x4>

080016f8 <siprintf>:
 80016f8:	b40e      	push	{r1, r2, r3}
 80016fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016fe:	b500      	push	{lr}
 8001700:	b09c      	sub	sp, #112	; 0x70
 8001702:	ab1d      	add	r3, sp, #116	; 0x74
 8001704:	9002      	str	r0, [sp, #8]
 8001706:	9006      	str	r0, [sp, #24]
 8001708:	9107      	str	r1, [sp, #28]
 800170a:	9104      	str	r1, [sp, #16]
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <siprintf+0x38>)
 800170e:	4909      	ldr	r1, [pc, #36]	; (8001734 <siprintf+0x3c>)
 8001710:	f853 2b04 	ldr.w	r2, [r3], #4
 8001714:	9105      	str	r1, [sp, #20]
 8001716:	6800      	ldr	r0, [r0, #0]
 8001718:	a902      	add	r1, sp, #8
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	f000 f866 	bl	80017ec <_svfiprintf_r>
 8001720:	2200      	movs	r2, #0
 8001722:	9b02      	ldr	r3, [sp, #8]
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	b01c      	add	sp, #112	; 0x70
 8001728:	f85d eb04 	ldr.w	lr, [sp], #4
 800172c:	b003      	add	sp, #12
 800172e:	4770      	bx	lr
 8001730:	2000000c 	.word	0x2000000c
 8001734:	ffff0208 	.word	0xffff0208

08001738 <__ssputs_r>:
 8001738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800173c:	688e      	ldr	r6, [r1, #8]
 800173e:	4682      	mov	sl, r0
 8001740:	429e      	cmp	r6, r3
 8001742:	460c      	mov	r4, r1
 8001744:	4690      	mov	r8, r2
 8001746:	4699      	mov	r9, r3
 8001748:	d837      	bhi.n	80017ba <__ssputs_r+0x82>
 800174a:	898a      	ldrh	r2, [r1, #12]
 800174c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001750:	d031      	beq.n	80017b6 <__ssputs_r+0x7e>
 8001752:	2302      	movs	r3, #2
 8001754:	6825      	ldr	r5, [r4, #0]
 8001756:	6909      	ldr	r1, [r1, #16]
 8001758:	1a6f      	subs	r7, r5, r1
 800175a:	6965      	ldr	r5, [r4, #20]
 800175c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001760:	fb95 f5f3 	sdiv	r5, r5, r3
 8001764:	f109 0301 	add.w	r3, r9, #1
 8001768:	443b      	add	r3, r7
 800176a:	429d      	cmp	r5, r3
 800176c:	bf38      	it	cc
 800176e:	461d      	movcc	r5, r3
 8001770:	0553      	lsls	r3, r2, #21
 8001772:	d530      	bpl.n	80017d6 <__ssputs_r+0x9e>
 8001774:	4629      	mov	r1, r5
 8001776:	f000 fb37 	bl	8001de8 <_malloc_r>
 800177a:	4606      	mov	r6, r0
 800177c:	b950      	cbnz	r0, 8001794 <__ssputs_r+0x5c>
 800177e:	230c      	movs	r3, #12
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f8ca 3000 	str.w	r3, [sl]
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178e:	81a3      	strh	r3, [r4, #12]
 8001790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001794:	463a      	mov	r2, r7
 8001796:	6921      	ldr	r1, [r4, #16]
 8001798:	f000 fab6 	bl	8001d08 <memcpy>
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80017a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a6:	81a3      	strh	r3, [r4, #12]
 80017a8:	6126      	str	r6, [r4, #16]
 80017aa:	443e      	add	r6, r7
 80017ac:	6026      	str	r6, [r4, #0]
 80017ae:	464e      	mov	r6, r9
 80017b0:	6165      	str	r5, [r4, #20]
 80017b2:	1bed      	subs	r5, r5, r7
 80017b4:	60a5      	str	r5, [r4, #8]
 80017b6:	454e      	cmp	r6, r9
 80017b8:	d900      	bls.n	80017bc <__ssputs_r+0x84>
 80017ba:	464e      	mov	r6, r9
 80017bc:	4632      	mov	r2, r6
 80017be:	4641      	mov	r1, r8
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	f000 faac 	bl	8001d1e <memmove>
 80017c6:	68a3      	ldr	r3, [r4, #8]
 80017c8:	2000      	movs	r0, #0
 80017ca:	1b9b      	subs	r3, r3, r6
 80017cc:	60a3      	str	r3, [r4, #8]
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	441e      	add	r6, r3
 80017d2:	6026      	str	r6, [r4, #0]
 80017d4:	e7dc      	b.n	8001790 <__ssputs_r+0x58>
 80017d6:	462a      	mov	r2, r5
 80017d8:	f000 fb60 	bl	8001e9c <_realloc_r>
 80017dc:	4606      	mov	r6, r0
 80017de:	2800      	cmp	r0, #0
 80017e0:	d1e2      	bne.n	80017a8 <__ssputs_r+0x70>
 80017e2:	6921      	ldr	r1, [r4, #16]
 80017e4:	4650      	mov	r0, sl
 80017e6:	f000 fab3 	bl	8001d50 <_free_r>
 80017ea:	e7c8      	b.n	800177e <__ssputs_r+0x46>

080017ec <_svfiprintf_r>:
 80017ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017f0:	461d      	mov	r5, r3
 80017f2:	898b      	ldrh	r3, [r1, #12]
 80017f4:	b09d      	sub	sp, #116	; 0x74
 80017f6:	061f      	lsls	r7, r3, #24
 80017f8:	4680      	mov	r8, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	4616      	mov	r6, r2
 80017fe:	d50f      	bpl.n	8001820 <_svfiprintf_r+0x34>
 8001800:	690b      	ldr	r3, [r1, #16]
 8001802:	b96b      	cbnz	r3, 8001820 <_svfiprintf_r+0x34>
 8001804:	2140      	movs	r1, #64	; 0x40
 8001806:	f000 faef 	bl	8001de8 <_malloc_r>
 800180a:	6020      	str	r0, [r4, #0]
 800180c:	6120      	str	r0, [r4, #16]
 800180e:	b928      	cbnz	r0, 800181c <_svfiprintf_r+0x30>
 8001810:	230c      	movs	r3, #12
 8001812:	f8c8 3000 	str.w	r3, [r8]
 8001816:	f04f 30ff 	mov.w	r0, #4294967295
 800181a:	e0c8      	b.n	80019ae <_svfiprintf_r+0x1c2>
 800181c:	2340      	movs	r3, #64	; 0x40
 800181e:	6163      	str	r3, [r4, #20]
 8001820:	2300      	movs	r3, #0
 8001822:	9309      	str	r3, [sp, #36]	; 0x24
 8001824:	2320      	movs	r3, #32
 8001826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800182a:	2330      	movs	r3, #48	; 0x30
 800182c:	f04f 0b01 	mov.w	fp, #1
 8001830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001834:	9503      	str	r5, [sp, #12]
 8001836:	4637      	mov	r7, r6
 8001838:	463d      	mov	r5, r7
 800183a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800183e:	b10b      	cbz	r3, 8001844 <_svfiprintf_r+0x58>
 8001840:	2b25      	cmp	r3, #37	; 0x25
 8001842:	d13e      	bne.n	80018c2 <_svfiprintf_r+0xd6>
 8001844:	ebb7 0a06 	subs.w	sl, r7, r6
 8001848:	d00b      	beq.n	8001862 <_svfiprintf_r+0x76>
 800184a:	4653      	mov	r3, sl
 800184c:	4632      	mov	r2, r6
 800184e:	4621      	mov	r1, r4
 8001850:	4640      	mov	r0, r8
 8001852:	f7ff ff71 	bl	8001738 <__ssputs_r>
 8001856:	3001      	adds	r0, #1
 8001858:	f000 80a4 	beq.w	80019a4 <_svfiprintf_r+0x1b8>
 800185c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800185e:	4453      	add	r3, sl
 8001860:	9309      	str	r3, [sp, #36]	; 0x24
 8001862:	783b      	ldrb	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 809d 	beq.w	80019a4 <_svfiprintf_r+0x1b8>
 800186a:	2300      	movs	r3, #0
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001874:	9304      	str	r3, [sp, #16]
 8001876:	9307      	str	r3, [sp, #28]
 8001878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800187c:	931a      	str	r3, [sp, #104]	; 0x68
 800187e:	462f      	mov	r7, r5
 8001880:	2205      	movs	r2, #5
 8001882:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001886:	4850      	ldr	r0, [pc, #320]	; (80019c8 <_svfiprintf_r+0x1dc>)
 8001888:	f000 fa30 	bl	8001cec <memchr>
 800188c:	9b04      	ldr	r3, [sp, #16]
 800188e:	b9d0      	cbnz	r0, 80018c6 <_svfiprintf_r+0xda>
 8001890:	06d9      	lsls	r1, r3, #27
 8001892:	bf44      	itt	mi
 8001894:	2220      	movmi	r2, #32
 8001896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800189a:	071a      	lsls	r2, r3, #28
 800189c:	bf44      	itt	mi
 800189e:	222b      	movmi	r2, #43	; 0x2b
 80018a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018a4:	782a      	ldrb	r2, [r5, #0]
 80018a6:	2a2a      	cmp	r2, #42	; 0x2a
 80018a8:	d015      	beq.n	80018d6 <_svfiprintf_r+0xea>
 80018aa:	462f      	mov	r7, r5
 80018ac:	2000      	movs	r0, #0
 80018ae:	250a      	movs	r5, #10
 80018b0:	9a07      	ldr	r2, [sp, #28]
 80018b2:	4639      	mov	r1, r7
 80018b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018b8:	3b30      	subs	r3, #48	; 0x30
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	d94d      	bls.n	800195a <_svfiprintf_r+0x16e>
 80018be:	b1b8      	cbz	r0, 80018f0 <_svfiprintf_r+0x104>
 80018c0:	e00f      	b.n	80018e2 <_svfiprintf_r+0xf6>
 80018c2:	462f      	mov	r7, r5
 80018c4:	e7b8      	b.n	8001838 <_svfiprintf_r+0x4c>
 80018c6:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <_svfiprintf_r+0x1dc>)
 80018c8:	463d      	mov	r5, r7
 80018ca:	1a80      	subs	r0, r0, r2
 80018cc:	fa0b f000 	lsl.w	r0, fp, r0
 80018d0:	4318      	orrs	r0, r3
 80018d2:	9004      	str	r0, [sp, #16]
 80018d4:	e7d3      	b.n	800187e <_svfiprintf_r+0x92>
 80018d6:	9a03      	ldr	r2, [sp, #12]
 80018d8:	1d11      	adds	r1, r2, #4
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	9103      	str	r1, [sp, #12]
 80018de:	2a00      	cmp	r2, #0
 80018e0:	db01      	blt.n	80018e6 <_svfiprintf_r+0xfa>
 80018e2:	9207      	str	r2, [sp, #28]
 80018e4:	e004      	b.n	80018f0 <_svfiprintf_r+0x104>
 80018e6:	4252      	negs	r2, r2
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	9207      	str	r2, [sp, #28]
 80018ee:	9304      	str	r3, [sp, #16]
 80018f0:	783b      	ldrb	r3, [r7, #0]
 80018f2:	2b2e      	cmp	r3, #46	; 0x2e
 80018f4:	d10c      	bne.n	8001910 <_svfiprintf_r+0x124>
 80018f6:	787b      	ldrb	r3, [r7, #1]
 80018f8:	2b2a      	cmp	r3, #42	; 0x2a
 80018fa:	d133      	bne.n	8001964 <_svfiprintf_r+0x178>
 80018fc:	9b03      	ldr	r3, [sp, #12]
 80018fe:	3702      	adds	r7, #2
 8001900:	1d1a      	adds	r2, r3, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	9203      	str	r2, [sp, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	bfb8      	it	lt
 800190a:	f04f 33ff 	movlt.w	r3, #4294967295
 800190e:	9305      	str	r3, [sp, #20]
 8001910:	4d2e      	ldr	r5, [pc, #184]	; (80019cc <_svfiprintf_r+0x1e0>)
 8001912:	2203      	movs	r2, #3
 8001914:	7839      	ldrb	r1, [r7, #0]
 8001916:	4628      	mov	r0, r5
 8001918:	f000 f9e8 	bl	8001cec <memchr>
 800191c:	b138      	cbz	r0, 800192e <_svfiprintf_r+0x142>
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	1b40      	subs	r0, r0, r5
 8001922:	fa03 f000 	lsl.w	r0, r3, r0
 8001926:	9b04      	ldr	r3, [sp, #16]
 8001928:	3701      	adds	r7, #1
 800192a:	4303      	orrs	r3, r0
 800192c:	9304      	str	r3, [sp, #16]
 800192e:	7839      	ldrb	r1, [r7, #0]
 8001930:	2206      	movs	r2, #6
 8001932:	4827      	ldr	r0, [pc, #156]	; (80019d0 <_svfiprintf_r+0x1e4>)
 8001934:	1c7e      	adds	r6, r7, #1
 8001936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800193a:	f000 f9d7 	bl	8001cec <memchr>
 800193e:	2800      	cmp	r0, #0
 8001940:	d038      	beq.n	80019b4 <_svfiprintf_r+0x1c8>
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <_svfiprintf_r+0x1e8>)
 8001944:	bb13      	cbnz	r3, 800198c <_svfiprintf_r+0x1a0>
 8001946:	9b03      	ldr	r3, [sp, #12]
 8001948:	3307      	adds	r3, #7
 800194a:	f023 0307 	bic.w	r3, r3, #7
 800194e:	3308      	adds	r3, #8
 8001950:	9303      	str	r3, [sp, #12]
 8001952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001954:	444b      	add	r3, r9
 8001956:	9309      	str	r3, [sp, #36]	; 0x24
 8001958:	e76d      	b.n	8001836 <_svfiprintf_r+0x4a>
 800195a:	fb05 3202 	mla	r2, r5, r2, r3
 800195e:	2001      	movs	r0, #1
 8001960:	460f      	mov	r7, r1
 8001962:	e7a6      	b.n	80018b2 <_svfiprintf_r+0xc6>
 8001964:	2300      	movs	r3, #0
 8001966:	250a      	movs	r5, #10
 8001968:	4619      	mov	r1, r3
 800196a:	3701      	adds	r7, #1
 800196c:	9305      	str	r3, [sp, #20]
 800196e:	4638      	mov	r0, r7
 8001970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001974:	3a30      	subs	r2, #48	; 0x30
 8001976:	2a09      	cmp	r2, #9
 8001978:	d903      	bls.n	8001982 <_svfiprintf_r+0x196>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0c8      	beq.n	8001910 <_svfiprintf_r+0x124>
 800197e:	9105      	str	r1, [sp, #20]
 8001980:	e7c6      	b.n	8001910 <_svfiprintf_r+0x124>
 8001982:	fb05 2101 	mla	r1, r5, r1, r2
 8001986:	2301      	movs	r3, #1
 8001988:	4607      	mov	r7, r0
 800198a:	e7f0      	b.n	800196e <_svfiprintf_r+0x182>
 800198c:	ab03      	add	r3, sp, #12
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4622      	mov	r2, r4
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_svfiprintf_r+0x1ec>)
 8001994:	a904      	add	r1, sp, #16
 8001996:	4640      	mov	r0, r8
 8001998:	f3af 8000 	nop.w
 800199c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019a0:	4681      	mov	r9, r0
 80019a2:	d1d6      	bne.n	8001952 <_svfiprintf_r+0x166>
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	065b      	lsls	r3, r3, #25
 80019a8:	f53f af35 	bmi.w	8001816 <_svfiprintf_r+0x2a>
 80019ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019ae:	b01d      	add	sp, #116	; 0x74
 80019b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019b4:	ab03      	add	r3, sp, #12
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4622      	mov	r2, r4
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_svfiprintf_r+0x1ec>)
 80019bc:	a904      	add	r1, sp, #16
 80019be:	4640      	mov	r0, r8
 80019c0:	f000 f882 	bl	8001ac8 <_printf_i>
 80019c4:	e7ea      	b.n	800199c <_svfiprintf_r+0x1b0>
 80019c6:	bf00      	nop
 80019c8:	08001f6c 	.word	0x08001f6c
 80019cc:	08001f72 	.word	0x08001f72
 80019d0:	08001f76 	.word	0x08001f76
 80019d4:	00000000 	.word	0x00000000
 80019d8:	08001739 	.word	0x08001739

080019dc <_printf_common>:
 80019dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019e0:	4691      	mov	r9, r2
 80019e2:	461f      	mov	r7, r3
 80019e4:	688a      	ldr	r2, [r1, #8]
 80019e6:	690b      	ldr	r3, [r1, #16]
 80019e8:	4606      	mov	r6, r0
 80019ea:	4293      	cmp	r3, r2
 80019ec:	bfb8      	it	lt
 80019ee:	4613      	movlt	r3, r2
 80019f0:	f8c9 3000 	str.w	r3, [r9]
 80019f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019f8:	460c      	mov	r4, r1
 80019fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019fe:	b112      	cbz	r2, 8001a06 <_printf_common+0x2a>
 8001a00:	3301      	adds	r3, #1
 8001a02:	f8c9 3000 	str.w	r3, [r9]
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	0699      	lsls	r1, r3, #26
 8001a0a:	bf42      	ittt	mi
 8001a0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a10:	3302      	addmi	r3, #2
 8001a12:	f8c9 3000 	strmi.w	r3, [r9]
 8001a16:	6825      	ldr	r5, [r4, #0]
 8001a18:	f015 0506 	ands.w	r5, r5, #6
 8001a1c:	d107      	bne.n	8001a2e <_printf_common+0x52>
 8001a1e:	f104 0a19 	add.w	sl, r4, #25
 8001a22:	68e3      	ldr	r3, [r4, #12]
 8001a24:	f8d9 2000 	ldr.w	r2, [r9]
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	42ab      	cmp	r3, r5
 8001a2c:	dc29      	bgt.n	8001a82 <_printf_common+0xa6>
 8001a2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	3300      	adds	r3, #0
 8001a36:	bf18      	it	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	0692      	lsls	r2, r2, #26
 8001a3c:	d42e      	bmi.n	8001a9c <_printf_common+0xc0>
 8001a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a42:	4639      	mov	r1, r7
 8001a44:	4630      	mov	r0, r6
 8001a46:	47c0      	blx	r8
 8001a48:	3001      	adds	r0, #1
 8001a4a:	d021      	beq.n	8001a90 <_printf_common+0xb4>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	68e5      	ldr	r5, [r4, #12]
 8001a50:	f003 0306 	and.w	r3, r3, #6
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	bf18      	it	ne
 8001a58:	2500      	movne	r5, #0
 8001a5a:	f8d9 2000 	ldr.w	r2, [r9]
 8001a5e:	f04f 0900 	mov.w	r9, #0
 8001a62:	bf08      	it	eq
 8001a64:	1aad      	subeq	r5, r5, r2
 8001a66:	68a3      	ldr	r3, [r4, #8]
 8001a68:	6922      	ldr	r2, [r4, #16]
 8001a6a:	bf08      	it	eq
 8001a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bfc4      	itt	gt
 8001a74:	1a9b      	subgt	r3, r3, r2
 8001a76:	18ed      	addgt	r5, r5, r3
 8001a78:	341a      	adds	r4, #26
 8001a7a:	454d      	cmp	r5, r9
 8001a7c:	d11a      	bne.n	8001ab4 <_printf_common+0xd8>
 8001a7e:	2000      	movs	r0, #0
 8001a80:	e008      	b.n	8001a94 <_printf_common+0xb8>
 8001a82:	2301      	movs	r3, #1
 8001a84:	4652      	mov	r2, sl
 8001a86:	4639      	mov	r1, r7
 8001a88:	4630      	mov	r0, r6
 8001a8a:	47c0      	blx	r8
 8001a8c:	3001      	adds	r0, #1
 8001a8e:	d103      	bne.n	8001a98 <_printf_common+0xbc>
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a98:	3501      	adds	r5, #1
 8001a9a:	e7c2      	b.n	8001a22 <_printf_common+0x46>
 8001a9c:	2030      	movs	r0, #48	; 0x30
 8001a9e:	18e1      	adds	r1, r4, r3
 8001aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001aaa:	4422      	add	r2, r4
 8001aac:	3302      	adds	r3, #2
 8001aae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ab2:	e7c4      	b.n	8001a3e <_printf_common+0x62>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	4639      	mov	r1, r7
 8001aba:	4630      	mov	r0, r6
 8001abc:	47c0      	blx	r8
 8001abe:	3001      	adds	r0, #1
 8001ac0:	d0e6      	beq.n	8001a90 <_printf_common+0xb4>
 8001ac2:	f109 0901 	add.w	r9, r9, #1
 8001ac6:	e7d8      	b.n	8001a7a <_printf_common+0x9e>

08001ac8 <_printf_i>:
 8001ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001acc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	7e09      	ldrb	r1, [r1, #24]
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	296e      	cmp	r1, #110	; 0x6e
 8001ad8:	4617      	mov	r7, r2
 8001ada:	4606      	mov	r6, r0
 8001adc:	4698      	mov	r8, r3
 8001ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ae0:	f000 80b3 	beq.w	8001c4a <_printf_i+0x182>
 8001ae4:	d822      	bhi.n	8001b2c <_printf_i+0x64>
 8001ae6:	2963      	cmp	r1, #99	; 0x63
 8001ae8:	d036      	beq.n	8001b58 <_printf_i+0x90>
 8001aea:	d80a      	bhi.n	8001b02 <_printf_i+0x3a>
 8001aec:	2900      	cmp	r1, #0
 8001aee:	f000 80b9 	beq.w	8001c64 <_printf_i+0x19c>
 8001af2:	2958      	cmp	r1, #88	; 0x58
 8001af4:	f000 8083 	beq.w	8001bfe <_printf_i+0x136>
 8001af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001afc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b00:	e032      	b.n	8001b68 <_printf_i+0xa0>
 8001b02:	2964      	cmp	r1, #100	; 0x64
 8001b04:	d001      	beq.n	8001b0a <_printf_i+0x42>
 8001b06:	2969      	cmp	r1, #105	; 0x69
 8001b08:	d1f6      	bne.n	8001af8 <_printf_i+0x30>
 8001b0a:	6820      	ldr	r0, [r4, #0]
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	0605      	lsls	r5, r0, #24
 8001b10:	f103 0104 	add.w	r1, r3, #4
 8001b14:	d52a      	bpl.n	8001b6c <_printf_i+0xa4>
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6011      	str	r1, [r2, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da03      	bge.n	8001b26 <_printf_i+0x5e>
 8001b1e:	222d      	movs	r2, #45	; 0x2d
 8001b20:	425b      	negs	r3, r3
 8001b22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b26:	486f      	ldr	r0, [pc, #444]	; (8001ce4 <_printf_i+0x21c>)
 8001b28:	220a      	movs	r2, #10
 8001b2a:	e039      	b.n	8001ba0 <_printf_i+0xd8>
 8001b2c:	2973      	cmp	r1, #115	; 0x73
 8001b2e:	f000 809d 	beq.w	8001c6c <_printf_i+0x1a4>
 8001b32:	d808      	bhi.n	8001b46 <_printf_i+0x7e>
 8001b34:	296f      	cmp	r1, #111	; 0x6f
 8001b36:	d020      	beq.n	8001b7a <_printf_i+0xb2>
 8001b38:	2970      	cmp	r1, #112	; 0x70
 8001b3a:	d1dd      	bne.n	8001af8 <_printf_i+0x30>
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	6023      	str	r3, [r4, #0]
 8001b44:	e003      	b.n	8001b4e <_printf_i+0x86>
 8001b46:	2975      	cmp	r1, #117	; 0x75
 8001b48:	d017      	beq.n	8001b7a <_printf_i+0xb2>
 8001b4a:	2978      	cmp	r1, #120	; 0x78
 8001b4c:	d1d4      	bne.n	8001af8 <_printf_i+0x30>
 8001b4e:	2378      	movs	r3, #120	; 0x78
 8001b50:	4865      	ldr	r0, [pc, #404]	; (8001ce8 <_printf_i+0x220>)
 8001b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001b56:	e055      	b.n	8001c04 <_printf_i+0x13c>
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b5e:	1d19      	adds	r1, r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6011      	str	r1, [r2, #0]
 8001b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e08c      	b.n	8001c86 <_printf_i+0x1be>
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b72:	6011      	str	r1, [r2, #0]
 8001b74:	bf18      	it	ne
 8001b76:	b21b      	sxthne	r3, r3
 8001b78:	e7cf      	b.n	8001b1a <_printf_i+0x52>
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	6825      	ldr	r5, [r4, #0]
 8001b7e:	1d18      	adds	r0, r3, #4
 8001b80:	6010      	str	r0, [r2, #0]
 8001b82:	0628      	lsls	r0, r5, #24
 8001b84:	d501      	bpl.n	8001b8a <_printf_i+0xc2>
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e002      	b.n	8001b90 <_printf_i+0xc8>
 8001b8a:	0668      	lsls	r0, r5, #25
 8001b8c:	d5fb      	bpl.n	8001b86 <_printf_i+0xbe>
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	296f      	cmp	r1, #111	; 0x6f
 8001b92:	bf14      	ite	ne
 8001b94:	220a      	movne	r2, #10
 8001b96:	2208      	moveq	r2, #8
 8001b98:	4852      	ldr	r0, [pc, #328]	; (8001ce4 <_printf_i+0x21c>)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ba0:	6865      	ldr	r5, [r4, #4]
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	60a5      	str	r5, [r4, #8]
 8001ba6:	f2c0 8095 	blt.w	8001cd4 <_printf_i+0x20c>
 8001baa:	6821      	ldr	r1, [r4, #0]
 8001bac:	f021 0104 	bic.w	r1, r1, #4
 8001bb0:	6021      	str	r1, [r4, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d13d      	bne.n	8001c32 <_printf_i+0x16a>
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	f040 808e 	bne.w	8001cd8 <_printf_i+0x210>
 8001bbc:	4665      	mov	r5, ip
 8001bbe:	2a08      	cmp	r2, #8
 8001bc0:	d10b      	bne.n	8001bda <_printf_i+0x112>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	07db      	lsls	r3, r3, #31
 8001bc6:	d508      	bpl.n	8001bda <_printf_i+0x112>
 8001bc8:	6923      	ldr	r3, [r4, #16]
 8001bca:	6862      	ldr	r2, [r4, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	bfde      	ittt	le
 8001bd0:	2330      	movle	r3, #48	; 0x30
 8001bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001bd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001bda:	ebac 0305 	sub.w	r3, ip, r5
 8001bde:	6123      	str	r3, [r4, #16]
 8001be0:	f8cd 8000 	str.w	r8, [sp]
 8001be4:	463b      	mov	r3, r7
 8001be6:	aa03      	add	r2, sp, #12
 8001be8:	4621      	mov	r1, r4
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7ff fef6 	bl	80019dc <_printf_common>
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	d14d      	bne.n	8001c90 <_printf_i+0x1c8>
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	b005      	add	sp, #20
 8001bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bfe:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <_printf_i+0x21c>)
 8001c00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	1d1d      	adds	r5, r3, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6015      	str	r5, [r2, #0]
 8001c0e:	060a      	lsls	r2, r1, #24
 8001c10:	d50b      	bpl.n	8001c2a <_printf_i+0x162>
 8001c12:	07ca      	lsls	r2, r1, #31
 8001c14:	bf44      	itt	mi
 8001c16:	f041 0120 	orrmi.w	r1, r1, #32
 8001c1a:	6021      	strmi	r1, [r4, #0]
 8001c1c:	b91b      	cbnz	r3, 8001c26 <_printf_i+0x15e>
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	f022 0220 	bic.w	r2, r2, #32
 8001c24:	6022      	str	r2, [r4, #0]
 8001c26:	2210      	movs	r2, #16
 8001c28:	e7b7      	b.n	8001b9a <_printf_i+0xd2>
 8001c2a:	064d      	lsls	r5, r1, #25
 8001c2c:	bf48      	it	mi
 8001c2e:	b29b      	uxthmi	r3, r3
 8001c30:	e7ef      	b.n	8001c12 <_printf_i+0x14a>
 8001c32:	4665      	mov	r5, ip
 8001c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c38:	fb02 3311 	mls	r3, r2, r1, r3
 8001c3c:	5cc3      	ldrb	r3, [r0, r3]
 8001c3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c42:	460b      	mov	r3, r1
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d1f5      	bne.n	8001c34 <_printf_i+0x16c>
 8001c48:	e7b9      	b.n	8001bbe <_printf_i+0xf6>
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	6825      	ldr	r5, [r4, #0]
 8001c4e:	1d18      	adds	r0, r3, #4
 8001c50:	6961      	ldr	r1, [r4, #20]
 8001c52:	6010      	str	r0, [r2, #0]
 8001c54:	0628      	lsls	r0, r5, #24
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	d501      	bpl.n	8001c5e <_printf_i+0x196>
 8001c5a:	6019      	str	r1, [r3, #0]
 8001c5c:	e002      	b.n	8001c64 <_printf_i+0x19c>
 8001c5e:	066a      	lsls	r2, r5, #25
 8001c60:	d5fb      	bpl.n	8001c5a <_printf_i+0x192>
 8001c62:	8019      	strh	r1, [r3, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	4665      	mov	r5, ip
 8001c68:	6123      	str	r3, [r4, #16]
 8001c6a:	e7b9      	b.n	8001be0 <_printf_i+0x118>
 8001c6c:	6813      	ldr	r3, [r2, #0]
 8001c6e:	1d19      	adds	r1, r3, #4
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	681d      	ldr	r5, [r3, #0]
 8001c74:	6862      	ldr	r2, [r4, #4]
 8001c76:	2100      	movs	r1, #0
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f000 f837 	bl	8001cec <memchr>
 8001c7e:	b108      	cbz	r0, 8001c84 <_printf_i+0x1bc>
 8001c80:	1b40      	subs	r0, r0, r5
 8001c82:	6060      	str	r0, [r4, #4]
 8001c84:	6863      	ldr	r3, [r4, #4]
 8001c86:	6123      	str	r3, [r4, #16]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c8e:	e7a7      	b.n	8001be0 <_printf_i+0x118>
 8001c90:	6923      	ldr	r3, [r4, #16]
 8001c92:	462a      	mov	r2, r5
 8001c94:	4639      	mov	r1, r7
 8001c96:	4630      	mov	r0, r6
 8001c98:	47c0      	blx	r8
 8001c9a:	3001      	adds	r0, #1
 8001c9c:	d0aa      	beq.n	8001bf4 <_printf_i+0x12c>
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	079b      	lsls	r3, r3, #30
 8001ca2:	d413      	bmi.n	8001ccc <_printf_i+0x204>
 8001ca4:	68e0      	ldr	r0, [r4, #12]
 8001ca6:	9b03      	ldr	r3, [sp, #12]
 8001ca8:	4298      	cmp	r0, r3
 8001caa:	bfb8      	it	lt
 8001cac:	4618      	movlt	r0, r3
 8001cae:	e7a3      	b.n	8001bf8 <_printf_i+0x130>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	464a      	mov	r2, r9
 8001cb4:	4639      	mov	r1, r7
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	47c0      	blx	r8
 8001cba:	3001      	adds	r0, #1
 8001cbc:	d09a      	beq.n	8001bf4 <_printf_i+0x12c>
 8001cbe:	3501      	adds	r5, #1
 8001cc0:	68e3      	ldr	r3, [r4, #12]
 8001cc2:	9a03      	ldr	r2, [sp, #12]
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	42ab      	cmp	r3, r5
 8001cc8:	dcf2      	bgt.n	8001cb0 <_printf_i+0x1e8>
 8001cca:	e7eb      	b.n	8001ca4 <_printf_i+0x1dc>
 8001ccc:	2500      	movs	r5, #0
 8001cce:	f104 0919 	add.w	r9, r4, #25
 8001cd2:	e7f5      	b.n	8001cc0 <_printf_i+0x1f8>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ac      	bne.n	8001c32 <_printf_i+0x16a>
 8001cd8:	7803      	ldrb	r3, [r0, #0]
 8001cda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ce2:	e76c      	b.n	8001bbe <_printf_i+0xf6>
 8001ce4:	08001f7d 	.word	0x08001f7d
 8001ce8:	08001f8e 	.word	0x08001f8e

08001cec <memchr>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	b2c9      	uxtb	r1, r1
 8001cf0:	4402      	add	r2, r0
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	d101      	bne.n	8001cfc <memchr+0x10>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e003      	b.n	8001d04 <memchr+0x18>
 8001cfc:	781c      	ldrb	r4, [r3, #0]
 8001cfe:	3001      	adds	r0, #1
 8001d00:	428c      	cmp	r4, r1
 8001d02:	d1f6      	bne.n	8001cf2 <memchr+0x6>
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd10      	pop	{r4, pc}

08001d08 <memcpy>:
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	1e43      	subs	r3, r0, #1
 8001d0c:	440a      	add	r2, r1
 8001d0e:	4291      	cmp	r1, r2
 8001d10:	d100      	bne.n	8001d14 <memcpy+0xc>
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001d1c:	e7f7      	b.n	8001d0e <memcpy+0x6>

08001d1e <memmove>:
 8001d1e:	4288      	cmp	r0, r1
 8001d20:	b510      	push	{r4, lr}
 8001d22:	eb01 0302 	add.w	r3, r1, r2
 8001d26:	d807      	bhi.n	8001d38 <memmove+0x1a>
 8001d28:	1e42      	subs	r2, r0, #1
 8001d2a:	4299      	cmp	r1, r3
 8001d2c:	d00a      	beq.n	8001d44 <memmove+0x26>
 8001d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001d32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001d36:	e7f8      	b.n	8001d2a <memmove+0xc>
 8001d38:	4283      	cmp	r3, r0
 8001d3a:	d9f5      	bls.n	8001d28 <memmove+0xa>
 8001d3c:	1881      	adds	r1, r0, r2
 8001d3e:	1ad2      	subs	r2, r2, r3
 8001d40:	42d3      	cmn	r3, r2
 8001d42:	d100      	bne.n	8001d46 <memmove+0x28>
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001d4e:	e7f7      	b.n	8001d40 <memmove+0x22>

08001d50 <_free_r>:
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4605      	mov	r5, r0
 8001d54:	2900      	cmp	r1, #0
 8001d56:	d043      	beq.n	8001de0 <_free_r+0x90>
 8001d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d5c:	1f0c      	subs	r4, r1, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bfb8      	it	lt
 8001d62:	18e4      	addlt	r4, r4, r3
 8001d64:	f000 f8d0 	bl	8001f08 <__malloc_lock>
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <_free_r+0x94>)
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	b933      	cbnz	r3, 8001d7e <_free_r+0x2e>
 8001d70:	6063      	str	r3, [r4, #4]
 8001d72:	6014      	str	r4, [r2, #0]
 8001d74:	4628      	mov	r0, r5
 8001d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d7a:	f000 b8c6 	b.w	8001f0a <__malloc_unlock>
 8001d7e:	42a3      	cmp	r3, r4
 8001d80:	d90b      	bls.n	8001d9a <_free_r+0x4a>
 8001d82:	6821      	ldr	r1, [r4, #0]
 8001d84:	1862      	adds	r2, r4, r1
 8001d86:	4293      	cmp	r3, r2
 8001d88:	bf01      	itttt	eq
 8001d8a:	681a      	ldreq	r2, [r3, #0]
 8001d8c:	685b      	ldreq	r3, [r3, #4]
 8001d8e:	1852      	addeq	r2, r2, r1
 8001d90:	6022      	streq	r2, [r4, #0]
 8001d92:	6063      	str	r3, [r4, #4]
 8001d94:	6004      	str	r4, [r0, #0]
 8001d96:	e7ed      	b.n	8001d74 <_free_r+0x24>
 8001d98:	4613      	mov	r3, r2
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	b10a      	cbz	r2, 8001da2 <_free_r+0x52>
 8001d9e:	42a2      	cmp	r2, r4
 8001da0:	d9fa      	bls.n	8001d98 <_free_r+0x48>
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	1858      	adds	r0, r3, r1
 8001da6:	42a0      	cmp	r0, r4
 8001da8:	d10b      	bne.n	8001dc2 <_free_r+0x72>
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	4401      	add	r1, r0
 8001dae:	1858      	adds	r0, r3, r1
 8001db0:	4282      	cmp	r2, r0
 8001db2:	6019      	str	r1, [r3, #0]
 8001db4:	d1de      	bne.n	8001d74 <_free_r+0x24>
 8001db6:	6810      	ldr	r0, [r2, #0]
 8001db8:	6852      	ldr	r2, [r2, #4]
 8001dba:	4401      	add	r1, r0
 8001dbc:	6019      	str	r1, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	e7d8      	b.n	8001d74 <_free_r+0x24>
 8001dc2:	d902      	bls.n	8001dca <_free_r+0x7a>
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	602b      	str	r3, [r5, #0]
 8001dc8:	e7d4      	b.n	8001d74 <_free_r+0x24>
 8001dca:	6820      	ldr	r0, [r4, #0]
 8001dcc:	1821      	adds	r1, r4, r0
 8001dce:	428a      	cmp	r2, r1
 8001dd0:	bf01      	itttt	eq
 8001dd2:	6811      	ldreq	r1, [r2, #0]
 8001dd4:	6852      	ldreq	r2, [r2, #4]
 8001dd6:	1809      	addeq	r1, r1, r0
 8001dd8:	6021      	streq	r1, [r4, #0]
 8001dda:	6062      	str	r2, [r4, #4]
 8001ddc:	605c      	str	r4, [r3, #4]
 8001dde:	e7c9      	b.n	8001d74 <_free_r+0x24>
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	20000094 	.word	0x20000094

08001de8 <_malloc_r>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	1ccd      	adds	r5, r1, #3
 8001dec:	f025 0503 	bic.w	r5, r5, #3
 8001df0:	3508      	adds	r5, #8
 8001df2:	2d0c      	cmp	r5, #12
 8001df4:	bf38      	it	cc
 8001df6:	250c      	movcc	r5, #12
 8001df8:	2d00      	cmp	r5, #0
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	db01      	blt.n	8001e02 <_malloc_r+0x1a>
 8001dfe:	42a9      	cmp	r1, r5
 8001e00:	d903      	bls.n	8001e0a <_malloc_r+0x22>
 8001e02:	230c      	movs	r3, #12
 8001e04:	6033      	str	r3, [r6, #0]
 8001e06:	2000      	movs	r0, #0
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	f000 f87d 	bl	8001f08 <__malloc_lock>
 8001e0e:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <_malloc_r+0xac>)
 8001e10:	6814      	ldr	r4, [r2, #0]
 8001e12:	4621      	mov	r1, r4
 8001e14:	b991      	cbnz	r1, 8001e3c <_malloc_r+0x54>
 8001e16:	4c20      	ldr	r4, [pc, #128]	; (8001e98 <_malloc_r+0xb0>)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	b91b      	cbnz	r3, 8001e24 <_malloc_r+0x3c>
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f000 f863 	bl	8001ee8 <_sbrk_r>
 8001e22:	6020      	str	r0, [r4, #0]
 8001e24:	4629      	mov	r1, r5
 8001e26:	4630      	mov	r0, r6
 8001e28:	f000 f85e 	bl	8001ee8 <_sbrk_r>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	d124      	bne.n	8001e7a <_malloc_r+0x92>
 8001e30:	230c      	movs	r3, #12
 8001e32:	4630      	mov	r0, r6
 8001e34:	6033      	str	r3, [r6, #0]
 8001e36:	f000 f868 	bl	8001f0a <__malloc_unlock>
 8001e3a:	e7e4      	b.n	8001e06 <_malloc_r+0x1e>
 8001e3c:	680b      	ldr	r3, [r1, #0]
 8001e3e:	1b5b      	subs	r3, r3, r5
 8001e40:	d418      	bmi.n	8001e74 <_malloc_r+0x8c>
 8001e42:	2b0b      	cmp	r3, #11
 8001e44:	d90f      	bls.n	8001e66 <_malloc_r+0x7e>
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	18cc      	adds	r4, r1, r3
 8001e4a:	50cd      	str	r5, [r1, r3]
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f000 f85c 	bl	8001f0a <__malloc_unlock>
 8001e52:	f104 000b 	add.w	r0, r4, #11
 8001e56:	1d23      	adds	r3, r4, #4
 8001e58:	f020 0007 	bic.w	r0, r0, #7
 8001e5c:	1ac3      	subs	r3, r0, r3
 8001e5e:	d0d3      	beq.n	8001e08 <_malloc_r+0x20>
 8001e60:	425a      	negs	r2, r3
 8001e62:	50e2      	str	r2, [r4, r3]
 8001e64:	e7d0      	b.n	8001e08 <_malloc_r+0x20>
 8001e66:	684b      	ldr	r3, [r1, #4]
 8001e68:	428c      	cmp	r4, r1
 8001e6a:	bf16      	itet	ne
 8001e6c:	6063      	strne	r3, [r4, #4]
 8001e6e:	6013      	streq	r3, [r2, #0]
 8001e70:	460c      	movne	r4, r1
 8001e72:	e7eb      	b.n	8001e4c <_malloc_r+0x64>
 8001e74:	460c      	mov	r4, r1
 8001e76:	6849      	ldr	r1, [r1, #4]
 8001e78:	e7cc      	b.n	8001e14 <_malloc_r+0x2c>
 8001e7a:	1cc4      	adds	r4, r0, #3
 8001e7c:	f024 0403 	bic.w	r4, r4, #3
 8001e80:	42a0      	cmp	r0, r4
 8001e82:	d005      	beq.n	8001e90 <_malloc_r+0xa8>
 8001e84:	1a21      	subs	r1, r4, r0
 8001e86:	4630      	mov	r0, r6
 8001e88:	f000 f82e 	bl	8001ee8 <_sbrk_r>
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d0cf      	beq.n	8001e30 <_malloc_r+0x48>
 8001e90:	6025      	str	r5, [r4, #0]
 8001e92:	e7db      	b.n	8001e4c <_malloc_r+0x64>
 8001e94:	20000094 	.word	0x20000094
 8001e98:	20000098 	.word	0x20000098

08001e9c <_realloc_r>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	4607      	mov	r7, r0
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	460e      	mov	r6, r1
 8001ea4:	b921      	cbnz	r1, 8001eb0 <_realloc_r+0x14>
 8001ea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001eaa:	4611      	mov	r1, r2
 8001eac:	f7ff bf9c 	b.w	8001de8 <_malloc_r>
 8001eb0:	b922      	cbnz	r2, 8001ebc <_realloc_r+0x20>
 8001eb2:	f7ff ff4d 	bl	8001d50 <_free_r>
 8001eb6:	4625      	mov	r5, r4
 8001eb8:	4628      	mov	r0, r5
 8001eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ebc:	f000 f826 	bl	8001f0c <_malloc_usable_size_r>
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	d20f      	bcs.n	8001ee4 <_realloc_r+0x48>
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	f7ff ff8e 	bl	8001de8 <_malloc_r>
 8001ecc:	4605      	mov	r5, r0
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d0f2      	beq.n	8001eb8 <_realloc_r+0x1c>
 8001ed2:	4631      	mov	r1, r6
 8001ed4:	4622      	mov	r2, r4
 8001ed6:	f7ff ff17 	bl	8001d08 <memcpy>
 8001eda:	4631      	mov	r1, r6
 8001edc:	4638      	mov	r0, r7
 8001ede:	f7ff ff37 	bl	8001d50 <_free_r>
 8001ee2:	e7e9      	b.n	8001eb8 <_realloc_r+0x1c>
 8001ee4:	4635      	mov	r5, r6
 8001ee6:	e7e7      	b.n	8001eb8 <_realloc_r+0x1c>

08001ee8 <_sbrk_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	2300      	movs	r3, #0
 8001eec:	4c05      	ldr	r4, [pc, #20]	; (8001f04 <_sbrk_r+0x1c>)
 8001eee:	4605      	mov	r5, r0
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	f7fe faac 	bl	8000450 <_sbrk>
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d102      	bne.n	8001f02 <_sbrk_r+0x1a>
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	b103      	cbz	r3, 8001f02 <_sbrk_r+0x1a>
 8001f00:	602b      	str	r3, [r5, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	200000f4 	.word	0x200000f4

08001f08 <__malloc_lock>:
 8001f08:	4770      	bx	lr

08001f0a <__malloc_unlock>:
 8001f0a:	4770      	bx	lr

08001f0c <_malloc_usable_size_r>:
 8001f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f10:	1f18      	subs	r0, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bfbc      	itt	lt
 8001f16:	580b      	ldrlt	r3, [r1, r0]
 8001f18:	18c0      	addlt	r0, r0, r3
 8001f1a:	4770      	bx	lr

08001f1c <_init>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	bf00      	nop
 8001f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f22:	bc08      	pop	{r3}
 8001f24:	469e      	mov	lr, r3
 8001f26:	4770      	bx	lr

08001f28 <_fini>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	bf00      	nop
 8001f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2e:	bc08      	pop	{r3}
 8001f30:	469e      	mov	lr, r3
 8001f32:	4770      	bx	lr
