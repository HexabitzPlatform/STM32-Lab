
s7_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004150  08004150  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  080041c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080041c8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a395  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab6  00000000  00000000  0002a42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002c848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a808  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000084a0  00000000  00000000  000478f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad3f8  00000000  00000000  0004fd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000232c  00000000  00000000  000fd20c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004054 	.word	0x08004054

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004054 	.word	0x08004054

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <main>:

static void MX_GPIO_Init(void);

static void MX_USART2_UART_Init(void);
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  HAL_Init();
 800060c:	f000 fa46 	bl	8000a9c <HAL_Init>
  SystemClock_Config();
 8000610:	f000 f853 	bl	80006ba <SystemClock_Config>
  MX_GPIO_Init();
 8000614:	f000 f8fe 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8ae 	bl	8000778 <MX_USART2_UART_Init>

  sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <main+0x48>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	001a      	movs	r2, r3
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <main+0x4c>)
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <main+0x50>)
 8000626:	0018      	movs	r0, r3
 8000628:	f003 f90c 	bl	8003844 <siprintf>
  HAL_UART_Transmit_IT(&huart2,MSG, sizeof(MSG));
 800062c:	490a      	ldr	r1, [pc, #40]	; (8000658 <main+0x50>)
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <main+0x54>)
 8000630:	2223      	movs	r2, #35	; 0x23
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fe2a 	bl	800228c <HAL_UART_Transmit_IT>
   while (1)
  {
	  X++;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <main+0x48>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <main+0x48>)
 8000642:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8000644:	23fa      	movs	r3, #250	; 0xfa
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	0018      	movs	r0, r3
 800064a:	f000 faad 	bl	8000ba8 <HAL_Delay>
	  X++;
 800064e:	e7f3      	b.n	8000638 <main+0x30>
 8000650:	200000af 	.word	0x200000af
 8000654:	0800406c 	.word	0x0800406c
 8000658:	2000008c 	.word	0x2000008c
 800065c:	200000bc 	.word	0x200000bc

08000660 <HAL_UART_TxCpltCallback>:
  }
 }

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0)	;
 8000668:	23a0      	movs	r3, #160	; 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2101      	movs	r1, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fe01 	bl	8001276 <HAL_GPIO_TogglePin>
	 sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_UART_TxCpltCallback+0x38>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	001a      	movs	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <HAL_UART_TxCpltCallback+0x3c>)
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_UART_TxCpltCallback+0x40>)
 800067e:	0018      	movs	r0, r3
 8000680:	f003 f8e0 	bl	8003844 <siprintf>
	   HAL_UART_Transmit_IT(&huart2, MSG, sizeof (MSG));
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <HAL_UART_TxCpltCallback+0x40>)
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_UART_TxCpltCallback+0x44>)
 8000688:	2223      	movs	r2, #35	; 0x23
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fdfe 	bl	800228c <HAL_UART_Transmit_IT>
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b002      	add	sp, #8
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000af 	.word	0x200000af
 800069c:	0800406c 	.word	0x0800406c
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	200000bc 	.word	0x200000bc

080006a8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	__NOP();
 80006b0:	46c0      	nop			; (mov r8, r8)
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ba:	b590      	push	{r4, r7, lr}
 80006bc:	b0a7      	sub	sp, #156	; 0x9c
 80006be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c0:	245c      	movs	r4, #92	; 0x5c
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	233c      	movs	r3, #60	; 0x3c
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f003 f8b2 	bl	8003834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	234c      	movs	r3, #76	; 0x4c
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	0018      	movs	r0, r3
 80006d6:	2310      	movs	r3, #16
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f003 f8aa 	bl	8003834 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	003b      	movs	r3, r7
 80006e2:	0018      	movs	r0, r3
 80006e4:	234c      	movs	r3, #76	; 0x4c
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 f8a3 	bl	8003834 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fdda 	bl	80012ac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2202      	movs	r2, #2
 80006fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2240      	movs	r2, #64	; 0x40
 8000710:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fe12 	bl	8001344 <HAL_RCC_OscConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000724:	f000 f8ac 	bl	8000880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	214c      	movs	r1, #76	; 0x4c
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2100      	movs	r1, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f001 f962 	bl	8001a10 <HAL_RCC_ClockConfig>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000750:	f000 f896 	bl	8000880 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000754:	003b      	movs	r3, r7
 8000756:	2202      	movs	r2, #2
 8000758:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000760:	003b      	movs	r3, r7
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fafe 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800076c:	f000 f888 	bl	8000880 <Error_Handler>
  }
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b027      	add	sp, #156	; 0x9c
 8000776:	bd90      	pop	{r4, r7, pc}

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_USART2_UART_Init+0x94>)
 800077e:	4a24      	ldr	r2, [pc, #144]	; (8000810 <MX_USART2_UART_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_USART2_UART_Init+0x94>)
 8000784:	2296      	movs	r2, #150	; 0x96
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_USART2_UART_Init+0x94>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f001 fd0c 	bl	80021e0 <HAL_UART_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007cc:	f000 f858 	bl	8000880 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 ff17 	bl	8003608 <HAL_UARTEx_SetTxFifoThreshold>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007de:	f000 f84f 	bl	8000880 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 ff4e 	bl	8003688 <HAL_UARTEx_SetRxFifoThreshold>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 f846 	bl	8000880 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <MX_USART2_UART_Init+0x94>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fecc 	bl	8003594 <HAL_UARTEx_DisableFifoMode>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000800:	f000 f83e 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	200000bc 	.word	0x200000bc
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	0018      	movs	r0, r3
 800081e:	2314      	movs	r3, #20
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f003 f806 	bl	8003834 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_GPIO_Init+0x68>)
 800082a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_GPIO_Init+0x68>)
 800082e:	2101      	movs	r1, #1
 8000830:	430a      	orrs	r2, r1
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_GPIO_Init+0x68>)
 8000836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000838:	2201      	movs	r2, #1
 800083a:	4013      	ands	r3, r2
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	2200      	movs	r2, #0
 8000846:	2103      	movs	r1, #3
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fcf7 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2203      	movs	r2, #3
 8000852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	1d3a      	adds	r2, r7, #4
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fb78 	bl	8000f64 <HAL_GPIO_Init>

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b006      	add	sp, #24
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000886:	e7fe      	b.n	8000886 <Error_Handler+0x6>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_MspInit+0x4c>)
 8000890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_MspInit+0x4c>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_MspInit+0x4c>)
 80008a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_MspInit+0x4c>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <HAL_MspInit+0x4c>)
 80008b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008c2:	23c0      	movs	r3, #192	; 0xc0
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f990 	bl	8000bec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	2314      	movs	r3, #20
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f002 ffa2 	bl	8003834 <memset>
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <HAL_UART_MspInit+0x9c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d138      	bne.n	800096c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_UART_MspInit+0xa0>)
 80008fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_UART_MspInit+0xa0>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0289      	lsls	r1, r1, #10
 8000904:	430a      	orrs	r2, r1
 8000906:	63da      	str	r2, [r3, #60]	; 0x3c
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_UART_MspInit+0xa0>)
 800090a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	029b      	lsls	r3, r3, #10
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_MspInit+0xa0>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0xa0>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_UART_MspInit+0xa0>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092e:	2114      	movs	r1, #20
 8000930:	187b      	adds	r3, r7, r1
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2202      	movs	r2, #2
 800093a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2201      	movs	r2, #1
 800094c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	187a      	adds	r2, r7, r1
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fb04 	bl	8000f64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	201c      	movs	r0, #28
 8000962:	f000 fa05 	bl	8000d70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8000966:	201c      	movs	r0, #28
 8000968:	f000 fa17 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b00a      	add	sp, #40	; 0x28
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004400 	.word	0x40004400
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f8e6 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <USART2_LPUART2_IRQHandler+0x14>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fd04 	bl	80023c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	200000bc 	.word	0x200000bc

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	18d3      	adds	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f002 fef4 	bl	80037e0 <__errno>
 80009f8:	0003      	movs	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	425b      	negs	r3, r3
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	18d2      	adds	r2, r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20024000 	.word	0x20024000
 8000a24:	00000400 	.word	0x00000400
 8000a28:	200000b0 	.word	0x200000b0
 8000a2c:	20000158 	.word	0x20000158

08000a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <SystemInit+0x14>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	0512      	lsls	r2, r2, #20
 8000a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a4c:	f7ff fff0 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	; (8000a94 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a76:	f002 feb9 	bl	80037ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a7a:	f7ff fdc5 	bl	8000608 <main>

08000a7e <LoopForever>:

LoopForever:
  b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   r0, =_estack
 8000a80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a8c:	08004158 	.word	0x08004158
  ldr r2, =_sbss
 8000a90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a94:	20000154 	.word	0x20000154

08000a98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_COMP_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x3c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Init+0x3c>)
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	0049      	lsls	r1, r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f810 	bl	8000adc <HAL_InitTick>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fede 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <HAL_InitTick+0x88>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d02b      	beq.n	8000b4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_InitTick+0x8c>)
 8000af6:	681c      	ldr	r4, [r3, #0]
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <HAL_InitTick+0x88>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	0019      	movs	r1, r3
 8000afe:	23fa      	movs	r3, #250	; 0xfa
 8000b00:	0098      	lsls	r0, r3, #2
 8000b02:	f7ff faff 	bl	8000104 <__udivsi3>
 8000b06:	0003      	movs	r3, r0
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0020      	movs	r0, r4
 8000b0c:	f7ff fafa 	bl	8000104 <__udivsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 f951 	bl	8000dba <HAL_SYSTICK_Config>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d112      	bne.n	8000b42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d80a      	bhi.n	8000b38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2301      	movs	r3, #1
 8000b26:	425b      	negs	r3, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f920 	bl	8000d70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_InitTick+0x90>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e00d      	b.n	8000b54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e008      	b.n	8000b54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b42:	230f      	movs	r3, #15
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e003      	b.n	8000b54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	781b      	ldrb	r3, [r3, #0]
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b005      	add	sp, #20
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	18d2      	adds	r2, r2, r3
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_IncTick+0x20>)
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	2000014c 	.word	0x2000014c

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000014c 	.word	0x2000014c

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_Delay+0x40>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	0002      	movs	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b004      	add	sp, #16
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000008 	.word	0x20000008

08000bec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40010000 	.word	0x40010000
 8000c14:	fffff9ff 	.word	0xfffff9ff

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2a:	d809      	bhi.n	8000c40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	001a      	movs	r2, r3
 8000c32:	231f      	movs	r3, #31
 8000c34:	401a      	ands	r2, r3
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_EnableIRQ+0x30>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	000a      	movs	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c60:	d828      	bhi.n	8000cb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c62:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <__NVIC_SetPriority+0xd4>)
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	33c0      	adds	r3, #192	; 0xc0
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	589b      	ldr	r3, [r3, r2]
 8000c72:	1dfa      	adds	r2, r7, #7
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	0011      	movs	r1, r2
 8000c78:	2203      	movs	r2, #3
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	00d2      	lsls	r2, r2, #3
 8000c7e:	21ff      	movs	r1, #255	; 0xff
 8000c80:	4091      	lsls	r1, r2
 8000c82:	000a      	movs	r2, r1
 8000c84:	43d2      	mvns	r2, r2
 8000c86:	401a      	ands	r2, r3
 8000c88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	019b      	lsls	r3, r3, #6
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	401a      	ands	r2, r3
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0018      	movs	r0, r3
 8000c98:	2303      	movs	r3, #3
 8000c9a:	4003      	ands	r3, r0
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca0:	481f      	ldr	r0, [pc, #124]	; (8000d20 <__NVIC_SetPriority+0xd4>)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b25b      	sxtb	r3, r3
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	430a      	orrs	r2, r1
 8000cac:	33c0      	adds	r3, #192	; 0xc0
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cb2:	e031      	b.n	8000d18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <__NVIC_SetPriority+0xd8>)
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	0019      	movs	r1, r3
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	3b08      	subs	r3, #8
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3306      	adds	r3, #6
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	3304      	adds	r3, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1dfa      	adds	r2, r7, #7
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	00d2      	lsls	r2, r2, #3
 8000cda:	21ff      	movs	r1, #255	; 0xff
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	43d2      	mvns	r2, r2
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	401a      	ands	r2, r3
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	4003      	ands	r3, r0
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <__NVIC_SetPriority+0xd8>)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	001c      	movs	r4, r3
 8000d04:	230f      	movs	r3, #15
 8000d06:	4023      	ands	r3, r4
 8000d08:	3b08      	subs	r3, #8
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	3306      	adds	r3, #6
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	18c3      	adds	r3, r0, r3
 8000d14:	3304      	adds	r3, #4
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b003      	add	sp, #12
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <SysTick_Config+0x40>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d901      	bls.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e010      	b.n	8000d60 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <SysTick_Config+0x44>)
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	3a01      	subs	r2, #1
 8000d44:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	2301      	movs	r3, #1
 8000d48:	425b      	negs	r3, r3
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff7d 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SysTick_Config+0x44>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x44>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	00ffffff 	.word	0x00ffffff
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	1c02      	adds	r2, r0, #0
 8000d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	0002      	movs	r2, r0
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff33 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ffaf 	bl	8000d28 <SysTick_Config>
 8000dca:	0003      	movs	r3, r0
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e04f      	b.n	8000e86 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2225      	movs	r2, #37	; 0x25
 8000dea:	5c9b      	ldrb	r3, [r3, r2]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d008      	beq.n	8000e04 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2204      	movs	r2, #4
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2224      	movs	r2, #36	; 0x24
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e040      	b.n	8000e86 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	210e      	movs	r1, #14
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1e:	491c      	ldr	r1, [pc, #112]	; (8000e90 <HAL_DMA_Abort+0xbc>)
 8000e20:	400a      	ands	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	438a      	bics	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	221c      	movs	r2, #28
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	2101      	movs	r1, #1
 8000e42:	4091      	lsls	r1, r2
 8000e44:	000a      	movs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00c      	beq.n	8000e74 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e64:	490a      	ldr	r1, [pc, #40]	; (8000e90 <HAL_DMA_Abort+0xbc>)
 8000e66:	400a      	ands	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2225      	movs	r2, #37	; 0x25
 8000e78:	2101      	movs	r1, #1
 8000e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	2100      	movs	r1, #0
 8000e82:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	fffffeff 	.word	0xfffffeff

08000e94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2225      	movs	r2, #37	; 0x25
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d007      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e048      	b.n	8000f52 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	210e      	movs	r1, #14
 8000ecc:	438a      	bics	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2101      	movs	r1, #1
 8000edc:	438a      	bics	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eea:	491d      	ldr	r1, [pc, #116]	; (8000f60 <HAL_DMA_Abort_IT+0xcc>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	221c      	movs	r2, #28
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	2101      	movs	r1, #1
 8000efe:	4091      	lsls	r1, r2
 8000f00:	000a      	movs	r2, r1
 8000f02:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00c      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f20:	490f      	ldr	r1, [pc, #60]	; (8000f60 <HAL_DMA_Abort_IT+0xcc>)
 8000f22:	400a      	ands	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2225      	movs	r2, #37	; 0x25
 8000f34:	2101      	movs	r1, #1
 8000f36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	0010      	movs	r0, r2
 8000f50:	4798      	blx	r3
    }
  }
  return status;
 8000f52:	230f      	movs	r3, #15
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b004      	add	sp, #16
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	fffffeff 	.word	0xfffffeff

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e14d      	b.n	8001210 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d100      	bne.n	8000f8c <HAL_GPIO_Init+0x28>
 8000f8a:	e13e      	b.n	800120a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d00b      	beq.n	8000fac <HAL_GPIO_Init+0x48>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b12      	cmp	r3, #18
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0xea>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	58d3      	ldr	r3, [r2, r3]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2207      	movs	r2, #7
 8001060:	4013      	ands	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	43da      	mvns	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2107      	movs	r1, #7
 800107a:	400b      	ands	r3, r1
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	6939      	ldr	r1, [r7, #16]
 8001094:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	401a      	ands	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	055b      	lsls	r3, r3, #21
 80010d2:	4013      	ands	r3, r2
 80010d4:	d100      	bne.n	80010d8 <HAL_GPIO_Init+0x174>
 80010d6:	e098      	b.n	800120a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010d8:	4a53      	ldr	r2, [pc, #332]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3318      	adds	r3, #24
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	589b      	ldr	r3, [r3, r2]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4013      	ands	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	220f      	movs	r2, #15
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	23a0      	movs	r3, #160	; 0xa0
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	429a      	cmp	r2, r3
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x1d6>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_GPIO_Init+0x2c8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x1d2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a47      	ldr	r2, [pc, #284]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x1ce>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x1ca>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_GPIO_Init+0x2d4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x1c6>
 8001126:	2304      	movs	r3, #4
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x1d8>
 800112a:	2305      	movs	r3, #5
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x1d8>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x1d8>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x1d8>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x1d8>
 800113a:	2300      	movs	r3, #0
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	2103      	movs	r1, #3
 8001140:	400a      	ands	r2, r1
 8001142:	00d2      	lsls	r2, r2, #3
 8001144:	4093      	lsls	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800114c:	4936      	ldr	r1, [pc, #216]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3318      	adds	r3, #24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800115a:	4a33      	ldr	r2, [pc, #204]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	58d3      	ldr	r3, [r2, r3]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	025b      	lsls	r3, r3, #9
 8001174:	4013      	ands	r3, r2
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001180:	4929      	ldr	r1, [pc, #164]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 800118a:	2384      	movs	r3, #132	; 0x84
 800118c:	58d3      	ldr	r3, [r2, r3]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	029b      	lsls	r3, r3, #10
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011ae:	491e      	ldr	r1, [pc, #120]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 80011b0:	2284      	movs	r2, #132	; 0x84
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	035b      	lsls	r3, r3, #13
 80011ce:	4013      	ands	r3, r2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	039b      	lsls	r3, r3, #14
 80011f8:	4013      	ands	r3, r2
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	40da      	lsrs	r2, r3
 8001218:	1e13      	subs	r3, r2, #0
 800121a:	d000      	beq.n	800121e <HAL_GPIO_Init+0x2ba>
 800121c:	e6aa      	b.n	8000f74 <HAL_GPIO_Init+0x10>
  }
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b006      	add	sp, #24
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40021800 	.word	0x40021800
 800122c:	50000400 	.word	0x50000400
 8001230:	50000800 	.word	0x50000800
 8001234:	50000c00 	.word	0x50000c00
 8001238:	50001000 	.word	0x50001000

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	0008      	movs	r0, r1
 8001246:	0011      	movs	r1, r2
 8001248:	1cbb      	adds	r3, r7, #2
 800124a:	1c02      	adds	r2, r0, #0
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	1c7b      	adds	r3, r7, #1
 8001250:	1c0a      	adds	r2, r1, #0
 8001252:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	1c7b      	adds	r3, r7, #1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001266:	1cbb      	adds	r3, r7, #2
 8001268:	881a      	ldrh	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	000a      	movs	r2, r1
 8001280:	1cbb      	adds	r3, r7, #2
 8001282:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128a:	1cbb      	adds	r3, r7, #2
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	041a      	lsls	r2, r3, #16
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	1cb9      	adds	r1, r7, #2
 800129a:	8809      	ldrh	r1, [r1, #0]
 800129c:	400b      	ands	r3, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b004      	add	sp, #16
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d11f      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	0013      	movs	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4912      	ldr	r1, [pc, #72]	; (8001328 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f7fe ff10 	bl	8000104 <__udivsi3>
 80012e4:	0003      	movs	r3, r0
 80012e6:	3301      	adds	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ea:	e008      	b.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e001      	b.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e009      	b.n	8001312 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	401a      	ands	r2, r3
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	429a      	cmp	r2, r3
 800130e:	d0ed      	beq.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b004      	add	sp, #16
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40007000 	.word	0x40007000
 8001320:	fffff9ff 	.word	0xfffff9ff
 8001324:	20000000 	.word	0x20000000
 8001328:	000f4240 	.word	0x000f4240

0800132c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	23e0      	movs	r3, #224	; 0xe0
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4013      	ands	r3, r2
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	f000 fb56 	bl	8001a04 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2201      	movs	r2, #1
 800135e:	4013      	ands	r3, r2
 8001360:	d100      	bne.n	8001364 <HAL_RCC_OscConfig+0x20>
 8001362:	e07d      	b.n	8001460 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001364:	4bc3      	ldr	r3, [pc, #780]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2238      	movs	r2, #56	; 0x38
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800136e:	4bc1      	ldr	r3, [pc, #772]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2203      	movs	r2, #3
 8001374:	4013      	ands	r3, r2
 8001376:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d102      	bne.n	8001384 <HAL_RCC_OscConfig+0x40>
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d002      	beq.n	800138a <HAL_RCC_OscConfig+0x46>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4bba      	ldr	r3, [pc, #744]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	029b      	lsls	r3, r3, #10
 8001392:	4013      	ands	r3, r2
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x11a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	f000 fb30 	bl	8001a04 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x7c>
 80013b0:	4bb0      	ldr	r3, [pc, #704]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4baf      	ldr	r3, [pc, #700]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	0249      	lsls	r1, r1, #9
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e020      	b.n	8001402 <HAL_RCC_OscConfig+0xbe>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	23a0      	movs	r3, #160	; 0xa0
 80013c6:	02db      	lsls	r3, r3, #11
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d10e      	bne.n	80013ea <HAL_RCC_OscConfig+0xa6>
 80013cc:	4ba9      	ldr	r3, [pc, #676]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4ba8      	ldr	r3, [pc, #672]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	02c9      	lsls	r1, r1, #11
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	4ba6      	ldr	r3, [pc, #664]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4ba5      	ldr	r3, [pc, #660]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0249      	lsls	r1, r1, #9
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e00b      	b.n	8001402 <HAL_RCC_OscConfig+0xbe>
 80013ea:	4ba2      	ldr	r3, [pc, #648]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4ba1      	ldr	r3, [pc, #644]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013f0:	49a1      	ldr	r1, [pc, #644]	; (8001678 <HAL_RCC_OscConfig+0x334>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b9f      	ldr	r3, [pc, #636]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b9e      	ldr	r3, [pc, #632]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80013fc:	499f      	ldr	r1, [pc, #636]	; (800167c <HAL_RCC_OscConfig+0x338>)
 80013fe:	400a      	ands	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d014      	beq.n	8001434 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140a:	f7ff fbc3 	bl	8000b94 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fbbe 	bl	8000b94 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e2ee      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	4b93      	ldr	r3, [pc, #588]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0xd0>
 8001432:	e015      	b.n	8001460 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fbae 	bl	8000b94 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143e:	f7ff fba9 	bl	8000b94 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e2d9      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	4013      	ands	r3, r2
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0xfa>
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d100      	bne.n	800146c <HAL_RCC_OscConfig+0x128>
 800146a:	e099      	b.n	80015a0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2238      	movs	r2, #56	; 0x38
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001476:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2203      	movs	r2, #3
 800147c:	4013      	ands	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b10      	cmp	r3, #16
 8001484:	d102      	bne.n	800148c <HAL_RCC_OscConfig+0x148>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d002      	beq.n	8001492 <HAL_RCC_OscConfig+0x14e>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d135      	bne.n	80014fe <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001492:	4b78      	ldr	r3, [pc, #480]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4013      	ands	r3, r2
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x166>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e2ac      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b72      	ldr	r3, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a74      	ldr	r2, [pc, #464]	; (8001680 <HAL_RCC_OscConfig+0x33c>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	021a      	lsls	r2, r3, #8
 80014ba:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d112      	bne.n	80014ec <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014c6:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x340>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	4b67      	ldr	r3, [pc, #412]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0adb      	lsrs	r3, r3, #11
 80014e0:	2207      	movs	r2, #7
 80014e2:	4013      	ands	r3, r2
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x344>)
 80014e6:	40da      	lsrs	r2, r3
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_RCC_OscConfig+0x348>)
 80014ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014ec:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x34c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff faf3 	bl	8000adc <HAL_InitTick>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d051      	beq.n	800159e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e282      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d030      	beq.n	8001568 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001506:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a5e      	ldr	r2, [pc, #376]	; (8001684 <HAL_RCC_OscConfig+0x340>)
 800150c:	4013      	ands	r3, r2
 800150e:	0019      	movs	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	4b57      	ldr	r3, [pc, #348]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800151a:	4b56      	ldr	r3, [pc, #344]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b55      	ldr	r3, [pc, #340]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0049      	lsls	r1, r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb34 	bl	8000b94 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fb2f 	bl	8000b94 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e25f      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4013      	ands	r3, r2
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a4a      	ldr	r2, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x33c>)
 8001556:	4013      	ands	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	021a      	lsls	r2, r3, #8
 8001560:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	e01b      	b.n	80015a0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001568:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800156e:	4949      	ldr	r1, [pc, #292]	; (8001694 <HAL_RCC_OscConfig+0x350>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fb0e 	bl	8000b94 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fb09 	bl	8000b94 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e239      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001590:	4b38      	ldr	r3, [pc, #224]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4013      	ands	r3, r2
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x23a>
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2208      	movs	r2, #8
 80015a6:	4013      	ands	r3, r2
 80015a8:	d047      	beq.n	800163a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015aa:	4b32      	ldr	r3, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2238      	movs	r2, #56	; 0x38
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b18      	cmp	r3, #24
 80015b4:	d10a      	bne.n	80015cc <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d03c      	beq.n	800163a <HAL_RCC_OscConfig+0x2f6>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d138      	bne.n	800163a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e21b      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d019      	beq.n	8001608 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80015d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fad8 	bl	8000b94 <HAL_GetTick>
 80015e4:	0003      	movs	r3, r0
 80015e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fad3 	bl	8000b94 <HAL_GetTick>
 80015ee:	0002      	movs	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e203      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d0f1      	beq.n	80015ea <HAL_RCC_OscConfig+0x2a6>
 8001606:	e018      	b.n	800163a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800160a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800160e:	2101      	movs	r1, #1
 8001610:	438a      	bics	r2, r1
 8001612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fabe 	bl	8000b94 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fab9 	bl	8000b94 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1e9      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d1f1      	bne.n	800161e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2204      	movs	r2, #4
 8001640:	4013      	ands	r3, r2
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x302>
 8001644:	e0c6      	b.n	80017d4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	231f      	movs	r3, #31
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2238      	movs	r2, #56	; 0x38
 8001654:	4013      	ands	r3, r2
 8001656:	2b20      	cmp	r3, #32
 8001658:	d11e      	bne.n	8001698 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_OscConfig+0x330>)
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0x322>
 8001664:	e0b6      	b.n	80017d4 <HAL_RCC_OscConfig+0x490>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d000      	beq.n	8001670 <HAL_RCC_OscConfig+0x32c>
 800166e:	e0b1      	b.n	80017d4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e1c7      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
 8001674:	40021000 	.word	0x40021000
 8001678:	fffeffff 	.word	0xfffeffff
 800167c:	fffbffff 	.word	0xfffbffff
 8001680:	ffff80ff 	.word	0xffff80ff
 8001684:	ffffc7ff 	.word	0xffffc7ff
 8001688:	00f42400 	.word	0x00f42400
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004
 8001694:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001698:	4bb8      	ldr	r3, [pc, #736]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800169a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	055b      	lsls	r3, r3, #21
 80016a0:	4013      	ands	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x364>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x366>
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d011      	beq.n	80016d2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4bb3      	ldr	r3, [pc, #716]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80016b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b2:	4bb2      	ldr	r3, [pc, #712]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0549      	lsls	r1, r1, #21
 80016b8:	430a      	orrs	r2, r1
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80016bc:	4baf      	ldr	r3, [pc, #700]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80016be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	055b      	lsls	r3, r3, #21
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d2:	4bab      	ldr	r3, [pc, #684]	; (8001980 <HAL_RCC_OscConfig+0x63c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4013      	ands	r3, r2
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016de:	4ba8      	ldr	r3, [pc, #672]	; (8001980 <HAL_RCC_OscConfig+0x63c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4ba7      	ldr	r3, [pc, #668]	; (8001980 <HAL_RCC_OscConfig+0x63c>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0049      	lsls	r1, r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa52 	bl	8000b94 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fa4d 	bl	8000b94 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e17d      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001708:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <HAL_RCC_OscConfig+0x63c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4013      	ands	r3, r2
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x3e6>
 800171c:	4b97      	ldr	r3, [pc, #604]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800171e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001720:	4b96      	ldr	r3, [pc, #600]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	65da      	str	r2, [r3, #92]	; 0x5c
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x420>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x408>
 8001732:	4b92      	ldr	r3, [pc, #584]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	65da      	str	r2, [r3, #92]	; 0x5c
 800173e:	4b8f      	ldr	r3, [pc, #572]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001740:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001742:	4b8e      	ldr	r3, [pc, #568]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	65da      	str	r2, [r3, #92]	; 0x5c
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0x420>
 800174c:	4b8b      	ldr	r3, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800174e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001750:	4b8a      	ldr	r3, [pc, #552]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001752:	2101      	movs	r1, #1
 8001754:	438a      	bics	r2, r1
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c
 8001758:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800175a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800175c:	4b87      	ldr	r3, [pc, #540]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d014      	beq.n	8001796 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fa12 	bl	8000b94 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001774:	e009      	b.n	800178a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fa0d 	bl	8000b94 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	4a80      	ldr	r2, [pc, #512]	; (8001984 <HAL_RCC_OscConfig+0x640>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e13c      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178a:	4b7c      	ldr	r3, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x432>
 8001794:	e013      	b.n	80017be <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7ff f9fd 	bl	8000b94 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800179e:	e009      	b.n	80017b4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff f9f8 	bl	8000b94 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	4a76      	ldr	r2, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x640>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e127      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b4:	4b71      	ldr	r3, [pc, #452]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017be:	231f      	movs	r3, #31
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80017ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80017ce:	496e      	ldr	r1, [pc, #440]	; (8001988 <HAL_RCC_OscConfig+0x644>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2220      	movs	r2, #32
 80017da:	4013      	ands	r3, r2
 80017dc:	d039      	beq.n	8001852 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01b      	beq.n	800181e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b64      	ldr	r3, [pc, #400]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	03c9      	lsls	r1, r1, #15
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff f9ce 	bl	8000b94 <HAL_GetTick>
 80017f8:	0003      	movs	r3, r0
 80017fa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fe:	f7ff f9c9 	bl	8000b94 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0f9      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	4013      	ands	r3, r2
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x4ba>
 800181c:	e019      	b.n	8001852 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001824:	4959      	ldr	r1, [pc, #356]	; (800198c <HAL_RCC_OscConfig+0x648>)
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff f9b3 	bl	8000b94 <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001834:	f7ff f9ae 	bl	8000b94 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0de      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001846:	4b4d      	ldr	r3, [pc, #308]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	4013      	ands	r3, r2
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d100      	bne.n	800185c <HAL_RCC_OscConfig+0x518>
 800185a:	e0d2      	b.n	8001a02 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2238      	movs	r2, #56	; 0x38
 8001862:	4013      	ands	r3, r2
 8001864:	2b10      	cmp	r3, #16
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x526>
 8001868:	e081      	b.n	800196e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d156      	bne.n	8001920 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001878:	4945      	ldr	r1, [pc, #276]	; (8001990 <HAL_RCC_OscConfig+0x64c>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff f989 	bl	8000b94 <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f984 	bl	8000b94 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0b4      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	049b      	lsls	r3, r3, #18
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x650>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	431a      	orrs	r2, r3
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0449      	lsls	r1, r1, #17
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_RCC_OscConfig+0x638>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0549      	lsls	r1, r1, #21
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f94d 	bl	8000b94 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f948 	bl	8000b94 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e078      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	049b      	lsls	r3, r3, #18
 800191a:	4013      	ands	r3, r2
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x5bc>
 800191e:	e070      	b.n	8001a02 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001926:	491a      	ldr	r1, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x64c>)
 8001928:	400a      	ands	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001932:	2103      	movs	r1, #3
 8001934:	438a      	bics	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x638>)
 800193e:	4916      	ldr	r1, [pc, #88]	; (8001998 <HAL_RCC_OscConfig+0x654>)
 8001940:	400a      	ands	r2, r1
 8001942:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f926 	bl	8000b94 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff f921 	bl	8000b94 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e051      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_RCC_OscConfig+0x638>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	049b      	lsls	r3, r3, #18
 8001968:	4013      	ands	r3, r2
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x60a>
 800196c:	e049      	b.n	8001a02 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d112      	bne.n	800199c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e044      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	40007000 	.word	0x40007000
 8001984:	00001388 	.word	0x00001388
 8001988:	efffffff 	.word	0xefffffff
 800198c:	ffbfffff 	.word	0xffbfffff
 8001990:	feffffff 	.word	0xfeffffff
 8001994:	11c1808c 	.word	0x11c1808c
 8001998:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x6c8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2203      	movs	r2, #3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d126      	bne.n	80019fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2270      	movs	r2, #112	; 0x70
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11f      	bne.n	80019fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	23fe      	movs	r3, #254	; 0xfe
 80019c2:	01db      	lsls	r3, r3, #7
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d116      	bne.n	80019fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	23f8      	movs	r3, #248	; 0xf8
 80019d4:	039b      	lsls	r3, r3, #14
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10e      	bne.n	80019fe <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	23e0      	movs	r3, #224	; 0xe0
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	0f5b      	lsrs	r3, r3, #29
 80019f4:	075a      	lsls	r2, r3, #29
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b008      	add	sp, #32
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0e9      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d91e      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2207      	movs	r2, #7
 8001a38:	4393      	bics	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a44:	f7ff f8a6 	bl	8000b94 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7ff f8a1 	bl	8000b94 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a6a      	ldr	r2, [pc, #424]	; (8001c04 <HAL_RCC_ClockConfig+0x1f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0ca      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2207      	movs	r2, #7
 8001a68:	4013      	ands	r3, r2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1ee      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d015      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4013      	ands	r3, r2
 8001a82:	d006      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a84:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8a:	21e0      	movs	r1, #224	; 0xe0
 8001a8c:	01c9      	lsls	r1, r1, #7
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <HAL_RCC_ClockConfig+0x1fc>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d057      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d12b      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e097      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	049b      	lsls	r3, r3, #18
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d11f      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e08b      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae8:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	d113      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e07f      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e074      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e06d      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2207      	movs	r2, #7
 8001b22:	4393      	bics	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b30:	f7ff f830 	bl	8000b94 <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7ff f82b 	bl	8000b94 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <HAL_RCC_ClockConfig+0x1f4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e054      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2238      	movs	r2, #56	; 0x38
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1ec      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2207      	movs	r2, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d21e      	bcs.n	8001bac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2207      	movs	r2, #7
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f808 	bl	8000b94 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7ff f803 	bl	8000b94 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_RCC_ClockConfig+0x1f4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e02c      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <HAL_RCC_ClockConfig+0x200>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bca:	f000 f829 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8001bce:	0001      	movs	r1, r0
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	401a      	ands	r2, r3
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x204>)
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	58d3      	ldr	r3, [r2, r3]
 8001be0:	221f      	movs	r2, #31
 8001be2:	4013      	ands	r3, r2
 8001be4:	000a      	movs	r2, r1
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x208>)
 8001bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x20c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe ff73 	bl	8000adc <HAL_InitTick>
 8001bf6:	0003      	movs	r3, r0
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40022000 	.word	0x40022000
 8001c04:	00001388 	.word	0x00001388
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	fffff0ff 	.word	0xfffff0ff
 8001c10:	ffff8fff 	.word	0xffff8fff
 8001c14:	0800409c 	.word	0x0800409c
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c26:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2238      	movs	r2, #56	; 0x38
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d10f      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c30:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0adb      	lsrs	r3, r3, #11
 8001c36:	2207      	movs	r2, #7
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	0013      	movs	r3, r2
 8001c40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c42:	6839      	ldr	r1, [r7, #0]
 8001c44:	4835      	ldr	r0, [pc, #212]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c46:	f7fe fa5d 	bl	8000104 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	e05d      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2238      	movs	r2, #56	; 0x38
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e054      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2238      	movs	r2, #56	; 0x38
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d138      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2203      	movs	r2, #3
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	2207      	movs	r2, #7
 8001c80:	4013      	ands	r3, r2
 8001c82:	3301      	adds	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	4824      	ldr	r0, [pc, #144]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c90:	f7fe fa38 	bl	8000104 <__udivsi3>
 8001c94:	0003      	movs	r3, r0
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	227f      	movs	r2, #127	; 0x7f
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	434b      	muls	r3, r1
 8001ca4:	617b      	str	r3, [r7, #20]
        break;
 8001ca6:	e00d      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	481c      	ldr	r0, [pc, #112]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cac:	f7fe fa2a 	bl	8000104 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	227f      	movs	r2, #127	; 0x7f
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	434b      	muls	r3, r1
 8001cc0:	617b      	str	r3, [r7, #20]
        break;
 8001cc2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0f5b      	lsrs	r3, r3, #29
 8001cca:	2207      	movs	r2, #7
 8001ccc:	4013      	ands	r3, r2
 8001cce:	3301      	adds	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	6978      	ldr	r0, [r7, #20]
 8001cd6:	f7fe fa15 	bl	8000104 <__udivsi3>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e015      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2238      	movs	r2, #56	; 0x38
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d103      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2238      	movs	r2, #56	; 0x38
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b18      	cmp	r3, #24
 8001cfe:	d103      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d00:	23fa      	movs	r3, #250	; 0xfa
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	e001      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d0c:	693b      	ldr	r3, [r7, #16]
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b006      	add	sp, #24
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	20000000 	.word	0x20000000

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d3c:	f7ff fff2 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d40:	0004      	movs	r4, r0
 8001d42:	f7ff faf3 	bl	800132c <LL_RCC_GetAPB1Prescaler>
 8001d46:	0003      	movs	r3, r0
 8001d48:	0b1a      	lsrs	r2, r3, #12
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	58d3      	ldr	r3, [r2, r3]
 8001d50:	221f      	movs	r2, #31
 8001d52:	4013      	ands	r3, r2
 8001d54:	40dc      	lsrs	r4, r3
 8001d56:	0023      	movs	r3, r4
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	080040dc 	.word	0x080040dc

08001d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d6c:	2313      	movs	r3, #19
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d74:	2312      	movs	r3, #18
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d88:	e0af      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2311      	movs	r3, #17
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	055b      	lsls	r3, r3, #21
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d111      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0549      	lsls	r1, r1, #21
 8001da8:	430a      	orrs	r2, r1
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dac:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	055b      	lsls	r3, r3, #21
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2311      	movs	r3, #17
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	0049      	lsls	r1, r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dd0:	f7fe fee0 	bl	8000b94 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7fe fedb 	bl	8000b94 <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d904      	bls.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001de8:	2313      	movs	r3, #19
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2203      	movs	r2, #3
 8001dee:	701a      	strb	r2, [r3, #0]
        break;
 8001df0:	e005      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0ed      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001dfe:	2313      	movs	r3, #19
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d15f      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d014      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0249      	lsls	r1, r1, #9
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e42:	491f      	ldr	r1, [pc, #124]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4013      	ands	r3, r2
 8001e54:	d016      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7fe fe9d 	bl	8000b94 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5e:	e00c      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7fe fe98 	bl	8000b94 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d904      	bls.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001e70:	2313      	movs	r3, #19
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2203      	movs	r2, #3
 8001e76:	701a      	strb	r2, [r3, #0]
            break;
 8001e78:	e004      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	d0ed      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001e84:	2313      	movs	r3, #19
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10a      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ea2:	e017      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2213      	movs	r2, #19
 8001eaa:	18ba      	adds	r2, r7, r2
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	e010      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	fffffcff 	.word	0xfffffcff
 8001ec0:	fffeffff 	.word	0xfffeffff
 8001ec4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	2213      	movs	r2, #19
 8001ece:	18ba      	adds	r2, r7, r2
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed4:	2311      	movs	r3, #17
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4bb6      	ldr	r3, [pc, #728]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee2:	4bb5      	ldr	r3, [pc, #724]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ee4:	49b5      	ldr	r1, [pc, #724]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef4:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4393      	bics	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4bad      	ldr	r3, [pc, #692]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d009      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f12:	4ba9      	ldr	r3, [pc, #676]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	220c      	movs	r2, #12
 8001f18:	4393      	bics	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4ba5      	ldr	r3, [pc, #660]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f30:	4ba1      	ldr	r3, [pc, #644]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	2230      	movs	r2, #48	; 0x30
 8001f36:	4393      	bics	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2210      	movs	r2, #16
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f4e:	4b9a      	ldr	r3, [pc, #616]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	4a9b      	ldr	r2, [pc, #620]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	4b96      	ldr	r3, [pc, #600]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	015b      	lsls	r3, r3, #5
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001f6e:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	4a94      	ldr	r2, [pc, #592]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d009      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f8e:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	4a8d      	ldr	r2, [pc, #564]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9c:	4b86      	ldr	r3, [pc, #536]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4013      	ands	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fae:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	4a86      	ldr	r2, [pc, #536]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fcc:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	4b77      	ldr	r3, [pc, #476]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fea:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	4a79      	ldr	r2, [pc, #484]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69da      	ldr	r2, [r3, #28]
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	01db      	lsls	r3, r3, #7
 8002006:	4013      	ands	r3, r2
 8002008:	d015      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800200a:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	0899      	lsrs	r1, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002016:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002018:	430a      	orrs	r2, r1
 800201a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	05db      	lsls	r3, r3, #23
 8002024:	429a      	cmp	r2, r3
 8002026:	d106      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002028:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	0249      	lsls	r1, r1, #9
 8002032:	430a      	orrs	r2, r1
 8002034:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	031b      	lsls	r3, r3, #12
 800203e:	4013      	ands	r3, r2
 8002040:	d009      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002042:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	4393      	bics	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002052:	430a      	orrs	r2, r1
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	039b      	lsls	r3, r3, #14
 800205e:	4013      	ands	r3, r2
 8002060:	d016      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002062:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002068:	4013      	ands	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002070:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002072:	430a      	orrs	r2, r1
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	03db      	lsls	r3, r3, #15
 800207e:	429a      	cmp	r2, r3
 8002080:	d106      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	0449      	lsls	r1, r1, #17
 800208c:	430a      	orrs	r2, r1
 800208e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	03db      	lsls	r3, r3, #15
 8002098:	4013      	ands	r3, r2
 800209a:	d016      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	045b      	lsls	r3, r3, #17
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	0449      	lsls	r1, r1, #17
 80020c6:	430a      	orrs	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	4013      	ands	r3, r2
 80020d4:	d014      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	2203      	movs	r2, #3
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d106      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0249      	lsls	r1, r1, #9
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	019b      	lsls	r3, r3, #6
 8002108:	4013      	ands	r3, r2
 800210a:	d014      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	220c      	movs	r2, #12
 8002112:	4393      	bics	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800211c:	430a      	orrs	r2, r1
 800211e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b04      	cmp	r3, #4
 8002126:	d106      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	0249      	lsls	r1, r1, #9
 8002132:	430a      	orrs	r2, r1
 8002134:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	045b      	lsls	r3, r3, #17
 800213e:	4013      	ands	r3, r2
 8002140:	d016      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002152:	430a      	orrs	r2, r1
 8002154:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	429a      	cmp	r2, r3
 8002160:	d106      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	0449      	lsls	r1, r1, #17
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	049b      	lsls	r3, r3, #18
 8002178:	4013      	ands	r3, r2
 800217a:	d016      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002182:	4013      	ands	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800218c:	430a      	orrs	r2, r1
 800218e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	429a      	cmp	r2, r3
 800219a:	d106      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0449      	lsls	r1, r1, #17
 80021a6:	430a      	orrs	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021aa:	2312      	movs	r3, #18
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b006      	add	sp, #24
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	efffffff 	.word	0xefffffff
 80021c0:	fffff3ff 	.word	0xfffff3ff
 80021c4:	fffffcff 	.word	0xfffffcff
 80021c8:	fff3ffff 	.word	0xfff3ffff
 80021cc:	ffcfffff 	.word	0xffcfffff
 80021d0:	ffffcfff 	.word	0xffffcfff
 80021d4:	ffff3fff 	.word	0xffff3fff
 80021d8:	ffbfffff 	.word	0xffbfffff
 80021dc:	feffffff 	.word	0xfeffffff

080021e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e046      	b.n	8002280 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2284      	movs	r2, #132	; 0x84
 80021f6:	589b      	ldr	r3, [r3, r2]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f7fe fb66 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2284      	movs	r2, #132	; 0x84
 8002210:	2124      	movs	r1, #36	; 0x24
 8002212:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	0018      	movs	r0, r3
 8002228:	f000 fb12 	bl	8002850 <UART_SetConfig>
 800222c:	0003      	movs	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e024      	b.n	8002280 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 fe87 	bl	8002f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	490d      	ldr	r1, [pc, #52]	; (8002288 <HAL_UART_Init+0xa8>)
 8002252:	400a      	ands	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	212a      	movs	r1, #42	; 0x2a
 8002262:	438a      	bics	r2, r1
 8002264:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2101      	movs	r1, #1
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 ff1f 	bl	80030bc <UART_CheckIdleState>
 800227e:	0003      	movs	r3, r0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}
 8002288:	ffffb7ff 	.word	0xffffb7ff

0800228c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	1dbb      	adds	r3, r7, #6
 8002298:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2284      	movs	r2, #132	; 0x84
 800229e:	589b      	ldr	r3, [r3, r2]
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d000      	beq.n	80022a6 <HAL_UART_Transmit_IT+0x1a>
 80022a4:	e07f      	b.n	80023a6 <HAL_UART_Transmit_IT+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_UART_Transmit_IT+0x28>
 80022ac:	1dbb      	adds	r3, r7, #6
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e077      	b.n	80023a8 <HAL_UART_Transmit_IT+0x11c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d109      	bne.n	80022d8 <HAL_UART_Transmit_IT+0x4c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e067      	b.n	80023a8 <HAL_UART_Transmit_IT+0x11c>
      }
    }

    __HAL_LOCK(huart);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Transmit_IT+0x5a>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e060      	b.n	80023a8 <HAL_UART_Transmit_IT+0x11c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1dba      	adds	r2, r7, #6
 80022f8:	2154      	movs	r1, #84	; 0x54
 80022fa:	8812      	ldrh	r2, [r2, #0]
 80022fc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1dba      	adds	r2, r7, #6
 8002302:	2156      	movs	r1, #86	; 0x56
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	228c      	movs	r2, #140	; 0x8c
 8002312:	2100      	movs	r1, #0
 8002314:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2284      	movs	r2, #132	; 0x84
 800231a:	2121      	movs	r1, #33	; 0x21
 800231c:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	059b      	lsls	r3, r3, #22
 8002326:	429a      	cmp	r2, r3
 8002328:	d11e      	bne.n	8002368 <HAL_UART_Transmit_IT+0xdc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	015b      	lsls	r3, r3, #5
 8002332:	429a      	cmp	r2, r3
 8002334:	d107      	bne.n	8002346 <HAL_UART_Transmit_IT+0xba>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_UART_Transmit_IT+0x124>)
 8002342:	675a      	str	r2, [r3, #116]	; 0x74
 8002344:	e002      	b.n	800234c <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_UART_Transmit_IT+0x128>)
 800234a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	0409      	lsls	r1, r1, #16
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	e01c      	b.n	80023a2 <HAL_UART_Transmit_IT+0x116>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_UART_Transmit_IT+0xf8>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <HAL_UART_Transmit_IT+0xf8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <HAL_UART_Transmit_IT+0x12c>)
 8002380:	675a      	str	r2, [r3, #116]	; 0x74
 8002382:	e002      	b.n	800238a <HAL_UART_Transmit_IT+0xfe>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_UART_Transmit_IT+0x130>)
 8002388:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	2100      	movs	r1, #0
 8002390:	5499      	strb	r1, [r3, r2]

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_UART_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800347d 	.word	0x0800347d
 80023b4:	080033d5 	.word	0x080033d5
 80023b8:	0800335b 	.word	0x0800335b
 80023bc:	080032eb 	.word	0x080032eb

080023c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4abc      	ldr	r2, [pc, #752]	; (80026d4 <HAL_UART_IRQHandler+0x314>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d117      	bne.n	800241e <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2220      	movs	r2, #32
 80023f2:	4013      	ands	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2220      	movs	r2, #32
 80023fa:	4013      	ands	r3, r2
 80023fc:	d104      	bne.n	8002408 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	055b      	lsls	r3, r3, #21
 8002404:	4013      	ands	r3, r2
 8002406:	d00a      	beq.n	800241e <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	2b00      	cmp	r3, #0
 800240e:	d100      	bne.n	8002412 <HAL_UART_IRQHandler+0x52>
 8002410:	e202      	b.n	8002818 <HAL_UART_IRQHandler+0x458>
      {
        huart->RxISR(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	0010      	movs	r0, r2
 800241a:	4798      	blx	r3
      }
      return;
 800241c:	e1fc      	b.n	8002818 <HAL_UART_IRQHandler+0x458>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d100      	bne.n	8002426 <HAL_UART_IRQHandler+0x66>
 8002424:	e0de      	b.n	80025e4 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4aab      	ldr	r2, [pc, #684]	; (80026d8 <HAL_UART_IRQHandler+0x318>)
 800242a:	4013      	ands	r3, r2
 800242c:	d104      	bne.n	8002438 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4aaa      	ldr	r2, [pc, #680]	; (80026dc <HAL_UART_IRQHandler+0x31c>)
 8002432:	4013      	ands	r3, r2
 8002434:	d100      	bne.n	8002438 <HAL_UART_IRQHandler+0x78>
 8002436:	e0d5      	b.n	80025e4 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2201      	movs	r2, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d010      	beq.n	8002462 <HAL_UART_IRQHandler+0xa2>
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4013      	ands	r3, r2
 8002448:	d00b      	beq.n	8002462 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	228c      	movs	r2, #140	; 0x8c
 8002456:	589b      	ldr	r3, [r3, r2]
 8002458:	2201      	movs	r2, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	218c      	movs	r1, #140	; 0x8c
 8002460:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d00f      	beq.n	800248a <HAL_UART_IRQHandler+0xca>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2201      	movs	r2, #1
 800246e:	4013      	ands	r3, r2
 8002470:	d00b      	beq.n	800248a <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2202      	movs	r2, #2
 8002478:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	228c      	movs	r2, #140	; 0x8c
 800247e:	589b      	ldr	r3, [r3, r2]
 8002480:	2204      	movs	r2, #4
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	218c      	movs	r1, #140	; 0x8c
 8002488:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2204      	movs	r2, #4
 800248e:	4013      	ands	r3, r2
 8002490:	d00f      	beq.n	80024b2 <HAL_UART_IRQHandler+0xf2>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d00b      	beq.n	80024b2 <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	228c      	movs	r2, #140	; 0x8c
 80024a6:	589b      	ldr	r3, [r3, r2]
 80024a8:	2202      	movs	r2, #2
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	218c      	movs	r1, #140	; 0x8c
 80024b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2208      	movs	r2, #8
 80024b6:	4013      	ands	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2220      	movs	r2, #32
 80024be:	4013      	ands	r3, r2
 80024c0:	d103      	bne.n	80024ca <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4a84      	ldr	r2, [pc, #528]	; (80026d8 <HAL_UART_IRQHandler+0x318>)
 80024c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024c8:	d00b      	beq.n	80024e2 <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	228c      	movs	r2, #140	; 0x8c
 80024d6:	589b      	ldr	r3, [r3, r2]
 80024d8:	2208      	movs	r2, #8
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	218c      	movs	r1, #140	; 0x8c
 80024e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d011      	beq.n	8002510 <HAL_UART_IRQHandler+0x150>
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	04db      	lsls	r3, r3, #19
 80024f2:	4013      	ands	r3, r2
 80024f4:	d00c      	beq.n	8002510 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	228c      	movs	r2, #140	; 0x8c
 8002504:	589b      	ldr	r3, [r3, r2]
 8002506:	2220      	movs	r2, #32
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	218c      	movs	r1, #140	; 0x8c
 800250e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	228c      	movs	r2, #140	; 0x8c
 8002514:	589b      	ldr	r3, [r3, r2]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <HAL_UART_IRQHandler+0x15c>
 800251a:	e17f      	b.n	800281c <HAL_UART_IRQHandler+0x45c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2220      	movs	r2, #32
 8002520:	4013      	ands	r3, r2
 8002522:	d011      	beq.n	8002548 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2220      	movs	r2, #32
 8002528:	4013      	ands	r3, r2
 800252a:	d104      	bne.n	8002536 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	055b      	lsls	r3, r3, #21
 8002532:	4013      	ands	r3, r2
 8002534:	d008      	beq.n	8002548 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	0010      	movs	r0, r2
 8002546:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	228c      	movs	r2, #140	; 0x8c
 800254c:	589b      	ldr	r3, [r3, r2]
 800254e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	4013      	ands	r3, r2
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d003      	beq.n	8002566 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2228      	movs	r2, #40	; 0x28
 8002562:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002564:	d033      	beq.n	80025ce <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 fe75 	bl	8003258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	4013      	ands	r3, r2
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d123      	bne.n	80025c4 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	438a      	bics	r2, r1
 800258a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002598:	4a51      	ldr	r2, [pc, #324]	; (80026e0 <HAL_UART_IRQHandler+0x320>)
 800259a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fe fc77 	bl	8000e94 <HAL_DMA_Abort_IT>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d01a      	beq.n	80025e0 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b4:	0018      	movs	r0, r3
 80025b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e012      	b.n	80025e0 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fe f873 	bl	80006a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c2:	e00d      	b.n	80025e0 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7fe f86e 	bl	80006a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025cc:	e008      	b.n	80025e0 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7fe f869 	bl	80006a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	228c      	movs	r2, #140	; 0x8c
 80025da:	2100      	movs	r1, #0
 80025dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80025de:	e11d      	b.n	800281c <HAL_UART_IRQHandler+0x45c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	46c0      	nop			; (mov r8, r8)
    return;
 80025e2:	e11b      	b.n	800281c <HAL_UART_IRQHandler+0x45c>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d000      	beq.n	80025ee <HAL_UART_IRQHandler+0x22e>
 80025ec:	e0bf      	b.n	800276e <HAL_UART_IRQHandler+0x3ae>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2210      	movs	r2, #16
 80025f2:	4013      	ands	r3, r2
 80025f4:	d100      	bne.n	80025f8 <HAL_UART_IRQHandler+0x238>
 80025f6:	e0ba      	b.n	800276e <HAL_UART_IRQHandler+0x3ae>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2210      	movs	r2, #16
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_UART_IRQHandler+0x242>
 8002600:	e0b5      	b.n	800276e <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2210      	movs	r2, #16
 8002608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	4013      	ands	r3, r2
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d167      	bne.n	80026e8 <HAL_UART_IRQHandler+0x328>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	2108      	movs	r1, #8
 8002622:	187b      	adds	r3, r7, r1
 8002624:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002626:	187b      	adds	r3, r7, r1
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <HAL_UART_IRQHandler+0x270>
 800262e:	e0f7      	b.n	8002820 <HAL_UART_IRQHandler+0x460>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	225c      	movs	r2, #92	; 0x5c
 8002634:	5a9b      	ldrh	r3, [r3, r2]
 8002636:	2208      	movs	r2, #8
 8002638:	18ba      	adds	r2, r7, r2
 800263a:	8812      	ldrh	r2, [r2, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d300      	bcc.n	8002642 <HAL_UART_IRQHandler+0x282>
 8002640:	e0ee      	b.n	8002820 <HAL_UART_IRQHandler+0x460>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2208      	movs	r2, #8
 8002646:	18ba      	adds	r2, r7, r2
 8002648:	215e      	movs	r1, #94	; 0x5e
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2220      	movs	r2, #32
 8002658:	4013      	ands	r3, r2
 800265a:	d12b      	bne.n	80026b4 <HAL_UART_IRQHandler+0x2f4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	491f      	ldr	r1, [pc, #124]	; (80026e4 <HAL_UART_IRQHandler+0x324>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	438a      	bics	r2, r1
 800268a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2288      	movs	r2, #136	; 0x88
 8002690:	2120      	movs	r1, #32
 8002692:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2110      	movs	r1, #16
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7fe fb90 	bl	8000dd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	225c      	movs	r2, #92	; 0x5c
 80026b8:	5a9a      	ldrh	r2, [r3, r2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	215e      	movs	r1, #94	; 0x5e
 80026be:	5a5b      	ldrh	r3, [r3, r1]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f8b4 	bl	8002838 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026d0:	e0a6      	b.n	8002820 <HAL_UART_IRQHandler+0x460>
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	0000080f 	.word	0x0000080f
 80026d8:	10000001 	.word	0x10000001
 80026dc:	04000120 	.word	0x04000120
 80026e0:	080032bd 	.word	0x080032bd
 80026e4:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	225c      	movs	r2, #92	; 0x5c
 80026ec:	5a99      	ldrh	r1, [r3, r2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	225e      	movs	r2, #94	; 0x5e
 80026f2:	5a9b      	ldrh	r3, [r3, r2]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	230a      	movs	r3, #10
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	1a8a      	subs	r2, r1, r2
 80026fc:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	225e      	movs	r2, #94	; 0x5e
 8002702:	5a9b      	ldrh	r3, [r3, r2]
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d100      	bne.n	800270c <HAL_UART_IRQHandler+0x34c>
 800270a:	e08b      	b.n	8002824 <HAL_UART_IRQHandler+0x464>
          &&(nb_rx_data > 0U) )
 800270c:	230a      	movs	r3, #10
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d100      	bne.n	8002718 <HAL_UART_IRQHandler+0x358>
 8002716:	e085      	b.n	8002824 <HAL_UART_IRQHandler+0x464>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4943      	ldr	r1, [pc, #268]	; (8002830 <HAL_UART_IRQHandler+0x470>)
 8002724:	400a      	ands	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4940      	ldr	r1, [pc, #256]	; (8002834 <HAL_UART_IRQHandler+0x474>)
 8002734:	400a      	ands	r2, r1
 8002736:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2288      	movs	r2, #136	; 0x88
 800273c:	2120      	movs	r1, #32
 800273e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2110      	movs	r1, #16
 8002758:	438a      	bics	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800275c:	230a      	movs	r3, #10
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	881a      	ldrh	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0011      	movs	r1, r2
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f866 	bl	8002838 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800276c:	e05a      	b.n	8002824 <HAL_UART_IRQHandler+0x464>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	035b      	lsls	r3, r3, #13
 8002774:	4013      	ands	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_UART_IRQHandler+0x3d6>
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	03db      	lsls	r3, r3, #15
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_UART_IRQHandler+0x3d6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	0352      	lsls	r2, r2, #13
 800278a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fee7 	bl	8003562 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002794:	e049      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	4013      	ands	r3, r2
 800279c:	d012      	beq.n	80027c4 <HAL_UART_IRQHandler+0x404>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	4013      	ands	r3, r2
 80027a4:	d104      	bne.n	80027b0 <HAL_UART_IRQHandler+0x3f0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	4013      	ands	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_UART_IRQHandler+0x404>
  {
    if (huart->TxISR != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d037      	beq.n	8002828 <HAL_UART_IRQHandler+0x468>
    {
      huart->TxISR(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	0010      	movs	r0, r2
 80027c0:	4798      	blx	r3
    }
    return;
 80027c2:	e031      	b.n	8002828 <HAL_UART_IRQHandler+0x468>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2240      	movs	r2, #64	; 0x40
 80027c8:	4013      	ands	r3, r2
 80027ca:	d008      	beq.n	80027de <HAL_UART_IRQHandler+0x41e>
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	4013      	ands	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_UART_IRQHandler+0x41e>
  {
    UART_EndTransmit_IT(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 fea8 	bl	800352c <UART_EndTransmit_IT>
    return;
 80027dc:	e025      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	4013      	ands	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_UART_IRQHandler+0x43c>
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	4013      	ands	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_UART_IRQHandler+0x43c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fec4 	bl	8003582 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027fa:	e016      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	045b      	lsls	r3, r3, #17
 8002802:	4013      	ands	r3, r2
 8002804:	d011      	beq.n	800282a <HAL_UART_IRQHandler+0x46a>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da0e      	bge.n	800282a <HAL_UART_IRQHandler+0x46a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 feaf 	bl	8003572 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	e008      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
      return;
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	e006      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
    return;
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	e004      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
      return;
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	e002      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
      return;
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	e000      	b.n	800282a <HAL_UART_IRQHandler+0x46a>
    return;
 8002828:	46c0      	nop			; (mov r8, r8)
  }
}
 800282a:	46bd      	mov	sp, r7
 800282c:	b008      	add	sp, #32
 800282e:	bd80      	pop	{r7, pc}
 8002830:	fffffedf 	.word	0xfffffedf
 8002834:	effffffe 	.word	0xeffffffe

08002838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	000a      	movs	r2, r1
 8002842:	1cbb      	adds	r3, r7, #2
 8002844:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b091      	sub	sp, #68	; 0x44
 8002854:	af00      	add	r7, sp, #0
 8002856:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002858:	231a      	movs	r3, #26
 800285a:	2220      	movs	r2, #32
 800285c:	4694      	mov	ip, r2
 800285e:	44bc      	add	ip, r7
 8002860:	4463      	add	r3, ip
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	431a      	orrs	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	431a      	orrs	r2, r3
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4313      	orrs	r3, r2
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002884:	4313      	orrs	r3, r2
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4ac7      	ldr	r2, [pc, #796]	; (8002bac <UART_SetConfig+0x35c>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289a:	430b      	orrs	r3, r1
 800289c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4ac2      	ldr	r2, [pc, #776]	; (8002bb0 <UART_SetConfig+0x360>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	68d9      	ldr	r1, [r3, #12]
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	0003      	movs	r3, r0
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4abc      	ldr	r2, [pc, #752]	; (8002bb4 <UART_SetConfig+0x364>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <UART_SetConfig+0x8c>
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4aba      	ldr	r2, [pc, #744]	; (8002bb8 <UART_SetConfig+0x368>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d8:	4313      	orrs	r3, r2
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4ab6      	ldr	r2, [pc, #728]	; (8002bbc <UART_SetConfig+0x36c>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ee:	430b      	orrs	r3, r1
 80028f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	220f      	movs	r2, #15
 80028fa:	4393      	bics	r3, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	0003      	movs	r3, r0
 8002908:	430b      	orrs	r3, r1
 800290a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4aab      	ldr	r2, [pc, #684]	; (8002bc0 <UART_SetConfig+0x370>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d134      	bne.n	8002980 <UART_SetConfig+0x130>
 8002916:	4bab      	ldr	r3, [pc, #684]	; (8002bc4 <UART_SetConfig+0x374>)
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	2203      	movs	r2, #3
 800291c:	4013      	ands	r3, r2
 800291e:	2b01      	cmp	r3, #1
 8002920:	d015      	beq.n	800294e <UART_SetConfig+0xfe>
 8002922:	d304      	bcc.n	800292e <UART_SetConfig+0xde>
 8002924:	2b02      	cmp	r3, #2
 8002926:	d00a      	beq.n	800293e <UART_SetConfig+0xee>
 8002928:	2b03      	cmp	r3, #3
 800292a:	d018      	beq.n	800295e <UART_SetConfig+0x10e>
 800292c:	e01f      	b.n	800296e <UART_SetConfig+0x11e>
 800292e:	231b      	movs	r3, #27
 8002930:	2220      	movs	r2, #32
 8002932:	4694      	mov	ip, r2
 8002934:	44bc      	add	ip, r7
 8002936:	4463      	add	r3, ip
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e16e      	b.n	8002c1c <UART_SetConfig+0x3cc>
 800293e:	231b      	movs	r3, #27
 8002940:	2220      	movs	r2, #32
 8002942:	4694      	mov	ip, r2
 8002944:	44bc      	add	ip, r7
 8002946:	4463      	add	r3, ip
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e166      	b.n	8002c1c <UART_SetConfig+0x3cc>
 800294e:	231b      	movs	r3, #27
 8002950:	2220      	movs	r2, #32
 8002952:	4694      	mov	ip, r2
 8002954:	44bc      	add	ip, r7
 8002956:	4463      	add	r3, ip
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e15e      	b.n	8002c1c <UART_SetConfig+0x3cc>
 800295e:	231b      	movs	r3, #27
 8002960:	2220      	movs	r2, #32
 8002962:	4694      	mov	ip, r2
 8002964:	44bc      	add	ip, r7
 8002966:	4463      	add	r3, ip
 8002968:	2208      	movs	r2, #8
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e156      	b.n	8002c1c <UART_SetConfig+0x3cc>
 800296e:	231b      	movs	r3, #27
 8002970:	2220      	movs	r2, #32
 8002972:	4694      	mov	ip, r2
 8002974:	44bc      	add	ip, r7
 8002976:	4463      	add	r3, ip
 8002978:	2210      	movs	r2, #16
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	e14d      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a90      	ldr	r2, [pc, #576]	; (8002bc8 <UART_SetConfig+0x378>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d137      	bne.n	80029fa <UART_SetConfig+0x1aa>
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <UART_SetConfig+0x374>)
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	220c      	movs	r2, #12
 8002990:	4013      	ands	r3, r2
 8002992:	2b04      	cmp	r3, #4
 8002994:	d018      	beq.n	80029c8 <UART_SetConfig+0x178>
 8002996:	d802      	bhi.n	800299e <UART_SetConfig+0x14e>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <UART_SetConfig+0x158>
 800299c:	e024      	b.n	80029e8 <UART_SetConfig+0x198>
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d00a      	beq.n	80029b8 <UART_SetConfig+0x168>
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d018      	beq.n	80029d8 <UART_SetConfig+0x188>
 80029a6:	e01f      	b.n	80029e8 <UART_SetConfig+0x198>
 80029a8:	231b      	movs	r3, #27
 80029aa:	2220      	movs	r2, #32
 80029ac:	4694      	mov	ip, r2
 80029ae:	44bc      	add	ip, r7
 80029b0:	4463      	add	r3, ip
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e131      	b.n	8002c1c <UART_SetConfig+0x3cc>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2220      	movs	r2, #32
 80029bc:	4694      	mov	ip, r2
 80029be:	44bc      	add	ip, r7
 80029c0:	4463      	add	r3, ip
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e129      	b.n	8002c1c <UART_SetConfig+0x3cc>
 80029c8:	231b      	movs	r3, #27
 80029ca:	2220      	movs	r2, #32
 80029cc:	4694      	mov	ip, r2
 80029ce:	44bc      	add	ip, r7
 80029d0:	4463      	add	r3, ip
 80029d2:	2204      	movs	r2, #4
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e121      	b.n	8002c1c <UART_SetConfig+0x3cc>
 80029d8:	231b      	movs	r3, #27
 80029da:	2220      	movs	r2, #32
 80029dc:	4694      	mov	ip, r2
 80029de:	44bc      	add	ip, r7
 80029e0:	4463      	add	r3, ip
 80029e2:	2208      	movs	r2, #8
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e119      	b.n	8002c1c <UART_SetConfig+0x3cc>
 80029e8:	231b      	movs	r3, #27
 80029ea:	2220      	movs	r2, #32
 80029ec:	4694      	mov	ip, r2
 80029ee:	44bc      	add	ip, r7
 80029f0:	4463      	add	r3, ip
 80029f2:	2210      	movs	r2, #16
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	e110      	b.n	8002c1c <UART_SetConfig+0x3cc>
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a73      	ldr	r2, [pc, #460]	; (8002bcc <UART_SetConfig+0x37c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d137      	bne.n	8002a74 <UART_SetConfig+0x224>
 8002a04:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <UART_SetConfig+0x374>)
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	2230      	movs	r2, #48	; 0x30
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d018      	beq.n	8002a42 <UART_SetConfig+0x1f2>
 8002a10:	d802      	bhi.n	8002a18 <UART_SetConfig+0x1c8>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <UART_SetConfig+0x1d2>
 8002a16:	e024      	b.n	8002a62 <UART_SetConfig+0x212>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d00a      	beq.n	8002a32 <UART_SetConfig+0x1e2>
 8002a1c:	2b30      	cmp	r3, #48	; 0x30
 8002a1e:	d018      	beq.n	8002a52 <UART_SetConfig+0x202>
 8002a20:	e01f      	b.n	8002a62 <UART_SetConfig+0x212>
 8002a22:	231b      	movs	r3, #27
 8002a24:	2220      	movs	r2, #32
 8002a26:	4694      	mov	ip, r2
 8002a28:	44bc      	add	ip, r7
 8002a2a:	4463      	add	r3, ip
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e0f4      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002a32:	231b      	movs	r3, #27
 8002a34:	2220      	movs	r2, #32
 8002a36:	4694      	mov	ip, r2
 8002a38:	44bc      	add	ip, r7
 8002a3a:	4463      	add	r3, ip
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e0ec      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002a42:	231b      	movs	r3, #27
 8002a44:	2220      	movs	r2, #32
 8002a46:	4694      	mov	ip, r2
 8002a48:	44bc      	add	ip, r7
 8002a4a:	4463      	add	r3, ip
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e0e4      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002a52:	231b      	movs	r3, #27
 8002a54:	2220      	movs	r2, #32
 8002a56:	4694      	mov	ip, r2
 8002a58:	44bc      	add	ip, r7
 8002a5a:	4463      	add	r3, ip
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e0dc      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002a62:	231b      	movs	r3, #27
 8002a64:	2220      	movs	r2, #32
 8002a66:	4694      	mov	ip, r2
 8002a68:	44bc      	add	ip, r7
 8002a6a:	4463      	add	r3, ip
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	e0d3      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <UART_SetConfig+0x380>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d107      	bne.n	8002a8e <UART_SetConfig+0x23e>
 8002a7e:	231b      	movs	r3, #27
 8002a80:	2220      	movs	r2, #32
 8002a82:	4694      	mov	ip, r2
 8002a84:	44bc      	add	ip, r7
 8002a86:	4463      	add	r3, ip
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e0c6      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <UART_SetConfig+0x384>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d107      	bne.n	8002aa8 <UART_SetConfig+0x258>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4694      	mov	ip, r2
 8002a9e:	44bc      	add	ip, r7
 8002aa0:	4463      	add	r3, ip
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e0b9      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <UART_SetConfig+0x388>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d107      	bne.n	8002ac2 <UART_SetConfig+0x272>
 8002ab2:	231b      	movs	r3, #27
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4694      	mov	ip, r2
 8002ab8:	44bc      	add	ip, r7
 8002aba:	4463      	add	r3, ip
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e0ac      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3b      	ldr	r2, [pc, #236]	; (8002bb4 <UART_SetConfig+0x364>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d141      	bne.n	8002b50 <UART_SetConfig+0x300>
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <UART_SetConfig+0x374>)
 8002ace:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ad0:	23c0      	movs	r3, #192	; 0xc0
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	00d2      	lsls	r2, r2, #3
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <UART_SetConfig+0x2ce>
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	00d2      	lsls	r2, r2, #3
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d802      	bhi.n	8002aec <UART_SetConfig+0x29c>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <UART_SetConfig+0x2ae>
 8002aea:	e028      	b.n	8002b3e <UART_SetConfig+0x2ee>
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00c      	beq.n	8002b0e <UART_SetConfig+0x2be>
 8002af4:	22c0      	movs	r2, #192	; 0xc0
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <UART_SetConfig+0x2de>
 8002afc:	e01f      	b.n	8002b3e <UART_SetConfig+0x2ee>
 8002afe:	231b      	movs	r3, #27
 8002b00:	2220      	movs	r2, #32
 8002b02:	4694      	mov	ip, r2
 8002b04:	44bc      	add	ip, r7
 8002b06:	4463      	add	r3, ip
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e086      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002b0e:	231b      	movs	r3, #27
 8002b10:	2220      	movs	r2, #32
 8002b12:	4694      	mov	ip, r2
 8002b14:	44bc      	add	ip, r7
 8002b16:	4463      	add	r3, ip
 8002b18:	2202      	movs	r2, #2
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e07e      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002b1e:	231b      	movs	r3, #27
 8002b20:	2220      	movs	r2, #32
 8002b22:	4694      	mov	ip, r2
 8002b24:	44bc      	add	ip, r7
 8002b26:	4463      	add	r3, ip
 8002b28:	2204      	movs	r2, #4
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e076      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002b2e:	231b      	movs	r3, #27
 8002b30:	2220      	movs	r2, #32
 8002b32:	4694      	mov	ip, r2
 8002b34:	44bc      	add	ip, r7
 8002b36:	4463      	add	r3, ip
 8002b38:	2208      	movs	r2, #8
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e06e      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002b3e:	231b      	movs	r3, #27
 8002b40:	2220      	movs	r2, #32
 8002b42:	4694      	mov	ip, r2
 8002b44:	44bc      	add	ip, r7
 8002b46:	4463      	add	r3, ip
 8002b48:	2210      	movs	r2, #16
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	e065      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <UART_SetConfig+0x368>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d159      	bne.n	8002c0e <UART_SetConfig+0x3be>
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <UART_SetConfig+0x374>)
 8002b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b5e:	23c0      	movs	r3, #192	; 0xc0
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0052      	lsls	r2, r2, #1
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d037      	beq.n	8002bdc <UART_SetConfig+0x38c>
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	0052      	lsls	r2, r2, #1
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d802      	bhi.n	8002b7a <UART_SetConfig+0x32a>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <UART_SetConfig+0x33c>
 8002b78:	e040      	b.n	8002bfc <UART_SetConfig+0x3ac>
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	0092      	lsls	r2, r2, #2
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00c      	beq.n	8002b9c <UART_SetConfig+0x34c>
 8002b82:	22c0      	movs	r2, #192	; 0xc0
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d030      	beq.n	8002bec <UART_SetConfig+0x39c>
 8002b8a:	e037      	b.n	8002bfc <UART_SetConfig+0x3ac>
 8002b8c:	231b      	movs	r3, #27
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4694      	mov	ip, r2
 8002b92:	44bc      	add	ip, r7
 8002b94:	4463      	add	r3, ip
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e03f      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002b9c:	231b      	movs	r3, #27
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	4694      	mov	ip, r2
 8002ba2:	44bc      	add	ip, r7
 8002ba4:	4463      	add	r3, ip
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e037      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002bac:	cfff69f3 	.word	0xcfff69f3
 8002bb0:	ffffcfff 	.word	0xffffcfff
 8002bb4:	40008000 	.word	0x40008000
 8002bb8:	40008400 	.word	0x40008400
 8002bbc:	11fff4ff 	.word	0x11fff4ff
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40004800 	.word	0x40004800
 8002bd0:	40004c00 	.word	0x40004c00
 8002bd4:	40005000 	.word	0x40005000
 8002bd8:	40013c00 	.word	0x40013c00
 8002bdc:	231b      	movs	r3, #27
 8002bde:	2220      	movs	r2, #32
 8002be0:	4694      	mov	ip, r2
 8002be2:	44bc      	add	ip, r7
 8002be4:	4463      	add	r3, ip
 8002be6:	2204      	movs	r2, #4
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e017      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002bec:	231b      	movs	r3, #27
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4694      	mov	ip, r2
 8002bf2:	44bc      	add	ip, r7
 8002bf4:	4463      	add	r3, ip
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e00f      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002bfc:	231b      	movs	r3, #27
 8002bfe:	2220      	movs	r2, #32
 8002c00:	4694      	mov	ip, r2
 8002c02:	44bc      	add	ip, r7
 8002c04:	4463      	add	r3, ip
 8002c06:	2210      	movs	r2, #16
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	e006      	b.n	8002c1c <UART_SetConfig+0x3cc>
 8002c0e:	231b      	movs	r3, #27
 8002c10:	2220      	movs	r2, #32
 8002c12:	4694      	mov	ip, r2
 8002c14:	44bc      	add	ip, r7
 8002c16:	4463      	add	r3, ip
 8002c18:	2210      	movs	r2, #16
 8002c1a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4ac5      	ldr	r2, [pc, #788]	; (8002f38 <UART_SetConfig+0x6e8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d005      	beq.n	8002c32 <UART_SetConfig+0x3e2>
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4ac4      	ldr	r2, [pc, #784]	; (8002f3c <UART_SetConfig+0x6ec>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d000      	beq.n	8002c32 <UART_SetConfig+0x3e2>
 8002c30:	e094      	b.n	8002d5c <UART_SetConfig+0x50c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c32:	231b      	movs	r3, #27
 8002c34:	2220      	movs	r2, #32
 8002c36:	4694      	mov	ip, r2
 8002c38:	44bc      	add	ip, r7
 8002c3a:	4463      	add	r3, ip
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d00d      	beq.n	8002c5e <UART_SetConfig+0x40e>
 8002c42:	dc02      	bgt.n	8002c4a <UART_SetConfig+0x3fa>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <UART_SetConfig+0x404>
 8002c48:	e015      	b.n	8002c76 <UART_SetConfig+0x426>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00a      	beq.n	8002c64 <UART_SetConfig+0x414>
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d00d      	beq.n	8002c6e <UART_SetConfig+0x41e>
 8002c52:	e010      	b.n	8002c76 <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c54:	f7ff f870 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c5c:	e015      	b.n	8002c8a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c5e:	4bb8      	ldr	r3, [pc, #736]	; (8002f40 <UART_SetConfig+0x6f0>)
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c62:	e012      	b.n	8002c8a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c64:	f7fe ffdc 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c6c:	e00d      	b.n	8002c8a <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c74:	e009      	b.n	8002c8a <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c7a:	231a      	movs	r3, #26
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	4694      	mov	ip, r2
 8002c80:	44bc      	add	ip, r7
 8002c82:	4463      	add	r3, ip
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
        break;
 8002c88:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d100      	bne.n	8002c92 <UART_SetConfig+0x442>
 8002c90:	e139      	b.n	8002f06 <UART_SetConfig+0x6b6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c96:	4bab      	ldr	r3, [pc, #684]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002c98:	0052      	lsls	r2, r2, #1
 8002c9a:	5ad3      	ldrh	r3, [r2, r3]
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ca0:	f7fd fa30 	bl	8000104 <__udivsi3>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	0013      	movs	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d305      	bcc.n	8002cc4 <UART_SetConfig+0x474>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d907      	bls.n	8002cd4 <UART_SetConfig+0x484>
      {
        ret = HAL_ERROR;
 8002cc4:	231a      	movs	r3, #26
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	4694      	mov	ip, r2
 8002cca:	44bc      	add	ip, r7
 8002ccc:	4463      	add	r3, ip
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e042      	b.n	8002d5a <UART_SetConfig+0x50a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce0:	4b98      	ldr	r3, [pc, #608]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	5ad3      	ldrh	r3, [r2, r3]
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	69b8      	ldr	r0, [r7, #24]
 8002cf2:	69f9      	ldr	r1, [r7, #28]
 8002cf4:	f7fd fb7c 	bl	80003f0 <__aeabi_uldivmod>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	000c      	movs	r4, r1
 8002cfc:	0e1a      	lsrs	r2, r3, #24
 8002cfe:	0226      	lsls	r6, r4, #8
 8002d00:	4316      	orrs	r6, r2
 8002d02:	021d      	lsls	r5, r3, #8
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	1940      	adds	r0, r0, r5
 8002d16:	4171      	adcs	r1, r6
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f7fd fb63 	bl	80003f0 <__aeabi_uldivmod>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	000c      	movs	r4, r1
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	4a85      	ldr	r2, [pc, #532]	; (8002f48 <UART_SetConfig+0x6f8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d908      	bls.n	8002d4a <UART_SetConfig+0x4fa>
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	4a84      	ldr	r2, [pc, #528]	; (8002f4c <UART_SetConfig+0x6fc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d804      	bhi.n	8002d4a <UART_SetConfig+0x4fa>
        {
          huart->Instance->BRR = usartdiv;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e007      	b.n	8002d5a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002d4a:	231a      	movs	r3, #26
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	4694      	mov	ip, r2
 8002d50:	44bc      	add	ip, r7
 8002d52:	4463      	add	r3, ip
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002d58:	e0d5      	b.n	8002f06 <UART_SetConfig+0x6b6>
 8002d5a:	e0d4      	b.n	8002f06 <UART_SetConfig+0x6b6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d000      	beq.n	8002d6a <UART_SetConfig+0x51a>
 8002d68:	e073      	b.n	8002e52 <UART_SetConfig+0x602>
  {
    switch (clocksource)
 8002d6a:	231b      	movs	r3, #27
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	4694      	mov	ip, r2
 8002d70:	44bc      	add	ip, r7
 8002d72:	4463      	add	r3, ip
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d00d      	beq.n	8002d96 <UART_SetConfig+0x546>
 8002d7a:	dc02      	bgt.n	8002d82 <UART_SetConfig+0x532>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <UART_SetConfig+0x53c>
 8002d80:	e015      	b.n	8002dae <UART_SetConfig+0x55e>
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00a      	beq.n	8002d9c <UART_SetConfig+0x54c>
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d00d      	beq.n	8002da6 <UART_SetConfig+0x556>
 8002d8a:	e010      	b.n	8002dae <UART_SetConfig+0x55e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d8c:	f7fe ffd4 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8002d90:	0003      	movs	r3, r0
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d94:	e015      	b.n	8002dc2 <UART_SetConfig+0x572>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d96:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <UART_SetConfig+0x6f0>)
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d9a:	e012      	b.n	8002dc2 <UART_SetConfig+0x572>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9c:	f7fe ff40 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002da0:	0003      	movs	r3, r0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002da4:	e00d      	b.n	8002dc2 <UART_SetConfig+0x572>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dac:	e009      	b.n	8002dc2 <UART_SetConfig+0x572>
      default:
        pclk = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002db2:	231a      	movs	r3, #26
 8002db4:	2220      	movs	r2, #32
 8002db6:	4694      	mov	ip, r2
 8002db8:	44bc      	add	ip, r7
 8002dba:	4463      	add	r3, ip
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
        break;
 8002dc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d100      	bne.n	8002dca <UART_SetConfig+0x57a>
 8002dc8:	e09d      	b.n	8002f06 <UART_SetConfig+0x6b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dce:	4b5d      	ldr	r3, [pc, #372]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002dd0:	0052      	lsls	r2, r2, #1
 8002dd2:	5ad3      	ldrh	r3, [r2, r3]
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dd8:	f7fd f994 	bl	8000104 <__udivsi3>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	005a      	lsls	r2, r3, #1
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	18d2      	adds	r2, r2, r3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0019      	movs	r1, r3
 8002dee:	0010      	movs	r0, r2
 8002df0:	f7fd f988 	bl	8000104 <__udivsi3>
 8002df4:	0003      	movs	r3, r0
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d920      	bls.n	8002e42 <UART_SetConfig+0x5f2>
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <UART_SetConfig+0x700>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d81c      	bhi.n	8002e42 <UART_SetConfig+0x5f2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	200e      	movs	r0, #14
 8002e0e:	2420      	movs	r4, #32
 8002e10:	193b      	adds	r3, r7, r4
 8002e12:	181b      	adds	r3, r3, r0
 8002e14:	210f      	movs	r1, #15
 8002e16:	438a      	bics	r2, r1
 8002e18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2207      	movs	r2, #7
 8002e22:	4013      	ands	r3, r2
 8002e24:	b299      	uxth	r1, r3
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	181b      	adds	r3, r3, r0
 8002e2a:	193a      	adds	r2, r7, r4
 8002e2c:	1812      	adds	r2, r2, r0
 8002e2e:	8812      	ldrh	r2, [r2, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	193a      	adds	r2, r7, r4
 8002e3a:	1812      	adds	r2, r2, r0
 8002e3c:	8812      	ldrh	r2, [r2, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	e061      	b.n	8002f06 <UART_SetConfig+0x6b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e42:	231a      	movs	r3, #26
 8002e44:	2220      	movs	r2, #32
 8002e46:	4694      	mov	ip, r2
 8002e48:	44bc      	add	ip, r7
 8002e4a:	4463      	add	r3, ip
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e059      	b.n	8002f06 <UART_SetConfig+0x6b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e52:	231b      	movs	r3, #27
 8002e54:	2220      	movs	r2, #32
 8002e56:	4694      	mov	ip, r2
 8002e58:	44bc      	add	ip, r7
 8002e5a:	4463      	add	r3, ip
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d00d      	beq.n	8002e7e <UART_SetConfig+0x62e>
 8002e62:	dc02      	bgt.n	8002e6a <UART_SetConfig+0x61a>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <UART_SetConfig+0x624>
 8002e68:	e015      	b.n	8002e96 <UART_SetConfig+0x646>
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d00a      	beq.n	8002e84 <UART_SetConfig+0x634>
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d00d      	beq.n	8002e8e <UART_SetConfig+0x63e>
 8002e72:	e010      	b.n	8002e96 <UART_SetConfig+0x646>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e74:	f7fe ff60 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e7c:	e015      	b.n	8002eaa <UART_SetConfig+0x65a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <UART_SetConfig+0x6f0>)
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e82:	e012      	b.n	8002eaa <UART_SetConfig+0x65a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e84:	f7fe fecc 	bl	8001c20 <HAL_RCC_GetSysClockFreq>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e8c:	e00d      	b.n	8002eaa <UART_SetConfig+0x65a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e94:	e009      	b.n	8002eaa <UART_SetConfig+0x65a>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e9a:	231a      	movs	r3, #26
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	4694      	mov	ip, r2
 8002ea0:	44bc      	add	ip, r7
 8002ea2:	4463      	add	r3, ip
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
        break;
 8002ea8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02a      	beq.n	8002f06 <UART_SetConfig+0x6b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002eb6:	0052      	lsls	r2, r2, #1
 8002eb8:	5ad3      	ldrh	r3, [r2, r3]
 8002eba:	0019      	movs	r1, r3
 8002ebc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ebe:	f7fd f921 	bl	8000104 <__udivsi3>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	18d2      	adds	r2, r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	0010      	movs	r0, r2
 8002ed6:	f7fd f915 	bl	8000104 <__udivsi3>
 8002eda:	0003      	movs	r3, r0
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	d908      	bls.n	8002ef8 <UART_SetConfig+0x6a8>
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <UART_SetConfig+0x700>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d804      	bhi.n	8002ef8 <UART_SetConfig+0x6a8>
      {
        huart->Instance->BRR = usartdiv;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e006      	b.n	8002f06 <UART_SetConfig+0x6b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef8:	231a      	movs	r3, #26
 8002efa:	2220      	movs	r2, #32
 8002efc:	4694      	mov	ip, r2
 8002efe:	44bc      	add	ip, r7
 8002f00:	4463      	add	r3, ip
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	226a      	movs	r2, #106	; 0x6a
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	2268      	movs	r2, #104	; 0x68
 8002f12:	2101      	movs	r1, #1
 8002f14:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	2200      	movs	r2, #0
 8002f1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	2200      	movs	r2, #0
 8002f20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002f22:	231a      	movs	r3, #26
 8002f24:	2220      	movs	r2, #32
 8002f26:	4694      	mov	ip, r2
 8002f28:	44bc      	add	ip, r7
 8002f2a:	4463      	add	r3, ip
 8002f2c:	781b      	ldrb	r3, [r3, #0]
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b011      	add	sp, #68	; 0x44
 8002f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40008000 	.word	0x40008000
 8002f3c:	40008400 	.word	0x40008400
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	080040fc 	.word	0x080040fc
 8002f48:	000002ff 	.word	0x000002ff
 8002f4c:	000fffff 	.word	0x000fffff
 8002f50:	0000ffff 	.word	0x0000ffff

08002f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <UART_AdvFeatureConfig+0x144>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a43      	ldr	r2, [pc, #268]	; (800309c <UART_AdvFeatureConfig+0x148>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <UART_AdvFeatureConfig+0x14c>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a34      	ldr	r2, [pc, #208]	; (80030a4 <UART_AdvFeatureConfig+0x150>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	2210      	movs	r2, #16
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00b      	beq.n	8003006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <UART_AdvFeatureConfig+0x154>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2220      	movs	r2, #32
 800300c:	4013      	ands	r3, r2
 800300e:	d00b      	beq.n	8003028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <UART_AdvFeatureConfig+0x158>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	4013      	ands	r3, r2
 8003030:	d01d      	beq.n	800306e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <UART_AdvFeatureConfig+0x15c>)
 800303a:	4013      	ands	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	035b      	lsls	r3, r3, #13
 8003052:	429a      	cmp	r2, r3
 8003054:	d10b      	bne.n	800306e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <UART_AdvFeatureConfig+0x160>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	4013      	ands	r3, r2
 8003076:	d00b      	beq.n	8003090 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <UART_AdvFeatureConfig+0x164>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}
 8003098:	fffdffff 	.word	0xfffdffff
 800309c:	fffeffff 	.word	0xfffeffff
 80030a0:	fffbffff 	.word	0xfffbffff
 80030a4:	ffff7fff 	.word	0xffff7fff
 80030a8:	ffffefff 	.word	0xffffefff
 80030ac:	ffffdfff 	.word	0xffffdfff
 80030b0:	ffefffff 	.word	0xffefffff
 80030b4:	ff9fffff 	.word	0xff9fffff
 80030b8:	fff7ffff 	.word	0xfff7ffff

080030bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	228c      	movs	r2, #140	; 0x8c
 80030c8:	2100      	movs	r1, #0
 80030ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030cc:	f7fd fd62 	bl	8000b94 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2208      	movs	r2, #8
 80030dc:	4013      	ands	r3, r2
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d10d      	bne.n	80030fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	0399      	lsls	r1, r3, #14
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <UART_CheckIdleState+0x94>)
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	0013      	movs	r3, r2
 80030f0:	2200      	movs	r2, #0
 80030f2:	f000 f82f 	bl	8003154 <UART_WaitOnFlagUntilTimeout>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e024      	b.n	8003148 <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2204      	movs	r2, #4
 8003106:	4013      	ands	r3, r2
 8003108:	2b04      	cmp	r3, #4
 800310a:	d10d      	bne.n	8003128 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	03d9      	lsls	r1, r3, #15
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <UART_CheckIdleState+0x94>)
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	0013      	movs	r3, r2
 800311a:	2200      	movs	r2, #0
 800311c:	f000 f81a 	bl	8003154 <UART_WaitOnFlagUntilTimeout>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e00f      	b.n	8003148 <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2284      	movs	r2, #132	; 0x84
 800312c:	2120      	movs	r1, #32
 800312e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2288      	movs	r2, #136	; 0x88
 8003134:	2120      	movs	r1, #32
 8003136:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	01ffffff 	.word	0x01ffffff

08003154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	e062      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3301      	adds	r3, #1
 800316a:	d05f      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fd fd12 	bl	8000b94 <HAL_GetTick>
 8003170:	0002      	movs	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <UART_WaitOnFlagUntilTimeout+0x2e>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11d      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4931      	ldr	r1, [pc, #196]	; (8003254 <UART_WaitOnFlagUntilTimeout+0x100>)
 800318e:	400a      	ands	r2, r1
 8003190:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	438a      	bics	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2284      	movs	r2, #132	; 0x84
 80031a6:	2120      	movs	r1, #32
 80031a8:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2288      	movs	r2, #136	; 0x88
 80031ae:	2120      	movs	r1, #32
 80031b0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e046      	b.n	800324c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2204      	movs	r2, #4
 80031c6:	4013      	ands	r3, r2
 80031c8:	d030      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	401a      	ands	r2, r3
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	429a      	cmp	r2, r3
 80031dc:	d126      	bne.n	800322c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4918      	ldr	r1, [pc, #96]	; (8003254 <UART_WaitOnFlagUntilTimeout+0x100>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2101      	movs	r1, #1
 8003204:	438a      	bics	r2, r1
 8003206:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2284      	movs	r2, #132	; 0x84
 800320c:	2120      	movs	r1, #32
 800320e:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2288      	movs	r2, #136	; 0x88
 8003214:	2120      	movs	r1, #32
 8003216:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	228c      	movs	r2, #140	; 0x8c
 800321c:	2120      	movs	r1, #32
 800321e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	2100      	movs	r1, #0
 8003226:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e00f      	b.n	800324c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	425a      	negs	r2, r3
 800323c:	4153      	adcs	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	001a      	movs	r2, r3
 8003242:	1dfb      	adds	r3, r7, #7
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d08d      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}
 8003254:	fffffe5f 	.word	0xfffffe5f

08003258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4912      	ldr	r1, [pc, #72]	; (80032b4 <UART_EndRxTransfer+0x5c>)
 800326c:	400a      	ands	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	490f      	ldr	r1, [pc, #60]	; (80032b8 <UART_EndRxTransfer+0x60>)
 800327c:	400a      	ands	r2, r1
 800327e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2110      	movs	r1, #16
 8003294:	438a      	bics	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2288      	movs	r2, #136	; 0x88
 800329c:	2120      	movs	r1, #32
 800329e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	fffffedf 	.word	0xfffffedf
 80032b8:	effffffe 	.word	0xeffffffe

080032bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	225e      	movs	r2, #94	; 0x5e
 80032ce:	2100      	movs	r1, #0
 80032d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2256      	movs	r2, #86	; 0x56
 80032d6:	2100      	movs	r1, #0
 80032d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7fd f9e3 	bl	80006a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2284      	movs	r2, #132	; 0x84
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2b21      	cmp	r3, #33	; 0x21
 80032fa:	d12a      	bne.n	8003352 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2256      	movs	r2, #86	; 0x56
 8003300:	5a9b      	ldrh	r3, [r3, r2]
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d110      	bne.n	800332a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	438a      	bics	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003328:	e013      	b.n	8003352 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2256      	movs	r2, #86	; 0x56
 8003344:	5a9b      	ldrh	r3, [r3, r2]
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b299      	uxth	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2256      	movs	r2, #86	; 0x56
 8003350:	5299      	strh	r1, [r3, r2]
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b002      	add	sp, #8
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2284      	movs	r2, #132	; 0x84
 8003366:	589b      	ldr	r3, [r3, r2]
 8003368:	2b21      	cmp	r3, #33	; 0x21
 800336a:	d12f      	bne.n	80033cc <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2256      	movs	r2, #86	; 0x56
 8003370:	5a9b      	ldrh	r3, [r3, r2]
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d110      	bne.n	800339a <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	438a      	bics	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2140      	movs	r1, #64	; 0x40
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003398:	e018      	b.n	80033cc <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	001a      	movs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	05d2      	lsls	r2, r2, #23
 80033ac:	0dd2      	lsrs	r2, r2, #23
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2256      	movs	r2, #86	; 0x56
 80033be:	5a9b      	ldrh	r3, [r3, r2]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b299      	uxth	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2256      	movs	r2, #86	; 0x56
 80033ca:	5299      	strh	r1, [r3, r2]
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b004      	add	sp, #16
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2284      	movs	r2, #132	; 0x84
 80033e0:	589b      	ldr	r3, [r3, r2]
 80033e2:	2b21      	cmp	r3, #33	; 0x21
 80033e4:	d143      	bne.n	800346e <UART_TxISR_8BIT_FIFOEN+0x9a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80033e6:	230e      	movs	r3, #14
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	216a      	movs	r1, #106	; 0x6a
 80033ee:	5a52      	ldrh	r2, [r2, r1]
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e037      	b.n	8003464 <UART_TxISR_8BIT_FIFOEN+0x90>
    {
      if (huart->TxXferCount == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2256      	movs	r2, #86	; 0x56
 80033f8:	5a9b      	ldrh	r3, [r3, r2]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d111      	bne.n	8003424 <UART_TxISR_8BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	491b      	ldr	r1, [pc, #108]	; (8003478 <UART_TxISR_8BIT_FIFOEN+0xa4>)
 800340c:	400a      	ands	r2, r1
 800340e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2140      	movs	r1, #64	; 0x40
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8003420:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003422:	e024      	b.n	800346e <UART_TxISR_8BIT_FIFOEN+0x9a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	4013      	ands	r3, r2
 800342e:	d013      	beq.n	8003458 <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2256      	movs	r2, #86	; 0x56
 800344a:	5a9b      	ldrh	r3, [r3, r2]
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b299      	uxth	r1, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2256      	movs	r2, #86	; 0x56
 8003456:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003458:	210e      	movs	r1, #14
 800345a:	187b      	adds	r3, r7, r1
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	187b      	adds	r3, r7, r1
 8003460:	3a01      	subs	r2, #1
 8003462:	801a      	strh	r2, [r3, #0]
 8003464:	230e      	movs	r3, #14
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1c2      	bne.n	80033f4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	ff7fffff 	.word	0xff7fffff

0800347c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2284      	movs	r2, #132	; 0x84
 8003488:	589b      	ldr	r3, [r3, r2]
 800348a:	2b21      	cmp	r3, #33	; 0x21
 800348c:	d148      	bne.n	8003520 <UART_TxISR_16BIT_FIFOEN+0xa4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800348e:	230e      	movs	r3, #14
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	216a      	movs	r1, #106	; 0x6a
 8003496:	5a52      	ldrh	r2, [r2, r1]
 8003498:	801a      	strh	r2, [r3, #0]
 800349a:	e03c      	b.n	8003516 <UART_TxISR_16BIT_FIFOEN+0x9a>
    {
      if (huart->TxXferCount == 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2256      	movs	r2, #86	; 0x56
 80034a0:	5a9b      	ldrh	r3, [r3, r2]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <UART_TxISR_16BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	491d      	ldr	r1, [pc, #116]	; (8003528 <UART_TxISR_16BIT_FIFOEN+0xac>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80034c8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80034ca:	e029      	b.n	8003520 <UART_TxISR_16BIT_FIFOEN+0xa4>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2280      	movs	r2, #128	; 0x80
 80034d4:	4013      	ands	r3, r2
 80034d6:	d018      	beq.n	800350a <UART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034dc:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	001a      	movs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	05d2      	lsls	r2, r2, #23
 80034ea:	0dd2      	lsrs	r2, r2, #23
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	1c9a      	adds	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2256      	movs	r2, #86	; 0x56
 80034fc:	5a9b      	ldrh	r3, [r3, r2]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b299      	uxth	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2256      	movs	r2, #86	; 0x56
 8003508:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800350a:	210e      	movs	r1, #14
 800350c:	187b      	adds	r3, r7, r1
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	187b      	adds	r3, r7, r1
 8003512:	3a01      	subs	r2, #1
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	230e      	movs	r3, #14
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1bd      	bne.n	800349c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	ff7fffff 	.word	0xff7fffff

0800352c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2284      	movs	r2, #132	; 0x84
 8003548:	2120      	movs	r1, #32
 800354a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	0018      	movs	r0, r3
 8003556:	f7fd f883 	bl	8000660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	5c9b      	ldrb	r3, [r3, r2]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UARTEx_DisableFifoMode+0x16>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e027      	b.n	80035fa <HAL_UARTEx_DisableFifoMode+0x66>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2284      	movs	r2, #132	; 0x84
 80035b6:	2124      	movs	r1, #36	; 0x24
 80035b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	438a      	bics	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <HAL_UARTEx_DisableFifoMode+0x70>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2284      	movs	r2, #132	; 0x84
 80035ec:	2120      	movs	r1, #32
 80035ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	2100      	movs	r1, #0
 80035f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b004      	add	sp, #16
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	dfffffff 	.word	0xdfffffff

08003608 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800361c:	2302      	movs	r3, #2
 800361e:	e02e      	b.n	800367e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	2101      	movs	r1, #1
 8003626:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2284      	movs	r2, #132	; 0x84
 800362c:	2124      	movs	r1, #36	; 0x24
 800362e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	438a      	bics	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	08d9      	lsrs	r1, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f000 f854 	bl	800370c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2284      	movs	r2, #132	; 0x84
 8003670:	2120      	movs	r1, #32
 8003672:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b004      	add	sp, #16
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	5c9b      	ldrb	r3, [r3, r2]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800369c:	2302      	movs	r3, #2
 800369e:	e02f      	b.n	8003700 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	2101      	movs	r1, #1
 80036a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2284      	movs	r2, #132	; 0x84
 80036ac:	2124      	movs	r1, #36	; 0x24
 80036ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	438a      	bics	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f813 	bl	800370c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2284      	movs	r2, #132	; 0x84
 80036f2:	2120      	movs	r1, #32
 80036f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}
 8003708:	f1ffffff 	.word	0xf1ffffff

0800370c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003714:	2314      	movs	r3, #20
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	4a2f      	ldr	r2, [pc, #188]	; (80037d8 <UARTEx_SetNbDataToProcess+0xcc>)
 800371a:	ca03      	ldmia	r2!, {r0, r1}
 800371c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800371e:	230c      	movs	r3, #12
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <UARTEx_SetNbDataToProcess+0xd0>)
 8003724:	ca03      	ldmia	r2!, {r0, r1}
 8003726:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800372c:	2b00      	cmp	r3, #0
 800372e:	d108      	bne.n	8003742 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	226a      	movs	r2, #106	; 0x6a
 8003734:	2101      	movs	r1, #1
 8003736:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2268      	movs	r2, #104	; 0x68
 800373c:	2101      	movs	r1, #1
 800373e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003740:	e046      	b.n	80037d0 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003742:	261f      	movs	r6, #31
 8003744:	19bb      	adds	r3, r7, r6
 8003746:	2208      	movs	r2, #8
 8003748:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800374a:	201e      	movs	r0, #30
 800374c:	183b      	adds	r3, r7, r0
 800374e:	2208      	movs	r2, #8
 8003750:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	0e5b      	lsrs	r3, r3, #25
 800375a:	b2da      	uxtb	r2, r3
 800375c:	241d      	movs	r4, #29
 800375e:	193b      	adds	r3, r7, r4
 8003760:	2107      	movs	r1, #7
 8003762:	400a      	ands	r2, r1
 8003764:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	0f5b      	lsrs	r3, r3, #29
 800376e:	b2da      	uxtb	r2, r3
 8003770:	251c      	movs	r5, #28
 8003772:	197b      	adds	r3, r7, r5
 8003774:	2107      	movs	r1, #7
 8003776:	400a      	ands	r2, r1
 8003778:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800377a:	183b      	adds	r3, r7, r0
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	197a      	adds	r2, r7, r5
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	2114      	movs	r1, #20
 8003784:	1879      	adds	r1, r7, r1
 8003786:	5c8a      	ldrb	r2, [r1, r2]
 8003788:	435a      	muls	r2, r3
 800378a:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800378c:	197b      	adds	r3, r7, r5
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	250c      	movs	r5, #12
 8003792:	197a      	adds	r2, r7, r5
 8003794:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003796:	0019      	movs	r1, r3
 8003798:	f7fc fd3e 	bl	8000218 <__divsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	b299      	uxth	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	226a      	movs	r2, #106	; 0x6a
 80037a4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037a6:	19bb      	adds	r3, r7, r6
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	193a      	adds	r2, r7, r4
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	2114      	movs	r1, #20
 80037b0:	1879      	adds	r1, r7, r1
 80037b2:	5c8a      	ldrb	r2, [r1, r2]
 80037b4:	435a      	muls	r2, r3
 80037b6:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	197a      	adds	r2, r7, r5
 80037be:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037c0:	0019      	movs	r1, r3
 80037c2:	f7fc fd29 	bl	8000218 <__divsi3>
 80037c6:	0003      	movs	r3, r0
 80037c8:	b299      	uxth	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2268      	movs	r2, #104	; 0x68
 80037ce:	5299      	strh	r1, [r3, r2]
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b009      	add	sp, #36	; 0x24
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d8:	0800408c 	.word	0x0800408c
 80037dc:	08004094 	.word	0x08004094

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	2000000c 	.word	0x2000000c

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	2600      	movs	r6, #0
 80037f0:	4d0c      	ldr	r5, [pc, #48]	; (8003824 <__libc_init_array+0x38>)
 80037f2:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <__libc_init_array+0x3c>)
 80037f4:	1b64      	subs	r4, r4, r5
 80037f6:	10a4      	asrs	r4, r4, #2
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	2600      	movs	r6, #0
 80037fe:	f000 fc29 	bl	8004054 <_init>
 8003802:	4d0a      	ldr	r5, [pc, #40]	; (800382c <__libc_init_array+0x40>)
 8003804:	4c0a      	ldr	r4, [pc, #40]	; (8003830 <__libc_init_array+0x44>)
 8003806:	1b64      	subs	r4, r4, r5
 8003808:	10a4      	asrs	r4, r4, #2
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	00b3      	lsls	r3, r6, #2
 8003812:	58eb      	ldr	r3, [r5, r3]
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	00b3      	lsls	r3, r6, #2
 800381c:	58eb      	ldr	r3, [r5, r3]
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	08004150 	.word	0x08004150
 8003828:	08004150 	.word	0x08004150
 800382c:	08004150 	.word	0x08004150
 8003830:	08004154 	.word	0x08004154

08003834 <memset>:
 8003834:	0003      	movs	r3, r0
 8003836:	1812      	adds	r2, r2, r0
 8003838:	4293      	cmp	r3, r2
 800383a:	d100      	bne.n	800383e <memset+0xa>
 800383c:	4770      	bx	lr
 800383e:	7019      	strb	r1, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	e7f9      	b.n	8003838 <memset+0x4>

08003844 <siprintf>:
 8003844:	b40e      	push	{r1, r2, r3}
 8003846:	b500      	push	{lr}
 8003848:	490b      	ldr	r1, [pc, #44]	; (8003878 <siprintf+0x34>)
 800384a:	b09c      	sub	sp, #112	; 0x70
 800384c:	ab1d      	add	r3, sp, #116	; 0x74
 800384e:	9002      	str	r0, [sp, #8]
 8003850:	9006      	str	r0, [sp, #24]
 8003852:	9107      	str	r1, [sp, #28]
 8003854:	9104      	str	r1, [sp, #16]
 8003856:	4809      	ldr	r0, [pc, #36]	; (800387c <siprintf+0x38>)
 8003858:	4909      	ldr	r1, [pc, #36]	; (8003880 <siprintf+0x3c>)
 800385a:	cb04      	ldmia	r3!, {r2}
 800385c:	9105      	str	r1, [sp, #20]
 800385e:	6800      	ldr	r0, [r0, #0]
 8003860:	a902      	add	r1, sp, #8
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f000 f870 	bl	8003948 <_svfiprintf_r>
 8003868:	2300      	movs	r3, #0
 800386a:	9a02      	ldr	r2, [sp, #8]
 800386c:	7013      	strb	r3, [r2, #0]
 800386e:	b01c      	add	sp, #112	; 0x70
 8003870:	bc08      	pop	{r3}
 8003872:	b003      	add	sp, #12
 8003874:	4718      	bx	r3
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	7fffffff 	.word	0x7fffffff
 800387c:	2000000c 	.word	0x2000000c
 8003880:	ffff0208 	.word	0xffff0208

08003884 <__ssputs_r>:
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	688e      	ldr	r6, [r1, #8]
 8003888:	b085      	sub	sp, #20
 800388a:	0007      	movs	r7, r0
 800388c:	000c      	movs	r4, r1
 800388e:	9203      	str	r2, [sp, #12]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	429e      	cmp	r6, r3
 8003894:	d83c      	bhi.n	8003910 <__ssputs_r+0x8c>
 8003896:	2390      	movs	r3, #144	; 0x90
 8003898:	898a      	ldrh	r2, [r1, #12]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	421a      	tst	r2, r3
 800389e:	d034      	beq.n	800390a <__ssputs_r+0x86>
 80038a0:	2503      	movs	r5, #3
 80038a2:	6909      	ldr	r1, [r1, #16]
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	1a5b      	subs	r3, r3, r1
 80038a8:	9302      	str	r3, [sp, #8]
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	9802      	ldr	r0, [sp, #8]
 80038ae:	435d      	muls	r5, r3
 80038b0:	0feb      	lsrs	r3, r5, #31
 80038b2:	195d      	adds	r5, r3, r5
 80038b4:	9b01      	ldr	r3, [sp, #4]
 80038b6:	106d      	asrs	r5, r5, #1
 80038b8:	3301      	adds	r3, #1
 80038ba:	181b      	adds	r3, r3, r0
 80038bc:	42ab      	cmp	r3, r5
 80038be:	d900      	bls.n	80038c2 <__ssputs_r+0x3e>
 80038c0:	001d      	movs	r5, r3
 80038c2:	0553      	lsls	r3, r2, #21
 80038c4:	d532      	bpl.n	800392c <__ssputs_r+0xa8>
 80038c6:	0029      	movs	r1, r5
 80038c8:	0038      	movs	r0, r7
 80038ca:	f000 fb23 	bl	8003f14 <_malloc_r>
 80038ce:	1e06      	subs	r6, r0, #0
 80038d0:	d109      	bne.n	80038e6 <__ssputs_r+0x62>
 80038d2:	230c      	movs	r3, #12
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	2001      	movs	r0, #1
 80038da:	89a2      	ldrh	r2, [r4, #12]
 80038dc:	4240      	negs	r0, r0
 80038de:	4313      	orrs	r3, r2
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	b005      	add	sp, #20
 80038e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038e6:	9a02      	ldr	r2, [sp, #8]
 80038e8:	6921      	ldr	r1, [r4, #16]
 80038ea:	f000 faac 	bl	8003e46 <memcpy>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <__ssputs_r+0xc0>)
 80038f2:	401a      	ands	r2, r3
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	4313      	orrs	r3, r2
 80038f8:	81a3      	strh	r3, [r4, #12]
 80038fa:	9b02      	ldr	r3, [sp, #8]
 80038fc:	6126      	str	r6, [r4, #16]
 80038fe:	18f6      	adds	r6, r6, r3
 8003900:	6026      	str	r6, [r4, #0]
 8003902:	6165      	str	r5, [r4, #20]
 8003904:	9e01      	ldr	r6, [sp, #4]
 8003906:	1aed      	subs	r5, r5, r3
 8003908:	60a5      	str	r5, [r4, #8]
 800390a:	9b01      	ldr	r3, [sp, #4]
 800390c:	429e      	cmp	r6, r3
 800390e:	d900      	bls.n	8003912 <__ssputs_r+0x8e>
 8003910:	9e01      	ldr	r6, [sp, #4]
 8003912:	0032      	movs	r2, r6
 8003914:	9903      	ldr	r1, [sp, #12]
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	f000 fa9e 	bl	8003e58 <memmove>
 800391c:	68a3      	ldr	r3, [r4, #8]
 800391e:	2000      	movs	r0, #0
 8003920:	1b9b      	subs	r3, r3, r6
 8003922:	60a3      	str	r3, [r4, #8]
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	199e      	adds	r6, r3, r6
 8003928:	6026      	str	r6, [r4, #0]
 800392a:	e7da      	b.n	80038e2 <__ssputs_r+0x5e>
 800392c:	002a      	movs	r2, r5
 800392e:	0038      	movs	r0, r7
 8003930:	f000 fb4e 	bl	8003fd0 <_realloc_r>
 8003934:	1e06      	subs	r6, r0, #0
 8003936:	d1e0      	bne.n	80038fa <__ssputs_r+0x76>
 8003938:	6921      	ldr	r1, [r4, #16]
 800393a:	0038      	movs	r0, r7
 800393c:	f000 faa0 	bl	8003e80 <_free_r>
 8003940:	e7c7      	b.n	80038d2 <__ssputs_r+0x4e>
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	fffffb7f 	.word	0xfffffb7f

08003948 <_svfiprintf_r>:
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b0a1      	sub	sp, #132	; 0x84
 800394c:	9003      	str	r0, [sp, #12]
 800394e:	001d      	movs	r5, r3
 8003950:	898b      	ldrh	r3, [r1, #12]
 8003952:	000f      	movs	r7, r1
 8003954:	0016      	movs	r6, r2
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	d511      	bpl.n	800397e <_svfiprintf_r+0x36>
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10e      	bne.n	800397e <_svfiprintf_r+0x36>
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	f000 fad7 	bl	8003f14 <_malloc_r>
 8003966:	6038      	str	r0, [r7, #0]
 8003968:	6138      	str	r0, [r7, #16]
 800396a:	2800      	cmp	r0, #0
 800396c:	d105      	bne.n	800397a <_svfiprintf_r+0x32>
 800396e:	230c      	movs	r3, #12
 8003970:	9a03      	ldr	r2, [sp, #12]
 8003972:	3801      	subs	r0, #1
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	b021      	add	sp, #132	; 0x84
 8003978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	2300      	movs	r3, #0
 8003980:	ac08      	add	r4, sp, #32
 8003982:	6163      	str	r3, [r4, #20]
 8003984:	3320      	adds	r3, #32
 8003986:	7663      	strb	r3, [r4, #25]
 8003988:	3310      	adds	r3, #16
 800398a:	76a3      	strb	r3, [r4, #26]
 800398c:	9507      	str	r5, [sp, #28]
 800398e:	0035      	movs	r5, r6
 8003990:	782b      	ldrb	r3, [r5, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <_svfiprintf_r+0x52>
 8003996:	2b25      	cmp	r3, #37	; 0x25
 8003998:	d146      	bne.n	8003a28 <_svfiprintf_r+0xe0>
 800399a:	1bab      	subs	r3, r5, r6
 800399c:	9305      	str	r3, [sp, #20]
 800399e:	d00c      	beq.n	80039ba <_svfiprintf_r+0x72>
 80039a0:	0032      	movs	r2, r6
 80039a2:	0039      	movs	r1, r7
 80039a4:	9803      	ldr	r0, [sp, #12]
 80039a6:	f7ff ff6d 	bl	8003884 <__ssputs_r>
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	d100      	bne.n	80039b0 <_svfiprintf_r+0x68>
 80039ae:	e0ae      	b.n	8003b0e <_svfiprintf_r+0x1c6>
 80039b0:	6962      	ldr	r2, [r4, #20]
 80039b2:	9b05      	ldr	r3, [sp, #20]
 80039b4:	4694      	mov	ip, r2
 80039b6:	4463      	add	r3, ip
 80039b8:	6163      	str	r3, [r4, #20]
 80039ba:	782b      	ldrb	r3, [r5, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d100      	bne.n	80039c2 <_svfiprintf_r+0x7a>
 80039c0:	e0a5      	b.n	8003b0e <_svfiprintf_r+0x1c6>
 80039c2:	2201      	movs	r2, #1
 80039c4:	2300      	movs	r3, #0
 80039c6:	4252      	negs	r2, r2
 80039c8:	6062      	str	r2, [r4, #4]
 80039ca:	a904      	add	r1, sp, #16
 80039cc:	3254      	adds	r2, #84	; 0x54
 80039ce:	1852      	adds	r2, r2, r1
 80039d0:	1c6e      	adds	r6, r5, #1
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	60e3      	str	r3, [r4, #12]
 80039d6:	60a3      	str	r3, [r4, #8]
 80039d8:	7013      	strb	r3, [r2, #0]
 80039da:	65a3      	str	r3, [r4, #88]	; 0x58
 80039dc:	7831      	ldrb	r1, [r6, #0]
 80039de:	2205      	movs	r2, #5
 80039e0:	4853      	ldr	r0, [pc, #332]	; (8003b30 <_svfiprintf_r+0x1e8>)
 80039e2:	f000 fa25 	bl	8003e30 <memchr>
 80039e6:	1c75      	adds	r5, r6, #1
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d11f      	bne.n	8003a2c <_svfiprintf_r+0xe4>
 80039ec:	6822      	ldr	r2, [r4, #0]
 80039ee:	06d3      	lsls	r3, r2, #27
 80039f0:	d504      	bpl.n	80039fc <_svfiprintf_r+0xb4>
 80039f2:	2353      	movs	r3, #83	; 0x53
 80039f4:	a904      	add	r1, sp, #16
 80039f6:	185b      	adds	r3, r3, r1
 80039f8:	2120      	movs	r1, #32
 80039fa:	7019      	strb	r1, [r3, #0]
 80039fc:	0713      	lsls	r3, r2, #28
 80039fe:	d504      	bpl.n	8003a0a <_svfiprintf_r+0xc2>
 8003a00:	2353      	movs	r3, #83	; 0x53
 8003a02:	a904      	add	r1, sp, #16
 8003a04:	185b      	adds	r3, r3, r1
 8003a06:	212b      	movs	r1, #43	; 0x2b
 8003a08:	7019      	strb	r1, [r3, #0]
 8003a0a:	7833      	ldrb	r3, [r6, #0]
 8003a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0e:	d016      	beq.n	8003a3e <_svfiprintf_r+0xf6>
 8003a10:	0035      	movs	r5, r6
 8003a12:	2100      	movs	r1, #0
 8003a14:	200a      	movs	r0, #10
 8003a16:	68e3      	ldr	r3, [r4, #12]
 8003a18:	782a      	ldrb	r2, [r5, #0]
 8003a1a:	1c6e      	adds	r6, r5, #1
 8003a1c:	3a30      	subs	r2, #48	; 0x30
 8003a1e:	2a09      	cmp	r2, #9
 8003a20:	d94e      	bls.n	8003ac0 <_svfiprintf_r+0x178>
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d018      	beq.n	8003a58 <_svfiprintf_r+0x110>
 8003a26:	e010      	b.n	8003a4a <_svfiprintf_r+0x102>
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7b1      	b.n	8003990 <_svfiprintf_r+0x48>
 8003a2c:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <_svfiprintf_r+0x1e8>)
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	1ac0      	subs	r0, r0, r3
 8003a32:	2301      	movs	r3, #1
 8003a34:	4083      	lsls	r3, r0
 8003a36:	4313      	orrs	r3, r2
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	002e      	movs	r6, r5
 8003a3c:	e7ce      	b.n	80039dc <_svfiprintf_r+0x94>
 8003a3e:	9b07      	ldr	r3, [sp, #28]
 8003a40:	1d19      	adds	r1, r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	9107      	str	r1, [sp, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db01      	blt.n	8003a4e <_svfiprintf_r+0x106>
 8003a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a4c:	e004      	b.n	8003a58 <_svfiprintf_r+0x110>
 8003a4e:	425b      	negs	r3, r3
 8003a50:	60e3      	str	r3, [r4, #12]
 8003a52:	2302      	movs	r3, #2
 8003a54:	4313      	orrs	r3, r2
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	782b      	ldrb	r3, [r5, #0]
 8003a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5c:	d10a      	bne.n	8003a74 <_svfiprintf_r+0x12c>
 8003a5e:	786b      	ldrb	r3, [r5, #1]
 8003a60:	2b2a      	cmp	r3, #42	; 0x2a
 8003a62:	d135      	bne.n	8003ad0 <_svfiprintf_r+0x188>
 8003a64:	9b07      	ldr	r3, [sp, #28]
 8003a66:	3502      	adds	r5, #2
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9207      	str	r2, [sp, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	db2b      	blt.n	8003aca <_svfiprintf_r+0x182>
 8003a72:	9309      	str	r3, [sp, #36]	; 0x24
 8003a74:	4e2f      	ldr	r6, [pc, #188]	; (8003b34 <_svfiprintf_r+0x1ec>)
 8003a76:	7829      	ldrb	r1, [r5, #0]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	0030      	movs	r0, r6
 8003a7c:	f000 f9d8 	bl	8003e30 <memchr>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d006      	beq.n	8003a92 <_svfiprintf_r+0x14a>
 8003a84:	2340      	movs	r3, #64	; 0x40
 8003a86:	1b80      	subs	r0, r0, r6
 8003a88:	4083      	lsls	r3, r0
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	7829      	ldrb	r1, [r5, #0]
 8003a94:	2206      	movs	r2, #6
 8003a96:	4828      	ldr	r0, [pc, #160]	; (8003b38 <_svfiprintf_r+0x1f0>)
 8003a98:	1c6e      	adds	r6, r5, #1
 8003a9a:	7621      	strb	r1, [r4, #24]
 8003a9c:	f000 f9c8 	bl	8003e30 <memchr>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d03c      	beq.n	8003b1e <_svfiprintf_r+0x1d6>
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <_svfiprintf_r+0x1f4>)
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d125      	bne.n	8003af6 <_svfiprintf_r+0x1ae>
 8003aaa:	2207      	movs	r2, #7
 8003aac:	9b07      	ldr	r3, [sp, #28]
 8003aae:	3307      	adds	r3, #7
 8003ab0:	4393      	bics	r3, r2
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	9307      	str	r3, [sp, #28]
 8003ab6:	6963      	ldr	r3, [r4, #20]
 8003ab8:	9a04      	ldr	r2, [sp, #16]
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	6163      	str	r3, [r4, #20]
 8003abe:	e766      	b.n	800398e <_svfiprintf_r+0x46>
 8003ac0:	4343      	muls	r3, r0
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	189b      	adds	r3, r3, r2
 8003ac6:	0035      	movs	r5, r6
 8003ac8:	e7a6      	b.n	8003a18 <_svfiprintf_r+0xd0>
 8003aca:	2301      	movs	r3, #1
 8003acc:	425b      	negs	r3, r3
 8003ace:	e7d0      	b.n	8003a72 <_svfiprintf_r+0x12a>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	200a      	movs	r0, #10
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	3501      	adds	r5, #1
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	7829      	ldrb	r1, [r5, #0]
 8003adc:	1c6e      	adds	r6, r5, #1
 8003ade:	3930      	subs	r1, #48	; 0x30
 8003ae0:	2909      	cmp	r1, #9
 8003ae2:	d903      	bls.n	8003aec <_svfiprintf_r+0x1a4>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0c5      	beq.n	8003a74 <_svfiprintf_r+0x12c>
 8003ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8003aea:	e7c3      	b.n	8003a74 <_svfiprintf_r+0x12c>
 8003aec:	4342      	muls	r2, r0
 8003aee:	2301      	movs	r3, #1
 8003af0:	1852      	adds	r2, r2, r1
 8003af2:	0035      	movs	r5, r6
 8003af4:	e7f1      	b.n	8003ada <_svfiprintf_r+0x192>
 8003af6:	ab07      	add	r3, sp, #28
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	003a      	movs	r2, r7
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_svfiprintf_r+0x1f8>)
 8003afe:	0021      	movs	r1, r4
 8003b00:	9803      	ldr	r0, [sp, #12]
 8003b02:	e000      	b.n	8003b06 <_svfiprintf_r+0x1be>
 8003b04:	bf00      	nop
 8003b06:	9004      	str	r0, [sp, #16]
 8003b08:	9b04      	ldr	r3, [sp, #16]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	d1d3      	bne.n	8003ab6 <_svfiprintf_r+0x16e>
 8003b0e:	89bb      	ldrh	r3, [r7, #12]
 8003b10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b12:	065b      	lsls	r3, r3, #25
 8003b14:	d400      	bmi.n	8003b18 <_svfiprintf_r+0x1d0>
 8003b16:	e72e      	b.n	8003976 <_svfiprintf_r+0x2e>
 8003b18:	2001      	movs	r0, #1
 8003b1a:	4240      	negs	r0, r0
 8003b1c:	e72b      	b.n	8003976 <_svfiprintf_r+0x2e>
 8003b1e:	ab07      	add	r3, sp, #28
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	003a      	movs	r2, r7
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <_svfiprintf_r+0x1f8>)
 8003b26:	0021      	movs	r1, r4
 8003b28:	9803      	ldr	r0, [sp, #12]
 8003b2a:	f000 f879 	bl	8003c20 <_printf_i>
 8003b2e:	e7ea      	b.n	8003b06 <_svfiprintf_r+0x1be>
 8003b30:	08004114 	.word	0x08004114
 8003b34:	0800411a 	.word	0x0800411a
 8003b38:	0800411e 	.word	0x0800411e
 8003b3c:	00000000 	.word	0x00000000
 8003b40:	08003885 	.word	0x08003885

08003b44 <_printf_common>:
 8003b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b46:	0015      	movs	r5, r2
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	688a      	ldr	r2, [r1, #8]
 8003b4c:	690b      	ldr	r3, [r1, #16]
 8003b4e:	9000      	str	r0, [sp, #0]
 8003b50:	000c      	movs	r4, r1
 8003b52:	4293      	cmp	r3, r2
 8003b54:	da00      	bge.n	8003b58 <_printf_common+0x14>
 8003b56:	0013      	movs	r3, r2
 8003b58:	0022      	movs	r2, r4
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	3243      	adds	r2, #67	; 0x43
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d001      	beq.n	8003b68 <_printf_common+0x24>
 8003b64:	3301      	adds	r3, #1
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	069b      	lsls	r3, r3, #26
 8003b6c:	d502      	bpl.n	8003b74 <_printf_common+0x30>
 8003b6e:	682b      	ldr	r3, [r5, #0]
 8003b70:	3302      	adds	r3, #2
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	2706      	movs	r7, #6
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	401f      	ands	r7, r3
 8003b7a:	d027      	beq.n	8003bcc <_printf_common+0x88>
 8003b7c:	0023      	movs	r3, r4
 8003b7e:	3343      	adds	r3, #67	; 0x43
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	1e5a      	subs	r2, r3, #1
 8003b84:	4193      	sbcs	r3, r2
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	0692      	lsls	r2, r2, #26
 8003b8a:	d430      	bmi.n	8003bee <_printf_common+0xaa>
 8003b8c:	0022      	movs	r2, r4
 8003b8e:	9901      	ldr	r1, [sp, #4]
 8003b90:	3243      	adds	r2, #67	; 0x43
 8003b92:	9800      	ldr	r0, [sp, #0]
 8003b94:	9e08      	ldr	r6, [sp, #32]
 8003b96:	47b0      	blx	r6
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d025      	beq.n	8003be8 <_printf_common+0xa4>
 8003b9c:	2306      	movs	r3, #6
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	682a      	ldr	r2, [r5, #0]
 8003ba2:	68e1      	ldr	r1, [r4, #12]
 8003ba4:	4003      	ands	r3, r0
 8003ba6:	2500      	movs	r5, #0
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d103      	bne.n	8003bb4 <_printf_common+0x70>
 8003bac:	1a8d      	subs	r5, r1, r2
 8003bae:	43eb      	mvns	r3, r5
 8003bb0:	17db      	asrs	r3, r3, #31
 8003bb2:	401d      	ands	r5, r3
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	6922      	ldr	r2, [r4, #16]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	dd01      	ble.n	8003bc0 <_printf_common+0x7c>
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	18ed      	adds	r5, r5, r3
 8003bc0:	2700      	movs	r7, #0
 8003bc2:	42bd      	cmp	r5, r7
 8003bc4:	d120      	bne.n	8003c08 <_printf_common+0xc4>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e010      	b.n	8003bec <_printf_common+0xa8>
 8003bca:	3701      	adds	r7, #1
 8003bcc:	68e3      	ldr	r3, [r4, #12]
 8003bce:	682a      	ldr	r2, [r5, #0]
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	42bb      	cmp	r3, r7
 8003bd4:	ddd2      	ble.n	8003b7c <_printf_common+0x38>
 8003bd6:	0022      	movs	r2, r4
 8003bd8:	2301      	movs	r3, #1
 8003bda:	3219      	adds	r2, #25
 8003bdc:	9901      	ldr	r1, [sp, #4]
 8003bde:	9800      	ldr	r0, [sp, #0]
 8003be0:	9e08      	ldr	r6, [sp, #32]
 8003be2:	47b0      	blx	r6
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d1f0      	bne.n	8003bca <_printf_common+0x86>
 8003be8:	2001      	movs	r0, #1
 8003bea:	4240      	negs	r0, r0
 8003bec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bee:	2030      	movs	r0, #48	; 0x30
 8003bf0:	18e1      	adds	r1, r4, r3
 8003bf2:	3143      	adds	r1, #67	; 0x43
 8003bf4:	7008      	strb	r0, [r1, #0]
 8003bf6:	0021      	movs	r1, r4
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	3145      	adds	r1, #69	; 0x45
 8003bfc:	7809      	ldrb	r1, [r1, #0]
 8003bfe:	18a2      	adds	r2, r4, r2
 8003c00:	3243      	adds	r2, #67	; 0x43
 8003c02:	3302      	adds	r3, #2
 8003c04:	7011      	strb	r1, [r2, #0]
 8003c06:	e7c1      	b.n	8003b8c <_printf_common+0x48>
 8003c08:	0022      	movs	r2, r4
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	321a      	adds	r2, #26
 8003c0e:	9901      	ldr	r1, [sp, #4]
 8003c10:	9800      	ldr	r0, [sp, #0]
 8003c12:	9e08      	ldr	r6, [sp, #32]
 8003c14:	47b0      	blx	r6
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	d0e6      	beq.n	8003be8 <_printf_common+0xa4>
 8003c1a:	3701      	adds	r7, #1
 8003c1c:	e7d1      	b.n	8003bc2 <_printf_common+0x7e>
	...

08003c20 <_printf_i>:
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	9204      	str	r2, [sp, #16]
 8003c26:	000a      	movs	r2, r1
 8003c28:	3243      	adds	r2, #67	; 0x43
 8003c2a:	9305      	str	r3, [sp, #20]
 8003c2c:	9003      	str	r0, [sp, #12]
 8003c2e:	9202      	str	r2, [sp, #8]
 8003c30:	7e0a      	ldrb	r2, [r1, #24]
 8003c32:	000c      	movs	r4, r1
 8003c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c36:	2a6e      	cmp	r2, #110	; 0x6e
 8003c38:	d100      	bne.n	8003c3c <_printf_i+0x1c>
 8003c3a:	e086      	b.n	8003d4a <_printf_i+0x12a>
 8003c3c:	d81f      	bhi.n	8003c7e <_printf_i+0x5e>
 8003c3e:	2a63      	cmp	r2, #99	; 0x63
 8003c40:	d033      	beq.n	8003caa <_printf_i+0x8a>
 8003c42:	d808      	bhi.n	8003c56 <_printf_i+0x36>
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d100      	bne.n	8003c4a <_printf_i+0x2a>
 8003c48:	e08c      	b.n	8003d64 <_printf_i+0x144>
 8003c4a:	2a58      	cmp	r2, #88	; 0x58
 8003c4c:	d04d      	beq.n	8003cea <_printf_i+0xca>
 8003c4e:	0025      	movs	r5, r4
 8003c50:	3542      	adds	r5, #66	; 0x42
 8003c52:	702a      	strb	r2, [r5, #0]
 8003c54:	e030      	b.n	8003cb8 <_printf_i+0x98>
 8003c56:	2a64      	cmp	r2, #100	; 0x64
 8003c58:	d001      	beq.n	8003c5e <_printf_i+0x3e>
 8003c5a:	2a69      	cmp	r2, #105	; 0x69
 8003c5c:	d1f7      	bne.n	8003c4e <_printf_i+0x2e>
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6825      	ldr	r5, [r4, #0]
 8003c62:	1d0a      	adds	r2, r1, #4
 8003c64:	0628      	lsls	r0, r5, #24
 8003c66:	d529      	bpl.n	8003cbc <_printf_i+0x9c>
 8003c68:	6808      	ldr	r0, [r1, #0]
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	da03      	bge.n	8003c78 <_printf_i+0x58>
 8003c70:	232d      	movs	r3, #45	; 0x2d
 8003c72:	9a02      	ldr	r2, [sp, #8]
 8003c74:	4240      	negs	r0, r0
 8003c76:	7013      	strb	r3, [r2, #0]
 8003c78:	4e6b      	ldr	r6, [pc, #428]	; (8003e28 <_printf_i+0x208>)
 8003c7a:	270a      	movs	r7, #10
 8003c7c:	e04f      	b.n	8003d1e <_printf_i+0xfe>
 8003c7e:	2a73      	cmp	r2, #115	; 0x73
 8003c80:	d074      	beq.n	8003d6c <_printf_i+0x14c>
 8003c82:	d808      	bhi.n	8003c96 <_printf_i+0x76>
 8003c84:	2a6f      	cmp	r2, #111	; 0x6f
 8003c86:	d01f      	beq.n	8003cc8 <_printf_i+0xa8>
 8003c88:	2a70      	cmp	r2, #112	; 0x70
 8003c8a:	d1e0      	bne.n	8003c4e <_printf_i+0x2e>
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	6809      	ldr	r1, [r1, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	6022      	str	r2, [r4, #0]
 8003c94:	e003      	b.n	8003c9e <_printf_i+0x7e>
 8003c96:	2a75      	cmp	r2, #117	; 0x75
 8003c98:	d016      	beq.n	8003cc8 <_printf_i+0xa8>
 8003c9a:	2a78      	cmp	r2, #120	; 0x78
 8003c9c:	d1d7      	bne.n	8003c4e <_printf_i+0x2e>
 8003c9e:	0022      	movs	r2, r4
 8003ca0:	2178      	movs	r1, #120	; 0x78
 8003ca2:	3245      	adds	r2, #69	; 0x45
 8003ca4:	7011      	strb	r1, [r2, #0]
 8003ca6:	4e61      	ldr	r6, [pc, #388]	; (8003e2c <_printf_i+0x20c>)
 8003ca8:	e022      	b.n	8003cf0 <_printf_i+0xd0>
 8003caa:	0025      	movs	r5, r4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	3542      	adds	r5, #66	; 0x42
 8003cb0:	1d11      	adds	r1, r2, #4
 8003cb2:	6019      	str	r1, [r3, #0]
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	702b      	strb	r3, [r5, #0]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e065      	b.n	8003d88 <_printf_i+0x168>
 8003cbc:	6808      	ldr	r0, [r1, #0]
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	0669      	lsls	r1, r5, #25
 8003cc2:	d5d3      	bpl.n	8003c6c <_printf_i+0x4c>
 8003cc4:	b200      	sxth	r0, r0
 8003cc6:	e7d1      	b.n	8003c6c <_printf_i+0x4c>
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	6825      	ldr	r5, [r4, #0]
 8003ccc:	1d08      	adds	r0, r1, #4
 8003cce:	6018      	str	r0, [r3, #0]
 8003cd0:	6808      	ldr	r0, [r1, #0]
 8003cd2:	062e      	lsls	r6, r5, #24
 8003cd4:	d505      	bpl.n	8003ce2 <_printf_i+0xc2>
 8003cd6:	4e54      	ldr	r6, [pc, #336]	; (8003e28 <_printf_i+0x208>)
 8003cd8:	2708      	movs	r7, #8
 8003cda:	2a6f      	cmp	r2, #111	; 0x6f
 8003cdc:	d01b      	beq.n	8003d16 <_printf_i+0xf6>
 8003cde:	270a      	movs	r7, #10
 8003ce0:	e019      	b.n	8003d16 <_printf_i+0xf6>
 8003ce2:	066d      	lsls	r5, r5, #25
 8003ce4:	d5f7      	bpl.n	8003cd6 <_printf_i+0xb6>
 8003ce6:	b280      	uxth	r0, r0
 8003ce8:	e7f5      	b.n	8003cd6 <_printf_i+0xb6>
 8003cea:	3145      	adds	r1, #69	; 0x45
 8003cec:	4e4e      	ldr	r6, [pc, #312]	; (8003e28 <_printf_i+0x208>)
 8003cee:	700a      	strb	r2, [r1, #0]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	6822      	ldr	r2, [r4, #0]
 8003cf4:	1d01      	adds	r1, r0, #4
 8003cf6:	6800      	ldr	r0, [r0, #0]
 8003cf8:	6019      	str	r1, [r3, #0]
 8003cfa:	0615      	lsls	r5, r2, #24
 8003cfc:	d521      	bpl.n	8003d42 <_printf_i+0x122>
 8003cfe:	07d3      	lsls	r3, r2, #31
 8003d00:	d502      	bpl.n	8003d08 <_printf_i+0xe8>
 8003d02:	2320      	movs	r3, #32
 8003d04:	431a      	orrs	r2, r3
 8003d06:	6022      	str	r2, [r4, #0]
 8003d08:	2710      	movs	r7, #16
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d103      	bne.n	8003d16 <_printf_i+0xf6>
 8003d0e:	2320      	movs	r3, #32
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	439a      	bics	r2, r3
 8003d14:	6022      	str	r2, [r4, #0]
 8003d16:	0023      	movs	r3, r4
 8003d18:	2200      	movs	r2, #0
 8003d1a:	3343      	adds	r3, #67	; 0x43
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db58      	blt.n	8003dd8 <_printf_i+0x1b8>
 8003d26:	2204      	movs	r2, #4
 8003d28:	6821      	ldr	r1, [r4, #0]
 8003d2a:	4391      	bics	r1, r2
 8003d2c:	6021      	str	r1, [r4, #0]
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d154      	bne.n	8003ddc <_printf_i+0x1bc>
 8003d32:	9d02      	ldr	r5, [sp, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05a      	beq.n	8003dee <_printf_i+0x1ce>
 8003d38:	0025      	movs	r5, r4
 8003d3a:	7833      	ldrb	r3, [r6, #0]
 8003d3c:	3542      	adds	r5, #66	; 0x42
 8003d3e:	702b      	strb	r3, [r5, #0]
 8003d40:	e055      	b.n	8003dee <_printf_i+0x1ce>
 8003d42:	0655      	lsls	r5, r2, #25
 8003d44:	d5db      	bpl.n	8003cfe <_printf_i+0xde>
 8003d46:	b280      	uxth	r0, r0
 8003d48:	e7d9      	b.n	8003cfe <_printf_i+0xde>
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	680d      	ldr	r5, [r1, #0]
 8003d4e:	1d10      	adds	r0, r2, #4
 8003d50:	6949      	ldr	r1, [r1, #20]
 8003d52:	6018      	str	r0, [r3, #0]
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	062e      	lsls	r6, r5, #24
 8003d58:	d501      	bpl.n	8003d5e <_printf_i+0x13e>
 8003d5a:	6019      	str	r1, [r3, #0]
 8003d5c:	e002      	b.n	8003d64 <_printf_i+0x144>
 8003d5e:	066d      	lsls	r5, r5, #25
 8003d60:	d5fb      	bpl.n	8003d5a <_printf_i+0x13a>
 8003d62:	8019      	strh	r1, [r3, #0]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9d02      	ldr	r5, [sp, #8]
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	e04f      	b.n	8003e0c <_printf_i+0x1ec>
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	1d11      	adds	r1, r2, #4
 8003d70:	6019      	str	r1, [r3, #0]
 8003d72:	6815      	ldr	r5, [r2, #0]
 8003d74:	2100      	movs	r1, #0
 8003d76:	6862      	ldr	r2, [r4, #4]
 8003d78:	0028      	movs	r0, r5
 8003d7a:	f000 f859 	bl	8003e30 <memchr>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d001      	beq.n	8003d86 <_printf_i+0x166>
 8003d82:	1b40      	subs	r0, r0, r5
 8003d84:	6060      	str	r0, [r4, #4]
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9a02      	ldr	r2, [sp, #8]
 8003d8e:	7013      	strb	r3, [r2, #0]
 8003d90:	e03c      	b.n	8003e0c <_printf_i+0x1ec>
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	002a      	movs	r2, r5
 8003d96:	9904      	ldr	r1, [sp, #16]
 8003d98:	9803      	ldr	r0, [sp, #12]
 8003d9a:	9d05      	ldr	r5, [sp, #20]
 8003d9c:	47a8      	blx	r5
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	d03e      	beq.n	8003e20 <_printf_i+0x200>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	079b      	lsls	r3, r3, #30
 8003da6:	d415      	bmi.n	8003dd4 <_printf_i+0x1b4>
 8003da8:	9b07      	ldr	r3, [sp, #28]
 8003daa:	68e0      	ldr	r0, [r4, #12]
 8003dac:	4298      	cmp	r0, r3
 8003dae:	da39      	bge.n	8003e24 <_printf_i+0x204>
 8003db0:	0018      	movs	r0, r3
 8003db2:	e037      	b.n	8003e24 <_printf_i+0x204>
 8003db4:	0022      	movs	r2, r4
 8003db6:	2301      	movs	r3, #1
 8003db8:	3219      	adds	r2, #25
 8003dba:	9904      	ldr	r1, [sp, #16]
 8003dbc:	9803      	ldr	r0, [sp, #12]
 8003dbe:	9e05      	ldr	r6, [sp, #20]
 8003dc0:	47b0      	blx	r6
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d02c      	beq.n	8003e20 <_printf_i+0x200>
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	9a07      	ldr	r2, [sp, #28]
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	42ab      	cmp	r3, r5
 8003dd0:	dcf0      	bgt.n	8003db4 <_printf_i+0x194>
 8003dd2:	e7e9      	b.n	8003da8 <_printf_i+0x188>
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	e7f7      	b.n	8003dc8 <_printf_i+0x1a8>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d0ad      	beq.n	8003d38 <_printf_i+0x118>
 8003ddc:	9d02      	ldr	r5, [sp, #8]
 8003dde:	0039      	movs	r1, r7
 8003de0:	f7fc fa16 	bl	8000210 <__aeabi_uidivmod>
 8003de4:	5c73      	ldrb	r3, [r6, r1]
 8003de6:	3d01      	subs	r5, #1
 8003de8:	702b      	strb	r3, [r5, #0]
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d1f7      	bne.n	8003dde <_printf_i+0x1be>
 8003dee:	2f08      	cmp	r7, #8
 8003df0:	d109      	bne.n	8003e06 <_printf_i+0x1e6>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	07db      	lsls	r3, r3, #31
 8003df6:	d506      	bpl.n	8003e06 <_printf_i+0x1e6>
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	6922      	ldr	r2, [r4, #16]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	dc02      	bgt.n	8003e06 <_printf_i+0x1e6>
 8003e00:	2330      	movs	r3, #48	; 0x30
 8003e02:	3d01      	subs	r5, #1
 8003e04:	702b      	strb	r3, [r5, #0]
 8003e06:	9b02      	ldr	r3, [sp, #8]
 8003e08:	1b5b      	subs	r3, r3, r5
 8003e0a:	6123      	str	r3, [r4, #16]
 8003e0c:	9b05      	ldr	r3, [sp, #20]
 8003e0e:	aa07      	add	r2, sp, #28
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	0021      	movs	r1, r4
 8003e14:	9b04      	ldr	r3, [sp, #16]
 8003e16:	9803      	ldr	r0, [sp, #12]
 8003e18:	f7ff fe94 	bl	8003b44 <_printf_common>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d1b8      	bne.n	8003d92 <_printf_i+0x172>
 8003e20:	2001      	movs	r0, #1
 8003e22:	4240      	negs	r0, r0
 8003e24:	b009      	add	sp, #36	; 0x24
 8003e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e28:	08004125 	.word	0x08004125
 8003e2c:	08004136 	.word	0x08004136

08003e30 <memchr>:
 8003e30:	b2c9      	uxtb	r1, r1
 8003e32:	1882      	adds	r2, r0, r2
 8003e34:	4290      	cmp	r0, r2
 8003e36:	d101      	bne.n	8003e3c <memchr+0xc>
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr
 8003e3c:	7803      	ldrb	r3, [r0, #0]
 8003e3e:	428b      	cmp	r3, r1
 8003e40:	d0fb      	beq.n	8003e3a <memchr+0xa>
 8003e42:	3001      	adds	r0, #1
 8003e44:	e7f6      	b.n	8003e34 <memchr+0x4>

08003e46 <memcpy>:
 8003e46:	2300      	movs	r3, #0
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d100      	bne.n	8003e50 <memcpy+0xa>
 8003e4e:	bd10      	pop	{r4, pc}
 8003e50:	5ccc      	ldrb	r4, [r1, r3]
 8003e52:	54c4      	strb	r4, [r0, r3]
 8003e54:	3301      	adds	r3, #1
 8003e56:	e7f8      	b.n	8003e4a <memcpy+0x4>

08003e58 <memmove>:
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	4288      	cmp	r0, r1
 8003e5c:	d902      	bls.n	8003e64 <memmove+0xc>
 8003e5e:	188b      	adds	r3, r1, r2
 8003e60:	4298      	cmp	r0, r3
 8003e62:	d303      	bcc.n	8003e6c <memmove+0x14>
 8003e64:	2300      	movs	r3, #0
 8003e66:	e007      	b.n	8003e78 <memmove+0x20>
 8003e68:	5c8b      	ldrb	r3, [r1, r2]
 8003e6a:	5483      	strb	r3, [r0, r2]
 8003e6c:	3a01      	subs	r2, #1
 8003e6e:	d2fb      	bcs.n	8003e68 <memmove+0x10>
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	5ccc      	ldrb	r4, [r1, r3]
 8003e74:	54c4      	strb	r4, [r0, r3]
 8003e76:	3301      	adds	r3, #1
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d1fa      	bne.n	8003e72 <memmove+0x1a>
 8003e7c:	e7f8      	b.n	8003e70 <memmove+0x18>
	...

08003e80 <_free_r>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	0005      	movs	r5, r0
 8003e84:	2900      	cmp	r1, #0
 8003e86:	d010      	beq.n	8003eaa <_free_r+0x2a>
 8003e88:	1f0c      	subs	r4, r1, #4
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da00      	bge.n	8003e92 <_free_r+0x12>
 8003e90:	18e4      	adds	r4, r4, r3
 8003e92:	0028      	movs	r0, r5
 8003e94:	f000 f8d4 	bl	8004040 <__malloc_lock>
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <_free_r+0x90>)
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <_free_r+0x2c>
 8003ea0:	6063      	str	r3, [r4, #4]
 8003ea2:	6014      	str	r4, [r2, #0]
 8003ea4:	0028      	movs	r0, r5
 8003ea6:	f000 f8cc 	bl	8004042 <__malloc_unlock>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d909      	bls.n	8003ec4 <_free_r+0x44>
 8003eb0:	6821      	ldr	r1, [r4, #0]
 8003eb2:	1860      	adds	r0, r4, r1
 8003eb4:	4283      	cmp	r3, r0
 8003eb6:	d1f3      	bne.n	8003ea0 <_free_r+0x20>
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	1841      	adds	r1, r0, r1
 8003ebe:	6021      	str	r1, [r4, #0]
 8003ec0:	e7ee      	b.n	8003ea0 <_free_r+0x20>
 8003ec2:	0013      	movs	r3, r2
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	d001      	beq.n	8003ece <_free_r+0x4e>
 8003eca:	42a2      	cmp	r2, r4
 8003ecc:	d9f9      	bls.n	8003ec2 <_free_r+0x42>
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	1858      	adds	r0, r3, r1
 8003ed2:	42a0      	cmp	r0, r4
 8003ed4:	d10b      	bne.n	8003eee <_free_r+0x6e>
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	1809      	adds	r1, r1, r0
 8003eda:	1858      	adds	r0, r3, r1
 8003edc:	6019      	str	r1, [r3, #0]
 8003ede:	4282      	cmp	r2, r0
 8003ee0:	d1e0      	bne.n	8003ea4 <_free_r+0x24>
 8003ee2:	6810      	ldr	r0, [r2, #0]
 8003ee4:	6852      	ldr	r2, [r2, #4]
 8003ee6:	1841      	adds	r1, r0, r1
 8003ee8:	6019      	str	r1, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e7da      	b.n	8003ea4 <_free_r+0x24>
 8003eee:	42a0      	cmp	r0, r4
 8003ef0:	d902      	bls.n	8003ef8 <_free_r+0x78>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	e7d5      	b.n	8003ea4 <_free_r+0x24>
 8003ef8:	6821      	ldr	r1, [r4, #0]
 8003efa:	1860      	adds	r0, r4, r1
 8003efc:	4282      	cmp	r2, r0
 8003efe:	d103      	bne.n	8003f08 <_free_r+0x88>
 8003f00:	6810      	ldr	r0, [r2, #0]
 8003f02:	6852      	ldr	r2, [r2, #4]
 8003f04:	1841      	adds	r1, r0, r1
 8003f06:	6021      	str	r1, [r4, #0]
 8003f08:	6062      	str	r2, [r4, #4]
 8003f0a:	605c      	str	r4, [r3, #4]
 8003f0c:	e7ca      	b.n	8003ea4 <_free_r+0x24>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	200000b4 	.word	0x200000b4

08003f14 <_malloc_r>:
 8003f14:	2303      	movs	r3, #3
 8003f16:	b570      	push	{r4, r5, r6, lr}
 8003f18:	1ccd      	adds	r5, r1, #3
 8003f1a:	439d      	bics	r5, r3
 8003f1c:	3508      	adds	r5, #8
 8003f1e:	0006      	movs	r6, r0
 8003f20:	2d0c      	cmp	r5, #12
 8003f22:	d21e      	bcs.n	8003f62 <_malloc_r+0x4e>
 8003f24:	250c      	movs	r5, #12
 8003f26:	42a9      	cmp	r1, r5
 8003f28:	d81d      	bhi.n	8003f66 <_malloc_r+0x52>
 8003f2a:	0030      	movs	r0, r6
 8003f2c:	f000 f888 	bl	8004040 <__malloc_lock>
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <_malloc_r+0xb4>)
 8003f32:	6814      	ldr	r4, [r2, #0]
 8003f34:	0021      	movs	r1, r4
 8003f36:	2900      	cmp	r1, #0
 8003f38:	d119      	bne.n	8003f6e <_malloc_r+0x5a>
 8003f3a:	4c24      	ldr	r4, [pc, #144]	; (8003fcc <_malloc_r+0xb8>)
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <_malloc_r+0x36>
 8003f42:	0030      	movs	r0, r6
 8003f44:	f000 f86a 	bl	800401c <_sbrk_r>
 8003f48:	6020      	str	r0, [r4, #0]
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	f000 f865 	bl	800401c <_sbrk_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d12b      	bne.n	8003fae <_malloc_r+0x9a>
 8003f56:	230c      	movs	r3, #12
 8003f58:	0030      	movs	r0, r6
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	f000 f871 	bl	8004042 <__malloc_unlock>
 8003f60:	e003      	b.n	8003f6a <_malloc_r+0x56>
 8003f62:	2d00      	cmp	r5, #0
 8003f64:	dadf      	bge.n	8003f26 <_malloc_r+0x12>
 8003f66:	230c      	movs	r3, #12
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	680b      	ldr	r3, [r1, #0]
 8003f70:	1b5b      	subs	r3, r3, r5
 8003f72:	d419      	bmi.n	8003fa8 <_malloc_r+0x94>
 8003f74:	2b0b      	cmp	r3, #11
 8003f76:	d903      	bls.n	8003f80 <_malloc_r+0x6c>
 8003f78:	600b      	str	r3, [r1, #0]
 8003f7a:	18cc      	adds	r4, r1, r3
 8003f7c:	6025      	str	r5, [r4, #0]
 8003f7e:	e003      	b.n	8003f88 <_malloc_r+0x74>
 8003f80:	684b      	ldr	r3, [r1, #4]
 8003f82:	428c      	cmp	r4, r1
 8003f84:	d10d      	bne.n	8003fa2 <_malloc_r+0x8e>
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	0030      	movs	r0, r6
 8003f8a:	f000 f85a 	bl	8004042 <__malloc_unlock>
 8003f8e:	0020      	movs	r0, r4
 8003f90:	2207      	movs	r2, #7
 8003f92:	300b      	adds	r0, #11
 8003f94:	1d23      	adds	r3, r4, #4
 8003f96:	4390      	bics	r0, r2
 8003f98:	1ac3      	subs	r3, r0, r3
 8003f9a:	d0e7      	beq.n	8003f6c <_malloc_r+0x58>
 8003f9c:	425a      	negs	r2, r3
 8003f9e:	50e2      	str	r2, [r4, r3]
 8003fa0:	e7e4      	b.n	8003f6c <_malloc_r+0x58>
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	000c      	movs	r4, r1
 8003fa6:	e7ef      	b.n	8003f88 <_malloc_r+0x74>
 8003fa8:	000c      	movs	r4, r1
 8003faa:	6849      	ldr	r1, [r1, #4]
 8003fac:	e7c3      	b.n	8003f36 <_malloc_r+0x22>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	1cc4      	adds	r4, r0, #3
 8003fb2:	439c      	bics	r4, r3
 8003fb4:	42a0      	cmp	r0, r4
 8003fb6:	d0e1      	beq.n	8003f7c <_malloc_r+0x68>
 8003fb8:	1a21      	subs	r1, r4, r0
 8003fba:	0030      	movs	r0, r6
 8003fbc:	f000 f82e 	bl	800401c <_sbrk_r>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d1db      	bne.n	8003f7c <_malloc_r+0x68>
 8003fc4:	e7c7      	b.n	8003f56 <_malloc_r+0x42>
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	200000b4 	.word	0x200000b4
 8003fcc:	200000b8 	.word	0x200000b8

08003fd0 <_realloc_r>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	0007      	movs	r7, r0
 8003fd4:	000d      	movs	r5, r1
 8003fd6:	0016      	movs	r6, r2
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d105      	bne.n	8003fe8 <_realloc_r+0x18>
 8003fdc:	0011      	movs	r1, r2
 8003fde:	f7ff ff99 	bl	8003f14 <_malloc_r>
 8003fe2:	0004      	movs	r4, r0
 8003fe4:	0020      	movs	r0, r4
 8003fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d103      	bne.n	8003ff4 <_realloc_r+0x24>
 8003fec:	f7ff ff48 	bl	8003e80 <_free_r>
 8003ff0:	0034      	movs	r4, r6
 8003ff2:	e7f7      	b.n	8003fe4 <_realloc_r+0x14>
 8003ff4:	f000 f826 	bl	8004044 <_malloc_usable_size_r>
 8003ff8:	002c      	movs	r4, r5
 8003ffa:	42b0      	cmp	r0, r6
 8003ffc:	d2f2      	bcs.n	8003fe4 <_realloc_r+0x14>
 8003ffe:	0031      	movs	r1, r6
 8004000:	0038      	movs	r0, r7
 8004002:	f7ff ff87 	bl	8003f14 <_malloc_r>
 8004006:	1e04      	subs	r4, r0, #0
 8004008:	d0ec      	beq.n	8003fe4 <_realloc_r+0x14>
 800400a:	0029      	movs	r1, r5
 800400c:	0032      	movs	r2, r6
 800400e:	f7ff ff1a 	bl	8003e46 <memcpy>
 8004012:	0029      	movs	r1, r5
 8004014:	0038      	movs	r0, r7
 8004016:	f7ff ff33 	bl	8003e80 <_free_r>
 800401a:	e7e3      	b.n	8003fe4 <_realloc_r+0x14>

0800401c <_sbrk_r>:
 800401c:	2300      	movs	r3, #0
 800401e:	b570      	push	{r4, r5, r6, lr}
 8004020:	4c06      	ldr	r4, [pc, #24]	; (800403c <_sbrk_r+0x20>)
 8004022:	0005      	movs	r5, r0
 8004024:	0008      	movs	r0, r1
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	f7fc fccc 	bl	80009c4 <_sbrk>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d103      	bne.n	8004038 <_sbrk_r+0x1c>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d000      	beq.n	8004038 <_sbrk_r+0x1c>
 8004036:	602b      	str	r3, [r5, #0]
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	20000150 	.word	0x20000150

08004040 <__malloc_lock>:
 8004040:	4770      	bx	lr

08004042 <__malloc_unlock>:
 8004042:	4770      	bx	lr

08004044 <_malloc_usable_size_r>:
 8004044:	1f0b      	subs	r3, r1, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	1f18      	subs	r0, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	da01      	bge.n	8004052 <_malloc_usable_size_r+0xe>
 800404e:	580b      	ldr	r3, [r1, r0]
 8004050:	18c0      	adds	r0, r0, r3
 8004052:	4770      	bx	lr

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
