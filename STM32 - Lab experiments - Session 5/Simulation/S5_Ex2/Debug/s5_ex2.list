
s5_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002570  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080026d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080026d4  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009745  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001690  00000000  00000000  00029779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002b8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa18  00000000  00000000  0002c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b161  00000000  00000000  00046cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0c89  00000000  00000000  00051e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  00102b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002614 	.word	0x08002614

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002614 	.word	0x08002614

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
//***************************
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
    int32_t CH1_DC = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
    HAL_Init();
 8000226:	f000 f9d3 	bl	80005d0 <HAL_Init>
    SystemClock_Config();
 800022a:	f000 f82b 	bl	8000284 <SystemClock_Config>
    MX_GPIO_Init();
 800022e:	f000 f8f1 	bl	8000414 <MX_GPIO_Init>
    MX_TIM2_Init();
 8000232:	f000 f86f 	bl	8000314 <MX_TIM2_Init>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <main+0x60>)
 8000238:	2100      	movs	r1, #0
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fa74 	bl	8001728 <HAL_TIM_PWM_Start>
 //**************************
    while (1)
    {
        while(CH1_DC < 65535)
 8000240:	e009      	b.n	8000256 <main+0x3a>
        {
            TIM2->CCR1 = CH1_DC;
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	635a      	str	r2, [r3, #52]	; 0x34
            CH1_DC += 70;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3346      	adds	r3, #70	; 0x46
 800024e:	607b      	str	r3, [r7, #4]
            HAL_Delay(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fa43 	bl	80006dc <HAL_Delay>
        while(CH1_DC < 65535)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <main+0x64>)
 800025a:	4293      	cmp	r3, r2
 800025c:	ddf1      	ble.n	8000242 <main+0x26>
        }
        while(CH1_DC > 0)
 800025e:	e009      	b.n	8000274 <main+0x58>
        {
            TIM2->CCR1 = CH1_DC;
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	635a      	str	r2, [r3, #52]	; 0x34
            CH1_DC -= 70;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3b46      	subs	r3, #70	; 0x46
 800026c:	607b      	str	r3, [r7, #4]
            HAL_Delay(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f000 fa34 	bl	80006dc <HAL_Delay>
        while(CH1_DC > 0)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dcf2      	bgt.n	8000260 <main+0x44>
        while(CH1_DC < 65535)
 800027a:	e7ec      	b.n	8000256 <main+0x3a>
 800027c:	20000028 	.word	0x20000028
 8000280:	0000fffe 	.word	0x0000fffe

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b095      	sub	sp, #84	; 0x54
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2414      	movs	r4, #20
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	233c      	movs	r3, #60	; 0x3c
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 f9b5 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2310      	movs	r3, #16
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f002 f9ae 	bl	8002604 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fc59 	bl	8000b64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	0052      	lsls	r2, r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2240      	movs	r2, #64	; 0x40
 80002ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fc85 	bl	8000be4 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 f8af 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 ffd0 	bl	80012a4 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000308:	f000 f89a 	bl	8000440 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b015      	add	sp, #84	; 0x54
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08e      	sub	sp, #56	; 0x38
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031a:	2328      	movs	r3, #40	; 0x28
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	0018      	movs	r0, r3
 8000320:	2310      	movs	r3, #16
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f002 f96d 	bl	8002604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032a:	231c      	movs	r3, #28
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	230c      	movs	r3, #12
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 f965 	bl	8002604 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033a:	003b      	movs	r3, r7
 800033c:	0018      	movs	r0, r3
 800033e:	231c      	movs	r3, #28
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 f95e 	bl	8002604 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000348:	4b30      	ldr	r3, [pc, #192]	; (800040c <MX_TIM2_Init+0xf8>)
 800034a:	2280      	movs	r2, #128	; 0x80
 800034c:	05d2      	lsls	r2, r2, #23
 800034e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000350:	4b2e      	ldr	r3, [pc, #184]	; (800040c <MX_TIM2_Init+0xf8>)
 8000352:	2201      	movs	r2, #1
 8000354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000356:	4b2d      	ldr	r3, [pc, #180]	; (800040c <MX_TIM2_Init+0xf8>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800035c:	4b2b      	ldr	r3, [pc, #172]	; (800040c <MX_TIM2_Init+0xf8>)
 800035e:	4a2c      	ldr	r2, [pc, #176]	; (8000410 <MX_TIM2_Init+0xfc>)
 8000360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000362:	4b2a      	ldr	r3, [pc, #168]	; (800040c <MX_TIM2_Init+0xf8>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000368:	4b28      	ldr	r3, [pc, #160]	; (800040c <MX_TIM2_Init+0xf8>)
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <MX_TIM2_Init+0xf8>)
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f921 	bl	80015b8 <HAL_TIM_Base_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800037a:	f000 f861 	bl	8000440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037e:	2128      	movs	r1, #40	; 0x28
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	0152      	lsls	r2, r2, #5
 8000386:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000388:	187a      	adds	r2, r7, r1
 800038a:	4b20      	ldr	r3, [pc, #128]	; (800040c <MX_TIM2_Init+0xf8>)
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fbba 	bl	8001b08 <HAL_TIM_ConfigClockSource>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000398:	f000 f852 	bl	8000440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_TIM2_Init+0xf8>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 f962 	bl	8001668 <HAL_TIM_PWM_Init>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003a8:	f000 f84a 	bl	8000440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ac:	211c      	movs	r1, #28
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ba:	187a      	adds	r2, r7, r1
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_TIM2_Init+0xf8>)
 80003be:	0011      	movs	r1, r2
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 f885 	bl	80024d0 <HAL_TIMEx_MasterConfigSynchronization>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80003ca:	f000 f839 	bl	8000440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2260      	movs	r2, #96	; 0x60
 80003d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003da:	003b      	movs	r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e6:	0039      	movs	r1, r7
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_TIM2_Init+0xf8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fa8b 	bl	8001908 <HAL_TIM_PWM_ConfigChannel>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80003f6:	f000 f823 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003fa:	4b04      	ldr	r3, [pc, #16]	; (800040c <MX_TIM2_Init+0xf8>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 f865 	bl	80004cc <HAL_TIM_MspPostInit>

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b00e      	add	sp, #56	; 0x38
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	20000028 	.word	0x20000028
 8000410:	0000ffff 	.word	0x0000ffff

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_GPIO_Init+0x28>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <MX_GPIO_Init+0x28>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_GPIO_Init+0x28>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b002      	add	sp, #8
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	40021000 	.word	0x40021000

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	e7fe      	b.n	8000448 <Error_Handler+0x8>
	...

0800044c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x44>)
 8000454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_MspInit+0x44>)
 8000458:	2101      	movs	r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	641a      	str	r2, [r3, #64]	; 0x40
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x44>)
 8000460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000462:	2201      	movs	r2, #1
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <HAL_MspInit+0x44>)
 800046c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <HAL_MspInit+0x44>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0549      	lsls	r1, r1, #21
 8000474:	430a      	orrs	r2, r1
 8000476:	63da      	str	r2, [r3, #60]	; 0x3c
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <HAL_MspInit+0x44>)
 800047a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	055b      	lsls	r3, r3, #21
 8000480:	4013      	ands	r3, r2
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d10b      	bne.n	80004c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <HAL_TIM_Base_MspInit+0x34>)
 80004aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_TIM_Base_MspInit+0x34>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <HAL_TIM_Base_MspInit+0x34>)
 80004b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b8:	2201      	movs	r2, #1
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b089      	sub	sp, #36	; 0x24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	240c      	movs	r4, #12
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f002 f890 	bl	8002604 <memset>
  if(htim->Instance==TIM2)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d122      	bne.n	8000536 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <HAL_TIM_MspPostInit+0x74>)
 80004f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_TIM_MspPostInit+0x74>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	430a      	orrs	r2, r1
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_TIM_MspPostInit+0x74>)
 80004fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000500:	2201      	movs	r2, #1
 8000502:	4013      	ands	r3, r2
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000508:	0021      	movs	r1, r4
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2220      	movs	r2, #32
 800050e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2202      	movs	r2, #2
 8000514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2202      	movs	r2, #2
 8000526:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	187a      	adds	r2, r7, r1
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f000 f9ab 	bl	800088c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b009      	add	sp, #36	; 0x24
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f89c 	bl	80006a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000580:	f7ff fff7 	bl	8000572 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	; (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005aa:	f002 f807 	bl	80025bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005ae:	f7ff fe35 	bl	800021c <main>

080005b2 <LoopForever>:

LoopForever:
  b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   r0, =_estack
 80005b4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c0:	080026c8 	.word	0x080026c8
  ldr r2, =_sbss
 80005c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c8:	20000078 	.word	0x20000078

080005cc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_COMP_IRQHandler>
	...

080005d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_Init+0x3c>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_Init+0x3c>)
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	0049      	lsls	r1, r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 f810 	bl	8000610 <HAL_InitTick>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d003      	beq.n	80005fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e001      	b.n	8000600 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005fc:	f7ff ff26 	bl	800044c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	781b      	ldrb	r3, [r3, #0]
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40022000 	.word	0x40022000

08000610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000618:	230f      	movs	r3, #15
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <HAL_InitTick+0x88>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d02b      	beq.n	8000680 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <HAL_InitTick+0x8c>)
 800062a:	681c      	ldr	r4, [r3, #0]
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <HAL_InitTick+0x88>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	0019      	movs	r1, r3
 8000632:	23fa      	movs	r3, #250	; 0xfa
 8000634:	0098      	lsls	r0, r3, #2
 8000636:	f7ff fd65 	bl	8000104 <__udivsi3>
 800063a:	0003      	movs	r3, r0
 800063c:	0019      	movs	r1, r3
 800063e:	0020      	movs	r0, r4
 8000640:	f7ff fd60 	bl	8000104 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f913 	bl	8000872 <HAL_SYSTICK_Config>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d112      	bne.n	8000676 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b03      	cmp	r3, #3
 8000654:	d80a      	bhi.n	800066c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	425b      	negs	r3, r3
 800065c:	2200      	movs	r2, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f8f2 	bl	8000848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_InitTick+0x90>)
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e00d      	b.n	8000688 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800066c:	230f      	movs	r3, #15
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e008      	b.n	8000688 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000676:	230f      	movs	r3, #15
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e003      	b.n	8000688 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000680:	230f      	movs	r3, #15
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000688:	230f      	movs	r3, #15
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	781b      	ldrb	r3, [r3, #0]
}
 800068e:	0018      	movs	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	b005      	add	sp, #20
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000008 	.word	0x20000008
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000004 	.word	0x20000004

080006a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x1c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	001a      	movs	r2, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_IncTick+0x20>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	18d2      	adds	r2, r2, r3
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_IncTick+0x20>)
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000074 	.word	0x20000074

080006c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <HAL_GetTick+0x10>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	20000074 	.word	0x20000074

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e4:	f7ff fff0 	bl	80006c8 <HAL_GetTick>
 80006e8:	0003      	movs	r3, r0
 80006ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3301      	adds	r3, #1
 80006f4:	d005      	beq.n	8000702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_Delay+0x44>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	001a      	movs	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	f7ff ffe0 	bl	80006c8 <HAL_GetTick>
 8000708:	0002      	movs	r2, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	429a      	cmp	r2, r3
 8000712:	d8f7      	bhi.n	8000704 <HAL_Delay+0x28>
  {
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b004      	add	sp, #16
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000008 	.word	0x20000008

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	0002      	movs	r2, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b7f      	cmp	r3, #127	; 0x7f
 8000738:	d828      	bhi.n	800078c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073a:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <__NVIC_SetPriority+0xd4>)
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b25b      	sxtb	r3, r3
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	33c0      	adds	r3, #192	; 0xc0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	589b      	ldr	r3, [r3, r2]
 800074a:	1dfa      	adds	r2, r7, #7
 800074c:	7812      	ldrb	r2, [r2, #0]
 800074e:	0011      	movs	r1, r2
 8000750:	2203      	movs	r2, #3
 8000752:	400a      	ands	r2, r1
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	4091      	lsls	r1, r2
 800075a:	000a      	movs	r2, r1
 800075c:	43d2      	mvns	r2, r2
 800075e:	401a      	ands	r2, r3
 8000760:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	019b      	lsls	r3, r3, #6
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	401a      	ands	r2, r3
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	0018      	movs	r0, r3
 8000770:	2303      	movs	r3, #3
 8000772:	4003      	ands	r3, r0
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <__NVIC_SetPriority+0xd4>)
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	089b      	lsrs	r3, r3, #2
 8000782:	430a      	orrs	r2, r1
 8000784:	33c0      	adds	r3, #192	; 0xc0
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800078a:	e031      	b.n	80007f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <__NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0019      	movs	r1, r3
 8000794:	230f      	movs	r3, #15
 8000796:	400b      	ands	r3, r1
 8000798:	3b08      	subs	r3, #8
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	3306      	adds	r3, #6
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1dfa      	adds	r2, r7, #7
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	0011      	movs	r1, r2
 80007ac:	2203      	movs	r2, #3
 80007ae:	400a      	ands	r2, r1
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	21ff      	movs	r1, #255	; 0xff
 80007b4:	4091      	lsls	r1, r2
 80007b6:	000a      	movs	r2, r1
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	401a      	ands	r2, r3
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	2303      	movs	r3, #3
 80007ce:	4003      	ands	r3, r0
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <__NVIC_SetPriority+0xd8>)
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	001c      	movs	r4, r3
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	3b08      	subs	r3, #8
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	430a      	orrs	r2, r1
 80007e6:	3306      	adds	r3, #6
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	18c3      	adds	r3, r0, r3
 80007ec:	3304      	adds	r3, #4
 80007ee:	601a      	str	r2, [r3, #0]
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	1e5a      	subs	r2, r3, #1
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	045b      	lsls	r3, r3, #17
 8000810:	429a      	cmp	r2, r3
 8000812:	d301      	bcc.n	8000818 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000814:	2301      	movs	r3, #1
 8000816:	e010      	b.n	800083a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <SysTick_Config+0x44>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	3a01      	subs	r2, #1
 800081e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000820:	2301      	movs	r3, #1
 8000822:	425b      	negs	r3, r3
 8000824:	2103      	movs	r1, #3
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff ff7c 	bl	8000724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x44>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	210f      	movs	r1, #15
 8000854:	187b      	adds	r3, r7, r1
 8000856:	1c02      	adds	r2, r0, #0
 8000858:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b25b      	sxtb	r3, r3
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff5d 	bl	8000724 <__NVIC_SetPriority>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b004      	add	sp, #16
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff ffbf 	bl	8000800 <SysTick_Config>
 8000882:	0003      	movs	r3, r0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	b002      	add	sp, #8
 800088a:	bd80      	pop	{r7, pc}

0800088c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089a:	e14d      	b.n	8000b38 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4091      	lsls	r1, r2
 80008a6:	000a      	movs	r2, r1
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d100      	bne.n	80008b4 <HAL_GPIO_Init+0x28>
 80008b2:	e13e      	b.n	8000b32 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2203      	movs	r2, #3
 80008ba:	4013      	ands	r3, r2
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d005      	beq.n	80008cc <HAL_GPIO_Init+0x40>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2203      	movs	r2, #3
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d130      	bne.n	800092e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	409a      	lsls	r2, r3
 80008da:	0013      	movs	r3, r2
 80008dc:	43da      	mvns	r2, r3
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	409a      	lsls	r2, r3
 80008ee:	0013      	movs	r3, r2
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000902:	2201      	movs	r2, #1
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	43da      	mvns	r2, r3
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	2201      	movs	r2, #1
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2203      	movs	r2, #3
 8000934:	4013      	ands	r3, r2
 8000936:	2b03      	cmp	r3, #3
 8000938:	d017      	beq.n	800096a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2203      	movs	r2, #3
 8000946:	409a      	lsls	r2, r3
 8000948:	0013      	movs	r3, r2
 800094a:	43da      	mvns	r2, r3
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	409a      	lsls	r2, r3
 800095c:	0013      	movs	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2203      	movs	r2, #3
 8000970:	4013      	ands	r3, r2
 8000972:	2b02      	cmp	r3, #2
 8000974:	d123      	bne.n	80009be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3208      	adds	r2, #8
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	58d3      	ldr	r3, [r2, r3]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	2207      	movs	r2, #7
 8000988:	4013      	ands	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	220f      	movs	r2, #15
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	2107      	movs	r1, #7
 80009a2:	400b      	ands	r3, r1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3208      	adds	r2, #8
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	6939      	ldr	r1, [r7, #16]
 80009bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2203      	movs	r2, #3
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	43da      	mvns	r2, r3
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2203      	movs	r2, #3
 80009dc:	401a      	ands	r2, r3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	23c0      	movs	r3, #192	; 0xc0
 80009f8:	029b      	lsls	r3, r3, #10
 80009fa:	4013      	ands	r3, r2
 80009fc:	d100      	bne.n	8000a00 <HAL_GPIO_Init+0x174>
 80009fe:	e098      	b.n	8000b32 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a00:	4a53      	ldr	r2, [pc, #332]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3318      	adds	r3, #24
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	589b      	ldr	r3, [r3, r2]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2203      	movs	r2, #3
 8000a12:	4013      	ands	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	220f      	movs	r2, #15
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	43da      	mvns	r2, r3
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	23a0      	movs	r3, #160	; 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d019      	beq.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a48      	ldr	r2, [pc, #288]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0x1d2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a47      	ldr	r2, [pc, #284]	; (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <HAL_GPIO_Init+0x1ce>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a46      	ldr	r2, [pc, #280]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d007      	beq.n	8000a56 <HAL_GPIO_Init+0x1ca>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a45      	ldr	r2, [pc, #276]	; (8000b60 <HAL_GPIO_Init+0x2d4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_GPIO_Init+0x1c6>
 8000a4e:	2304      	movs	r3, #4
 8000a50:	e008      	b.n	8000a64 <HAL_GPIO_Init+0x1d8>
 8000a52:	2305      	movs	r3, #5
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x1d8>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e004      	b.n	8000a64 <HAL_GPIO_Init+0x1d8>
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e002      	b.n	8000a64 <HAL_GPIO_Init+0x1d8>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <HAL_GPIO_Init+0x1d8>
 8000a62:	2300      	movs	r3, #0
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	2103      	movs	r1, #3
 8000a68:	400a      	ands	r2, r1
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	4093      	lsls	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a74:	4936      	ldr	r1, [pc, #216]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	035b      	lsls	r3, r3, #13
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43da      	mvns	r2, r3
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	039b      	lsls	r3, r3, #14
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ad6:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000ad8:	2384      	movs	r3, #132	; 0x84
 8000ada:	58d3      	ldr	r3, [r2, r3]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	029b      	lsls	r3, r3, #10
 8000af0:	4013      	ands	r3, r2
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afc:	4914      	ldr	r1, [pc, #80]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000afe:	2284      	movs	r2, #132	; 0x84
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	58d3      	ldr	r3, [r2, r3]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	025b      	lsls	r3, r3, #9
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b2a:	4909      	ldr	r1, [pc, #36]	; (8000b50 <HAL_GPIO_Init+0x2c4>)
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	40da      	lsrs	r2, r3
 8000b40:	1e13      	subs	r3, r2, #0
 8000b42:	d000      	beq.n	8000b46 <HAL_GPIO_Init+0x2ba>
 8000b44:	e6aa      	b.n	800089c <HAL_GPIO_Init+0x10>
  }
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021800 	.word	0x40021800
 8000b54:	50000400 	.word	0x50000400
 8000b58:	50000800 	.word	0x50000800
 8000b5c:	50000c00 	.word	0x50000c00
 8000b60:	50001000 	.word	0x50001000

08000b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	0019      	movs	r1, r3
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d11f      	bne.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	189b      	adds	r3, r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4912      	ldr	r1, [pc, #72]	; (8000be0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fab4 	bl	8000104 <__udivsi3>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ba2:	e008      	b.n	8000bb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e001      	b.n	8000bb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e009      	b.n	8000bca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d0ed      	beq.n	8000ba4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40007000 	.word	0x40007000
 8000bd8:	fffff9ff 	.word	0xfffff9ff
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	000f4240 	.word	0x000f4240

08000be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f000 fb50 	bl	8001298 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d100      	bne.n	8000c04 <HAL_RCC_OscConfig+0x20>
 8000c02:	e07c      	b.n	8000cfe <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c04:	4bc3      	ldr	r3, [pc, #780]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2238      	movs	r2, #56	; 0x38
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c0e:	4bc1      	ldr	r3, [pc, #772]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	2203      	movs	r2, #3
 8000c14:	4013      	ands	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2b10      	cmp	r3, #16
 8000c1c:	d102      	bne.n	8000c24 <HAL_RCC_OscConfig+0x40>
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d002      	beq.n	8000c2a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d10b      	bne.n	8000c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2a:	4bba      	ldr	r3, [pc, #744]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	029b      	lsls	r3, r3, #10
 8000c32:	4013      	ands	r3, r2
 8000c34:	d062      	beq.n	8000cfc <HAL_RCC_OscConfig+0x118>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d15e      	bne.n	8000cfc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e32a      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d107      	bne.n	8000c5e <HAL_RCC_OscConfig+0x7a>
 8000c4e:	4bb1      	ldr	r3, [pc, #708]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4bb0      	ldr	r3, [pc, #704]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0249      	lsls	r1, r1, #9
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e020      	b.n	8000ca0 <HAL_RCC_OscConfig+0xbc>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	02db      	lsls	r3, r3, #11
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d10e      	bne.n	8000c88 <HAL_RCC_OscConfig+0xa4>
 8000c6a:	4baa      	ldr	r3, [pc, #680]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4ba9      	ldr	r3, [pc, #676]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	02c9      	lsls	r1, r1, #11
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	4ba6      	ldr	r3, [pc, #664]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4ba5      	ldr	r3, [pc, #660]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	0249      	lsls	r1, r1, #9
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e00b      	b.n	8000ca0 <HAL_RCC_OscConfig+0xbc>
 8000c88:	4ba2      	ldr	r3, [pc, #648]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4ba1      	ldr	r3, [pc, #644]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c8e:	49a2      	ldr	r1, [pc, #648]	; (8000f18 <HAL_RCC_OscConfig+0x334>)
 8000c90:	400a      	ands	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	4b9f      	ldr	r3, [pc, #636]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b9e      	ldr	r3, [pc, #632]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000c9a:	49a0      	ldr	r1, [pc, #640]	; (8000f1c <HAL_RCC_OscConfig+0x338>)
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d014      	beq.n	8000cd2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fd0e 	bl	80006c8 <HAL_GetTick>
 8000cac:	0003      	movs	r3, r0
 8000cae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cb0:	e008      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb2:	f7ff fd09 	bl	80006c8 <HAL_GetTick>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b64      	cmp	r3, #100	; 0x64
 8000cbe:	d901      	bls.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e2e9      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cc4:	4b93      	ldr	r3, [pc, #588]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d0f0      	beq.n	8000cb2 <HAL_RCC_OscConfig+0xce>
 8000cd0:	e015      	b.n	8000cfe <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fcf9 	bl	80006c8 <HAL_GetTick>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cdc:	f7ff fcf4 	bl	80006c8 <HAL_GetTick>
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e2d4      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cee:	4b89      	ldr	r3, [pc, #548]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	029b      	lsls	r3, r3, #10
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d1f0      	bne.n	8000cdc <HAL_RCC_OscConfig+0xf8>
 8000cfa:	e000      	b.n	8000cfe <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2202      	movs	r2, #2
 8000d04:	4013      	ands	r3, r2
 8000d06:	d100      	bne.n	8000d0a <HAL_RCC_OscConfig+0x126>
 8000d08:	e099      	b.n	8000e3e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0a:	4b82      	ldr	r3, [pc, #520]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2238      	movs	r2, #56	; 0x38
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d14:	4b7f      	ldr	r3, [pc, #508]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b10      	cmp	r3, #16
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x146>
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d002      	beq.n	8000d30 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d135      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d30:	4b78      	ldr	r3, [pc, #480]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_OscConfig+0x164>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e2a7      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	4a74      	ldr	r2, [pc, #464]	; (8000f20 <HAL_RCC_OscConfig+0x33c>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	021a      	lsls	r2, r3, #8
 8000d58:	4b6e      	ldr	r3, [pc, #440]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d112      	bne.n	8000d8a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d64:	4b6b      	ldr	r3, [pc, #428]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a6e      	ldr	r2, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x340>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d74:	430a      	orrs	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0adb      	lsrs	r3, r3, #11
 8000d7e:	2207      	movs	r2, #7
 8000d80:	4013      	ands	r3, r2
 8000d82:	4a69      	ldr	r2, [pc, #420]	; (8000f28 <HAL_RCC_OscConfig+0x344>)
 8000d84:	40da      	lsrs	r2, r3
 8000d86:	4b69      	ldr	r3, [pc, #420]	; (8000f2c <HAL_RCC_OscConfig+0x348>)
 8000d88:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d8a:	4b69      	ldr	r3, [pc, #420]	; (8000f30 <HAL_RCC_OscConfig+0x34c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff fc3e 	bl	8000610 <HAL_InitTick>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d051      	beq.n	8000e3c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e27d      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d030      	beq.n	8000e06 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000da4:	4b5b      	ldr	r3, [pc, #364]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a5e      	ldr	r2, [pc, #376]	; (8000f24 <HAL_RCC_OscConfig+0x340>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	0019      	movs	r1, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000db8:	4b56      	ldr	r3, [pc, #344]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	0049      	lsls	r1, r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fc7f 	bl	80006c8 <HAL_GetTick>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc7a 	bl	80006c8 <HAL_GetTick>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e25a      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000de2:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dee:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a4b      	ldr	r2, [pc, #300]	; (8000f20 <HAL_RCC_OscConfig+0x33c>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	0019      	movs	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	021a      	lsls	r2, r3, #8
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e00:	430a      	orrs	r2, r1
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	e01b      	b.n	8000e3e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	4949      	ldr	r1, [pc, #292]	; (8000f34 <HAL_RCC_OscConfig+0x350>)
 8000e0e:	400a      	ands	r2, r1
 8000e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e12:	f7ff fc59 	bl	80006c8 <HAL_GetTick>
 8000e16:	0003      	movs	r3, r0
 8000e18:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc54 	bl	80006c8 <HAL_GetTick>
 8000e20:	0002      	movs	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e234      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4013      	ands	r3, r2
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x238>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2208      	movs	r2, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	d047      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2238      	movs	r2, #56	; 0x38
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b18      	cmp	r3, #24
 8000e52:	d10a      	bne.n	8000e6a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d03c      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x2f4>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d138      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e216      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d019      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fc23 	bl	80006c8 <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc1e 	bl	80006c8 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e1fe      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d0f1      	beq.n	8000e88 <HAL_RCC_OscConfig+0x2a4>
 8000ea4:	e018      	b.n	8000ed8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	438a      	bics	r2, r1
 8000eb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fc09 	bl	80006c8 <HAL_GetTick>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fc04 	bl	80006c8 <HAL_GetTick>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e1e4      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d1f1      	bne.n	8000ebc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2204      	movs	r2, #4
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x300>
 8000ee2:	e0c7      	b.n	8001074 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee4:	231f      	movs	r3, #31
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2238      	movs	r2, #56	; 0x38
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b20      	cmp	r3, #32
 8000ef6:	d11f      	bne.n	8000f38 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000efc:	2202      	movs	r2, #2
 8000efe:	4013      	ands	r3, r2
 8000f00:	d100      	bne.n	8000f04 <HAL_RCC_OscConfig+0x320>
 8000f02:	e0b7      	b.n	8001074 <HAL_RCC_OscConfig+0x490>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d000      	beq.n	8000f0e <HAL_RCC_OscConfig+0x32a>
 8000f0c:	e0b2      	b.n	8001074 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1c2      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40021000 	.word	0x40021000
 8000f18:	fffeffff 	.word	0xfffeffff
 8000f1c:	fffbffff 	.word	0xfffbffff
 8000f20:	ffff80ff 	.word	0xffff80ff
 8000f24:	ffffc7ff 	.word	0xffffc7ff
 8000f28:	00f42400 	.word	0x00f42400
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004
 8000f34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f38:	4bb5      	ldr	r3, [pc, #724]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	055b      	lsls	r3, r3, #21
 8000f40:	4013      	ands	r3, r2
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x364>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x366>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d011      	beq.n	8000f72 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4bb0      	ldr	r3, [pc, #704]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f52:	4baf      	ldr	r3, [pc, #700]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0549      	lsls	r1, r1, #21
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f5c:	4bac      	ldr	r3, [pc, #688]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	055b      	lsls	r3, r3, #21
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000f6a:	231f      	movs	r3, #31
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f72:	4ba8      	ldr	r3, [pc, #672]	; (8001214 <HAL_RCC_OscConfig+0x630>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d11a      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f7e:	4ba5      	ldr	r3, [pc, #660]	; (8001214 <HAL_RCC_OscConfig+0x630>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4ba4      	ldr	r3, [pc, #656]	; (8001214 <HAL_RCC_OscConfig+0x630>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0049      	lsls	r1, r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb9c 	bl	80006c8 <HAL_GetTick>
 8000f90:	0003      	movs	r3, r0
 8000f92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f96:	f7ff fb97 	bl	80006c8 <HAL_GetTick>
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e177      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fa8:	4b9a      	ldr	r3, [pc, #616]	; (8001214 <HAL_RCC_OscConfig+0x630>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x3e6>
 8000fbc:	4b94      	ldr	r3, [pc, #592]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fc0:	4b93      	ldr	r3, [pc, #588]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fc8:	e01c      	b.n	8001004 <HAL_RCC_OscConfig+0x420>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x408>
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fd6:	4b8e      	ldr	r3, [pc, #568]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fd8:	2104      	movs	r1, #4
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fde:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fe2:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0x420>
 8000fec:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ff0:	4b87      	ldr	r3, [pc, #540]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ff8:	4b85      	ldr	r3, [pc, #532]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000ffa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ffc:	4b84      	ldr	r3, [pc, #528]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8000ffe:	2104      	movs	r1, #4
 8001000:	438a      	bics	r2, r1
 8001002:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d014      	beq.n	8001036 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100c:	f7ff fb5c 	bl	80006c8 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001014:	e009      	b.n	800102a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f7ff fb57 	bl	80006c8 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	4a7d      	ldr	r2, [pc, #500]	; (8001218 <HAL_RCC_OscConfig+0x634>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e136      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800102a:	4b79      	ldr	r3, [pc, #484]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x432>
 8001034:	e013      	b.n	800105e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001036:	f7ff fb47 	bl	80006c8 <HAL_GetTick>
 800103a:	0003      	movs	r3, r0
 800103c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800103e:	e009      	b.n	8001054 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001040:	f7ff fb42 	bl	80006c8 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a73      	ldr	r2, [pc, #460]	; (8001218 <HAL_RCC_OscConfig+0x634>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e121      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001054:	4b6e      	ldr	r3, [pc, #440]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	2202      	movs	r2, #2
 800105a:	4013      	ands	r3, r2
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800105e:	231f      	movs	r3, #31
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d105      	bne.n	8001074 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800106a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800106e:	496b      	ldr	r1, [pc, #428]	; (800121c <HAL_RCC_OscConfig+0x638>)
 8001070:	400a      	ands	r2, r1
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2220      	movs	r2, #32
 800107a:	4013      	ands	r3, r2
 800107c:	d039      	beq.n	80010f2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01b      	beq.n	80010be <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001086:	4b62      	ldr	r3, [pc, #392]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b61      	ldr	r3, [pc, #388]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	03c9      	lsls	r1, r1, #15
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001094:	f7ff fb18 	bl	80006c8 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800109e:	f7ff fb13 	bl	80006c8 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e0f3      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80010b0:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x4ba>
 80010bc:	e019      	b.n	80010f2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010be:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80010c4:	4956      	ldr	r1, [pc, #344]	; (8001220 <HAL_RCC_OscConfig+0x63c>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ca:	f7ff fafd 	bl	80006c8 <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010d4:	f7ff faf8 	bl	80006c8 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e0d8      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	4013      	ands	r3, r2
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d100      	bne.n	80010fc <HAL_RCC_OscConfig+0x518>
 80010fa:	e0cc      	b.n	8001296 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2238      	movs	r2, #56	; 0x38
 8001102:	4013      	ands	r3, r2
 8001104:	2b10      	cmp	r3, #16
 8001106:	d100      	bne.n	800110a <HAL_RCC_OscConfig+0x526>
 8001108:	e07b      	b.n	8001202 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d156      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001118:	4942      	ldr	r1, [pc, #264]	; (8001224 <HAL_RCC_OscConfig+0x640>)
 800111a:	400a      	ands	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fad3 	bl	80006c8 <HAL_GetTick>
 8001122:	0003      	movs	r3, r0
 8001124:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001128:	f7ff face 	bl	80006c8 <HAL_GetTick>
 800112c:	0002      	movs	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e0ae      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	049b      	lsls	r3, r3, #18
 8001142:	4013      	ands	r3, r2
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	4a37      	ldr	r2, [pc, #220]	; (8001228 <HAL_RCC_OscConfig+0x644>)
 800114c:	4013      	ands	r3, r2
 800114e:	0019      	movs	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001172:	431a      	orrs	r2, r3
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001176:	430a      	orrs	r2, r1
 8001178:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	0449      	lsls	r1, r1, #17
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0549      	lsls	r1, r1, #21
 8001192:	430a      	orrs	r2, r1
 8001194:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fa97 	bl	80006c8 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a0:	f7ff fa92 	bl	80006c8 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e072      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	049b      	lsls	r3, r3, #18
 80011ba:	4013      	ands	r3, r2
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5bc>
 80011be:	e06a      	b.n	8001296 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <HAL_RCC_OscConfig+0x640>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fa7c 	bl	80006c8 <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fa77 	bl	80006c8 <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e057      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	049b      	lsls	r3, r3, #18
 80011f0:	4013      	ands	r3, r2
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_RCC_OscConfig+0x62c>)
 80011fa:	490c      	ldr	r1, [pc, #48]	; (800122c <HAL_RCC_OscConfig+0x648>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	e049      	b.n	8001296 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d112      	bne.n	8001230 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e044      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40021000 	.word	0x40021000
 8001214:	40007000 	.word	0x40007000
 8001218:	00001388 	.word	0x00001388
 800121c:	efffffff 	.word	0xefffffff
 8001220:	ffbfffff 	.word	0xffbfffff
 8001224:	feffffff 	.word	0xfeffffff
 8001228:	11c1808c 	.word	0x11c1808c
 800122c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x6bc>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2203      	movs	r2, #3
 800123a:	401a      	ands	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	429a      	cmp	r2, r3
 8001242:	d126      	bne.n	8001292 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2270      	movs	r2, #112	; 0x70
 8001248:	401a      	ands	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d11f      	bne.n	8001292 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	23fe      	movs	r3, #254	; 0xfe
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	401a      	ands	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001260:	429a      	cmp	r2, r3
 8001262:	d116      	bne.n	8001292 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	23f8      	movs	r3, #248	; 0xf8
 8001268:	039b      	lsls	r3, r3, #14
 800126a:	401a      	ands	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001270:	429a      	cmp	r2, r3
 8001272:	d10e      	bne.n	8001292 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	23e0      	movs	r3, #224	; 0xe0
 8001278:	051b      	lsls	r3, r3, #20
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001280:	429a      	cmp	r2, r3
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	0f5b      	lsrs	r3, r3, #29
 8001288:	075a      	lsls	r2, r3, #29
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b008      	add	sp, #32
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0e9      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b8:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2207      	movs	r2, #7
 80012be:	4013      	ands	r3, r2
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d91e      	bls.n	8001304 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2207      	movs	r2, #7
 80012cc:	4393      	bics	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012d8:	f7ff f9f6 	bl	80006c8 <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012e0:	e009      	b.n	80012f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e2:	f7ff f9f1 	bl	80006c8 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4a6a      	ldr	r2, [pc, #424]	; (8001498 <HAL_RCC_ClockConfig+0x1f4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e0ca      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f6:	4b67      	ldr	r3, [pc, #412]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2207      	movs	r2, #7
 80012fc:	4013      	ands	r3, r2
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d1ee      	bne.n	80012e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2202      	movs	r2, #2
 800130a:	4013      	ands	r3, r2
 800130c:	d015      	beq.n	800133a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d006      	beq.n	8001326 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001318:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 800131e:	21e0      	movs	r1, #224	; 0xe0
 8001320:	01c9      	lsls	r1, r1, #7
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4a5d      	ldr	r2, [pc, #372]	; (80014a0 <HAL_RCC_ClockConfig+0x1fc>)
 800132c:	4013      	ands	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d057      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134c:	4b53      	ldr	r3, [pc, #332]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	029b      	lsls	r3, r3, #10
 8001354:	4013      	ands	r3, r2
 8001356:	d12b      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e097      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d107      	bne.n	8001374 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	049b      	lsls	r3, r3, #18
 800136c:	4013      	ands	r3, r2
 800136e:	d11f      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e08b      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d107      	bne.n	800138c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4013      	ands	r3, r2
 8001386:	d113      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e07f      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 8001396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d108      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e074      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e06d      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2207      	movs	r2, #7
 80013b6:	4393      	bics	r3, r2
 80013b8:	0019      	movs	r1, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013c4:	f7ff f980 	bl	80006c8 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013cc:	e009      	b.n	80013e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ce:	f7ff f97b 	bl	80006c8 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	4a2f      	ldr	r2, [pc, #188]	; (8001498 <HAL_RCC_ClockConfig+0x1f4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e054      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2238      	movs	r2, #56	; 0x38
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1ec      	bne.n	80013ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2207      	movs	r2, #7
 80013fa:	4013      	ands	r3, r2
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d21e      	bcs.n	8001440 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2207      	movs	r2, #7
 8001408:	4393      	bics	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001414:	f7ff f958 	bl	80006c8 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800141c:	e009      	b.n	8001432 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141e:	f7ff f953 	bl	80006c8 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <HAL_RCC_ClockConfig+0x1f4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e02c      	b.n	800148c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_RCC_ClockConfig+0x1f0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2207      	movs	r2, #7
 8001438:	4013      	ands	r3, r2
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d1ee      	bne.n	800141e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2204      	movs	r2, #4
 8001446:	4013      	ands	r3, r2
 8001448:	d009      	beq.n	800145e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <HAL_RCC_ClockConfig+0x200>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800145e:	f000 f829 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 8001462:	0001      	movs	r1, r0
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_RCC_ClockConfig+0x1f8>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	220f      	movs	r2, #15
 800146c:	401a      	ands	r2, r3
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_RCC_ClockConfig+0x204>)
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	58d3      	ldr	r3, [r2, r3]
 8001474:	221f      	movs	r2, #31
 8001476:	4013      	ands	r3, r2
 8001478:	000a      	movs	r2, r1
 800147a:	40da      	lsrs	r2, r3
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_ClockConfig+0x208>)
 800147e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_ClockConfig+0x20c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff f8c3 	bl	8000610 <HAL_InitTick>
 800148a:	0003      	movs	r3, r0
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40022000 	.word	0x40022000
 8001498:	00001388 	.word	0x00001388
 800149c:	40021000 	.word	0x40021000
 80014a0:	fffff0ff 	.word	0xfffff0ff
 80014a4:	ffff8fff 	.word	0xffff8fff
 80014a8:	0800262c 	.word	0x0800262c
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2238      	movs	r2, #56	; 0x38
 80014c0:	4013      	ands	r3, r2
 80014c2:	d10f      	bne.n	80014e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0adb      	lsrs	r3, r3, #11
 80014ca:	2207      	movs	r2, #7
 80014cc:	4013      	ands	r3, r2
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	4835      	ldr	r0, [pc, #212]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014da:	f7fe fe13 	bl	8000104 <__udivsi3>
 80014de:	0003      	movs	r3, r0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	e05d      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2238      	movs	r2, #56	; 0x38
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d102      	bne.n	80014f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	e054      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2238      	movs	r2, #56	; 0x38
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d138      	bne.n	8001574 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	2207      	movs	r2, #7
 8001514:	4013      	ands	r3, r2
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d10d      	bne.n	800153c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	4824      	ldr	r0, [pc, #144]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001524:	f7fe fdee 	bl	8000104 <__udivsi3>
 8001528:	0003      	movs	r3, r0
 800152a:	0019      	movs	r1, r3
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	227f      	movs	r2, #127	; 0x7f
 8001534:	4013      	ands	r3, r2
 8001536:	434b      	muls	r3, r1
 8001538:	617b      	str	r3, [r7, #20]
        break;
 800153a:	e00d      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	481c      	ldr	r0, [pc, #112]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001540:	f7fe fde0 	bl	8000104 <__udivsi3>
 8001544:	0003      	movs	r3, r0
 8001546:	0019      	movs	r1, r3
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	227f      	movs	r2, #127	; 0x7f
 8001550:	4013      	ands	r3, r2
 8001552:	434b      	muls	r3, r1
 8001554:	617b      	str	r3, [r7, #20]
        break;
 8001556:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0f5b      	lsrs	r3, r3, #29
 800155e:	2207      	movs	r2, #7
 8001560:	4013      	ands	r3, r2
 8001562:	3301      	adds	r3, #1
 8001564:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	6978      	ldr	r0, [r7, #20]
 800156a:	f7fe fdcb 	bl	8000104 <__udivsi3>
 800156e:	0003      	movs	r3, r0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	e015      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2238      	movs	r2, #56	; 0x38
 800157a:	4013      	ands	r3, r2
 800157c:	2b20      	cmp	r3, #32
 800157e:	d103      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2238      	movs	r2, #56	; 0x38
 800158e:	4013      	ands	r3, r2
 8001590:	2b18      	cmp	r3, #24
 8001592:	d103      	bne.n	800159c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001594:	23fa      	movs	r3, #250	; 0xfa
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e001      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80015a0:	693b      	ldr	r3, [r7, #16]
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b006      	add	sp, #24
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40021000 	.word	0x40021000
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	007a1200 	.word	0x007a1200

080015b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e04a      	b.n	8001660 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	223d      	movs	r2, #61	; 0x3d
 80015ce:	5c9b      	ldrb	r3, [r3, r2]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d107      	bne.n	80015e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	223c      	movs	r2, #60	; 0x3c
 80015da:	2100      	movs	r1, #0
 80015dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe ff57 	bl	8000494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	223d      	movs	r2, #61	; 0x3d
 80015ea:	2102      	movs	r1, #2
 80015ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3304      	adds	r3, #4
 80015f6:	0019      	movs	r1, r3
 80015f8:	0010      	movs	r0, r2
 80015fa:	f000 fb5b 	bl	8001cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2248      	movs	r2, #72	; 0x48
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	223e      	movs	r2, #62	; 0x3e
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	223f      	movs	r2, #63	; 0x3f
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	2101      	movs	r1, #1
 800161c:	5499      	strb	r1, [r3, r2]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2241      	movs	r2, #65	; 0x41
 8001622:	2101      	movs	r1, #1
 8001624:	5499      	strb	r1, [r3, r2]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2242      	movs	r2, #66	; 0x42
 800162a:	2101      	movs	r1, #1
 800162c:	5499      	strb	r1, [r3, r2]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2243      	movs	r2, #67	; 0x43
 8001632:	2101      	movs	r1, #1
 8001634:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2244      	movs	r2, #68	; 0x44
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2245      	movs	r2, #69	; 0x45
 8001642:	2101      	movs	r1, #1
 8001644:	5499      	strb	r1, [r3, r2]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2246      	movs	r2, #70	; 0x46
 800164a:	2101      	movs	r1, #1
 800164c:	5499      	strb	r1, [r3, r2]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2247      	movs	r2, #71	; 0x47
 8001652:	2101      	movs	r1, #1
 8001654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	223d      	movs	r2, #61	; 0x3d
 800165a:	2101      	movs	r1, #1
 800165c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e04a      	b.n	8001710 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	223d      	movs	r2, #61	; 0x3d
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d107      	bne.n	8001696 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	223c      	movs	r2, #60	; 0x3c
 800168a:	2100      	movs	r1, #0
 800168c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f841 	bl	8001718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	223d      	movs	r2, #61	; 0x3d
 800169a:	2102      	movs	r1, #2
 800169c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3304      	adds	r3, #4
 80016a6:	0019      	movs	r1, r3
 80016a8:	0010      	movs	r0, r2
 80016aa:	f000 fb03 	bl	8001cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2248      	movs	r2, #72	; 0x48
 80016b2:	2101      	movs	r1, #1
 80016b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	223e      	movs	r2, #62	; 0x3e
 80016ba:	2101      	movs	r1, #1
 80016bc:	5499      	strb	r1, [r3, r2]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	223f      	movs	r2, #63	; 0x3f
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	2101      	movs	r1, #1
 80016cc:	5499      	strb	r1, [r3, r2]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2241      	movs	r2, #65	; 0x41
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2242      	movs	r2, #66	; 0x42
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2243      	movs	r2, #67	; 0x43
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2244      	movs	r2, #68	; 0x44
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2245      	movs	r2, #69	; 0x45
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2246      	movs	r2, #70	; 0x46
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2247      	movs	r2, #71	; 0x47
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	223d      	movs	r2, #61	; 0x3d
 800170a:	2101      	movs	r1, #1
 800170c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d108      	bne.n	800174a <HAL_TIM_PWM_Start+0x22>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	223e      	movs	r2, #62	; 0x3e
 800173c:	5c9b      	ldrb	r3, [r3, r2]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	4193      	sbcs	r3, r2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	e037      	b.n	80017ba <HAL_TIM_PWM_Start+0x92>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d108      	bne.n	8001762 <HAL_TIM_PWM_Start+0x3a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	223f      	movs	r2, #63	; 0x3f
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	4193      	sbcs	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	e02b      	b.n	80017ba <HAL_TIM_PWM_Start+0x92>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d108      	bne.n	800177a <HAL_TIM_PWM_Start+0x52>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	4193      	sbcs	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	e01f      	b.n	80017ba <HAL_TIM_PWM_Start+0x92>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d108      	bne.n	8001792 <HAL_TIM_PWM_Start+0x6a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2241      	movs	r2, #65	; 0x41
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	1e5a      	subs	r2, r3, #1
 800178c:	4193      	sbcs	r3, r2
 800178e:	b2db      	uxtb	r3, r3
 8001790:	e013      	b.n	80017ba <HAL_TIM_PWM_Start+0x92>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d108      	bne.n	80017aa <HAL_TIM_PWM_Start+0x82>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2242      	movs	r2, #66	; 0x42
 800179c:	5c9b      	ldrb	r3, [r3, r2]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	1e5a      	subs	r2, r3, #1
 80017a4:	4193      	sbcs	r3, r2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	e007      	b.n	80017ba <HAL_TIM_PWM_Start+0x92>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2243      	movs	r2, #67	; 0x43
 80017ae:	5c9b      	ldrb	r3, [r3, r2]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	4193      	sbcs	r3, r2
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e090      	b.n	80018e4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <HAL_TIM_PWM_Start+0xaa>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	223e      	movs	r2, #62	; 0x3e
 80017cc:	2102      	movs	r1, #2
 80017ce:	5499      	strb	r1, [r3, r2]
 80017d0:	e023      	b.n	800181a <HAL_TIM_PWM_Start+0xf2>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d104      	bne.n	80017e2 <HAL_TIM_PWM_Start+0xba>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	223f      	movs	r2, #63	; 0x3f
 80017dc:	2102      	movs	r1, #2
 80017de:	5499      	strb	r1, [r3, r2]
 80017e0:	e01b      	b.n	800181a <HAL_TIM_PWM_Start+0xf2>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d104      	bne.n	80017f2 <HAL_TIM_PWM_Start+0xca>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	2102      	movs	r1, #2
 80017ee:	5499      	strb	r1, [r3, r2]
 80017f0:	e013      	b.n	800181a <HAL_TIM_PWM_Start+0xf2>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d104      	bne.n	8001802 <HAL_TIM_PWM_Start+0xda>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2241      	movs	r2, #65	; 0x41
 80017fc:	2102      	movs	r1, #2
 80017fe:	5499      	strb	r1, [r3, r2]
 8001800:	e00b      	b.n	800181a <HAL_TIM_PWM_Start+0xf2>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b10      	cmp	r3, #16
 8001806:	d104      	bne.n	8001812 <HAL_TIM_PWM_Start+0xea>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2242      	movs	r2, #66	; 0x42
 800180c:	2102      	movs	r1, #2
 800180e:	5499      	strb	r1, [r3, r2]
 8001810:	e003      	b.n	800181a <HAL_TIM_PWM_Start+0xf2>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2243      	movs	r2, #67	; 0x43
 8001816:	2102      	movs	r1, #2
 8001818:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fe30 	bl	8002488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a2f      	ldr	r2, [pc, #188]	; (80018ec <HAL_TIM_PWM_Start+0x1c4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00e      	beq.n	8001850 <HAL_TIM_PWM_Start+0x128>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_TIM_PWM_Start+0x1c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d009      	beq.n	8001850 <HAL_TIM_PWM_Start+0x128>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <HAL_TIM_PWM_Start+0x1cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d004      	beq.n	8001850 <HAL_TIM_PWM_Start+0x128>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2b      	ldr	r2, [pc, #172]	; (80018f8 <HAL_TIM_PWM_Start+0x1d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_TIM_PWM_Start+0x12c>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_TIM_PWM_Start+0x12e>
 8001854:	2300      	movs	r3, #0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0209      	lsls	r1, r1, #8
 8001868:	430a      	orrs	r2, r1
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <HAL_TIM_PWM_Start+0x1c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d014      	beq.n	80018a0 <HAL_TIM_PWM_Start+0x178>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	429a      	cmp	r2, r3
 8001880:	d00e      	beq.n	80018a0 <HAL_TIM_PWM_Start+0x178>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_TIM_PWM_Start+0x1d4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_TIM_PWM_Start+0x178>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_TIM_PWM_Start+0x1d8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d004      	beq.n	80018a0 <HAL_TIM_PWM_Start+0x178>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <HAL_TIM_PWM_Start+0x1c8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d116      	bne.n	80018ce <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_TIM_PWM_Start+0x1dc>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d016      	beq.n	80018e0 <HAL_TIM_PWM_Start+0x1b8>
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d011      	beq.n	80018e0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018cc:	e008      	b.n	80018e0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2101      	movs	r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e000      	b.n	80018e2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40014800 	.word	0x40014800
 80018fc:	40000400 	.word	0x40000400
 8001900:	40000800 	.word	0x40000800
 8001904:	00010007 	.word	0x00010007

08001908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2317      	movs	r3, #23
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	223c      	movs	r2, #60	; 0x3c
 8001920:	5c9b      	ldrb	r3, [r3, r2]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001926:	2302      	movs	r3, #2
 8001928:	e0e5      	b.n	8001af6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	223c      	movs	r2, #60	; 0x3c
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b14      	cmp	r3, #20
 8001936:	d900      	bls.n	800193a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001938:	e0d1      	b.n	8001ade <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	009a      	lsls	r2, r3, #2
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	0011      	movs	r1, r2
 800194e:	0018      	movs	r0, r3
 8001950:	f000 fa3a 	bl	8001dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2108      	movs	r1, #8
 8001960:	430a      	orrs	r2, r1
 8001962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2104      	movs	r1, #4
 8001970:	438a      	bics	r2, r1
 8001972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6999      	ldr	r1, [r3, #24]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	619a      	str	r2, [r3, #24]
      break;
 8001986:	e0af      	b.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f000 faa3 	bl	8001edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0109      	lsls	r1, r1, #4
 80019a4:	430a      	orrs	r2, r1
 80019a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4954      	ldr	r1, [pc, #336]	; (8001b04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6999      	ldr	r1, [r3, #24]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	021a      	lsls	r2, r3, #8
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]
      break;
 80019cc:	e08c      	b.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 fb04 	bl	8001fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2108      	movs	r1, #8
 80019e8:	430a      	orrs	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2104      	movs	r1, #4
 80019f8:	438a      	bics	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69d9      	ldr	r1, [r3, #28]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	61da      	str	r2, [r3, #28]
      break;
 8001a0e:	e06b      	b.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 fb6b 	bl	80020f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69da      	ldr	r2, [r3, #28]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0109      	lsls	r1, r1, #4
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4932      	ldr	r1, [pc, #200]	; (8001b04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69d9      	ldr	r1, [r3, #28]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	021a      	lsls	r2, r3, #8
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]
      break;
 8001a54:	e048      	b.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	0011      	movs	r1, r2
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 fbb2 	bl	80021c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2108      	movs	r1, #8
 8001a70:	430a      	orrs	r2, r1
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2104      	movs	r1, #4
 8001a80:	438a      	bics	r2, r1
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001a96:	e027      	b.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fbf1 	bl	8002288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0109      	lsls	r1, r1, #4
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4910      	ldr	r1, [pc, #64]	; (8001b04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	021a      	lsls	r2, r3, #8
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001adc:	e004      	b.n	8001ae8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001ade:	2317      	movs	r3, #23
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
      break;
 8001ae6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	223c      	movs	r2, #60	; 0x3c
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

  return status;
 8001af0:	2317      	movs	r3, #23
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b006      	add	sp, #24
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	0800266c 	.word	0x0800266c
 8001b04:	fffffbff 	.word	0xfffffbff

08001b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	230f      	movs	r3, #15
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	223c      	movs	r2, #60	; 0x3c
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_TIM_ConfigClockSource+0x20>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e0bc      	b.n	8001ca2 <HAL_TIM_ConfigClockSource+0x19a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	223c      	movs	r2, #60	; 0x3c
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	223d      	movs	r2, #61	; 0x3d
 8001b34:	2102      	movs	r1, #2
 8001b36:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4a5a      	ldr	r2, [pc, #360]	; (8001cac <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4a59      	ldr	r2, [pc, #356]	; (8001cb0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	0192      	lsls	r2, r2, #6
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d040      	beq.n	8001be6 <HAL_TIM_ConfigClockSource+0xde>
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	0192      	lsls	r2, r2, #6
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d900      	bls.n	8001b6e <HAL_TIM_ConfigClockSource+0x66>
 8001b6c:	e088      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	0152      	lsls	r2, r2, #5
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_TIM_ConfigClockSource+0x70>
 8001b76:	e088      	b.n	8001c8a <HAL_TIM_ConfigClockSource+0x182>
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	0152      	lsls	r2, r2, #5
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d900      	bls.n	8001b82 <HAL_TIM_ConfigClockSource+0x7a>
 8001b80:	e07e      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001b82:	2b70      	cmp	r3, #112	; 0x70
 8001b84:	d018      	beq.n	8001bb8 <HAL_TIM_ConfigClockSource+0xb0>
 8001b86:	d900      	bls.n	8001b8a <HAL_TIM_ConfigClockSource+0x82>
 8001b88:	e07a      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001b8a:	2b60      	cmp	r3, #96	; 0x60
 8001b8c:	d04f      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x126>
 8001b8e:	d900      	bls.n	8001b92 <HAL_TIM_ConfigClockSource+0x8a>
 8001b90:	e076      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001b92:	2b50      	cmp	r3, #80	; 0x50
 8001b94:	d03b      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0x106>
 8001b96:	d900      	bls.n	8001b9a <HAL_TIM_ConfigClockSource+0x92>
 8001b98:	e072      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d057      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0x146>
 8001b9e:	d900      	bls.n	8001ba2 <HAL_TIM_ConfigClockSource+0x9a>
 8001ba0:	e06e      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001ba2:	2b30      	cmp	r3, #48	; 0x30
 8001ba4:	d063      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x166>
 8001ba6:	d86b      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d060      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x166>
 8001bac:	d868      	bhi.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d05d      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x166>
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d05b      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0x166>
 8001bb6:	e063      	b.n	8001c80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f000 fc3e 	bl	8002448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2277      	movs	r2, #119	; 0x77
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	609a      	str	r2, [r3, #8]
      break;
 8001be4:	e052      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6899      	ldr	r1, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f000 fc27 	bl	8002448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	01c9      	lsls	r1, r1, #7
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
      break;
 8001c0c:	e03e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	f000 fb98 	bl	8002350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2150      	movs	r1, #80	; 0x50
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fbf2 	bl	8002410 <TIM_ITRx_SetConfig>
      break;
 8001c2c:	e02e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	f000 fbb6 	bl	80023ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2160      	movs	r1, #96	; 0x60
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fbe2 	bl	8002410 <TIM_ITRx_SetConfig>
      break;
 8001c4c:	e01e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6859      	ldr	r1, [r3, #4]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	f000 fb78 	bl	8002350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 fbd2 	bl	8002410 <TIM_ITRx_SetConfig>
      break;
 8001c6c:	e00e      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0019      	movs	r1, r3
 8001c78:	0010      	movs	r0, r2
 8001c7a:	f000 fbc9 	bl	8002410 <TIM_ITRx_SetConfig>
      break;
 8001c7e:	e005      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001c80:	230f      	movs	r3, #15
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
      break;
 8001c88:	e000      	b.n	8001c8c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001c8a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	223d      	movs	r2, #61	; 0x3d
 8001c90:	2101      	movs	r1, #1
 8001c92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	223c      	movs	r2, #60	; 0x3c
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]

  return status;
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	ffceff88 	.word	0xffceff88
 8001cb0:	ffff00ff 	.word	0xffff00ff

08001cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <TIM_Base_SetConfig+0xf4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00c      	beq.n	8001ce6 <TIM_Base_SetConfig+0x32>
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	05db      	lsls	r3, r3, #23
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d007      	beq.n	8001ce6 <TIM_Base_SetConfig+0x32>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <TIM_Base_SetConfig+0xf8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <TIM_Base_SetConfig+0x32>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a33      	ldr	r2, [pc, #204]	; (8001db0 <TIM_Base_SetConfig+0xfc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d108      	bne.n	8001cf8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2270      	movs	r2, #112	; 0x70
 8001cea:	4393      	bics	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a2b      	ldr	r2, [pc, #172]	; (8001da8 <TIM_Base_SetConfig+0xf4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d01c      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d017      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <TIM_Base_SetConfig+0xf8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <TIM_Base_SetConfig+0xfc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00f      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <TIM_Base_SetConfig+0x100>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00b      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <TIM_Base_SetConfig+0x104>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <TIM_Base_SetConfig+0x108>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d003      	beq.n	8001d3a <TIM_Base_SetConfig+0x86>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <TIM_Base_SetConfig+0x10c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <TIM_Base_SetConfig+0x110>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	4393      	bics	r3, r2
 8001d52:	001a      	movs	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <TIM_Base_SetConfig+0xf4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00b      	beq.n	8001d92 <TIM_Base_SetConfig+0xde>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <TIM_Base_SetConfig+0x104>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <TIM_Base_SetConfig+0xde>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <TIM_Base_SetConfig+0x108>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d003      	beq.n	8001d92 <TIM_Base_SetConfig+0xde>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <TIM_Base_SetConfig+0x10c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d103      	bne.n	8001d9a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	615a      	str	r2, [r3, #20]
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40002000 	.word	0x40002000
 8001db8:	40014000 	.word	0x40014000
 8001dbc:	40014400 	.word	0x40014400
 8001dc0:	40014800 	.word	0x40014800
 8001dc4:	fffffcff 	.word	0xfffffcff

08001dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4393      	bics	r3, r2
 8001dda:	001a      	movs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <TIM_OC1_SetConfig+0xf8>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4393      	bics	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4393      	bics	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <TIM_OC1_SetConfig+0xfc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00b      	beq.n	8001e3e <TIM_OC1_SetConfig+0x76>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <TIM_OC1_SetConfig+0x100>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <TIM_OC1_SetConfig+0x76>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <TIM_OC1_SetConfig+0x104>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d003      	beq.n	8001e3e <TIM_OC1_SetConfig+0x76>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <TIM_OC1_SetConfig+0x108>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10c      	bne.n	8001e58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2208      	movs	r2, #8
 8001e42:	4393      	bics	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4393      	bics	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <TIM_OC1_SetConfig+0xfc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00b      	beq.n	8001e78 <TIM_OC1_SetConfig+0xb0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <TIM_OC1_SetConfig+0x100>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <TIM_OC1_SetConfig+0xb0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <TIM_OC1_SetConfig+0x104>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <TIM_OC1_SetConfig+0xb0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <TIM_OC1_SetConfig+0x108>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <TIM_OC1_SetConfig+0x10c>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <TIM_OC1_SetConfig+0x110>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	621a      	str	r2, [r3, #32]
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b006      	add	sp, #24
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	fffeff8f 	.word	0xfffeff8f
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40014800 	.word	0x40014800
 8001ed4:	fffffeff 	.word	0xfffffeff
 8001ed8:	fffffdff 	.word	0xfffffdff

08001edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2210      	movs	r2, #16
 8001eec:	4393      	bics	r3, r2
 8001eee:	001a      	movs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a2e      	ldr	r2, [pc, #184]	; (8001fc4 <TIM_OC2_SetConfig+0xe8>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4a2d      	ldr	r2, [pc, #180]	; (8001fc8 <TIM_OC2_SetConfig+0xec>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4393      	bics	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <TIM_OC2_SetConfig+0xf0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	4393      	bics	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	4393      	bics	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <TIM_OC2_SetConfig+0xf0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_OC2_SetConfig+0x9e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <TIM_OC2_SetConfig+0xf4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_OC2_SetConfig+0x9e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <TIM_OC2_SetConfig+0xf8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_OC2_SetConfig+0x9e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <TIM_OC2_SetConfig+0xfc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d113      	bne.n	8001fa2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <TIM_OC2_SetConfig+0x100>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <TIM_OC2_SetConfig+0x104>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	621a      	str	r2, [r3, #32]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	feff8fff 	.word	0xfeff8fff
 8001fc8:	fffffcff 	.word	0xfffffcff
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	fffffbff 	.word	0xfffffbff
 8001fe0:	fffff7ff 	.word	0xfffff7ff

08001fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <TIM_OC3_SetConfig+0xe4>)
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <TIM_OC3_SetConfig+0xe8>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2203      	movs	r2, #3
 8002018:	4393      	bics	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_OC3_SetConfig+0xec>)
 800202a:	4013      	ands	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <TIM_OC3_SetConfig+0xf0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10d      	bne.n	800205e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <TIM_OC3_SetConfig+0xf4>)
 8002046:	4013      	ands	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <TIM_OC3_SetConfig+0xf8>)
 800205a:	4013      	ands	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <TIM_OC3_SetConfig+0xf0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00b      	beq.n	800207e <TIM_OC3_SetConfig+0x9a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <TIM_OC3_SetConfig+0xfc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <TIM_OC3_SetConfig+0x9a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <TIM_OC3_SetConfig+0x100>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d003      	beq.n	800207e <TIM_OC3_SetConfig+0x9a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <TIM_OC3_SetConfig+0x104>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d113      	bne.n	80020a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <TIM_OC3_SetConfig+0x108>)
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <TIM_OC3_SetConfig+0x10c>)
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	621a      	str	r2, [r3, #32]
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b006      	add	sp, #24
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	fffffeff 	.word	0xfffffeff
 80020cc:	fffeff8f 	.word	0xfffeff8f
 80020d0:	fffffdff 	.word	0xfffffdff
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	fffff7ff 	.word	0xfffff7ff
 80020dc:	fffffbff 	.word	0xfffffbff
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	ffffefff 	.word	0xffffefff
 80020f0:	ffffdfff 	.word	0xffffdfff

080020f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <TIM_OC4_SetConfig+0xb0>)
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <TIM_OC4_SetConfig+0xb4>)
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <TIM_OC4_SetConfig+0xb8>)
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <TIM_OC4_SetConfig+0xbc>)
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	031b      	lsls	r3, r3, #12
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <TIM_OC4_SetConfig+0xc0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_OC4_SetConfig+0x78>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <TIM_OC4_SetConfig+0xc4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_OC4_SetConfig+0x78>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <TIM_OC4_SetConfig+0xc8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_OC4_SetConfig+0x78>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <TIM_OC4_SetConfig+0xcc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d109      	bne.n	8002180 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <TIM_OC4_SetConfig+0xd0>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b006      	add	sp, #24
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	ffffefff 	.word	0xffffefff
 80021a8:	feff8fff 	.word	0xfeff8fff
 80021ac:	fffffcff 	.word	0xfffffcff
 80021b0:	ffffdfff 	.word	0xffffdfff
 80021b4:	40012c00 	.word	0x40012c00
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	ffffbfff 	.word	0xffffbfff

080021c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <TIM_OC5_SetConfig+0xa4>)
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <TIM_OC5_SetConfig+0xa8>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4a1b      	ldr	r2, [pc, #108]	; (8002274 <TIM_OC5_SetConfig+0xac>)
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <TIM_OC5_SetConfig+0xb0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <TIM_OC5_SetConfig+0x6e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a16      	ldr	r2, [pc, #88]	; (800227c <TIM_OC5_SetConfig+0xb4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <TIM_OC5_SetConfig+0x6e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a15      	ldr	r2, [pc, #84]	; (8002280 <TIM_OC5_SetConfig+0xb8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_OC5_SetConfig+0x6e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <TIM_OC5_SetConfig+0xbc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d109      	bne.n	800224a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4a0c      	ldr	r2, [pc, #48]	; (800226c <TIM_OC5_SetConfig+0xa4>)
 800223a:	4013      	ands	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	621a      	str	r2, [r3, #32]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b006      	add	sp, #24
 800226a:	bd80      	pop	{r7, pc}
 800226c:	fffeffff 	.word	0xfffeffff
 8002270:	fffeff8f 	.word	0xfffeff8f
 8002274:	fffdffff 	.word	0xfffdffff
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800

08002288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <TIM_OC6_SetConfig+0xa8>)
 8002298:	401a      	ands	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <TIM_OC6_SetConfig+0xac>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <TIM_OC6_SetConfig+0xb0>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <TIM_OC6_SetConfig+0xb4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00b      	beq.n	80022f8 <TIM_OC6_SetConfig+0x70>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <TIM_OC6_SetConfig+0xb8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <TIM_OC6_SetConfig+0x70>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <TIM_OC6_SetConfig+0xbc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_OC6_SetConfig+0x70>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <TIM_OC6_SetConfig+0xc0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d109      	bne.n	800230c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <TIM_OC6_SetConfig+0xc4>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	621a      	str	r2, [r3, #32]
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b006      	add	sp, #24
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	ffefffff 	.word	0xffefffff
 8002334:	feff8fff 	.word	0xfeff8fff
 8002338:	ffdfffff 	.word	0xffdfffff
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800
 800234c:	fffbffff 	.word	0xfffbffff

08002350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2201      	movs	r2, #1
 8002368:	4393      	bics	r3, r2
 800236a:	001a      	movs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	22f0      	movs	r2, #240	; 0xf0
 800237a:	4393      	bics	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	220a      	movs	r2, #10
 800238c:	4393      	bics	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}

080023ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	2210      	movs	r2, #16
 80023be:	4393      	bics	r3, r2
 80023c0:	001a      	movs	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <TIM_TI2_ConfigInputStage+0x60>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	031b      	lsls	r3, r3, #12
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	22a0      	movs	r2, #160	; 0xa0
 80023e8:	4393      	bics	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	621a      	str	r2, [r3, #32]
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b006      	add	sp, #24
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	ffff0fff 	.word	0xffff0fff

08002410 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a08      	ldr	r2, [pc, #32]	; (8002444 <TIM_ITRx_SetConfig+0x34>)
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	2207      	movs	r2, #7
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	ffcfff8f 	.word	0xffcfff8f

08002448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <TIM_ETR_SetConfig+0x3c>)
 8002460:	4013      	ands	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	021a      	lsls	r2, r3, #8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	431a      	orrs	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4313      	orrs	r3, r2
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	609a      	str	r2, [r3, #8]
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b006      	add	sp, #24
 8002482:	bd80      	pop	{r7, pc}
 8002484:	ffff00ff 	.word	0xffff00ff

08002488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	221f      	movs	r2, #31
 8002498:	4013      	ands	r3, r2
 800249a:	2201      	movs	r2, #1
 800249c:	409a      	lsls	r2, r3
 800249e:	0013      	movs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	43d2      	mvns	r2, r2
 80024aa:	401a      	ands	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	211f      	movs	r1, #31
 80024b8:	400b      	ands	r3, r1
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4099      	lsls	r1, r3
 80024be:	000b      	movs	r3, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	621a      	str	r2, [r3, #32]
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b006      	add	sp, #24
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	223c      	movs	r2, #60	; 0x3c
 80024de:	5c9b      	ldrb	r3, [r3, r2]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e05a      	b.n	800259e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	223c      	movs	r2, #60	; 0x3c
 80024ec:	2101      	movs	r1, #1
 80024ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223d      	movs	r2, #61	; 0x3d
 80024f4:	2102      	movs	r1, #2
 80024f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2270      	movs	r2, #112	; 0x70
 8002528:	4393      	bics	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d014      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	05db      	lsls	r3, r3, #23
 8002550:	429a      	cmp	r2, r3
 8002552:	d00e      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10c      	bne.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	4393      	bics	r3, r2
 8002578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4313      	orrs	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	223d      	movs	r2, #61	; 0x3d
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	223c      	movs	r2, #60	; 0x3c
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	ff0fffff 	.word	0xff0fffff
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40014000 	.word	0x40014000

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	2600      	movs	r6, #0
 80025c0:	4d0c      	ldr	r5, [pc, #48]	; (80025f4 <__libc_init_array+0x38>)
 80025c2:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c4:	1b64      	subs	r4, r4, r5
 80025c6:	10a4      	asrs	r4, r4, #2
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	2600      	movs	r6, #0
 80025ce:	f000 f821 	bl	8002614 <_init>
 80025d2:	4d0a      	ldr	r5, [pc, #40]	; (80025fc <__libc_init_array+0x40>)
 80025d4:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <__libc_init_array+0x44>)
 80025d6:	1b64      	subs	r4, r4, r5
 80025d8:	10a4      	asrs	r4, r4, #2
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	00b3      	lsls	r3, r6, #2
 80025e2:	58eb      	ldr	r3, [r5, r3]
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	00b3      	lsls	r3, r6, #2
 80025ec:	58eb      	ldr	r3, [r5, r3]
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	080026c0 	.word	0x080026c0
 80025f8:	080026c0 	.word	0x080026c0
 80025fc:	080026c0 	.word	0x080026c0
 8002600:	080026c4 	.word	0x080026c4

08002604 <memset>:
 8002604:	0003      	movs	r3, r0
 8002606:	1882      	adds	r2, r0, r2
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	7019      	strb	r1, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
