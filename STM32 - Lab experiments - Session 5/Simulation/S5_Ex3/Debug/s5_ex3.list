
s5_ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003364  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c0  080034c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034c0  080034c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034c0  080034c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08003538  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003538  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f12  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af1  00000000  00000000  00027faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00029aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad51  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d5e  00000000  00000000  00045859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae5ed  00000000  00000000  0004f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  000fdbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003408 	.word	0x08003408

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003408 	.word	0x08003408

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000234:	201e      	movs	r0, #30
 8000236:	f000 fd21 	bl	8000c7c <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <lcd_init+0x8c>)
 800023c:	2200      	movs	r2, #0
 800023e:	2104      	movs	r1, #4
 8000240:	0018      	movs	r0, r3
 8000242:	f000 ff89 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	481c      	ldr	r0, [pc, #112]	; (80002bc <lcd_init+0x8c>)
 800024c:	2201      	movs	r2, #1
 800024e:	0019      	movs	r1, r3
 8000250:	f000 ff82 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4818      	ldr	r0, [pc, #96]	; (80002bc <lcd_init+0x8c>)
 800025a:	2200      	movs	r2, #0
 800025c:	0019      	movs	r1, r3
 800025e:	f000 ff7b 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	015b      	lsls	r3, r3, #5
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <lcd_init+0x8c>)
 8000268:	2200      	movs	r2, #0
 800026a:	0019      	movs	r1, r3
 800026c:	f000 ff74 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <lcd_init+0x8c>)
 8000272:	2200      	movs	r2, #0
 8000274:	2101      	movs	r1, #1
 8000276:	0018      	movs	r0, r3
 8000278:	f000 ff6e 	bl	8001158 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <lcd_init+0x8c>)
 800027e:	2201      	movs	r2, #1
 8000280:	2102      	movs	r1, #2
 8000282:	0018      	movs	r0, r3
 8000284:	f000 ff68 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <lcd_init+0x8c>)
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	0018      	movs	r0, r3
 8000290:	f000 ff62 	bl	8001158 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000294:	2128      	movs	r1, #40	; 0x28
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f812 	bl	80002c0 <lcd_write>
	lcd_write(0,0x0c);
 800029c:	210c      	movs	r1, #12
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f80e 	bl	80002c0 <lcd_write>
	lcd_write(0,0x06);
 80002a4:	2106      	movs	r1, #6
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f80a 	bl	80002c0 <lcd_write>
	lcd_write(0,0x01);
 80002ac:	2101      	movs	r1, #1
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 f806 	bl	80002c0 <lcd_write>
}
 80002b4:	46c0      	nop			; (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	50000400 	.word	0x50000400

080002c0 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	0002      	movs	r2, r0
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	1dbb      	adds	r3, r7, #6
 80002ce:	1c0a      	adds	r2, r1, #0
 80002d0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80002d2:	2002      	movs	r0, #2
 80002d4:	f000 fcd2 	bl	8000c7c <HAL_Delay>
	if(type)
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d006      	beq.n	80002ee <lcd_write+0x2e>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80002e0:	4b62      	ldr	r3, [pc, #392]	; (800046c <lcd_write+0x1ac>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	2101      	movs	r1, #1
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 ff36 	bl	8001158 <HAL_GPIO_WritePin>
 80002ec:	e005      	b.n	80002fa <lcd_write+0x3a>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80002ee:	4b5f      	ldr	r3, [pc, #380]	; (800046c <lcd_write+0x1ac>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 ff2f 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 80002fa:	1dbb      	adds	r3, r7, #6
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b25b      	sxtb	r3, r3
 8000300:	2b00      	cmp	r3, #0
 8000302:	da07      	bge.n	8000314 <lcd_write+0x54>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	015b      	lsls	r3, r3, #5
 8000308:	4858      	ldr	r0, [pc, #352]	; (800046c <lcd_write+0x1ac>)
 800030a:	2201      	movs	r2, #1
 800030c:	0019      	movs	r1, r3
 800030e:	f000 ff23 	bl	8001158 <HAL_GPIO_WritePin>
 8000312:	e006      	b.n	8000322 <lcd_write+0x62>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	015b      	lsls	r3, r3, #5
 8000318:	4854      	ldr	r0, [pc, #336]	; (800046c <lcd_write+0x1ac>)
 800031a:	2200      	movs	r2, #0
 800031c:	0019      	movs	r1, r3
 800031e:	f000 ff1b 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2240      	movs	r2, #64	; 0x40
 8000328:	4013      	ands	r3, r2
 800032a:	d007      	beq.n	800033c <lcd_write+0x7c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800032c:	2380      	movs	r3, #128	; 0x80
 800032e:	011b      	lsls	r3, r3, #4
 8000330:	484e      	ldr	r0, [pc, #312]	; (800046c <lcd_write+0x1ac>)
 8000332:	2201      	movs	r2, #1
 8000334:	0019      	movs	r1, r3
 8000336:	f000 ff0f 	bl	8001158 <HAL_GPIO_WritePin>
 800033a:	e006      	b.n	800034a <lcd_write+0x8a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	011b      	lsls	r3, r3, #4
 8000340:	484a      	ldr	r0, [pc, #296]	; (800046c <lcd_write+0x1ac>)
 8000342:	2200      	movs	r2, #0
 8000344:	0019      	movs	r1, r3
 8000346:	f000 ff07 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 800034a:	1dbb      	adds	r3, r7, #6
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2220      	movs	r2, #32
 8000350:	4013      	ands	r3, r2
 8000352:	d007      	beq.n	8000364 <lcd_write+0xa4>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	4844      	ldr	r0, [pc, #272]	; (800046c <lcd_write+0x1ac>)
 800035a:	2201      	movs	r2, #1
 800035c:	0019      	movs	r1, r3
 800035e:	f000 fefb 	bl	8001158 <HAL_GPIO_WritePin>
 8000362:	e006      	b.n	8000372 <lcd_write+0xb2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4840      	ldr	r0, [pc, #256]	; (800046c <lcd_write+0x1ac>)
 800036a:	2200      	movs	r2, #0
 800036c:	0019      	movs	r1, r3
 800036e:	f000 fef3 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8000372:	1dbb      	adds	r3, r7, #6
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2210      	movs	r2, #16
 8000378:	4013      	ands	r3, r2
 800037a:	d006      	beq.n	800038a <lcd_write+0xca>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800037c:	4b3b      	ldr	r3, [pc, #236]	; (800046c <lcd_write+0x1ac>)
 800037e:	2201      	movs	r2, #1
 8000380:	2104      	movs	r1, #4
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fee8 	bl	8001158 <HAL_GPIO_WritePin>
 8000388:	e005      	b.n	8000396 <lcd_write+0xd6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800038a:	4b38      	ldr	r3, [pc, #224]	; (800046c <lcd_write+0x1ac>)
 800038c:	2200      	movs	r2, #0
 800038e:	2104      	movs	r1, #4
 8000390:	0018      	movs	r0, r3
 8000392:	f000 fee1 	bl	8001158 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000396:	4b35      	ldr	r3, [pc, #212]	; (800046c <lcd_write+0x1ac>)
 8000398:	2201      	movs	r2, #1
 800039a:	2102      	movs	r1, #2
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fedb 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80003a2:	4b32      	ldr	r3, [pc, #200]	; (800046c <lcd_write+0x1ac>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	2102      	movs	r1, #2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fed5 	bl	8001158 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2208      	movs	r2, #8
 80003b4:	4013      	ands	r3, r2
 80003b6:	d007      	beq.n	80003c8 <lcd_write+0x108>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	015b      	lsls	r3, r3, #5
 80003bc:	482b      	ldr	r0, [pc, #172]	; (800046c <lcd_write+0x1ac>)
 80003be:	2201      	movs	r2, #1
 80003c0:	0019      	movs	r1, r3
 80003c2:	f000 fec9 	bl	8001158 <HAL_GPIO_WritePin>
 80003c6:	e006      	b.n	80003d6 <lcd_write+0x116>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	015b      	lsls	r3, r3, #5
 80003cc:	4827      	ldr	r0, [pc, #156]	; (800046c <lcd_write+0x1ac>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	0019      	movs	r1, r3
 80003d2:	f000 fec1 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80003d6:	1dbb      	adds	r3, r7, #6
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2204      	movs	r2, #4
 80003dc:	4013      	ands	r3, r2
 80003de:	d007      	beq.n	80003f0 <lcd_write+0x130>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	4821      	ldr	r0, [pc, #132]	; (800046c <lcd_write+0x1ac>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0019      	movs	r1, r3
 80003ea:	f000 feb5 	bl	8001158 <HAL_GPIO_WritePin>
 80003ee:	e006      	b.n	80003fe <lcd_write+0x13e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	481d      	ldr	r0, [pc, #116]	; (800046c <lcd_write+0x1ac>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	0019      	movs	r1, r3
 80003fa:	f000 fead 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2202      	movs	r2, #2
 8000404:	4013      	ands	r3, r2
 8000406:	d007      	beq.n	8000418 <lcd_write+0x158>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	4817      	ldr	r0, [pc, #92]	; (800046c <lcd_write+0x1ac>)
 800040e:	2201      	movs	r2, #1
 8000410:	0019      	movs	r1, r3
 8000412:	f000 fea1 	bl	8001158 <HAL_GPIO_WritePin>
 8000416:	e006      	b.n	8000426 <lcd_write+0x166>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	4813      	ldr	r0, [pc, #76]	; (800046c <lcd_write+0x1ac>)
 800041e:	2200      	movs	r2, #0
 8000420:	0019      	movs	r1, r3
 8000422:	f000 fe99 	bl	8001158 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	d006      	beq.n	800043e <lcd_write+0x17e>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <lcd_write+0x1ac>)
 8000432:	2201      	movs	r2, #1
 8000434:	2104      	movs	r1, #4
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fe8e 	bl	8001158 <HAL_GPIO_WritePin>
 800043c:	e005      	b.n	800044a <lcd_write+0x18a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <lcd_write+0x1ac>)
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fe87 	bl	8001158 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <lcd_write+0x1ac>)
 800044c:	2201      	movs	r2, #1
 800044e:	2102      	movs	r1, #2
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fe81 	bl	8001158 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <lcd_write+0x1ac>)
 8000458:	2200      	movs	r2, #0
 800045a:	2102      	movs	r1, #2
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fe7b 	bl	8001158 <HAL_GPIO_WritePin>
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	50000400 	.word	0x50000400

08000470 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	603a      	str	r2, [r7, #0]
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	1c02      	adds	r2, r0, #0
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	1dbb      	adds	r3, r7, #6
 8000480:	1c0a      	adds	r2, r1, #0
 8000482:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d023      	beq.n	80004d4 <lcd_puts+0x64>
 800048c:	dc37      	bgt.n	80004fe <lcd_puts+0x8e>
 800048e:	2b02      	cmp	r3, #2
 8000490:	d017      	beq.n	80004c2 <lcd_puts+0x52>
 8000492:	dc34      	bgt.n	80004fe <lcd_puts+0x8e>
 8000494:	2b00      	cmp	r3, #0
 8000496:	d002      	beq.n	800049e <lcd_puts+0x2e>
 8000498:	2b01      	cmp	r3, #1
 800049a:	d009      	beq.n	80004b0 <lcd_puts+0x40>
 800049c:	e023      	b.n	80004e6 <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	3b80      	subs	r3, #128	; 0x80
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	0019      	movs	r1, r3
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff ff09 	bl	80002c0 <lcd_write>
			break;
 80004ae:	e01a      	b.n	80004e6 <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80004b0:	1dbb      	adds	r3, r7, #6
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	3b40      	subs	r3, #64	; 0x40
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	0019      	movs	r1, r3
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff ff00 	bl	80002c0 <lcd_write>
			break;
 80004c0:	e011      	b.n	80004e6 <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80004c2:	1dbb      	adds	r3, r7, #6
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	3b70      	subs	r3, #112	; 0x70
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	0019      	movs	r1, r3
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff fef7 	bl	80002c0 <lcd_write>
			break;
 80004d2:	e008      	b.n	80004e6 <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80004d4:	1dbb      	adds	r3, r7, #6
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	3b30      	subs	r3, #48	; 0x30
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	0019      	movs	r1, r3
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff feee 	bl	80002c0 <lcd_write>
			break;
 80004e4:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80004e6:	e00a      	b.n	80004fe <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	0019      	movs	r1, r3
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff fee4 	bl	80002c0 <lcd_write>
		string++;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	603b      	str	r3, [r7, #0]
	while(*string)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b25b      	sxtb	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1ef      	bne.n	80004e8 <lcd_puts+0x78>
	}
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	46bd      	mov	sp, r7
 800050e:	b002      	add	sp, #8
 8000510:	bd80      	pop	{r7, pc}

08000512 <lcd_clear>:
void lcd_clear(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8000516:	2101      	movs	r1, #1
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff fed1 	bl	80002c0 <lcd_write>
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <set_time>:
uint8_t alarm =0;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);
void set_time (void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	 RTC_TimeTypeDef sTime = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	0018      	movs	r0, r3
 800052e:	2314      	movs	r3, #20
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f002 faf6 	bl	8002b24 <memset>
	  RTC_DateTypeDef sDate = {0};
 8000538:	003b      	movs	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]

	 sTime.Hours = 0;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	709a      	strb	r2, [r3, #2]
	  sTime.SubSeconds = 0;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000562:	1d39      	adds	r1, r7, #4
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <set_time+0x94>)
 8000566:	2200      	movs	r2, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fe1b 	bl	80021a4 <HAL_RTC_SetTime>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <set_time+0x52>
	  {
	    Error_Handler();
 8000572:	f000 fa03 	bl	800097c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000576:	003b      	movs	r3, r7
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800057c:	003b      	movs	r3, r7
 800057e:	2201      	movs	r2, #1
 8000580:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 1;
 8000582:	003b      	movs	r3, r7
 8000584:	2201      	movs	r2, #1
 8000586:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800058e:	0039      	movs	r1, r7
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <set_time+0x94>)
 8000592:	2200      	movs	r2, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f001 ff09 	bl	80023ac <HAL_RTC_SetDate>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <set_time+0x7e>
	  {
	    Error_Handler();
 800059e:	f000 f9ed 	bl	800097c <Error_Handler>
	  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <set_time+0x98>)
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <set_time+0x94>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fa58 	bl	8002a5e <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b006      	add	sp, #24
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	000032f2 	.word	0x000032f2

080005c0 <set_alarm>:

void set_alarm (void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm;

	  sAlarm.AlarmTime.Hours = 0;
 80005c6:	003b      	movs	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
	   sAlarm.AlarmTime.Minutes = 0;
 80005cc:	003b      	movs	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	705a      	strb	r2, [r3, #1]
	   sAlarm.AlarmTime.Seconds = 0;
 80005d2:	003b      	movs	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	709a      	strb	r2, [r3, #2]
	   sAlarm.AlarmTime.SubSeconds = 0;
 80005d8:	003b      	movs	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
	   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005de:	003b      	movs	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
	   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005e4:	003b      	movs	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
	   sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80005ea:	003b      	movs	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
	   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80005f0:	003b      	movs	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
	   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
	   sAlarm.AlarmDateWeekDay = 1;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2220      	movs	r2, #32
 8000600:	2101      	movs	r1, #1
 8000602:	5499      	strb	r1, [r3, r2]
	   sAlarm.Alarm = RTC_ALARM_A;
 8000604:	003b      	movs	r3, r7
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	0052      	lsls	r2, r2, #1
 800060a:	625a      	str	r2, [r3, #36]	; 0x24
	   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800060c:	0039      	movs	r1, r7
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <set_alarm+0x68>)
 8000610:	2200      	movs	r2, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f001 ffaa 	bl	800256c <HAL_RTC_SetAlarm_IT>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <set_alarm+0x60>
	   {
	     Error_Handler();
 800061c:	f000 f9ae 	bl	800097c <Error_Handler>
	   }
	   /* USER CODE BEGIN RTC_Init 2 */

	   /* USER CODE END RTC_Init 2 */

	 }
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b00a      	add	sp, #40	; 0x28
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c

0800062c <get_time>:


void get_time(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000632:	0039      	movs	r1, r7
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <get_time+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fe5b 	bl	80022f4 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800063e:	2514      	movs	r5, #20
 8000640:	1979      	adds	r1, r7, r5
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <get_time+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	0018      	movs	r0, r3
 8000648:	f001 ff42 	bl	80024d0 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800064c:	003b      	movs	r3, r7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	001a      	movs	r2, r3
 8000652:	003b      	movs	r3, r7
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	001c      	movs	r4, r3
 8000658:	003b      	movs	r3, r7
 800065a:	789b      	ldrb	r3, [r3, #2]
 800065c:	490e      	ldr	r1, [pc, #56]	; (8000698 <get_time+0x6c>)
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <get_time+0x70>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	0023      	movs	r3, r4
 8000664:	f002 fa66 	bl	8002b34 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000668:	197b      	adds	r3, r7, r5
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	001a      	movs	r2, r3
 800066e:	197b      	adds	r3, r7, r5
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	001c      	movs	r4, r3
 8000674:	197b      	adds	r3, r7, r5
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	21fa      	movs	r1, #250	; 0xfa
 800067a:	00c9      	lsls	r1, r1, #3
 800067c:	468c      	mov	ip, r1
 800067e:	4463      	add	r3, ip
 8000680:	4907      	ldr	r1, [pc, #28]	; (80006a0 <get_time+0x74>)
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <get_time+0x78>)
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	0023      	movs	r3, r4
 8000688:	f002 fa54 	bl	8002b34 <siprintf>
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b006      	add	sp, #24
 8000692:	bdb0      	pop	{r4, r5, r7, pc}
 8000694:	2000008c 	.word	0x2000008c
 8000698:	08003420 	.word	0x08003420
 800069c:	200000b8 	.word	0x200000b8
 80006a0:	08003430 	.word	0x08003430
 80006a4:	200000c4 	.word	0x200000c4

080006a8 <display_time>:

//Let's display the time and date on lcd

void display_time (void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	lcd_puts(0,0,time);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <display_time+0x24>)
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fedc 	bl	8000470 <lcd_puts>
	lcd_puts(1,0,date);
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <display_time+0x28>)
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fed6 	bl	8000470 <lcd_puts>
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	200000b8 	.word	0x200000b8
 80006d0:	200000c4 	.word	0x200000c4

080006d4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	alarm = 1;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <HAL_RTC_AlarmAEventCallback+0x18>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	200000ce 	.word	0x200000ce

080006f0 <to_do_on_alarm>:

void to_do_on_alarm (void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);  // set led ON
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2201      	movs	r2, #1
 80006fa:	2120      	movs	r1, #32
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fd2b 	bl	8001158 <HAL_GPIO_WritePin>
	lcd_clear();
 8000702:	f7ff ff06 	bl	8000512 <lcd_clear>
	lcd_puts(0,0,"Alarm Time");
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <to_do_on_alarm+0x34>)
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff feaf 	bl	8000470 <lcd_puts>
	HAL_Delay (3000);
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <to_do_on_alarm+0x38>)
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fab1 	bl	8000c7c <HAL_Delay>
	lcd_clear();
 800071a:	f7ff fefa 	bl	8000512 <lcd_clear>
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	08003440 	.word	0x08003440
 8000728:	00000bb8 	.word	0x00000bb8

0800072c <main>:

int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   HAL_Init();
 8000730:	f000 fa1e 	bl	8000b70 <HAL_Init>
  SystemClock_Config();
 8000734:	f000 f82e 	bl	8000794 <SystemClock_Config>
   MX_GPIO_Init();
 8000738:	f000 f8c0 	bl	80008bc <MX_GPIO_Init>
  MX_RTC_Init();
 800073c:	f000 f890 	bl	8000860 <MX_RTC_Init>
  lcd_init();
 8000740:	f7ff fd76 	bl	8000230 <lcd_init>
  lcd_clear();
 8000744:	f7ff fee5 	bl	8000512 <lcd_clear>

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <main+0x5c>)
 800074a:	2101      	movs	r1, #1
 800074c:	0018      	movs	r0, r3
 800074e:	f002 f9a3 	bl	8002a98 <HAL_RTCEx_BKUPRead>
 8000752:	0003      	movs	r3, r0
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <main+0x60>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d001      	beq.n	800075e <main+0x32>
      {
      //   Set the time
        set_time();
 800075a:	f7ff fee3 	bl	8000524 <set_time>
      }

  set_alarm ();
 800075e:	f7ff ff2f 	bl	80005c0 <set_alarm>
   /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 8000762:	f7ff ff63 	bl	800062c <get_time>
	  display_time();
 8000766:	f7ff ff9f 	bl	80006a8 <display_time>
	  HAL_Delay(500);
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fa84 	bl	8000c7c <HAL_Delay>

	  if (alarm)
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <main+0x64>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f2      	beq.n	8000762 <main+0x36>
	  {
		  to_do_on_alarm();
 800077c:	f7ff ffb8 	bl	80006f0 <to_do_on_alarm>
		  alarm =0;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <main+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
	  get_time();
 8000786:	e7ec      	b.n	8000762 <main+0x36>
 8000788:	2000008c 	.word	0x2000008c
 800078c:	000032f2 	.word	0x000032f2
 8000790:	200000ce 	.word	0x200000ce

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b0a7      	sub	sp, #156	; 0x9c
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	245c      	movs	r4, #92	; 0x5c
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	233c      	movs	r3, #60	; 0x3c
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 f9bd 	bl	8002b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007aa:	234c      	movs	r3, #76	; 0x4c
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	0018      	movs	r0, r3
 80007b0:	2310      	movs	r3, #16
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f002 f9b5 	bl	8002b24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	234c      	movs	r3, #76	; 0x4c
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f002 f9ae 	bl	8002b24 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fce1 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	220a      	movs	r2, #10
 80007d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2240      	movs	r2, #64	; 0x40
 80007ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2201      	movs	r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fd09 	bl	8001214 <HAL_RCC_OscConfig>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000806:	f000 f8b9 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	214c      	movs	r1, #76	; 0x4c
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2207      	movs	r2, #7
 8000810:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2100      	movs	r1, #0
 8000828:	0018      	movs	r0, r3
 800082a:	f001 f853 	bl	80018d4 <HAL_RCC_ClockConfig>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000832:	f000 f8a3 	bl	800097c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000836:	003b      	movs	r3, r7
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0292      	lsls	r2, r2, #10
 800083c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800083e:	003b      	movs	r3, r7
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	f001 f9cd 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000852:	f000 f893 	bl	800097c <Error_Handler>
  }
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b027      	add	sp, #156	; 0x9c
 800085c:	bd90      	pop	{r4, r7, pc}
	...

08000860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_RTC_Init+0x54>)
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <MX_RTC_Init+0x58>)
 8000868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_RTC_Init+0x54>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_RTC_Init+0x54>)
 8000872:	227f      	movs	r2, #127	; 0x7f
 8000874:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_RTC_Init+0x54>)
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_RTC_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_RTC_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_RTC_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_RTC_Init+0x54>)
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	05d2      	lsls	r2, r2, #23
 8000894:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_RTC_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <MX_RTC_Init+0x54>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fbde 	bl	8002060 <HAL_RTC_Init>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f868 	bl	800097c <Error_Handler>
  }
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	40002800 	.word	0x40002800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	240c      	movs	r4, #12
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	0018      	movs	r0, r3
 80008c8:	2314      	movs	r3, #20
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f002 f929 	bl	8002b24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xb8>)
 80008d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_GPIO_Init+0xb8>)
 80008d8:	2101      	movs	r1, #1
 80008da:	430a      	orrs	r2, r1
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0xb8>)
 80008e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e2:	2201      	movs	r2, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_GPIO_Init+0xb8>)
 80008ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0xb8>)
 80008f0:	2102      	movs	r1, #2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_GPIO_Init+0xb8>)
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	2202      	movs	r2, #2
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fc24 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000910:	23fc      	movs	r3, #252	; 0xfc
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	4818      	ldr	r0, [pc, #96]	; (8000978 <MX_GPIO_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	0019      	movs	r1, r3
 800091a:	f000 fc1d 	bl	8001158 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2220      	movs	r2, #32
 8000922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2201      	movs	r2, #1
 8000928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	193a      	adds	r2, r7, r4
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fa9e 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000944:	0021      	movs	r1, r4
 8000946:	187b      	adds	r3, r7, r1
 8000948:	22fc      	movs	r2, #252	; 0xfc
 800094a:	0212      	lsls	r2, r2, #8
 800094c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	187b      	adds	r3, r7, r1
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <MX_GPIO_Init+0xbc>)
 8000964:	0019      	movs	r1, r3
 8000966:	0010      	movs	r0, r2
 8000968:	f000 fa8a 	bl	8000e80 <HAL_GPIO_Init>

}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b009      	add	sp, #36	; 0x24
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	50000400 	.word	0x50000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0549      	lsls	r1, r1, #21
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_MspInit+0x44>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	055b      	lsls	r3, r3, #21
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b097      	sub	sp, #92	; 0x5c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	240c      	movs	r4, #12
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	0018      	movs	r0, r3
 80009de:	234c      	movs	r3, #76	; 0x4c
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f002 f89e 	bl	8002b24 <memset>
  if(hrtc->Instance==RTC)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_RTC_MspInit+0x84>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12c      	bne.n	8000a4c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	0292      	lsls	r2, r2, #10
 80009f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 f8ef 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a0e:	f7ff ffb5 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_RTC_MspInit+0x88>)
 8000a14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_RTC_MspInit+0x88>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0209      	lsls	r1, r1, #8
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_RTC_MspInit+0x88>)
 8000a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_RTC_MspInit+0x88>)
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	00c9      	lsls	r1, r1, #3
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_RTC_MspInit+0x88>)
 8000a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	4013      	ands	r3, r2
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 f9eb 	bl	8000e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000a46:	2002      	movs	r0, #2
 8000a48:	f000 f9fd 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b017      	add	sp, #92	; 0x5c
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40002800 	.word	0x40002800
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8e0 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <RTC_TAMP_IRQHandler+0x14>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 feaa 	bl	80027ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f001 fffc 	bl	8002ad0 <__errno>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	18d2      	adds	r2, r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b006      	add	sp, #24
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20024000 	.word	0x20024000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000d0 	.word	0x200000d0
 8000b0c:	200000e8 	.word	0x200000e8

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff fff6 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f001 ffc7 	bl	8002adc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b4e:	f7ff fded 	bl	800072c <main>

08000b52 <LoopForever>:

LoopForever:
  b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b60:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 8000b64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b68:	200000e8 	.word	0x200000e8

08000b6c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_COMP_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x3c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Init+0x3c>)
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	0049      	lsls	r1, r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f000 f810 	bl	8000bb0 <HAL_InitTick>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e001      	b.n	8000ba0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fef4 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_InitTick+0x88>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d02b      	beq.n	8000c20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_InitTick+0x8c>)
 8000bca:	681c      	ldr	r4, [r3, #0]
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_InitTick+0x88>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	23fa      	movs	r3, #250	; 0xfa
 8000bd4:	0098      	lsls	r0, r3, #2
 8000bd6:	f7ff fa9f 	bl	8000118 <__udivsi3>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0020      	movs	r0, r4
 8000be0:	f7ff fa9a 	bl	8000118 <__udivsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f93d 	bl	8000e66 <HAL_SYSTICK_Config>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d112      	bne.n	8000c16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d80a      	bhi.n	8000c0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f90c 	bl	8000e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_InitTick+0x90>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e00d      	b.n	8000c28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	e008      	b.n	8000c28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	230f      	movs	r3, #15
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e003      	b.n	8000c28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b005      	add	sp, #20
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x1c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x20>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	18d2      	adds	r2, r2, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_IncTick+0x20>)
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200000d4 	.word	0x200000d4

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	200000d4 	.word	0x200000d4

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fff0 	bl	8000c68 <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	f7ff ffe0 	bl	8000c68 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd6:	d809      	bhi.n	8000cec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	231f      	movs	r3, #31
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_EnableIRQ+0x30>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	000a      	movs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0c:	d828      	bhi.n	8000d60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <__NVIC_SetPriority+0xd4>)
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	33c0      	adds	r3, #192	; 0xc0
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	589b      	ldr	r3, [r3, r2]
 8000d1e:	1dfa      	adds	r2, r7, #7
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	0011      	movs	r1, r2
 8000d24:	2203      	movs	r2, #3
 8000d26:	400a      	ands	r2, r1
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	21ff      	movs	r1, #255	; 0xff
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	22ff      	movs	r2, #255	; 0xff
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	2303      	movs	r3, #3
 8000d46:	4003      	ands	r3, r0
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4c:	481f      	ldr	r0, [pc, #124]	; (8000dcc <__NVIC_SetPriority+0xd4>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	430a      	orrs	r2, r1
 8000d58:	33c0      	adds	r3, #192	; 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d5e:	e031      	b.n	8000dc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <__NVIC_SetPriority+0xd8>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0019      	movs	r1, r3
 8000d68:	230f      	movs	r3, #15
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	3b08      	subs	r3, #8
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3306      	adds	r3, #6
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	3304      	adds	r3, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	1dfa      	adds	r2, r7, #7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	2203      	movs	r2, #3
 8000d82:	400a      	ands	r2, r1
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	21ff      	movs	r1, #255	; 0xff
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	401a      	ands	r2, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	4003      	ands	r3, r0
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <__NVIC_SetPriority+0xd8>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	001c      	movs	r4, r3
 8000db0:	230f      	movs	r3, #15
 8000db2:	4023      	ands	r3, r4
 8000db4:	3b08      	subs	r3, #8
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	430a      	orrs	r2, r1
 8000dba:	3306      	adds	r3, #6
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	18c3      	adds	r3, r0, r3
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b003      	add	sp, #12
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	045b      	lsls	r3, r3, #17
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d301      	bcc.n	8000dec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de8:	2301      	movs	r3, #1
 8000dea:	e010      	b.n	8000e0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <SysTick_Config+0x44>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df4:	2301      	movs	r3, #1
 8000df6:	425b      	negs	r3, r3
 8000df8:	2103      	movs	r1, #3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff7c 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x44>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x44>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	210f      	movs	r1, #15
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff33 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ffaf 	bl	8000dd4 <SysTick_Config>
 8000e76:	0003      	movs	r3, r0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e14d      	b.n	800112c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <HAL_GPIO_Init+0x28>
 8000ea6:	e13e      	b.n	8001126 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x40>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	58d3      	ldr	r3, [r2, r3]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	409a      	lsls	r2, r3
 8000f84:	0013      	movs	r3, r2
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2107      	movs	r1, #7
 8000f96:	400b      	ands	r3, r1
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	23c0      	movs	r3, #192	; 0xc0
 8000fec:	029b      	lsls	r3, r3, #10
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d100      	bne.n	8000ff4 <HAL_GPIO_Init+0x174>
 8000ff2:	e098      	b.n	8001126 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	589b      	ldr	r3, [r3, r2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	220f      	movs	r2, #15
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	429a      	cmp	r2, r3
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x1d6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x2c8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x1d2>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2cc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x1ce>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2d0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x1ca>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x2d4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x1c6>
 8001042:	2304      	movs	r3, #4
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x1d8>
 8001046:	2305      	movs	r3, #5
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x1d8>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x1d8>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x1d8>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x1d8>
 8001056:	2300      	movs	r3, #0
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	2103      	movs	r1, #3
 800105c:	400a      	ands	r2, r1
 800105e:	00d2      	lsls	r2, r2, #3
 8001060:	4093      	lsls	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001068:	4936      	ldr	r1, [pc, #216]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3318      	adds	r3, #24
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	035b      	lsls	r3, r3, #13
 800108e:	4013      	ands	r3, r2
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	039b      	lsls	r3, r3, #14
 80010b8:	4013      	ands	r3, r2
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 80010cc:	2384      	movs	r3, #132	; 0x84
 80010ce:	58d3      	ldr	r3, [r2, r3]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	029b      	lsls	r3, r3, #10
 80010e4:	4013      	ands	r3, r2
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f0:	4914      	ldr	r1, [pc, #80]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 80010f2:	2284      	movs	r2, #132	; 0x84
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	58d3      	ldr	r3, [r2, r3]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	025b      	lsls	r3, r3, #9
 8001112:	4013      	ands	r3, r2
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4909      	ldr	r1, [pc, #36]	; (8001144 <HAL_GPIO_Init+0x2c4>)
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	40da      	lsrs	r2, r3
 8001134:	1e13      	subs	r3, r2, #0
 8001136:	d000      	beq.n	800113a <HAL_GPIO_Init+0x2ba>
 8001138:	e6aa      	b.n	8000e90 <HAL_GPIO_Init+0x10>
  }
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b006      	add	sp, #24
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021800 	.word	0x40021800
 8001148:	50000400 	.word	0x50000400
 800114c:	50000800 	.word	0x50000800
 8001150:	50000c00 	.word	0x50000c00
 8001154:	50001000 	.word	0x50001000

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	0008      	movs	r0, r1
 8001162:	0011      	movs	r1, r2
 8001164:	1cbb      	adds	r3, r7, #2
 8001166:	1c02      	adds	r2, r0, #0
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	1c7b      	adds	r3, r7, #1
 800116c:	1c0a      	adds	r2, r1, #0
 800116e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001170:	1c7b      	adds	r3, r7, #1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001178:	1cbb      	adds	r3, r7, #2
 800117a:	881a      	ldrh	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001180:	e003      	b.n	800118a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d11f      	bne.n	80011f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	0013      	movs	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	189b      	adds	r3, r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4912      	ldr	r1, [pc, #72]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7fe ffa6 	bl	8000118 <__udivsi3>
 80011cc:	0003      	movs	r3, r0
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d2:	e008      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e001      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e009      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011e8:	695a      	ldr	r2, [r3, #20]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	401a      	ands	r2, r3
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d0ed      	beq.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40007000 	.word	0x40007000
 8001208:	fffff9ff 	.word	0xfffff9ff
 800120c:	20000000 	.word	0x20000000
 8001210:	000f4240 	.word	0x000f4240

08001214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	f000 fb50 	bl	80018c8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	4013      	ands	r3, r2
 8001230:	d100      	bne.n	8001234 <HAL_RCC_OscConfig+0x20>
 8001232:	e07c      	b.n	800132e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001234:	4bc3      	ldr	r3, [pc, #780]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2238      	movs	r2, #56	; 0x38
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800123e:	4bc1      	ldr	r3, [pc, #772]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2203      	movs	r2, #3
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b10      	cmp	r3, #16
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x40>
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d002      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b08      	cmp	r3, #8
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4bba      	ldr	r3, [pc, #744]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d062      	beq.n	800132c <HAL_RCC_OscConfig+0x118>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d15e      	bne.n	800132c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e32a      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	025b      	lsls	r3, r3, #9
 800127a:	429a      	cmp	r2, r3
 800127c:	d107      	bne.n	800128e <HAL_RCC_OscConfig+0x7a>
 800127e:	4bb1      	ldr	r3, [pc, #708]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4bb0      	ldr	r3, [pc, #704]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0249      	lsls	r1, r1, #9
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e020      	b.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	23a0      	movs	r3, #160	; 0xa0
 8001294:	02db      	lsls	r3, r3, #11
 8001296:	429a      	cmp	r2, r3
 8001298:	d10e      	bne.n	80012b8 <HAL_RCC_OscConfig+0xa4>
 800129a:	4baa      	ldr	r3, [pc, #680]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4ba9      	ldr	r3, [pc, #676]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	02c9      	lsls	r1, r1, #11
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	4ba6      	ldr	r3, [pc, #664]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4ba5      	ldr	r3, [pc, #660]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0249      	lsls	r1, r1, #9
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 80012b8:	4ba2      	ldr	r3, [pc, #648]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4ba1      	ldr	r3, [pc, #644]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012be:	49a2      	ldr	r1, [pc, #648]	; (8001548 <HAL_RCC_OscConfig+0x334>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	4b9f      	ldr	r3, [pc, #636]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b9e      	ldr	r3, [pc, #632]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012ca:	49a0      	ldr	r1, [pc, #640]	; (800154c <HAL_RCC_OscConfig+0x338>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d014      	beq.n	8001302 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcc6 	bl	8000c68 <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e2:	f7ff fcc1 	bl	8000c68 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e2e9      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f4:	4b93      	ldr	r3, [pc, #588]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0xce>
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fcb1 	bl	8000c68 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcac 	bl	8000c68 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e2d4      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131e:	4b89      	ldr	r3, [pc, #548]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0xf8>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0x126>
 8001338:	e099      	b.n	800146e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133a:	4b82      	ldr	r3, [pc, #520]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2238      	movs	r2, #56	; 0x38
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001344:	4b7f      	ldr	r3, [pc, #508]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2203      	movs	r2, #3
 800134a:	4013      	ands	r3, r2
 800134c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b10      	cmp	r3, #16
 8001352:	d102      	bne.n	800135a <HAL_RCC_OscConfig+0x146>
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d002      	beq.n	8001360 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d135      	bne.n	80013cc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4013      	ands	r3, r2
 800136a:	d005      	beq.n	8001378 <HAL_RCC_OscConfig+0x164>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e2a7      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b72      	ldr	r3, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a74      	ldr	r2, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x33c>)
 800137e:	4013      	ands	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	021a      	lsls	r2, r3, #8
 8001388:	4b6e      	ldr	r3, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001394:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x340>)
 800139a:	4013      	ands	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	4b68      	ldr	r3, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0adb      	lsrs	r3, r3, #11
 80013ae:	2207      	movs	r2, #7
 80013b0:	4013      	ands	r3, r2
 80013b2:	4a69      	ldr	r2, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x344>)
 80013b4:	40da      	lsrs	r2, r3
 80013b6:	4b69      	ldr	r3, [pc, #420]	; (800155c <HAL_RCC_OscConfig+0x348>)
 80013b8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013ba:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x34c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff fbf6 	bl	8000bb0 <HAL_InitTick>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d051      	beq.n	800146c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e27d      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d030      	beq.n	8001436 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a5e      	ldr	r2, [pc, #376]	; (8001554 <HAL_RCC_OscConfig+0x340>)
 80013da:	4013      	ands	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691a      	ldr	r2, [r3, #16]
 80013e2:	4b58      	ldr	r3, [pc, #352]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013e8:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b55      	ldr	r3, [pc, #340]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	0049      	lsls	r1, r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fc37 	bl	8000c68 <HAL_GetTick>
 80013fa:	0003      	movs	r3, r0
 80013fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc32 	bl	8000c68 <HAL_GetTick>
 8001404:	0002      	movs	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e25a      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4013      	ands	r3, r2
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a4b      	ldr	r2, [pc, #300]	; (8001550 <HAL_RCC_OscConfig+0x33c>)
 8001424:	4013      	ands	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	4b45      	ldr	r3, [pc, #276]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001430:	430a      	orrs	r2, r1
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	e01b      	b.n	800146e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800143c:	4949      	ldr	r1, [pc, #292]	; (8001564 <HAL_RCC_OscConfig+0x350>)
 800143e:	400a      	ands	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fc11 	bl	8000c68 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc0c 	bl	8000c68 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e234      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4013      	ands	r3, r2
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x238>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2208      	movs	r2, #8
 8001474:	4013      	ands	r3, r2
 8001476:	d047      	beq.n	8001508 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2238      	movs	r2, #56	; 0x38
 800147e:	4013      	ands	r3, r2
 8001480:	2b18      	cmp	r3, #24
 8001482:	d10a      	bne.n	800149a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d03c      	beq.n	8001508 <HAL_RCC_OscConfig+0x2f4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d138      	bne.n	8001508 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e216      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d019      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80014a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fbdb 	bl	8000c68 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fbd6 	bl	8000c68 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1fe      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	2202      	movs	r2, #2
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f1      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2a4>
 80014d4:	e018      	b.n	8001508 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80014d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 80014dc:	2101      	movs	r1, #1
 80014de:	438a      	bics	r2, r1
 80014e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff fbc1 	bl	8000c68 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fbbc 	bl	8000c68 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1e4      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d1f1      	bne.n	80014ec <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2204      	movs	r2, #4
 800150e:	4013      	ands	r3, r2
 8001510:	d100      	bne.n	8001514 <HAL_RCC_OscConfig+0x300>
 8001512:	e0c7      	b.n	80016a4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001514:	231f      	movs	r3, #31
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2238      	movs	r2, #56	; 0x38
 8001522:	4013      	ands	r3, r2
 8001524:	2b20      	cmp	r3, #32
 8001526:	d11f      	bne.n	8001568 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x330>)
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	2202      	movs	r2, #2
 800152e:	4013      	ands	r3, r2
 8001530:	d100      	bne.n	8001534 <HAL_RCC_OscConfig+0x320>
 8001532:	e0b7      	b.n	80016a4 <HAL_RCC_OscConfig+0x490>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d000      	beq.n	800153e <HAL_RCC_OscConfig+0x32a>
 800153c:	e0b2      	b.n	80016a4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1c2      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000
 8001548:	fffeffff 	.word	0xfffeffff
 800154c:	fffbffff 	.word	0xfffbffff
 8001550:	ffff80ff 	.word	0xffff80ff
 8001554:	ffffc7ff 	.word	0xffffc7ff
 8001558:	00f42400 	.word	0x00f42400
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001568:	4bb5      	ldr	r3, [pc, #724]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800156a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	055b      	lsls	r3, r3, #21
 8001570:	4013      	ands	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_RCC_OscConfig+0x364>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x366>
 8001578:	2300      	movs	r3, #0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d011      	beq.n	80015a2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4bb0      	ldr	r3, [pc, #704]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001582:	4baf      	ldr	r3, [pc, #700]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	0549      	lsls	r1, r1, #21
 8001588:	430a      	orrs	r2, r1
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
 800158c:	4bac      	ldr	r3, [pc, #688]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800158e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	055b      	lsls	r3, r3, #21
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800159a:	231f      	movs	r3, #31
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	4ba8      	ldr	r3, [pc, #672]	; (8001844 <HAL_RCC_OscConfig+0x630>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ae:	4ba5      	ldr	r3, [pc, #660]	; (8001844 <HAL_RCC_OscConfig+0x630>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4ba4      	ldr	r3, [pc, #656]	; (8001844 <HAL_RCC_OscConfig+0x630>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0049      	lsls	r1, r1, #1
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb54 	bl	8000c68 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fb4f 	bl	8000c68 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e177      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d8:	4b9a      	ldr	r3, [pc, #616]	; (8001844 <HAL_RCC_OscConfig+0x630>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x3e6>
 80015ec:	4b94      	ldr	r3, [pc, #592]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80015ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x420>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x408>
 8001602:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001604:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001606:	4b8e      	ldr	r3, [pc, #568]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001608:	2104      	movs	r1, #4
 800160a:	430a      	orrs	r2, r1
 800160c:	65da      	str	r2, [r3, #92]	; 0x5c
 800160e:	4b8c      	ldr	r3, [pc, #560]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001614:	2101      	movs	r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	65da      	str	r2, [r3, #92]	; 0x5c
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0x420>
 800161c:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800161e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001622:	2101      	movs	r1, #1
 8001624:	438a      	bics	r2, r1
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c
 8001628:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800162a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162c:	4b84      	ldr	r3, [pc, #528]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800162e:	2104      	movs	r1, #4
 8001630:	438a      	bics	r2, r1
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d014      	beq.n	8001666 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb14 	bl	8000c68 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001644:	e009      	b.n	800165a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fb0f 	bl	8000c68 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a7d      	ldr	r2, [pc, #500]	; (8001848 <HAL_RCC_OscConfig+0x634>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e136      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x432>
 8001664:	e013      	b.n	800168e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001666:	f7ff faff 	bl	8000c68 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800166e:	e009      	b.n	8001684 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fafa 	bl	8000c68 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4a73      	ldr	r2, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x634>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e121      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001684:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800168e:	231f      	movs	r3, #31
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4b69      	ldr	r3, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800169a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800169c:	4b68      	ldr	r3, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800169e:	496b      	ldr	r1, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x638>)
 80016a0:	400a      	ands	r2, r1
 80016a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2220      	movs	r2, #32
 80016aa:	4013      	ands	r3, r2
 80016ac:	d039      	beq.n	8001722 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01b      	beq.n	80016ee <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b61      	ldr	r3, [pc, #388]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	03c9      	lsls	r1, r1, #15
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fad0 	bl	8000c68 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ce:	f7ff facb 	bl	8000c68 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0f3      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016e0:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x4ba>
 80016ec:	e019      	b.n	8001722 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80016f4:	4956      	ldr	r1, [pc, #344]	; (8001850 <HAL_RCC_OscConfig+0x63c>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff fab5 	bl	8000c68 <HAL_GetTick>
 80016fe:	0003      	movs	r3, r0
 8001700:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001704:	f7ff fab0 	bl	8000c68 <HAL_GetTick>
 8001708:	0002      	movs	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0d8      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	4013      	ands	r3, r2
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <HAL_RCC_OscConfig+0x518>
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b44      	ldr	r3, [pc, #272]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2238      	movs	r2, #56	; 0x38
 8001732:	4013      	ands	r3, r2
 8001734:	2b10      	cmp	r3, #16
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x526>
 8001738:	e07b      	b.n	8001832 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d156      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001748:	4942      	ldr	r1, [pc, #264]	; (8001854 <HAL_RCC_OscConfig+0x640>)
 800174a:	400a      	ands	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fa8b 	bl	8000c68 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa86 	bl	8000c68 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0ae      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176a:	4b35      	ldr	r3, [pc, #212]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	049b      	lsls	r3, r3, #18
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_RCC_OscConfig+0x644>)
 800177c:	4013      	ands	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	431a      	orrs	r2, r3
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0449      	lsls	r1, r1, #17
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0549      	lsls	r1, r1, #21
 80017c2:	430a      	orrs	r2, r1
 80017c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa4f 	bl	8000c68 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fa4a 	bl	8000c68 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e072      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	049b      	lsls	r3, r3, #18
 80017ea:	4013      	ands	r3, r2
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x5bc>
 80017ee:	e06a      	b.n	80018c6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 80017f6:	4917      	ldr	r1, [pc, #92]	; (8001854 <HAL_RCC_OscConfig+0x640>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fa34 	bl	8000c68 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fa2f 	bl	8000c68 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e057      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	049b      	lsls	r3, r3, #18
 8001820:	4013      	ands	r3, r2
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_OscConfig+0x62c>)
 800182a:	490c      	ldr	r1, [pc, #48]	; (800185c <HAL_RCC_OscConfig+0x648>)
 800182c:	400a      	ands	r2, r1
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	e049      	b.n	80018c6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d112      	bne.n	8001860 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e044      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000
 8001844:	40007000 	.word	0x40007000
 8001848:	00001388 	.word	0x00001388
 800184c:	efffffff 	.word	0xefffffff
 8001850:	ffbfffff 	.word	0xffbfffff
 8001854:	feffffff 	.word	0xfeffffff
 8001858:	11c1808c 	.word	0x11c1808c
 800185c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x6bc>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2203      	movs	r2, #3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	429a      	cmp	r2, r3
 8001872:	d126      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2270      	movs	r2, #112	; 0x70
 8001878:	401a      	ands	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d11f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	23fe      	movs	r3, #254	; 0xfe
 8001886:	01db      	lsls	r3, r3, #7
 8001888:	401a      	ands	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d116      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	23f8      	movs	r3, #248	; 0xf8
 8001898:	039b      	lsls	r3, r3, #14
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10e      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	23e0      	movs	r3, #224	; 0xe0
 80018a8:	051b      	lsls	r3, r3, #20
 80018aa:	401a      	ands	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	0f5b      	lsrs	r3, r3, #29
 80018b8:	075a      	lsls	r2, r3, #29
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b008      	add	sp, #32
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0e9      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2207      	movs	r2, #7
 80018ee:	4013      	ands	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d91e      	bls.n	8001934 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001908:	f7ff f9ae 	bl	8000c68 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001910:	e009      	b.n	8001926 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7ff f9a9 	bl	8000c68 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a6a      	ldr	r2, [pc, #424]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0ca      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2207      	movs	r2, #7
 800192c:	4013      	ands	r3, r2
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d015      	beq.n	800196a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2204      	movs	r2, #4
 8001944:	4013      	ands	r3, r2
 8001946:	d006      	beq.n	8001956 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001948:	4b60      	ldr	r3, [pc, #384]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b5f      	ldr	r3, [pc, #380]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	21e0      	movs	r1, #224	; 0xe0
 8001950:	01c9      	lsls	r1, r1, #7
 8001952:	430a      	orrs	r2, r1
 8001954:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <HAL_RCC_ClockConfig+0x1fc>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	4013      	ands	r3, r2
 8001972:	d057      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d12b      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e097      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	049b      	lsls	r3, r3, #18
 800199c:	4013      	ands	r3, r2
 800199e:	d11f      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e08b      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	d113      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e07f      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c8:	2202      	movs	r2, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e074      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e06d      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e0:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2207      	movs	r2, #7
 80019e6:	4393      	bics	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f4:	f7ff f938 	bl	8000c68 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f933 	bl	8000c68 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e054      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2238      	movs	r2, #56	; 0x38
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1ec      	bne.n	80019fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2207      	movs	r2, #7
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d21e      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2207      	movs	r2, #7
 8001a38:	4393      	bics	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a44:	f7ff f910 	bl	8000c68 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7ff f90b 	bl	8000c68 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a1b      	ldr	r2, [pc, #108]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e02c      	b.n	8001abc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2207      	movs	r2, #7
 8001a68:	4013      	ands	r3, r2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1ee      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_RCC_ClockConfig+0x200>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a8e:	f000 f829 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001a92:	0001      	movs	r1, r0
 8001a94:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_ClockConfig+0x1f8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x204>)
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	58d3      	ldr	r3, [r2, r3]
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x208>)
 8001aae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x20c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff f87b 	bl	8000bb0 <HAL_InitTick>
 8001aba:	0003      	movs	r3, r0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40022000 	.word	0x40022000
 8001ac8:	00001388 	.word	0x00001388
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	fffff0ff 	.word	0xfffff0ff
 8001ad4:	ffff8fff 	.word	0xffff8fff
 8001ad8:	0800344c 	.word	0x0800344c
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2238      	movs	r2, #56	; 0x38
 8001af0:	4013      	ands	r3, r2
 8001af2:	d10f      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0adb      	lsrs	r3, r3, #11
 8001afa:	2207      	movs	r2, #7
 8001afc:	4013      	ands	r3, r2
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	0013      	movs	r3, r2
 8001b04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b06:	6839      	ldr	r1, [r7, #0]
 8001b08:	4835      	ldr	r0, [pc, #212]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b0a:	f7fe fb05 	bl	8000118 <__udivsi3>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	e05d      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e054      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2238      	movs	r2, #56	; 0x38
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d138      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	2207      	movs	r2, #7
 8001b44:	4013      	ands	r3, r2
 8001b46:	3301      	adds	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4824      	ldr	r0, [pc, #144]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b54:	f7fe fae0 	bl	8000118 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	227f      	movs	r2, #127	; 0x7f
 8001b64:	4013      	ands	r3, r2
 8001b66:	434b      	muls	r3, r1
 8001b68:	617b      	str	r3, [r7, #20]
        break;
 8001b6a:	e00d      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	481c      	ldr	r0, [pc, #112]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b70:	f7fe fad2 	bl	8000118 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	227f      	movs	r2, #127	; 0x7f
 8001b80:	4013      	ands	r3, r2
 8001b82:	434b      	muls	r3, r1
 8001b84:	617b      	str	r3, [r7, #20]
        break;
 8001b86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0f5b      	lsrs	r3, r3, #29
 8001b8e:	2207      	movs	r2, #7
 8001b90:	4013      	ands	r3, r2
 8001b92:	3301      	adds	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	6978      	ldr	r0, [r7, #20]
 8001b9a:	f7fe fabd 	bl	8000118 <__udivsi3>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e015      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2238      	movs	r2, #56	; 0x38
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d103      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2238      	movs	r2, #56	; 0x38
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b18      	cmp	r3, #24
 8001bc2:	d103      	bne.n	8001bcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bc4:	23fa      	movs	r3, #250	; 0xfa
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e001      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bd0:	693b      	ldr	r3, [r7, #16]
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b006      	add	sp, #24
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	007a1200 	.word	0x007a1200

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bf0:	2313      	movs	r3, #19
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c0c:	e0ad      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2011      	movs	r0, #17
 8001c10:	183b      	adds	r3, r7, r0
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	055b      	lsls	r3, r3, #21
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d110      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0549      	lsls	r1, r1, #21
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c44:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c4a:	2180      	movs	r1, #128	; 0x80
 8001c4c:	0049      	lsls	r1, r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c52:	f7ff f809 	bl	8000c68 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5c:	f7ff f804 	bl	8000c68 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d904      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c6a:	2313      	movs	r3, #19
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2203      	movs	r2, #3
 8001c70:	701a      	strb	r2, [r3, #0]
        break;
 8001c72:	e005      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0ed      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c80:	2313      	movs	r3, #19
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d15e      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c8e:	23c0      	movs	r3, #192	; 0xc0
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d019      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d014      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	0249      	lsls	r1, r1, #9
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cc4:	491e      	ldr	r1, [pc, #120]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ffc6 	bl	8000c68 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	e00c      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7fe ffc1 	bl	8000c68 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d904      	bls.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001cf2:	2313      	movs	r3, #19
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	701a      	strb	r2, [r3, #0]
            break;
 8001cfa:	e004      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d0ed      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d06:	2313      	movs	r3, #19
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d24:	e016      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d26:	2312      	movs	r3, #18
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	2213      	movs	r2, #19
 8001d2c:	18ba      	adds	r2, r7, r2
 8001d2e:	7812      	ldrb	r2, [r2, #0]
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e00f      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	fffffcff 	.word	0xfffffcff
 8001d40:	fffeffff 	.word	0xfffeffff
 8001d44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d48:	2312      	movs	r3, #18
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2213      	movs	r2, #19
 8001d4e:	18ba      	adds	r2, r7, r2
 8001d50:	7812      	ldrb	r2, [r2, #0]
 8001d52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d54:	2311      	movs	r3, #17
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4bb6      	ldr	r3, [pc, #728]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d62:	4bb5      	ldr	r3, [pc, #724]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d64:	49b5      	ldr	r1, [pc, #724]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d74:	4bb0      	ldr	r3, [pc, #704]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	2203      	movs	r2, #3
 8001d7a:	4393      	bics	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4bad      	ldr	r3, [pc, #692]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d84:	430a      	orrs	r2, r1
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d92:	4ba9      	ldr	r3, [pc, #676]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	220c      	movs	r2, #12
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4ba5      	ldr	r3, [pc, #660]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2204      	movs	r2, #4
 8001dac:	4013      	ands	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db0:	4ba1      	ldr	r3, [pc, #644]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	2230      	movs	r2, #48	; 0x30
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b9e      	ldr	r3, [pc, #632]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d009      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dce:	4b9a      	ldr	r3, [pc, #616]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	4a9b      	ldr	r2, [pc, #620]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	4b96      	ldr	r3, [pc, #600]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	4013      	ands	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001dee:	4b92      	ldr	r3, [pc, #584]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	4a94      	ldr	r2, [pc, #592]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	4b8e      	ldr	r3, [pc, #568]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e0e:	4b8a      	ldr	r3, [pc, #552]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	4a8d      	ldr	r2, [pc, #564]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1c:	4b86      	ldr	r3, [pc, #536]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e2e:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	4a86      	ldr	r2, [pc, #536]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2220      	movs	r2, #32
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e4c:	4b7a      	ldr	r3, [pc, #488]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	4a7f      	ldr	r2, [pc, #508]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	4b77      	ldr	r3, [pc, #476]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	4013      	ands	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	4a79      	ldr	r2, [pc, #484]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	01db      	lsls	r3, r3, #7
 8001e86:	4013      	ands	r3, r2
 8001e88:	d015      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e8a:	4b6b      	ldr	r3, [pc, #428]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	0899      	lsrs	r1, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e96:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	05db      	lsls	r3, r3, #23
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ea8:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	0249      	lsls	r1, r1, #9
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	031b      	lsls	r3, r3, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	2240      	movs	r2, #64	; 0x40
 8001ec8:	4393      	bics	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	039b      	lsls	r3, r3, #14
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d016      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ee2:	4b55      	ldr	r3, [pc, #340]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef0:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	03db      	lsls	r3, r3, #15
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d106      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f02:	4b4d      	ldr	r3, [pc, #308]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0449      	lsls	r1, r1, #17
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	03db      	lsls	r3, r3, #15
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d016      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f1c:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	4a4e      	ldr	r2, [pc, #312]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	045b      	lsls	r3, r3, #17
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0449      	lsls	r1, r1, #17
 8001f46:	430a      	orrs	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4013      	ands	r3, r2
 8001f54:	d014      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f56:	4b38      	ldr	r3, [pc, #224]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d106      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0249      	lsls	r1, r1, #9
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d014      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	220c      	movs	r2, #12
 8001f92:	4393      	bics	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0249      	lsls	r1, r1, #9
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	045b      	lsls	r3, r3, #17
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d016      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0449      	lsls	r1, r1, #17
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	049b      	lsls	r3, r3, #18
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d016      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a10      	ldr	r2, [pc, #64]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800200c:	430a      	orrs	r2, r1
 800200e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0449      	lsls	r1, r1, #17
 8002026:	430a      	orrs	r2, r1
 8002028:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800202a:	2312      	movs	r3, #18
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b006      	add	sp, #24
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	efffffff 	.word	0xefffffff
 8002040:	fffff3ff 	.word	0xfffff3ff
 8002044:	fffffcff 	.word	0xfffffcff
 8002048:	fff3ffff 	.word	0xfff3ffff
 800204c:	ffcfffff 	.word	0xffcfffff
 8002050:	ffffcfff 	.word	0xffffcfff
 8002054:	ffff3fff 	.word	0xffff3fff
 8002058:	ffbfffff 	.word	0xffbfffff
 800205c:	feffffff 	.word	0xfeffffff

08002060 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d100      	bne.n	8002078 <HAL_RTC_Init+0x18>
 8002076:	e08c      	b.n	8002192 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2229      	movs	r2, #41	; 0x29
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2228      	movs	r2, #40	; 0x28
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2288      	movs	r2, #136	; 0x88
 8002090:	0212      	lsls	r2, r2, #8
 8002092:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe fc9a 	bl	80009d0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2229      	movs	r2, #41	; 0x29
 80020a0:	2102      	movs	r1, #2
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2210      	movs	r2, #16
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d062      	beq.n	8002178 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22ca      	movs	r2, #202	; 0xca
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2253      	movs	r2, #83	; 0x53
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80020c2:	250f      	movs	r5, #15
 80020c4:	197c      	adds	r4, r7, r5
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fbf4 	bl	80028b6 <RTC_EnterInitMode>
 80020ce:	0003      	movs	r3, r0
 80020d0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80020d2:	0028      	movs	r0, r5
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12c      	bne.n	8002136 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	492e      	ldr	r1, [pc, #184]	; (80021a0 <HAL_RTC_Init+0x140>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6999      	ldr	r1, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6912      	ldr	r2, [r2, #16]
 8002112:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	041a      	lsls	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002128:	183c      	adds	r4, r7, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 fc05 	bl	800293c <RTC_ExitInitMode>
 8002132:	0003      	movs	r3, r0
 8002134:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002136:	230f      	movs	r3, #15
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	00d2      	lsls	r2, r2, #3
 800214c:	08d2      	lsrs	r2, r2, #3
 800214e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6999      	ldr	r1, [r3, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	22ff      	movs	r2, #255	; 0xff
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
 8002176:	e003      	b.n	8002180 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002178:	230f      	movs	r3, #15
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2229      	movs	r2, #41	; 0x29
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002192:	230f      	movs	r3, #15
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	781b      	ldrb	r3, [r3, #0]
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b004      	add	sp, #16
 800219e:	bdb0      	pop	{r4, r5, r7, pc}
 80021a0:	fb8fffbf 	.word	0xfb8fffbf

080021a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2228      	movs	r2, #40	; 0x28
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_RTC_SetTime+0x1a>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e092      	b.n	80022e4 <HAL_RTC_SetTime+0x140>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2228      	movs	r2, #40	; 0x28
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2229      	movs	r2, #41	; 0x29
 80021ca:	2102      	movs	r1, #2
 80021cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	22ca      	movs	r2, #202	; 0xca
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2253      	movs	r2, #83	; 0x53
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021de:	2513      	movs	r5, #19
 80021e0:	197c      	adds	r4, r7, r5
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 fb66 	bl	80028b6 <RTC_EnterInitMode>
 80021ea:	0003      	movs	r3, r0
 80021ec:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d162      	bne.n	80022bc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d125      	bne.n	8002248 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	4013      	ands	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fbd6 	bl	80029c4 <RTC_ByteToBcd2>
 8002218:	0003      	movs	r3, r0
 800221a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fbcf 	bl	80029c4 <RTC_ByteToBcd2>
 8002226:	0003      	movs	r3, r0
 8002228:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800222a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fbc7 	bl	80029c4 <RTC_ByteToBcd2>
 8002236:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002238:	0022      	movs	r2, r4
 800223a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	78db      	ldrb	r3, [r3, #3]
 8002240:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002242:	4313      	orrs	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e017      	b.n	8002278 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	4013      	ands	r3, r2
 8002252:	d102      	bne.n	800225a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002266:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800226c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	78db      	ldrb	r3, [r3, #3]
 8002272:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	491b      	ldr	r1, [pc, #108]	; (80022ec <HAL_RTC_SetTime+0x148>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4918      	ldr	r1, [pc, #96]	; (80022f0 <HAL_RTC_SetTime+0x14c>)
 8002290:	400a      	ands	r2, r1
 8002292:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6999      	ldr	r1, [r3, #24]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022ac:	2313      	movs	r3, #19
 80022ae:	18fc      	adds	r4, r7, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fb42 	bl	800293c <RTC_ExitInitMode>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	22ff      	movs	r2, #255	; 0xff
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80022c4:	2313      	movs	r3, #19
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2229      	movs	r2, #41	; 0x29
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2228      	movs	r2, #40	; 0x28
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

  return status;
 80022de:	2313      	movs	r3, #19
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b006      	add	sp, #24
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	007f7f7f 	.word	0x007f7f7f
 80022f0:	fffbffff 	.word	0xfffbffff

080022f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	045b      	lsls	r3, r3, #17
 8002312:	0c5a      	lsrs	r2, r3, #17
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_RTC_GetTime+0xb4>)
 8002320:	4013      	ands	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	b2db      	uxtb	r3, r3
 800232a:	223f      	movs	r2, #63	; 0x3f
 800232c:	4013      	ands	r3, r2
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b2db      	uxtb	r3, r3
 800233a:	227f      	movs	r2, #127	; 0x7f
 800233c:	4013      	ands	r3, r2
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	227f      	movs	r2, #127	; 0x7f
 800234a:	4013      	ands	r3, r2
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	0d9b      	lsrs	r3, r3, #22
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11a      	bne.n	800239e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 fb51 	bl	8002a14 <RTC_Bcd2ToByte>
 8002372:	0003      	movs	r3, r0
 8002374:	001a      	movs	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fb48 	bl	8002a14 <RTC_Bcd2ToByte>
 8002384:	0003      	movs	r3, r0
 8002386:	001a      	movs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	789b      	ldrb	r3, [r3, #2]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fb3f 	bl	8002a14 <RTC_Bcd2ToByte>
 8002396:	0003      	movs	r3, r0
 8002398:	001a      	movs	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	007f7f7f 	.word	0x007f7f7f

080023ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2228      	movs	r2, #40	; 0x28
 80023bc:	5c9b      	ldrb	r3, [r3, r2]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_RTC_SetDate+0x1a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e07e      	b.n	80024c4 <HAL_RTC_SetDate+0x118>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2228      	movs	r2, #40	; 0x28
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2229      	movs	r2, #41	; 0x29
 80023d2:	2102      	movs	r1, #2
 80023d4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <HAL_RTC_SetDate+0x4e>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	001a      	movs	r2, r3
 80023e2:	2310      	movs	r3, #16
 80023e4:	4013      	ands	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4393      	bics	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	330a      	adds	r3, #10
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11c      	bne.n	800243a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	78db      	ldrb	r3, [r3, #3]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 fadd 	bl	80029c4 <RTC_ByteToBcd2>
 800240a:	0003      	movs	r3, r0
 800240c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fad6 	bl	80029c4 <RTC_ByteToBcd2>
 8002418:	0003      	movs	r3, r0
 800241a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800241c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	789b      	ldrb	r3, [r3, #2]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 face 	bl	80029c4 <RTC_ByteToBcd2>
 8002428:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800242a:	0022      	movs	r2, r4
 800242c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e00e      	b.n	8002458 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002446:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800244c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	22ca      	movs	r2, #202	; 0xca
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2253      	movs	r2, #83	; 0x53
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002468:	2513      	movs	r5, #19
 800246a:	197c      	adds	r4, r7, r5
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fa21 	bl	80028b6 <RTC_EnterInitMode>
 8002474:	0003      	movs	r3, r0
 8002476:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002478:	0028      	movs	r0, r5
 800247a:	183b      	adds	r3, r7, r0
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4910      	ldr	r1, [pc, #64]	; (80024cc <HAL_RTC_SetDate+0x120>)
 800248a:	400a      	ands	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800248e:	183c      	adds	r4, r7, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fa52 	bl	800293c <RTC_ExitInitMode>
 8002498:	0003      	movs	r3, r0
 800249a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80024a4:	2313      	movs	r3, #19
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2229      	movs	r2, #41	; 0x29
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2228      	movs	r2, #40	; 0x28
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

  return status;
 80024be:	2313      	movs	r3, #19
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	781b      	ldrb	r3, [r3, #0]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b006      	add	sp, #24
 80024ca:	bdb0      	pop	{r4, r5, r7, pc}
 80024cc:	00ffff3f 	.word	0x00ffff3f

080024d0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a21      	ldr	r2, [pc, #132]	; (8002568 <HAL_RTC_GetDate+0x98>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	221f      	movs	r2, #31
 80024fa:	4013      	ands	r3, r2
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	223f      	movs	r2, #63	; 0x3f
 8002508:	4013      	ands	r3, r2
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0b5b      	lsrs	r3, r3, #13
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11a      	bne.n	800255c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fa72 	bl	8002a14 <RTC_Bcd2ToByte>
 8002530:	0003      	movs	r3, r0
 8002532:	001a      	movs	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fa69 	bl	8002a14 <RTC_Bcd2ToByte>
 8002542:	0003      	movs	r3, r0
 8002544:	001a      	movs	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fa60 	bl	8002a14 <RTC_Bcd2ToByte>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	00ffff3f 	.word	0x00ffff3f

0800256c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2228      	movs	r2, #40	; 0x28
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_RTC_SetAlarm_IT+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e127      	b.n	80027d6 <HAL_RTC_SetAlarm_IT+0x26a>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2228      	movs	r2, #40	; 0x28
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2229      	movs	r2, #41	; 0x29
 8002592:	2102      	movs	r1, #2
 8002594:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d136      	bne.n	800260a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	4013      	ands	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fa06 	bl	80029c4 <RTC_ByteToBcd2>
 80025b8:	0003      	movs	r3, r0
 80025ba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f9ff 	bl	80029c4 <RTC_ByteToBcd2>
 80025c6:	0003      	movs	r3, r0
 80025c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025ca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 f9f7 	bl	80029c4 <RTC_ByteToBcd2>
 80025d6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025d8:	0022      	movs	r2, r4
 80025da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	78db      	ldrb	r3, [r3, #3]
 80025e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025e2:	431a      	orrs	r2, r3
 80025e4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2220      	movs	r2, #32
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 f9e9 	bl	80029c4 <RTC_ByteToBcd2>
 80025f2:	0003      	movs	r3, r0
 80025f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025f6:	0022      	movs	r2, r4
 80025f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002604:	4313      	orrs	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e022      	b.n	8002650 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	4013      	ands	r3, r2
 8002614:	d102      	bne.n	800261c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002628:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800262e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	78db      	ldrb	r3, [r3, #3]
 8002634:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002636:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2120      	movs	r1, #32
 800263c:	5c5b      	ldrb	r3, [r3, r1]
 800263e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002640:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002646:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800264c:	4313      	orrs	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	22ca      	movs	r2, #202	; 0xca
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2253      	movs	r2, #83	; 0x53
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	429a      	cmp	r2, r3
 8002676:	d14c      	bne.n	8002712 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4957      	ldr	r1, [pc, #348]	; (80027e0 <HAL_RTC_SetAlarm_IT+0x274>)
 8002684:	400a      	ands	r2, r1
 8002686:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2101      	movs	r1, #1
 8002694:	430a      	orrs	r2, r1
 8002696:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002698:	f7fe fae6 	bl	8000c68 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026a0:	e016      	b.n	80026d0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026a2:	f7fe fae1 	bl	8000c68 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	23fa      	movs	r3, #250	; 0xfa
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d90d      	bls.n	80026d0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2229      	movs	r2, #41	; 0x29
 80026c0:	2103      	movs	r1, #3
 80026c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2228      	movs	r2, #40	; 0x28
 80026c8:	2100      	movs	r1, #0
 80026ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e082      	b.n	80027d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d0e2      	beq.n	80026a2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0049      	lsls	r1, r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	0149      	lsls	r1, r1, #5
 800270c:	430a      	orrs	r2, r1
 800270e:	619a      	str	r2, [r3, #24]
 8002710:	e04b      	b.n	80027aa <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4931      	ldr	r1, [pc, #196]	; (80027e4 <HAL_RTC_SetAlarm_IT+0x278>)
 800271e:	400a      	ands	r2, r1
 8002720:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2102      	movs	r1, #2
 800272e:	430a      	orrs	r2, r1
 8002730:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002732:	f7fe fa99 	bl	8000c68 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800273a:	e016      	b.n	800276a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800273c:	f7fe fa94 	bl	8000c68 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad2      	subs	r2, r2, r3
 8002746:	23fa      	movs	r3, #250	; 0xfa
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	429a      	cmp	r2, r3
 800274c:	d90d      	bls.n	800276a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2229      	movs	r2, #41	; 0x29
 800275a:	2103      	movs	r1, #3
 800275c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2228      	movs	r2, #40	; 0x28
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e035      	b.n	80027d6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2202      	movs	r2, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d0e2      	beq.n	800273c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0089      	lsls	r1, r1, #2
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	0189      	lsls	r1, r1, #6
 80027a6:	430a      	orrs	r2, r1
 80027a8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	58d3      	ldr	r3, [r2, r3]
 80027b0:	490d      	ldr	r1, [pc, #52]	; (80027e8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	0312      	lsls	r2, r2, #12
 80027b6:	4313      	orrs	r3, r2
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	22ff      	movs	r2, #255	; 0xff
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2229      	movs	r2, #41	; 0x29
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2228      	movs	r2, #40	; 0x28
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b009      	add	sp, #36	; 0x24
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	fffffeff 	.word	0xfffffeff
 80027e4:	fffffdff 	.word	0xfffffdff
 80027e8:	40021800 	.word	0x40021800

080027ec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	4013      	ands	r3, r2
 8002800:	d011      	beq.n	8002826 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d00b      	beq.n	8002826 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f7fd ff57 	bl	80006d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	019b      	lsls	r3, r3, #6
 8002830:	4013      	ands	r3, r2
 8002832:	d011      	beq.n	8002858 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	2202      	movs	r2, #2
 800283c:	4013      	ands	r3, r2
 800283e:	d00b      	beq.n	8002858 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2102      	movs	r1, #2
 800284c:	430a      	orrs	r2, r1
 800284e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f8fb 	bl	8002a4e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2229      	movs	r2, #41	; 0x29
 800285c:	2101      	movs	r1, #1
 800285e:	5499      	strb	r1, [r3, r2]
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	21a0      	movs	r1, #160	; 0xa0
 800287c:	438a      	bics	r2, r1
 800287e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002880:	f7fe f9f2 	bl	8000c68 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800288a:	f7fe f9ed 	bl	8000c68 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	23fa      	movs	r3, #250	; 0xfa
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d901      	bls.n	80028a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0ee      	beq.n	800288a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80028be:	230f      	movs	r3, #15
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	4013      	ands	r3, r2
 80028d0:	d12c      	bne.n	800292c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028e2:	f7fe f9c1 	bl	8000c68 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028ea:	e014      	b.n	8002916 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80028ec:	f7fe f9bc 	bl	8000c68 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	200f      	movs	r0, #15
 80028f8:	183b      	adds	r3, r7, r0
 80028fa:	1839      	adds	r1, r7, r0
 80028fc:	7809      	ldrb	r1, [r1, #0]
 80028fe:	7019      	strb	r1, [r3, #0]
 8002900:	23fa      	movs	r3, #250	; 0xfa
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d906      	bls.n	8002916 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002908:	183b      	adds	r3, r7, r0
 800290a:	2203      	movs	r2, #3
 800290c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2229      	movs	r2, #41	; 0x29
 8002912:	2103      	movs	r1, #3
 8002914:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	d104      	bne.n	800292c <RTC_EnterInitMode+0x76>
 8002922:	230f      	movs	r3, #15
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d1df      	bne.n	80028ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800292c:	230f      	movs	r3, #15
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	781b      	ldrb	r3, [r3, #0]
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b004      	add	sp, #16
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	240f      	movs	r4, #15
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <RTC_ExitInitMode+0x84>)
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <RTC_ExitInitMode+0x84>)
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	438a      	bics	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <RTC_ExitInitMode+0x84>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2220      	movs	r2, #32
 800295e:	4013      	ands	r3, r2
 8002960:	d10d      	bne.n	800297e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff ff7f 	bl	8002868 <HAL_RTC_WaitForSynchro>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d021      	beq.n	80029b2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2229      	movs	r2, #41	; 0x29
 8002972:	2103      	movs	r1, #3
 8002974:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2203      	movs	r2, #3
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e019      	b.n	80029b2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <RTC_ExitInitMode+0x84>)
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <RTC_ExitInitMode+0x84>)
 8002984:	2120      	movs	r1, #32
 8002986:	438a      	bics	r2, r1
 8002988:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ff6b 	bl	8002868 <HAL_RTC_WaitForSynchro>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d007      	beq.n	80029a6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2229      	movs	r2, #41	; 0x29
 800299a:	2103      	movs	r1, #3
 800299c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <RTC_ExitInitMode+0x84>)
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <RTC_ExitInitMode+0x84>)
 80029ac:	2120      	movs	r1, #32
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80029b2:	230f      	movs	r3, #15
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b005      	add	sp, #20
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40002800 	.word	0x40002800

080029c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	0002      	movs	r2, r0
 80029cc:	1dfb      	adds	r3, r7, #7
 80029ce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80029d4:	230b      	movs	r3, #11
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	1dfa      	adds	r2, r7, #7
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80029de:	e008      	b.n	80029f2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80029e6:	220b      	movs	r2, #11
 80029e8:	18bb      	adds	r3, r7, r2
 80029ea:	18ba      	adds	r2, r7, r2
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	3a0a      	subs	r2, #10
 80029f0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80029f2:	210b      	movs	r1, #11
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d8f1      	bhi.n	80029e0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	001a      	movs	r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	210f      	movs	r1, #15
 8002a3e:	400b      	ands	r3, r1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	b2db      	uxtb	r3, r3
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	001a      	movs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	33ff      	adds	r3, #255	; 0xff
 8002a7e:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	18d3      	adds	r3, r2, r3
 8002a88:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b006      	add	sp, #24
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	18d3      	adds	r3, r2, r3
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	33ff      	adds	r3, #255	; 0xff
 8002ab6:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	18d3      	adds	r3, r2, r3
 8002ac0:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b004      	add	sp, #16
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <__errno>:
 8002ad0:	4b01      	ldr	r3, [pc, #4]	; (8002ad8 <__errno+0x8>)
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	4770      	bx	lr
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	2000000c 	.word	0x2000000c

08002adc <__libc_init_array>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	2600      	movs	r6, #0
 8002ae0:	4d0c      	ldr	r5, [pc, #48]	; (8002b14 <__libc_init_array+0x38>)
 8002ae2:	4c0d      	ldr	r4, [pc, #52]	; (8002b18 <__libc_init_array+0x3c>)
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	42a6      	cmp	r6, r4
 8002aea:	d109      	bne.n	8002b00 <__libc_init_array+0x24>
 8002aec:	2600      	movs	r6, #0
 8002aee:	f000 fc8b 	bl	8003408 <_init>
 8002af2:	4d0a      	ldr	r5, [pc, #40]	; (8002b1c <__libc_init_array+0x40>)
 8002af4:	4c0a      	ldr	r4, [pc, #40]	; (8002b20 <__libc_init_array+0x44>)
 8002af6:	1b64      	subs	r4, r4, r5
 8002af8:	10a4      	asrs	r4, r4, #2
 8002afa:	42a6      	cmp	r6, r4
 8002afc:	d105      	bne.n	8002b0a <__libc_init_array+0x2e>
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
 8002b00:	00b3      	lsls	r3, r6, #2
 8002b02:	58eb      	ldr	r3, [r5, r3]
 8002b04:	4798      	blx	r3
 8002b06:	3601      	adds	r6, #1
 8002b08:	e7ee      	b.n	8002ae8 <__libc_init_array+0xc>
 8002b0a:	00b3      	lsls	r3, r6, #2
 8002b0c:	58eb      	ldr	r3, [r5, r3]
 8002b0e:	4798      	blx	r3
 8002b10:	3601      	adds	r6, #1
 8002b12:	e7f2      	b.n	8002afa <__libc_init_array+0x1e>
 8002b14:	080034c0 	.word	0x080034c0
 8002b18:	080034c0 	.word	0x080034c0
 8002b1c:	080034c0 	.word	0x080034c0
 8002b20:	080034c4 	.word	0x080034c4

08002b24 <memset>:
 8002b24:	0003      	movs	r3, r0
 8002b26:	1882      	adds	r2, r0, r2
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <memset+0xa>
 8002b2c:	4770      	bx	lr
 8002b2e:	7019      	strb	r1, [r3, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	e7f9      	b.n	8002b28 <memset+0x4>

08002b34 <siprintf>:
 8002b34:	b40e      	push	{r1, r2, r3}
 8002b36:	b500      	push	{lr}
 8002b38:	490b      	ldr	r1, [pc, #44]	; (8002b68 <siprintf+0x34>)
 8002b3a:	b09c      	sub	sp, #112	; 0x70
 8002b3c:	ab1d      	add	r3, sp, #116	; 0x74
 8002b3e:	9002      	str	r0, [sp, #8]
 8002b40:	9006      	str	r0, [sp, #24]
 8002b42:	9107      	str	r1, [sp, #28]
 8002b44:	9104      	str	r1, [sp, #16]
 8002b46:	4809      	ldr	r0, [pc, #36]	; (8002b6c <siprintf+0x38>)
 8002b48:	4909      	ldr	r1, [pc, #36]	; (8002b70 <siprintf+0x3c>)
 8002b4a:	cb04      	ldmia	r3!, {r2}
 8002b4c:	9105      	str	r1, [sp, #20]
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	a902      	add	r1, sp, #8
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	f000 f870 	bl	8002c38 <_svfiprintf_r>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9a02      	ldr	r2, [sp, #8]
 8002b5c:	7013      	strb	r3, [r2, #0]
 8002b5e:	b01c      	add	sp, #112	; 0x70
 8002b60:	bc08      	pop	{r3}
 8002b62:	b003      	add	sp, #12
 8002b64:	4718      	bx	r3
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	7fffffff 	.word	0x7fffffff
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	ffff0208 	.word	0xffff0208

08002b74 <__ssputs_r>:
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	688e      	ldr	r6, [r1, #8]
 8002b78:	b085      	sub	sp, #20
 8002b7a:	0007      	movs	r7, r0
 8002b7c:	000c      	movs	r4, r1
 8002b7e:	9203      	str	r2, [sp, #12]
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	429e      	cmp	r6, r3
 8002b84:	d83c      	bhi.n	8002c00 <__ssputs_r+0x8c>
 8002b86:	2390      	movs	r3, #144	; 0x90
 8002b88:	898a      	ldrh	r2, [r1, #12]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	421a      	tst	r2, r3
 8002b8e:	d034      	beq.n	8002bfa <__ssputs_r+0x86>
 8002b90:	6909      	ldr	r1, [r1, #16]
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	6960      	ldr	r0, [r4, #20]
 8002b96:	1a5b      	subs	r3, r3, r1
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	4343      	muls	r3, r0
 8002b9e:	0fdd      	lsrs	r5, r3, #31
 8002ba0:	18ed      	adds	r5, r5, r3
 8002ba2:	9b01      	ldr	r3, [sp, #4]
 8002ba4:	9802      	ldr	r0, [sp, #8]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	181b      	adds	r3, r3, r0
 8002baa:	106d      	asrs	r5, r5, #1
 8002bac:	42ab      	cmp	r3, r5
 8002bae:	d900      	bls.n	8002bb2 <__ssputs_r+0x3e>
 8002bb0:	001d      	movs	r5, r3
 8002bb2:	0553      	lsls	r3, r2, #21
 8002bb4:	d532      	bpl.n	8002c1c <__ssputs_r+0xa8>
 8002bb6:	0029      	movs	r1, r5
 8002bb8:	0038      	movs	r0, r7
 8002bba:	f000 fb53 	bl	8003264 <_malloc_r>
 8002bbe:	1e06      	subs	r6, r0, #0
 8002bc0:	d109      	bne.n	8002bd6 <__ssputs_r+0x62>
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	2340      	movs	r3, #64	; 0x40
 8002bc8:	2001      	movs	r0, #1
 8002bca:	89a2      	ldrh	r2, [r4, #12]
 8002bcc:	4240      	negs	r0, r0
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	b005      	add	sp, #20
 8002bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd6:	9a02      	ldr	r2, [sp, #8]
 8002bd8:	6921      	ldr	r1, [r4, #16]
 8002bda:	f000 faba 	bl	8003152 <memcpy>
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <__ssputs_r+0xc0>)
 8002be2:	401a      	ands	r2, r3
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	4313      	orrs	r3, r2
 8002be8:	81a3      	strh	r3, [r4, #12]
 8002bea:	9b02      	ldr	r3, [sp, #8]
 8002bec:	6126      	str	r6, [r4, #16]
 8002bee:	18f6      	adds	r6, r6, r3
 8002bf0:	6026      	str	r6, [r4, #0]
 8002bf2:	6165      	str	r5, [r4, #20]
 8002bf4:	9e01      	ldr	r6, [sp, #4]
 8002bf6:	1aed      	subs	r5, r5, r3
 8002bf8:	60a5      	str	r5, [r4, #8]
 8002bfa:	9b01      	ldr	r3, [sp, #4]
 8002bfc:	429e      	cmp	r6, r3
 8002bfe:	d900      	bls.n	8002c02 <__ssputs_r+0x8e>
 8002c00:	9e01      	ldr	r6, [sp, #4]
 8002c02:	0032      	movs	r2, r6
 8002c04:	9903      	ldr	r1, [sp, #12]
 8002c06:	6820      	ldr	r0, [r4, #0]
 8002c08:	f000 faac 	bl	8003164 <memmove>
 8002c0c:	68a3      	ldr	r3, [r4, #8]
 8002c0e:	2000      	movs	r0, #0
 8002c10:	1b9b      	subs	r3, r3, r6
 8002c12:	60a3      	str	r3, [r4, #8]
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	199e      	adds	r6, r3, r6
 8002c18:	6026      	str	r6, [r4, #0]
 8002c1a:	e7da      	b.n	8002bd2 <__ssputs_r+0x5e>
 8002c1c:	002a      	movs	r2, r5
 8002c1e:	0038      	movs	r0, r7
 8002c20:	f000 fb96 	bl	8003350 <_realloc_r>
 8002c24:	1e06      	subs	r6, r0, #0
 8002c26:	d1e0      	bne.n	8002bea <__ssputs_r+0x76>
 8002c28:	0038      	movs	r0, r7
 8002c2a:	6921      	ldr	r1, [r4, #16]
 8002c2c:	f000 faae 	bl	800318c <_free_r>
 8002c30:	e7c7      	b.n	8002bc2 <__ssputs_r+0x4e>
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	fffffb7f 	.word	0xfffffb7f

08002c38 <_svfiprintf_r>:
 8002c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3a:	b0a1      	sub	sp, #132	; 0x84
 8002c3c:	9003      	str	r0, [sp, #12]
 8002c3e:	001d      	movs	r5, r3
 8002c40:	898b      	ldrh	r3, [r1, #12]
 8002c42:	000f      	movs	r7, r1
 8002c44:	0016      	movs	r6, r2
 8002c46:	061b      	lsls	r3, r3, #24
 8002c48:	d511      	bpl.n	8002c6e <_svfiprintf_r+0x36>
 8002c4a:	690b      	ldr	r3, [r1, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10e      	bne.n	8002c6e <_svfiprintf_r+0x36>
 8002c50:	2140      	movs	r1, #64	; 0x40
 8002c52:	f000 fb07 	bl	8003264 <_malloc_r>
 8002c56:	6038      	str	r0, [r7, #0]
 8002c58:	6138      	str	r0, [r7, #16]
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d105      	bne.n	8002c6a <_svfiprintf_r+0x32>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	9a03      	ldr	r2, [sp, #12]
 8002c62:	3801      	subs	r0, #1
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	b021      	add	sp, #132	; 0x84
 8002c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6a:	2340      	movs	r3, #64	; 0x40
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	ac08      	add	r4, sp, #32
 8002c72:	6163      	str	r3, [r4, #20]
 8002c74:	3320      	adds	r3, #32
 8002c76:	7663      	strb	r3, [r4, #25]
 8002c78:	3310      	adds	r3, #16
 8002c7a:	76a3      	strb	r3, [r4, #26]
 8002c7c:	9507      	str	r5, [sp, #28]
 8002c7e:	0035      	movs	r5, r6
 8002c80:	782b      	ldrb	r3, [r5, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <_svfiprintf_r+0x52>
 8002c86:	2b25      	cmp	r3, #37	; 0x25
 8002c88:	d147      	bne.n	8002d1a <_svfiprintf_r+0xe2>
 8002c8a:	1bab      	subs	r3, r5, r6
 8002c8c:	9305      	str	r3, [sp, #20]
 8002c8e:	42b5      	cmp	r5, r6
 8002c90:	d00c      	beq.n	8002cac <_svfiprintf_r+0x74>
 8002c92:	0032      	movs	r2, r6
 8002c94:	0039      	movs	r1, r7
 8002c96:	9803      	ldr	r0, [sp, #12]
 8002c98:	f7ff ff6c 	bl	8002b74 <__ssputs_r>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d100      	bne.n	8002ca2 <_svfiprintf_r+0x6a>
 8002ca0:	e0ae      	b.n	8002e00 <_svfiprintf_r+0x1c8>
 8002ca2:	6962      	ldr	r2, [r4, #20]
 8002ca4:	9b05      	ldr	r3, [sp, #20]
 8002ca6:	4694      	mov	ip, r2
 8002ca8:	4463      	add	r3, ip
 8002caa:	6163      	str	r3, [r4, #20]
 8002cac:	782b      	ldrb	r3, [r5, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d100      	bne.n	8002cb4 <_svfiprintf_r+0x7c>
 8002cb2:	e0a5      	b.n	8002e00 <_svfiprintf_r+0x1c8>
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	4252      	negs	r2, r2
 8002cba:	6062      	str	r2, [r4, #4]
 8002cbc:	a904      	add	r1, sp, #16
 8002cbe:	3254      	adds	r2, #84	; 0x54
 8002cc0:	1852      	adds	r2, r2, r1
 8002cc2:	1c6e      	adds	r6, r5, #1
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	60e3      	str	r3, [r4, #12]
 8002cc8:	60a3      	str	r3, [r4, #8]
 8002cca:	7013      	strb	r3, [r2, #0]
 8002ccc:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cce:	2205      	movs	r2, #5
 8002cd0:	7831      	ldrb	r1, [r6, #0]
 8002cd2:	4854      	ldr	r0, [pc, #336]	; (8002e24 <_svfiprintf_r+0x1ec>)
 8002cd4:	f000 fa32 	bl	800313c <memchr>
 8002cd8:	1c75      	adds	r5, r6, #1
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d11f      	bne.n	8002d1e <_svfiprintf_r+0xe6>
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	06d3      	lsls	r3, r2, #27
 8002ce2:	d504      	bpl.n	8002cee <_svfiprintf_r+0xb6>
 8002ce4:	2353      	movs	r3, #83	; 0x53
 8002ce6:	a904      	add	r1, sp, #16
 8002ce8:	185b      	adds	r3, r3, r1
 8002cea:	2120      	movs	r1, #32
 8002cec:	7019      	strb	r1, [r3, #0]
 8002cee:	0713      	lsls	r3, r2, #28
 8002cf0:	d504      	bpl.n	8002cfc <_svfiprintf_r+0xc4>
 8002cf2:	2353      	movs	r3, #83	; 0x53
 8002cf4:	a904      	add	r1, sp, #16
 8002cf6:	185b      	adds	r3, r3, r1
 8002cf8:	212b      	movs	r1, #43	; 0x2b
 8002cfa:	7019      	strb	r1, [r3, #0]
 8002cfc:	7833      	ldrb	r3, [r6, #0]
 8002cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002d00:	d016      	beq.n	8002d30 <_svfiprintf_r+0xf8>
 8002d02:	0035      	movs	r5, r6
 8002d04:	2100      	movs	r1, #0
 8002d06:	200a      	movs	r0, #10
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	782a      	ldrb	r2, [r5, #0]
 8002d0c:	1c6e      	adds	r6, r5, #1
 8002d0e:	3a30      	subs	r2, #48	; 0x30
 8002d10:	2a09      	cmp	r2, #9
 8002d12:	d94e      	bls.n	8002db2 <_svfiprintf_r+0x17a>
 8002d14:	2900      	cmp	r1, #0
 8002d16:	d111      	bne.n	8002d3c <_svfiprintf_r+0x104>
 8002d18:	e017      	b.n	8002d4a <_svfiprintf_r+0x112>
 8002d1a:	3501      	adds	r5, #1
 8002d1c:	e7b0      	b.n	8002c80 <_svfiprintf_r+0x48>
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <_svfiprintf_r+0x1ec>)
 8002d20:	6822      	ldr	r2, [r4, #0]
 8002d22:	1ac0      	subs	r0, r0, r3
 8002d24:	2301      	movs	r3, #1
 8002d26:	4083      	lsls	r3, r0
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	002e      	movs	r6, r5
 8002d2c:	6023      	str	r3, [r4, #0]
 8002d2e:	e7ce      	b.n	8002cce <_svfiprintf_r+0x96>
 8002d30:	9b07      	ldr	r3, [sp, #28]
 8002d32:	1d19      	adds	r1, r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	9107      	str	r1, [sp, #28]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	db01      	blt.n	8002d40 <_svfiprintf_r+0x108>
 8002d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d3e:	e004      	b.n	8002d4a <_svfiprintf_r+0x112>
 8002d40:	425b      	negs	r3, r3
 8002d42:	60e3      	str	r3, [r4, #12]
 8002d44:	2302      	movs	r3, #2
 8002d46:	4313      	orrs	r3, r2
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	782b      	ldrb	r3, [r5, #0]
 8002d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d4e:	d10a      	bne.n	8002d66 <_svfiprintf_r+0x12e>
 8002d50:	786b      	ldrb	r3, [r5, #1]
 8002d52:	2b2a      	cmp	r3, #42	; 0x2a
 8002d54:	d135      	bne.n	8002dc2 <_svfiprintf_r+0x18a>
 8002d56:	9b07      	ldr	r3, [sp, #28]
 8002d58:	3502      	adds	r5, #2
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	9207      	str	r2, [sp, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db2b      	blt.n	8002dbc <_svfiprintf_r+0x184>
 8002d64:	9309      	str	r3, [sp, #36]	; 0x24
 8002d66:	4e30      	ldr	r6, [pc, #192]	; (8002e28 <_svfiprintf_r+0x1f0>)
 8002d68:	2203      	movs	r2, #3
 8002d6a:	0030      	movs	r0, r6
 8002d6c:	7829      	ldrb	r1, [r5, #0]
 8002d6e:	f000 f9e5 	bl	800313c <memchr>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d006      	beq.n	8002d84 <_svfiprintf_r+0x14c>
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	1b80      	subs	r0, r0, r6
 8002d7a:	4083      	lsls	r3, r0
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	3501      	adds	r5, #1
 8002d80:	4313      	orrs	r3, r2
 8002d82:	6023      	str	r3, [r4, #0]
 8002d84:	7829      	ldrb	r1, [r5, #0]
 8002d86:	2206      	movs	r2, #6
 8002d88:	4828      	ldr	r0, [pc, #160]	; (8002e2c <_svfiprintf_r+0x1f4>)
 8002d8a:	1c6e      	adds	r6, r5, #1
 8002d8c:	7621      	strb	r1, [r4, #24]
 8002d8e:	f000 f9d5 	bl	800313c <memchr>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d03c      	beq.n	8002e10 <_svfiprintf_r+0x1d8>
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <_svfiprintf_r+0x1f8>)
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d125      	bne.n	8002de8 <_svfiprintf_r+0x1b0>
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	9b07      	ldr	r3, [sp, #28]
 8002da0:	3307      	adds	r3, #7
 8002da2:	4393      	bics	r3, r2
 8002da4:	3308      	adds	r3, #8
 8002da6:	9307      	str	r3, [sp, #28]
 8002da8:	6963      	ldr	r3, [r4, #20]
 8002daa:	9a04      	ldr	r2, [sp, #16]
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	6163      	str	r3, [r4, #20]
 8002db0:	e765      	b.n	8002c7e <_svfiprintf_r+0x46>
 8002db2:	4343      	muls	r3, r0
 8002db4:	0035      	movs	r5, r6
 8002db6:	2101      	movs	r1, #1
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	e7a6      	b.n	8002d0a <_svfiprintf_r+0xd2>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	425b      	negs	r3, r3
 8002dc0:	e7d0      	b.n	8002d64 <_svfiprintf_r+0x12c>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	200a      	movs	r0, #10
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	3501      	adds	r5, #1
 8002dca:	6063      	str	r3, [r4, #4]
 8002dcc:	7829      	ldrb	r1, [r5, #0]
 8002dce:	1c6e      	adds	r6, r5, #1
 8002dd0:	3930      	subs	r1, #48	; 0x30
 8002dd2:	2909      	cmp	r1, #9
 8002dd4:	d903      	bls.n	8002dde <_svfiprintf_r+0x1a6>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0c5      	beq.n	8002d66 <_svfiprintf_r+0x12e>
 8002dda:	9209      	str	r2, [sp, #36]	; 0x24
 8002ddc:	e7c3      	b.n	8002d66 <_svfiprintf_r+0x12e>
 8002dde:	4342      	muls	r2, r0
 8002de0:	0035      	movs	r5, r6
 8002de2:	2301      	movs	r3, #1
 8002de4:	1852      	adds	r2, r2, r1
 8002de6:	e7f1      	b.n	8002dcc <_svfiprintf_r+0x194>
 8002de8:	ab07      	add	r3, sp, #28
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	003a      	movs	r2, r7
 8002dee:	0021      	movs	r1, r4
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_svfiprintf_r+0x1fc>)
 8002df2:	9803      	ldr	r0, [sp, #12]
 8002df4:	e000      	b.n	8002df8 <_svfiprintf_r+0x1c0>
 8002df6:	bf00      	nop
 8002df8:	9004      	str	r0, [sp, #16]
 8002dfa:	9b04      	ldr	r3, [sp, #16]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	d1d3      	bne.n	8002da8 <_svfiprintf_r+0x170>
 8002e00:	89bb      	ldrh	r3, [r7, #12]
 8002e02:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e04:	065b      	lsls	r3, r3, #25
 8002e06:	d400      	bmi.n	8002e0a <_svfiprintf_r+0x1d2>
 8002e08:	e72d      	b.n	8002c66 <_svfiprintf_r+0x2e>
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	4240      	negs	r0, r0
 8002e0e:	e72a      	b.n	8002c66 <_svfiprintf_r+0x2e>
 8002e10:	ab07      	add	r3, sp, #28
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	003a      	movs	r2, r7
 8002e16:	0021      	movs	r1, r4
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <_svfiprintf_r+0x1fc>)
 8002e1a:	9803      	ldr	r0, [sp, #12]
 8002e1c:	f000 f87c 	bl	8002f18 <_printf_i>
 8002e20:	e7ea      	b.n	8002df8 <_svfiprintf_r+0x1c0>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	0800348c 	.word	0x0800348c
 8002e28:	08003492 	.word	0x08003492
 8002e2c:	08003496 	.word	0x08003496
 8002e30:	00000000 	.word	0x00000000
 8002e34:	08002b75 	.word	0x08002b75

08002e38 <_printf_common>:
 8002e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e3a:	0015      	movs	r5, r2
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	688a      	ldr	r2, [r1, #8]
 8002e40:	690b      	ldr	r3, [r1, #16]
 8002e42:	000c      	movs	r4, r1
 8002e44:	9000      	str	r0, [sp, #0]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	da00      	bge.n	8002e4c <_printf_common+0x14>
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	0022      	movs	r2, r4
 8002e4e:	602b      	str	r3, [r5, #0]
 8002e50:	3243      	adds	r2, #67	; 0x43
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	2a00      	cmp	r2, #0
 8002e56:	d001      	beq.n	8002e5c <_printf_common+0x24>
 8002e58:	3301      	adds	r3, #1
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	069b      	lsls	r3, r3, #26
 8002e60:	d502      	bpl.n	8002e68 <_printf_common+0x30>
 8002e62:	682b      	ldr	r3, [r5, #0]
 8002e64:	3302      	adds	r3, #2
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	0017      	movs	r7, r2
 8002e6e:	401f      	ands	r7, r3
 8002e70:	421a      	tst	r2, r3
 8002e72:	d027      	beq.n	8002ec4 <_printf_common+0x8c>
 8002e74:	0023      	movs	r3, r4
 8002e76:	3343      	adds	r3, #67	; 0x43
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	4193      	sbcs	r3, r2
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	0692      	lsls	r2, r2, #26
 8002e82:	d430      	bmi.n	8002ee6 <_printf_common+0xae>
 8002e84:	0022      	movs	r2, r4
 8002e86:	9901      	ldr	r1, [sp, #4]
 8002e88:	9800      	ldr	r0, [sp, #0]
 8002e8a:	9e08      	ldr	r6, [sp, #32]
 8002e8c:	3243      	adds	r2, #67	; 0x43
 8002e8e:	47b0      	blx	r6
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d025      	beq.n	8002ee0 <_printf_common+0xa8>
 8002e94:	2306      	movs	r3, #6
 8002e96:	6820      	ldr	r0, [r4, #0]
 8002e98:	682a      	ldr	r2, [r5, #0]
 8002e9a:	68e1      	ldr	r1, [r4, #12]
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	4003      	ands	r3, r0
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d103      	bne.n	8002eac <_printf_common+0x74>
 8002ea4:	1a8d      	subs	r5, r1, r2
 8002ea6:	43eb      	mvns	r3, r5
 8002ea8:	17db      	asrs	r3, r3, #31
 8002eaa:	401d      	ands	r5, r3
 8002eac:	68a3      	ldr	r3, [r4, #8]
 8002eae:	6922      	ldr	r2, [r4, #16]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	dd01      	ble.n	8002eb8 <_printf_common+0x80>
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	18ed      	adds	r5, r5, r3
 8002eb8:	2700      	movs	r7, #0
 8002eba:	42bd      	cmp	r5, r7
 8002ebc:	d120      	bne.n	8002f00 <_printf_common+0xc8>
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e010      	b.n	8002ee4 <_printf_common+0xac>
 8002ec2:	3701      	adds	r7, #1
 8002ec4:	68e3      	ldr	r3, [r4, #12]
 8002ec6:	682a      	ldr	r2, [r5, #0]
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	42bb      	cmp	r3, r7
 8002ecc:	ddd2      	ble.n	8002e74 <_printf_common+0x3c>
 8002ece:	0022      	movs	r2, r4
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	9901      	ldr	r1, [sp, #4]
 8002ed4:	9800      	ldr	r0, [sp, #0]
 8002ed6:	9e08      	ldr	r6, [sp, #32]
 8002ed8:	3219      	adds	r2, #25
 8002eda:	47b0      	blx	r6
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	d1f0      	bne.n	8002ec2 <_printf_common+0x8a>
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	4240      	negs	r0, r0
 8002ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ee6:	2030      	movs	r0, #48	; 0x30
 8002ee8:	18e1      	adds	r1, r4, r3
 8002eea:	3143      	adds	r1, #67	; 0x43
 8002eec:	7008      	strb	r0, [r1, #0]
 8002eee:	0021      	movs	r1, r4
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	3145      	adds	r1, #69	; 0x45
 8002ef4:	7809      	ldrb	r1, [r1, #0]
 8002ef6:	18a2      	adds	r2, r4, r2
 8002ef8:	3243      	adds	r2, #67	; 0x43
 8002efa:	3302      	adds	r3, #2
 8002efc:	7011      	strb	r1, [r2, #0]
 8002efe:	e7c1      	b.n	8002e84 <_printf_common+0x4c>
 8002f00:	0022      	movs	r2, r4
 8002f02:	2301      	movs	r3, #1
 8002f04:	9901      	ldr	r1, [sp, #4]
 8002f06:	9800      	ldr	r0, [sp, #0]
 8002f08:	9e08      	ldr	r6, [sp, #32]
 8002f0a:	321a      	adds	r2, #26
 8002f0c:	47b0      	blx	r6
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d0e6      	beq.n	8002ee0 <_printf_common+0xa8>
 8002f12:	3701      	adds	r7, #1
 8002f14:	e7d1      	b.n	8002eba <_printf_common+0x82>
	...

08002f18 <_printf_i>:
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	b08b      	sub	sp, #44	; 0x2c
 8002f1c:	9206      	str	r2, [sp, #24]
 8002f1e:	000a      	movs	r2, r1
 8002f20:	3243      	adds	r2, #67	; 0x43
 8002f22:	9307      	str	r3, [sp, #28]
 8002f24:	9005      	str	r0, [sp, #20]
 8002f26:	9204      	str	r2, [sp, #16]
 8002f28:	7e0a      	ldrb	r2, [r1, #24]
 8002f2a:	000c      	movs	r4, r1
 8002f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f2e:	2a78      	cmp	r2, #120	; 0x78
 8002f30:	d807      	bhi.n	8002f42 <_printf_i+0x2a>
 8002f32:	2a62      	cmp	r2, #98	; 0x62
 8002f34:	d809      	bhi.n	8002f4a <_printf_i+0x32>
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	d100      	bne.n	8002f3c <_printf_i+0x24>
 8002f3a:	e0c1      	b.n	80030c0 <_printf_i+0x1a8>
 8002f3c:	2a58      	cmp	r2, #88	; 0x58
 8002f3e:	d100      	bne.n	8002f42 <_printf_i+0x2a>
 8002f40:	e08c      	b.n	800305c <_printf_i+0x144>
 8002f42:	0026      	movs	r6, r4
 8002f44:	3642      	adds	r6, #66	; 0x42
 8002f46:	7032      	strb	r2, [r6, #0]
 8002f48:	e022      	b.n	8002f90 <_printf_i+0x78>
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	3863      	subs	r0, #99	; 0x63
 8002f4e:	2815      	cmp	r0, #21
 8002f50:	d8f7      	bhi.n	8002f42 <_printf_i+0x2a>
 8002f52:	f7fd f8d7 	bl	8000104 <__gnu_thumb1_case_shi>
 8002f56:	0016      	.short	0x0016
 8002f58:	fff6001f 	.word	0xfff6001f
 8002f5c:	fff6fff6 	.word	0xfff6fff6
 8002f60:	001ffff6 	.word	0x001ffff6
 8002f64:	fff6fff6 	.word	0xfff6fff6
 8002f68:	fff6fff6 	.word	0xfff6fff6
 8002f6c:	003600a8 	.word	0x003600a8
 8002f70:	fff6009a 	.word	0xfff6009a
 8002f74:	00b9fff6 	.word	0x00b9fff6
 8002f78:	0036fff6 	.word	0x0036fff6
 8002f7c:	fff6fff6 	.word	0xfff6fff6
 8002f80:	009e      	.short	0x009e
 8002f82:	0026      	movs	r6, r4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	3642      	adds	r6, #66	; 0x42
 8002f88:	1d11      	adds	r1, r2, #4
 8002f8a:	6019      	str	r1, [r3, #0]
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	7033      	strb	r3, [r6, #0]
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0a7      	b.n	80030e4 <_printf_i+0x1cc>
 8002f94:	6808      	ldr	r0, [r1, #0]
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	1d0a      	adds	r2, r1, #4
 8002f9a:	0605      	lsls	r5, r0, #24
 8002f9c:	d50b      	bpl.n	8002fb6 <_printf_i+0x9e>
 8002f9e:	680d      	ldr	r5, [r1, #0]
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	2d00      	cmp	r5, #0
 8002fa4:	da03      	bge.n	8002fae <_printf_i+0x96>
 8002fa6:	232d      	movs	r3, #45	; 0x2d
 8002fa8:	9a04      	ldr	r2, [sp, #16]
 8002faa:	426d      	negs	r5, r5
 8002fac:	7013      	strb	r3, [r2, #0]
 8002fae:	4b61      	ldr	r3, [pc, #388]	; (8003134 <_printf_i+0x21c>)
 8002fb0:	270a      	movs	r7, #10
 8002fb2:	9303      	str	r3, [sp, #12]
 8002fb4:	e01b      	b.n	8002fee <_printf_i+0xd6>
 8002fb6:	680d      	ldr	r5, [r1, #0]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	0641      	lsls	r1, r0, #25
 8002fbc:	d5f1      	bpl.n	8002fa2 <_printf_i+0x8a>
 8002fbe:	b22d      	sxth	r5, r5
 8002fc0:	e7ef      	b.n	8002fa2 <_printf_i+0x8a>
 8002fc2:	680d      	ldr	r5, [r1, #0]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	1d08      	adds	r0, r1, #4
 8002fc8:	6018      	str	r0, [r3, #0]
 8002fca:	062e      	lsls	r6, r5, #24
 8002fcc:	d501      	bpl.n	8002fd2 <_printf_i+0xba>
 8002fce:	680d      	ldr	r5, [r1, #0]
 8002fd0:	e003      	b.n	8002fda <_printf_i+0xc2>
 8002fd2:	066d      	lsls	r5, r5, #25
 8002fd4:	d5fb      	bpl.n	8002fce <_printf_i+0xb6>
 8002fd6:	680d      	ldr	r5, [r1, #0]
 8002fd8:	b2ad      	uxth	r5, r5
 8002fda:	4b56      	ldr	r3, [pc, #344]	; (8003134 <_printf_i+0x21c>)
 8002fdc:	2708      	movs	r7, #8
 8002fde:	9303      	str	r3, [sp, #12]
 8002fe0:	2a6f      	cmp	r2, #111	; 0x6f
 8002fe2:	d000      	beq.n	8002fe6 <_printf_i+0xce>
 8002fe4:	3702      	adds	r7, #2
 8002fe6:	0023      	movs	r3, r4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	3343      	adds	r3, #67	; 0x43
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	60a3      	str	r3, [r4, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db03      	blt.n	8002ffe <_printf_i+0xe6>
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	6821      	ldr	r1, [r4, #0]
 8002ffa:	4391      	bics	r1, r2
 8002ffc:	6021      	str	r1, [r4, #0]
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	d102      	bne.n	8003008 <_printf_i+0xf0>
 8003002:	9e04      	ldr	r6, [sp, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <_printf_i+0x10a>
 8003008:	9e04      	ldr	r6, [sp, #16]
 800300a:	0028      	movs	r0, r5
 800300c:	0039      	movs	r1, r7
 800300e:	f7fd f909 	bl	8000224 <__aeabi_uidivmod>
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	3e01      	subs	r6, #1
 8003016:	5c5b      	ldrb	r3, [r3, r1]
 8003018:	7033      	strb	r3, [r6, #0]
 800301a:	002b      	movs	r3, r5
 800301c:	0005      	movs	r5, r0
 800301e:	429f      	cmp	r7, r3
 8003020:	d9f3      	bls.n	800300a <_printf_i+0xf2>
 8003022:	2f08      	cmp	r7, #8
 8003024:	d109      	bne.n	800303a <_printf_i+0x122>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	07db      	lsls	r3, r3, #31
 800302a:	d506      	bpl.n	800303a <_printf_i+0x122>
 800302c:	6863      	ldr	r3, [r4, #4]
 800302e:	6922      	ldr	r2, [r4, #16]
 8003030:	4293      	cmp	r3, r2
 8003032:	dc02      	bgt.n	800303a <_printf_i+0x122>
 8003034:	2330      	movs	r3, #48	; 0x30
 8003036:	3e01      	subs	r6, #1
 8003038:	7033      	strb	r3, [r6, #0]
 800303a:	9b04      	ldr	r3, [sp, #16]
 800303c:	1b9b      	subs	r3, r3, r6
 800303e:	6123      	str	r3, [r4, #16]
 8003040:	9b07      	ldr	r3, [sp, #28]
 8003042:	0021      	movs	r1, r4
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	9805      	ldr	r0, [sp, #20]
 8003048:	9b06      	ldr	r3, [sp, #24]
 800304a:	aa09      	add	r2, sp, #36	; 0x24
 800304c:	f7ff fef4 	bl	8002e38 <_printf_common>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d14c      	bne.n	80030ee <_printf_i+0x1d6>
 8003054:	2001      	movs	r0, #1
 8003056:	4240      	negs	r0, r0
 8003058:	b00b      	add	sp, #44	; 0x2c
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305c:	3145      	adds	r1, #69	; 0x45
 800305e:	700a      	strb	r2, [r1, #0]
 8003060:	4a34      	ldr	r2, [pc, #208]	; (8003134 <_printf_i+0x21c>)
 8003062:	9203      	str	r2, [sp, #12]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	6821      	ldr	r1, [r4, #0]
 8003068:	ca20      	ldmia	r2!, {r5}
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	0608      	lsls	r0, r1, #24
 800306e:	d516      	bpl.n	800309e <_printf_i+0x186>
 8003070:	07cb      	lsls	r3, r1, #31
 8003072:	d502      	bpl.n	800307a <_printf_i+0x162>
 8003074:	2320      	movs	r3, #32
 8003076:	4319      	orrs	r1, r3
 8003078:	6021      	str	r1, [r4, #0]
 800307a:	2710      	movs	r7, #16
 800307c:	2d00      	cmp	r5, #0
 800307e:	d1b2      	bne.n	8002fe6 <_printf_i+0xce>
 8003080:	2320      	movs	r3, #32
 8003082:	6822      	ldr	r2, [r4, #0]
 8003084:	439a      	bics	r2, r3
 8003086:	6022      	str	r2, [r4, #0]
 8003088:	e7ad      	b.n	8002fe6 <_printf_i+0xce>
 800308a:	2220      	movs	r2, #32
 800308c:	6809      	ldr	r1, [r1, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	6022      	str	r2, [r4, #0]
 8003092:	0022      	movs	r2, r4
 8003094:	2178      	movs	r1, #120	; 0x78
 8003096:	3245      	adds	r2, #69	; 0x45
 8003098:	7011      	strb	r1, [r2, #0]
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <_printf_i+0x220>)
 800309c:	e7e1      	b.n	8003062 <_printf_i+0x14a>
 800309e:	0648      	lsls	r0, r1, #25
 80030a0:	d5e6      	bpl.n	8003070 <_printf_i+0x158>
 80030a2:	b2ad      	uxth	r5, r5
 80030a4:	e7e4      	b.n	8003070 <_printf_i+0x158>
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	680d      	ldr	r5, [r1, #0]
 80030aa:	1d10      	adds	r0, r2, #4
 80030ac:	6949      	ldr	r1, [r1, #20]
 80030ae:	6018      	str	r0, [r3, #0]
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	062e      	lsls	r6, r5, #24
 80030b4:	d501      	bpl.n	80030ba <_printf_i+0x1a2>
 80030b6:	6019      	str	r1, [r3, #0]
 80030b8:	e002      	b.n	80030c0 <_printf_i+0x1a8>
 80030ba:	066d      	lsls	r5, r5, #25
 80030bc:	d5fb      	bpl.n	80030b6 <_printf_i+0x19e>
 80030be:	8019      	strh	r1, [r3, #0]
 80030c0:	2300      	movs	r3, #0
 80030c2:	9e04      	ldr	r6, [sp, #16]
 80030c4:	6123      	str	r3, [r4, #16]
 80030c6:	e7bb      	b.n	8003040 <_printf_i+0x128>
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	1d11      	adds	r1, r2, #4
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	6816      	ldr	r6, [r2, #0]
 80030d0:	2100      	movs	r1, #0
 80030d2:	0030      	movs	r0, r6
 80030d4:	6862      	ldr	r2, [r4, #4]
 80030d6:	f000 f831 	bl	800313c <memchr>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d001      	beq.n	80030e2 <_printf_i+0x1ca>
 80030de:	1b80      	subs	r0, r0, r6
 80030e0:	6060      	str	r0, [r4, #4]
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	6123      	str	r3, [r4, #16]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9a04      	ldr	r2, [sp, #16]
 80030ea:	7013      	strb	r3, [r2, #0]
 80030ec:	e7a8      	b.n	8003040 <_printf_i+0x128>
 80030ee:	6923      	ldr	r3, [r4, #16]
 80030f0:	0032      	movs	r2, r6
 80030f2:	9906      	ldr	r1, [sp, #24]
 80030f4:	9805      	ldr	r0, [sp, #20]
 80030f6:	9d07      	ldr	r5, [sp, #28]
 80030f8:	47a8      	blx	r5
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	d0aa      	beq.n	8003054 <_printf_i+0x13c>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	079b      	lsls	r3, r3, #30
 8003102:	d415      	bmi.n	8003130 <_printf_i+0x218>
 8003104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003106:	68e0      	ldr	r0, [r4, #12]
 8003108:	4298      	cmp	r0, r3
 800310a:	daa5      	bge.n	8003058 <_printf_i+0x140>
 800310c:	0018      	movs	r0, r3
 800310e:	e7a3      	b.n	8003058 <_printf_i+0x140>
 8003110:	0022      	movs	r2, r4
 8003112:	2301      	movs	r3, #1
 8003114:	9906      	ldr	r1, [sp, #24]
 8003116:	9805      	ldr	r0, [sp, #20]
 8003118:	9e07      	ldr	r6, [sp, #28]
 800311a:	3219      	adds	r2, #25
 800311c:	47b0      	blx	r6
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d098      	beq.n	8003054 <_printf_i+0x13c>
 8003122:	3501      	adds	r5, #1
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	42ab      	cmp	r3, r5
 800312c:	dcf0      	bgt.n	8003110 <_printf_i+0x1f8>
 800312e:	e7e9      	b.n	8003104 <_printf_i+0x1ec>
 8003130:	2500      	movs	r5, #0
 8003132:	e7f7      	b.n	8003124 <_printf_i+0x20c>
 8003134:	0800349d 	.word	0x0800349d
 8003138:	080034ae 	.word	0x080034ae

0800313c <memchr>:
 800313c:	b2c9      	uxtb	r1, r1
 800313e:	1882      	adds	r2, r0, r2
 8003140:	4290      	cmp	r0, r2
 8003142:	d101      	bne.n	8003148 <memchr+0xc>
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr
 8003148:	7803      	ldrb	r3, [r0, #0]
 800314a:	428b      	cmp	r3, r1
 800314c:	d0fb      	beq.n	8003146 <memchr+0xa>
 800314e:	3001      	adds	r0, #1
 8003150:	e7f6      	b.n	8003140 <memchr+0x4>

08003152 <memcpy>:
 8003152:	2300      	movs	r3, #0
 8003154:	b510      	push	{r4, lr}
 8003156:	429a      	cmp	r2, r3
 8003158:	d100      	bne.n	800315c <memcpy+0xa>
 800315a:	bd10      	pop	{r4, pc}
 800315c:	5ccc      	ldrb	r4, [r1, r3]
 800315e:	54c4      	strb	r4, [r0, r3]
 8003160:	3301      	adds	r3, #1
 8003162:	e7f8      	b.n	8003156 <memcpy+0x4>

08003164 <memmove>:
 8003164:	b510      	push	{r4, lr}
 8003166:	4288      	cmp	r0, r1
 8003168:	d902      	bls.n	8003170 <memmove+0xc>
 800316a:	188b      	adds	r3, r1, r2
 800316c:	4298      	cmp	r0, r3
 800316e:	d303      	bcc.n	8003178 <memmove+0x14>
 8003170:	2300      	movs	r3, #0
 8003172:	e007      	b.n	8003184 <memmove+0x20>
 8003174:	5c8b      	ldrb	r3, [r1, r2]
 8003176:	5483      	strb	r3, [r0, r2]
 8003178:	3a01      	subs	r2, #1
 800317a:	d2fb      	bcs.n	8003174 <memmove+0x10>
 800317c:	bd10      	pop	{r4, pc}
 800317e:	5ccc      	ldrb	r4, [r1, r3]
 8003180:	54c4      	strb	r4, [r0, r3]
 8003182:	3301      	adds	r3, #1
 8003184:	429a      	cmp	r2, r3
 8003186:	d1fa      	bne.n	800317e <memmove+0x1a>
 8003188:	e7f8      	b.n	800317c <memmove+0x18>
	...

0800318c <_free_r>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	0005      	movs	r5, r0
 8003190:	2900      	cmp	r1, #0
 8003192:	d010      	beq.n	80031b6 <_free_r+0x2a>
 8003194:	1f0c      	subs	r4, r1, #4
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da00      	bge.n	800319e <_free_r+0x12>
 800319c:	18e4      	adds	r4, r4, r3
 800319e:	0028      	movs	r0, r5
 80031a0:	f000 f918 	bl	80033d4 <__malloc_lock>
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <_free_r+0x90>)
 80031a6:	6813      	ldr	r3, [r2, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <_free_r+0x2c>
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	6014      	str	r4, [r2, #0]
 80031b0:	0028      	movs	r0, r5
 80031b2:	f000 f917 	bl	80033e4 <__malloc_unlock>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	d908      	bls.n	80031ce <_free_r+0x42>
 80031bc:	6821      	ldr	r1, [r4, #0]
 80031be:	1860      	adds	r0, r4, r1
 80031c0:	4283      	cmp	r3, r0
 80031c2:	d1f3      	bne.n	80031ac <_free_r+0x20>
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	1841      	adds	r1, r0, r1
 80031ca:	6021      	str	r1, [r4, #0]
 80031cc:	e7ee      	b.n	80031ac <_free_r+0x20>
 80031ce:	001a      	movs	r2, r3
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <_free_r+0x4e>
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	d9f9      	bls.n	80031ce <_free_r+0x42>
 80031da:	6811      	ldr	r1, [r2, #0]
 80031dc:	1850      	adds	r0, r2, r1
 80031de:	42a0      	cmp	r0, r4
 80031e0:	d10b      	bne.n	80031fa <_free_r+0x6e>
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	1809      	adds	r1, r1, r0
 80031e6:	1850      	adds	r0, r2, r1
 80031e8:	6011      	str	r1, [r2, #0]
 80031ea:	4283      	cmp	r3, r0
 80031ec:	d1e0      	bne.n	80031b0 <_free_r+0x24>
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	1841      	adds	r1, r0, r1
 80031f4:	6011      	str	r1, [r2, #0]
 80031f6:	6053      	str	r3, [r2, #4]
 80031f8:	e7da      	b.n	80031b0 <_free_r+0x24>
 80031fa:	42a0      	cmp	r0, r4
 80031fc:	d902      	bls.n	8003204 <_free_r+0x78>
 80031fe:	230c      	movs	r3, #12
 8003200:	602b      	str	r3, [r5, #0]
 8003202:	e7d5      	b.n	80031b0 <_free_r+0x24>
 8003204:	6821      	ldr	r1, [r4, #0]
 8003206:	1860      	adds	r0, r4, r1
 8003208:	4283      	cmp	r3, r0
 800320a:	d103      	bne.n	8003214 <_free_r+0x88>
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	1841      	adds	r1, r0, r1
 8003212:	6021      	str	r1, [r4, #0]
 8003214:	6063      	str	r3, [r4, #4]
 8003216:	6054      	str	r4, [r2, #4]
 8003218:	e7ca      	b.n	80031b0 <_free_r+0x24>
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	200000d8 	.word	0x200000d8

08003220 <sbrk_aligned>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	4e0f      	ldr	r6, [pc, #60]	; (8003260 <sbrk_aligned+0x40>)
 8003224:	000d      	movs	r5, r1
 8003226:	6831      	ldr	r1, [r6, #0]
 8003228:	0004      	movs	r4, r0
 800322a:	2900      	cmp	r1, #0
 800322c:	d102      	bne.n	8003234 <sbrk_aligned+0x14>
 800322e:	f000 f8bf 	bl	80033b0 <_sbrk_r>
 8003232:	6030      	str	r0, [r6, #0]
 8003234:	0029      	movs	r1, r5
 8003236:	0020      	movs	r0, r4
 8003238:	f000 f8ba 	bl	80033b0 <_sbrk_r>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d00a      	beq.n	8003256 <sbrk_aligned+0x36>
 8003240:	2303      	movs	r3, #3
 8003242:	1cc5      	adds	r5, r0, #3
 8003244:	439d      	bics	r5, r3
 8003246:	42a8      	cmp	r0, r5
 8003248:	d007      	beq.n	800325a <sbrk_aligned+0x3a>
 800324a:	1a29      	subs	r1, r5, r0
 800324c:	0020      	movs	r0, r4
 800324e:	f000 f8af 	bl	80033b0 <_sbrk_r>
 8003252:	1c43      	adds	r3, r0, #1
 8003254:	d101      	bne.n	800325a <sbrk_aligned+0x3a>
 8003256:	2501      	movs	r5, #1
 8003258:	426d      	negs	r5, r5
 800325a:	0028      	movs	r0, r5
 800325c:	bd70      	pop	{r4, r5, r6, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	200000dc 	.word	0x200000dc

08003264 <_malloc_r>:
 8003264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003266:	2203      	movs	r2, #3
 8003268:	1ccb      	adds	r3, r1, #3
 800326a:	4393      	bics	r3, r2
 800326c:	3308      	adds	r3, #8
 800326e:	0006      	movs	r6, r0
 8003270:	001f      	movs	r7, r3
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d232      	bcs.n	80032dc <_malloc_r+0x78>
 8003276:	270c      	movs	r7, #12
 8003278:	42b9      	cmp	r1, r7
 800327a:	d831      	bhi.n	80032e0 <_malloc_r+0x7c>
 800327c:	0030      	movs	r0, r6
 800327e:	f000 f8a9 	bl	80033d4 <__malloc_lock>
 8003282:	4d32      	ldr	r5, [pc, #200]	; (800334c <_malloc_r+0xe8>)
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	001c      	movs	r4, r3
 8003288:	2c00      	cmp	r4, #0
 800328a:	d12e      	bne.n	80032ea <_malloc_r+0x86>
 800328c:	0039      	movs	r1, r7
 800328e:	0030      	movs	r0, r6
 8003290:	f7ff ffc6 	bl	8003220 <sbrk_aligned>
 8003294:	0004      	movs	r4, r0
 8003296:	1c43      	adds	r3, r0, #1
 8003298:	d11e      	bne.n	80032d8 <_malloc_r+0x74>
 800329a:	682c      	ldr	r4, [r5, #0]
 800329c:	0025      	movs	r5, r4
 800329e:	2d00      	cmp	r5, #0
 80032a0:	d14a      	bne.n	8003338 <_malloc_r+0xd4>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	0029      	movs	r1, r5
 80032a6:	18e3      	adds	r3, r4, r3
 80032a8:	0030      	movs	r0, r6
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	f000 f880 	bl	80033b0 <_sbrk_r>
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	4283      	cmp	r3, r0
 80032b4:	d143      	bne.n	800333e <_malloc_r+0xda>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	3703      	adds	r7, #3
 80032ba:	1aff      	subs	r7, r7, r3
 80032bc:	2303      	movs	r3, #3
 80032be:	439f      	bics	r7, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	2f0c      	cmp	r7, #12
 80032c4:	d200      	bcs.n	80032c8 <_malloc_r+0x64>
 80032c6:	270c      	movs	r7, #12
 80032c8:	0039      	movs	r1, r7
 80032ca:	0030      	movs	r0, r6
 80032cc:	f7ff ffa8 	bl	8003220 <sbrk_aligned>
 80032d0:	1c43      	adds	r3, r0, #1
 80032d2:	d034      	beq.n	800333e <_malloc_r+0xda>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	19df      	adds	r7, r3, r7
 80032d8:	6027      	str	r7, [r4, #0]
 80032da:	e013      	b.n	8003304 <_malloc_r+0xa0>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	dacb      	bge.n	8003278 <_malloc_r+0x14>
 80032e0:	230c      	movs	r3, #12
 80032e2:	2500      	movs	r5, #0
 80032e4:	6033      	str	r3, [r6, #0]
 80032e6:	0028      	movs	r0, r5
 80032e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	1bd1      	subs	r1, r2, r7
 80032ee:	d420      	bmi.n	8003332 <_malloc_r+0xce>
 80032f0:	290b      	cmp	r1, #11
 80032f2:	d917      	bls.n	8003324 <_malloc_r+0xc0>
 80032f4:	19e2      	adds	r2, r4, r7
 80032f6:	6027      	str	r7, [r4, #0]
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	d111      	bne.n	8003320 <_malloc_r+0xbc>
 80032fc:	602a      	str	r2, [r5, #0]
 80032fe:	6863      	ldr	r3, [r4, #4]
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	6053      	str	r3, [r2, #4]
 8003304:	0030      	movs	r0, r6
 8003306:	0025      	movs	r5, r4
 8003308:	f000 f86c 	bl	80033e4 <__malloc_unlock>
 800330c:	2207      	movs	r2, #7
 800330e:	350b      	adds	r5, #11
 8003310:	1d23      	adds	r3, r4, #4
 8003312:	4395      	bics	r5, r2
 8003314:	1aea      	subs	r2, r5, r3
 8003316:	429d      	cmp	r5, r3
 8003318:	d0e5      	beq.n	80032e6 <_malloc_r+0x82>
 800331a:	1b5b      	subs	r3, r3, r5
 800331c:	50a3      	str	r3, [r4, r2]
 800331e:	e7e2      	b.n	80032e6 <_malloc_r+0x82>
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e7ec      	b.n	80032fe <_malloc_r+0x9a>
 8003324:	6862      	ldr	r2, [r4, #4]
 8003326:	42a3      	cmp	r3, r4
 8003328:	d101      	bne.n	800332e <_malloc_r+0xca>
 800332a:	602a      	str	r2, [r5, #0]
 800332c:	e7ea      	b.n	8003304 <_malloc_r+0xa0>
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	e7e8      	b.n	8003304 <_malloc_r+0xa0>
 8003332:	0023      	movs	r3, r4
 8003334:	6864      	ldr	r4, [r4, #4]
 8003336:	e7a7      	b.n	8003288 <_malloc_r+0x24>
 8003338:	002c      	movs	r4, r5
 800333a:	686d      	ldr	r5, [r5, #4]
 800333c:	e7af      	b.n	800329e <_malloc_r+0x3a>
 800333e:	230c      	movs	r3, #12
 8003340:	0030      	movs	r0, r6
 8003342:	6033      	str	r3, [r6, #0]
 8003344:	f000 f84e 	bl	80033e4 <__malloc_unlock>
 8003348:	e7cd      	b.n	80032e6 <_malloc_r+0x82>
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	200000d8 	.word	0x200000d8

08003350 <_realloc_r>:
 8003350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003352:	0007      	movs	r7, r0
 8003354:	000e      	movs	r6, r1
 8003356:	0014      	movs	r4, r2
 8003358:	2900      	cmp	r1, #0
 800335a:	d105      	bne.n	8003368 <_realloc_r+0x18>
 800335c:	0011      	movs	r1, r2
 800335e:	f7ff ff81 	bl	8003264 <_malloc_r>
 8003362:	0005      	movs	r5, r0
 8003364:	0028      	movs	r0, r5
 8003366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003368:	2a00      	cmp	r2, #0
 800336a:	d103      	bne.n	8003374 <_realloc_r+0x24>
 800336c:	f7ff ff0e 	bl	800318c <_free_r>
 8003370:	0025      	movs	r5, r4
 8003372:	e7f7      	b.n	8003364 <_realloc_r+0x14>
 8003374:	f000 f83e 	bl	80033f4 <_malloc_usable_size_r>
 8003378:	9001      	str	r0, [sp, #4]
 800337a:	4284      	cmp	r4, r0
 800337c:	d803      	bhi.n	8003386 <_realloc_r+0x36>
 800337e:	0035      	movs	r5, r6
 8003380:	0843      	lsrs	r3, r0, #1
 8003382:	42a3      	cmp	r3, r4
 8003384:	d3ee      	bcc.n	8003364 <_realloc_r+0x14>
 8003386:	0021      	movs	r1, r4
 8003388:	0038      	movs	r0, r7
 800338a:	f7ff ff6b 	bl	8003264 <_malloc_r>
 800338e:	1e05      	subs	r5, r0, #0
 8003390:	d0e8      	beq.n	8003364 <_realloc_r+0x14>
 8003392:	9b01      	ldr	r3, [sp, #4]
 8003394:	0022      	movs	r2, r4
 8003396:	429c      	cmp	r4, r3
 8003398:	d900      	bls.n	800339c <_realloc_r+0x4c>
 800339a:	001a      	movs	r2, r3
 800339c:	0031      	movs	r1, r6
 800339e:	0028      	movs	r0, r5
 80033a0:	f7ff fed7 	bl	8003152 <memcpy>
 80033a4:	0031      	movs	r1, r6
 80033a6:	0038      	movs	r0, r7
 80033a8:	f7ff fef0 	bl	800318c <_free_r>
 80033ac:	e7da      	b.n	8003364 <_realloc_r+0x14>
	...

080033b0 <_sbrk_r>:
 80033b0:	2300      	movs	r3, #0
 80033b2:	b570      	push	{r4, r5, r6, lr}
 80033b4:	4d06      	ldr	r5, [pc, #24]	; (80033d0 <_sbrk_r+0x20>)
 80033b6:	0004      	movs	r4, r0
 80033b8:	0008      	movs	r0, r1
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	f7fd fb72 	bl	8000aa4 <_sbrk>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d103      	bne.n	80033cc <_sbrk_r+0x1c>
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d000      	beq.n	80033cc <_sbrk_r+0x1c>
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	200000e0 	.word	0x200000e0

080033d4 <__malloc_lock>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4802      	ldr	r0, [pc, #8]	; (80033e0 <__malloc_lock+0xc>)
 80033d8:	f000 f814 	bl	8003404 <__retarget_lock_acquire_recursive>
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	200000e4 	.word	0x200000e4

080033e4 <__malloc_unlock>:
 80033e4:	b510      	push	{r4, lr}
 80033e6:	4802      	ldr	r0, [pc, #8]	; (80033f0 <__malloc_unlock+0xc>)
 80033e8:	f000 f80d 	bl	8003406 <__retarget_lock_release_recursive>
 80033ec:	bd10      	pop	{r4, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	200000e4 	.word	0x200000e4

080033f4 <_malloc_usable_size_r>:
 80033f4:	1f0b      	subs	r3, r1, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1f18      	subs	r0, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	da01      	bge.n	8003402 <_malloc_usable_size_r+0xe>
 80033fe:	580b      	ldr	r3, [r1, r0]
 8003400:	18c0      	adds	r0, r0, r3
 8003402:	4770      	bx	lr

08003404 <__retarget_lock_acquire_recursive>:
 8003404:	4770      	bx	lr

08003406 <__retarget_lock_release_recursive>:
 8003406:	4770      	bx	lr

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
