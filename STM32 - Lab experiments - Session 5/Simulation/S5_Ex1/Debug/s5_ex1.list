
s5_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e8c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001f48  08001f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f88  08001f88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f88  08001f88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f88  08001f88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f88  08001f88  00011f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f8c  08001f8c  00011f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001f9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001f9c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f0c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174c  00000000  00000000  00029f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa18  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b131  00000000  00000000  00047560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0c74  00000000  00000000  00052691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002658  00000000  00000000  00103358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001f30 	.word	0x08001f30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001f30 	.word	0x08001f30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
TIM_HandleTypeDef htim2;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000220:	f000 f992 	bl	8000548 <HAL_Init>
  SystemClock_Config();
 8000224:	f000 f81a 	bl	800025c <SystemClock_Config>
  MX_GPIO_Init();
 8000228:	f000 f8b6 	bl	8000398 <MX_GPIO_Init>
  MX_TIM2_Init();
 800022c:	f000 f860 	bl	80002f0 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000230:	4b02      	ldr	r3, [pc, #8]	; (800023c <main+0x20>)
 8000232:	0018      	movs	r0, r3
 8000234:	f001 fa12 	bl	800165c <HAL_TIM_Base_Start_IT>
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	20000028 	.word	0x20000028

08000240 <HAL_TIM_PeriodElapsedCallback>:

  }

}
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef* htim)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000248:	23a0      	movs	r3, #160	; 0xa0
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2120      	movs	r1, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fc67 	bl	8000b22 <HAL_GPIO_TogglePin>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b095      	sub	sp, #84	; 0x54
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	2414      	movs	r4, #20
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	233c      	movs	r3, #60	; 0x3c
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f001 fe57 	bl	8001f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f001 fe50 	bl	8001f20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fc67 	bl	8000b58 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2202      	movs	r2, #2
 800028e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	0052      	lsls	r2, r2, #1
 8000296:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2240      	movs	r2, #64	; 0x40
 80002a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2200      	movs	r2, #0
 80002a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fc93 	bl	8000bd8 <HAL_RCC_OscConfig>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002b6:	f000 f8a5 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2207      	movs	r2, #7
 80002be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 ffdd 	bl	8001298 <HAL_RCC_ClockConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002e2:	f000 f88f 	bl	8000404 <Error_Handler>
  }
}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b015      	add	sp, #84	; 0x54
 80002ec:	bd90      	pop	{r4, r7, pc}
	...

080002f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f6:	2310      	movs	r3, #16
 80002f8:	18fb      	adds	r3, r7, r3
 80002fa:	0018      	movs	r0, r3
 80002fc:	2310      	movs	r3, #16
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f001 fe0d 	bl	8001f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	230c      	movs	r3, #12
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f001 fe06 	bl	8001f20 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_TIM2_Init+0xa4>)
 8000316:	2280      	movs	r2, #128	; 0x80
 8000318:	05d2      	lsls	r2, r2, #23
 800031a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM2_Init+0xa4>)
 800031e:	22fa      	movs	r2, #250	; 0xfa
 8000320:	0152      	lsls	r2, r2, #5
 8000322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM2_Init+0xa4>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM2_Init+0xa4>)
 800032c:	2264      	movs	r2, #100	; 0x64
 800032e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_TIM2_Init+0xa4>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_TIM2_Init+0xa4>)
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_TIM2_Init+0xa4>)
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f934 	bl	80015ac <HAL_TIM_Base_Init>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f85c 	bl	8000404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034c:	2110      	movs	r1, #16
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2280      	movs	r2, #128	; 0x80
 8000352:	0152      	lsls	r2, r2, #5
 8000354:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000356:	187a      	adds	r2, r7, r1
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_TIM2_Init+0xa4>)
 800035a:	0011      	movs	r1, r2
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fb11 	bl	8001984 <HAL_TIM_ConfigClockSource>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000366:	f000 f84d 	bl	8000404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000376:	1d3a      	adds	r2, r7, #4
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_TIM2_Init+0xa4>)
 800037a:	0011      	movs	r1, r2
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fd1d 	bl	8001dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000386:	f000 f83d 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b008      	add	sp, #32
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	20000028 	.word	0x20000028

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	0018      	movs	r0, r3
 80003a2:	2314      	movs	r3, #20
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f001 fdba 	bl	8001f20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_GPIO_Init+0x68>)
 80003ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_GPIO_Init+0x68>)
 80003b2:	2101      	movs	r1, #1
 80003b4:	430a      	orrs	r2, r1
 80003b6:	635a      	str	r2, [r3, #52]	; 0x34
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_GPIO_Init+0x68>)
 80003ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003bc:	2201      	movs	r2, #1
 80003be:	4013      	ands	r3, r2
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003c4:	23a0      	movs	r3, #160	; 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	2200      	movs	r2, #0
 80003ca:	2120      	movs	r1, #32
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fb8b 	bl	8000ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2220      	movs	r2, #32
 80003d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fa0c 	bl	8000810 <HAL_GPIO_Init>

}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b006      	add	sp, #24
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x44>)
 8000418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_MspInit+0x44>)
 800041c:	2101      	movs	r1, #1
 800041e:	430a      	orrs	r2, r1
 8000420:	641a      	str	r2, [r3, #64]	; 0x40
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x44>)
 8000424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <HAL_MspInit+0x44>)
 8000430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <HAL_MspInit+0x44>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0549      	lsls	r1, r1, #21
 8000438:	430a      	orrs	r2, r1
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <HAL_MspInit+0x44>)
 800043e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	055b      	lsls	r3, r3, #21
 8000444:	4013      	ands	r3, r2
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b002      	add	sp, #8
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	40021000 	.word	0x40021000

08000458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	429a      	cmp	r2, r3
 800046a:	d113      	bne.n	8000494 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <HAL_TIM_Base_MspInit+0x44>)
 800046e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_TIM_Base_MspInit+0x44>)
 8000472:	2101      	movs	r1, #1
 8000474:	430a      	orrs	r2, r1
 8000476:	63da      	str	r2, [r3, #60]	; 0x3c
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_TIM_Base_MspInit+0x44>)
 800047a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800047c:	2201      	movs	r2, #1
 800047e:	4013      	ands	r3, r2
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2100      	movs	r1, #0
 8000488:	200f      	movs	r0, #15
 800048a:	f000 f98f 	bl	80007ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800048e:	200f      	movs	r0, #15
 8000490:	f000 f9a1 	bl	80007d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b004      	add	sp, #16
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000

080004a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <NMI_Handler+0x4>

080004a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <HardFault_Handler+0x4>

080004ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f8aa 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <TIM2_IRQHandler+0x14>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f922 	bl	8001720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000028 	.word	0x20000028

080004e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	f7ff fff6 	bl	80004e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f001 fcd9 	bl	8001ed8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000526:	f7ff fe79 	bl	800021c <main>

0800052a <LoopForever>:

LoopForever:
  b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000538:	08001f90 	.word	0x08001f90
  ldr r2, =_sbss
 800053c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000540:	20000078 	.word	0x20000078

08000544 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_COMP_IRQHandler>
	...

08000548 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_Init+0x3c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_Init+0x3c>)
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	0049      	lsls	r1, r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000562:	2003      	movs	r0, #3
 8000564:	f000 f810 	bl	8000588 <HAL_InitTick>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d003      	beq.n	8000574 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	e001      	b.n	8000578 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f7ff ff4c 	bl	8000410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b002      	add	sp, #8
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40022000 	.word	0x40022000

08000588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000590:	230f      	movs	r3, #15
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <HAL_InitTick+0x88>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d02b      	beq.n	80005f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_InitTick+0x8c>)
 80005a2:	681c      	ldr	r4, [r3, #0]
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <HAL_InitTick+0x88>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	0019      	movs	r1, r3
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	0098      	lsls	r0, r3, #2
 80005ae:	f7ff fda9 	bl	8000104 <__udivsi3>
 80005b2:	0003      	movs	r3, r0
 80005b4:	0019      	movs	r1, r3
 80005b6:	0020      	movs	r0, r4
 80005b8:	f7ff fda4 	bl	8000104 <__udivsi3>
 80005bc:	0003      	movs	r3, r0
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 f919 	bl	80007f6 <HAL_SYSTICK_Config>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d112      	bne.n	80005ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d80a      	bhi.n	80005e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	2301      	movs	r3, #1
 80005d2:	425b      	negs	r3, r3
 80005d4:	2200      	movs	r2, #0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 f8e8 	bl	80007ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_InitTick+0x90>)
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e00d      	b.n	8000600 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	e008      	b.n	8000600 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ee:	230f      	movs	r3, #15
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e003      	b.n	8000600 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005f8:	230f      	movs	r3, #15
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000600:	230f      	movs	r3, #15
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b005      	add	sp, #20
 800060c:	bd90      	pop	{r4, r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000008 	.word	0x20000008
 8000614:	20000000 	.word	0x20000000
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	001a      	movs	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	18d2      	adds	r2, r2, r3
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <HAL_IncTick+0x20>)
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	20000008 	.word	0x20000008
 800063c:	20000074 	.word	0x20000074

08000640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000074 	.word	0x20000074

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	0002      	movs	r2, r0
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b7f      	cmp	r3, #127	; 0x7f
 8000666:	d809      	bhi.n	800067c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	001a      	movs	r2, r3
 800066e:	231f      	movs	r3, #31
 8000670:	401a      	ands	r2, r3
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_EnableIRQ+0x30>)
 8000674:	2101      	movs	r1, #1
 8000676:	4091      	lsls	r1, r2
 8000678:	000a      	movs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	0002      	movs	r2, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b7f      	cmp	r3, #127	; 0x7f
 800069c:	d828      	bhi.n	80006f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800069e:	4a2f      	ldr	r2, [pc, #188]	; (800075c <__NVIC_SetPriority+0xd4>)
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	089b      	lsrs	r3, r3, #2
 80006a8:	33c0      	adds	r3, #192	; 0xc0
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	589b      	ldr	r3, [r3, r2]
 80006ae:	1dfa      	adds	r2, r7, #7
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	0011      	movs	r1, r2
 80006b4:	2203      	movs	r2, #3
 80006b6:	400a      	ands	r2, r1
 80006b8:	00d2      	lsls	r2, r2, #3
 80006ba:	21ff      	movs	r1, #255	; 0xff
 80006bc:	4091      	lsls	r1, r2
 80006be:	000a      	movs	r2, r1
 80006c0:	43d2      	mvns	r2, r2
 80006c2:	401a      	ands	r2, r3
 80006c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	019b      	lsls	r3, r3, #6
 80006ca:	22ff      	movs	r2, #255	; 0xff
 80006cc:	401a      	ands	r2, r3
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	0018      	movs	r0, r3
 80006d4:	2303      	movs	r3, #3
 80006d6:	4003      	ands	r3, r0
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006dc:	481f      	ldr	r0, [pc, #124]	; (800075c <__NVIC_SetPriority+0xd4>)
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	089b      	lsrs	r3, r3, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	33c0      	adds	r3, #192	; 0xc0
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006ee:	e031      	b.n	8000754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <__NVIC_SetPriority+0xd8>)
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0019      	movs	r1, r3
 80006f8:	230f      	movs	r3, #15
 80006fa:	400b      	ands	r3, r1
 80006fc:	3b08      	subs	r3, #8
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	3306      	adds	r3, #6
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	18d3      	adds	r3, r2, r3
 8000706:	3304      	adds	r3, #4
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	0011      	movs	r1, r2
 8000710:	2203      	movs	r2, #3
 8000712:	400a      	ands	r2, r1
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	21ff      	movs	r1, #255	; 0xff
 8000718:	4091      	lsls	r1, r2
 800071a:	000a      	movs	r2, r1
 800071c:	43d2      	mvns	r2, r2
 800071e:	401a      	ands	r2, r3
 8000720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	019b      	lsls	r3, r3, #6
 8000726:	22ff      	movs	r2, #255	; 0xff
 8000728:	401a      	ands	r2, r3
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	0018      	movs	r0, r3
 8000730:	2303      	movs	r3, #3
 8000732:	4003      	ands	r3, r0
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <__NVIC_SetPriority+0xd8>)
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	001c      	movs	r4, r3
 8000740:	230f      	movs	r3, #15
 8000742:	4023      	ands	r3, r4
 8000744:	3b08      	subs	r3, #8
 8000746:	089b      	lsrs	r3, r3, #2
 8000748:	430a      	orrs	r2, r1
 800074a:	3306      	adds	r3, #6
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	18c3      	adds	r3, r0, r3
 8000750:	3304      	adds	r3, #4
 8000752:	601a      	str	r2, [r3, #0]
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b003      	add	sp, #12
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	045b      	lsls	r3, r3, #17
 8000774:	429a      	cmp	r2, r3
 8000776:	d301      	bcc.n	800077c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000778:	2301      	movs	r3, #1
 800077a:	e010      	b.n	800079e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <SysTick_Config+0x44>)
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	3a01      	subs	r2, #1
 8000782:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000784:	2301      	movs	r3, #1
 8000786:	425b      	negs	r3, r3
 8000788:	2103      	movs	r1, #3
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff7c 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x44>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b002      	add	sp, #8
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	210f      	movs	r1, #15
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	1c02      	adds	r2, r0, #0
 80007bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff ff5d 	bl	8000688 <__NVIC_SetPriority>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b004      	add	sp, #16
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	0002      	movs	r2, r0
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff ff33 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff ffaf 	bl	8000764 <SysTick_Config>
 8000806:	0003      	movs	r3, r0
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e14d      	b.n	8000abc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <HAL_GPIO_Init+0x28>
 8000836:	e13e      	b.n	8000ab6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2203      	movs	r2, #3
 800083e:	4013      	ands	r3, r2
 8000840:	2b01      	cmp	r3, #1
 8000842:	d005      	beq.n	8000850 <HAL_GPIO_Init+0x40>
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2203      	movs	r2, #3
 800084a:	4013      	ands	r3, r2
 800084c:	2b02      	cmp	r3, #2
 800084e:	d130      	bne.n	80008b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2203      	movs	r2, #3
 800085c:	409a      	lsls	r2, r3
 800085e:	0013      	movs	r3, r2
 8000860:	43da      	mvns	r2, r3
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	409a      	lsls	r2, r3
 8000872:	0013      	movs	r3, r2
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4313      	orrs	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000886:	2201      	movs	r2, #1
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	43da      	mvns	r2, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	2201      	movs	r2, #1
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2203      	movs	r2, #3
 80008b8:	4013      	ands	r3, r2
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d017      	beq.n	80008ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2203      	movs	r2, #3
 80008ca:	409a      	lsls	r2, r3
 80008cc:	0013      	movs	r3, r2
 80008ce:	43da      	mvns	r2, r3
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	409a      	lsls	r2, r3
 80008e0:	0013      	movs	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2203      	movs	r2, #3
 80008f4:	4013      	ands	r3, r2
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d123      	bne.n	8000942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	08da      	lsrs	r2, r3, #3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3208      	adds	r2, #8
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	58d3      	ldr	r3, [r2, r3]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2207      	movs	r2, #7
 800090c:	4013      	ands	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	43da      	mvns	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2107      	movs	r1, #7
 8000926:	400b      	ands	r3, r1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	6939      	ldr	r1, [r7, #16]
 8000940:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	409a      	lsls	r2, r3
 8000950:	0013      	movs	r3, r2
 8000952:	43da      	mvns	r2, r3
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2203      	movs	r2, #3
 8000960:	401a      	ands	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	23c0      	movs	r3, #192	; 0xc0
 800097c:	029b      	lsls	r3, r3, #10
 800097e:	4013      	ands	r3, r2
 8000980:	d100      	bne.n	8000984 <HAL_GPIO_Init+0x174>
 8000982:	e098      	b.n	8000ab6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000984:	4a53      	ldr	r2, [pc, #332]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3318      	adds	r3, #24
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	589b      	ldr	r3, [r3, r2]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	2203      	movs	r2, #3
 8000996:	4013      	ands	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	220f      	movs	r2, #15
 800099c:	409a      	lsls	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	43da      	mvns	r2, r3
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d019      	beq.n	80009e6 <HAL_GPIO_Init+0x1d6>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a48      	ldr	r2, [pc, #288]	; (8000ad8 <HAL_GPIO_Init+0x2c8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d013      	beq.n	80009e2 <HAL_GPIO_Init+0x1d2>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a47      	ldr	r2, [pc, #284]	; (8000adc <HAL_GPIO_Init+0x2cc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d00d      	beq.n	80009de <HAL_GPIO_Init+0x1ce>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a46      	ldr	r2, [pc, #280]	; (8000ae0 <HAL_GPIO_Init+0x2d0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d007      	beq.n	80009da <HAL_GPIO_Init+0x1ca>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a45      	ldr	r2, [pc, #276]	; (8000ae4 <HAL_GPIO_Init+0x2d4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_GPIO_Init+0x1c6>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e008      	b.n	80009e8 <HAL_GPIO_Init+0x1d8>
 80009d6:	2305      	movs	r3, #5
 80009d8:	e006      	b.n	80009e8 <HAL_GPIO_Init+0x1d8>
 80009da:	2303      	movs	r3, #3
 80009dc:	e004      	b.n	80009e8 <HAL_GPIO_Init+0x1d8>
 80009de:	2302      	movs	r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x1d8>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x1d8>
 80009e6:	2300      	movs	r3, #0
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	2103      	movs	r1, #3
 80009ec:	400a      	ands	r2, r1
 80009ee:	00d2      	lsls	r2, r2, #3
 80009f0:	4093      	lsls	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009f8:	4936      	ldr	r1, [pc, #216]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3318      	adds	r3, #24
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	035b      	lsls	r3, r3, #13
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43da      	mvns	r2, r3
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	039b      	lsls	r3, r3, #14
 8000a48:	4013      	ands	r3, r2
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a5c:	2384      	movs	r3, #132	; 0x84
 8000a5e:	58d3      	ldr	r3, [r2, r3]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	43da      	mvns	r2, r3
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a80:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a82:	2284      	movs	r2, #132	; 0x84
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	58d3      	ldr	r3, [r2, r3]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43da      	mvns	r2, r3
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	025b      	lsls	r3, r3, #9
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aae:	4909      	ldr	r1, [pc, #36]	; (8000ad4 <HAL_GPIO_Init+0x2c4>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	40da      	lsrs	r2, r3
 8000ac4:	1e13      	subs	r3, r2, #0
 8000ac6:	d000      	beq.n	8000aca <HAL_GPIO_Init+0x2ba>
 8000ac8:	e6aa      	b.n	8000820 <HAL_GPIO_Init+0x10>
  }
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b006      	add	sp, #24
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	50000400 	.word	0x50000400
 8000adc:	50000800 	.word	0x50000800
 8000ae0:	50000c00 	.word	0x50000c00
 8000ae4:	50001000 	.word	0x50001000

08000ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	0008      	movs	r0, r1
 8000af2:	0011      	movs	r1, r2
 8000af4:	1cbb      	adds	r3, r7, #2
 8000af6:	1c02      	adds	r2, r0, #0
 8000af8:	801a      	strh	r2, [r3, #0]
 8000afa:	1c7b      	adds	r3, r7, #1
 8000afc:	1c0a      	adds	r2, r1, #0
 8000afe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b00:	1c7b      	adds	r3, r7, #1
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d004      	beq.n	8000b12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b08:	1cbb      	adds	r3, r7, #2
 8000b0a:	881a      	ldrh	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b10:	e003      	b.n	8000b1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b12:	1cbb      	adds	r3, r7, #2
 8000b14:	881a      	ldrh	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	1cbb      	adds	r3, r7, #2
 8000b2e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b36:	1cbb      	adds	r3, r7, #2
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	041a      	lsls	r2, r3, #16
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	1cb9      	adds	r1, r7, #2
 8000b46:	8809      	ldrh	r1, [r1, #0]
 8000b48:	400b      	ands	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b004      	add	sp, #16
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	0019      	movs	r1, r3
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d11f      	bne.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	0013      	movs	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4912      	ldr	r1, [pc, #72]	; (8000bd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff faba 	bl	8000104 <__udivsi3>
 8000b90:	0003      	movs	r3, r0
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b96:	e008      	b.n	8000baa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	e001      	b.n	8000baa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e009      	b.n	8000bbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d0ed      	beq.n	8000b98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	fffff9ff 	.word	0xfffff9ff
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	000f4240 	.word	0x000f4240

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f000 fb50 	bl	800128c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d100      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x20>
 8000bf6:	e07c      	b.n	8000cf2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bf8:	4bc3      	ldr	r3, [pc, #780]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	2238      	movs	r2, #56	; 0x38
 8000bfe:	4013      	ands	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c02:	4bc1      	ldr	r3, [pc, #772]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	2203      	movs	r2, #3
 8000c08:	4013      	ands	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2b10      	cmp	r3, #16
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0x40>
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d002      	beq.n	8000c1e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d10b      	bne.n	8000c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1e:	4bba      	ldr	r3, [pc, #744]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	029b      	lsls	r3, r3, #10
 8000c26:	4013      	ands	r3, r2
 8000c28:	d062      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x118>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d15e      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e32a      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d107      	bne.n	8000c52 <HAL_RCC_OscConfig+0x7a>
 8000c42:	4bb1      	ldr	r3, [pc, #708]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4bb0      	ldr	r3, [pc, #704]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0249      	lsls	r1, r1, #9
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e020      	b.n	8000c94 <HAL_RCC_OscConfig+0xbc>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	02db      	lsls	r3, r3, #11
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d10e      	bne.n	8000c7c <HAL_RCC_OscConfig+0xa4>
 8000c5e:	4baa      	ldr	r3, [pc, #680]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4ba9      	ldr	r3, [pc, #676]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	02c9      	lsls	r1, r1, #11
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	4ba6      	ldr	r3, [pc, #664]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4ba5      	ldr	r3, [pc, #660]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xbc>
 8000c7c:	4ba2      	ldr	r3, [pc, #648]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4ba1      	ldr	r3, [pc, #644]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c82:	49a2      	ldr	r1, [pc, #648]	; (8000f0c <HAL_RCC_OscConfig+0x334>)
 8000c84:	400a      	ands	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	4b9f      	ldr	r3, [pc, #636]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b9e      	ldr	r3, [pc, #632]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000c8e:	49a0      	ldr	r1, [pc, #640]	; (8000f10 <HAL_RCC_OscConfig+0x338>)
 8000c90:	400a      	ands	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d014      	beq.n	8000cc6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fcd0 	bl	8000640 <HAL_GetTick>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca6:	f7ff fccb 	bl	8000640 <HAL_GetTick>
 8000caa:	0002      	movs	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b64      	cmp	r3, #100	; 0x64
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e2e9      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cb8:	4b93      	ldr	r3, [pc, #588]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	029b      	lsls	r3, r3, #10
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0xce>
 8000cc4:	e015      	b.n	8000cf2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fcbb 	bl	8000640 <HAL_GetTick>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcb6 	bl	8000640 <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e2d4      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ce2:	4b89      	ldr	r3, [pc, #548]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	029b      	lsls	r3, r3, #10
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0xf8>
 8000cee:	e000      	b.n	8000cf2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d100      	bne.n	8000cfe <HAL_RCC_OscConfig+0x126>
 8000cfc:	e099      	b.n	8000e32 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cfe:	4b82      	ldr	r3, [pc, #520]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2238      	movs	r2, #56	; 0x38
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d08:	4b7f      	ldr	r3, [pc, #508]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	d102      	bne.n	8000d1e <HAL_RCC_OscConfig+0x146>
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d002      	beq.n	8000d24 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d135      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d24:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d005      	beq.n	8000d3c <HAL_RCC_OscConfig+0x164>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e2a7      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3c:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a74      	ldr	r2, [pc, #464]	; (8000f14 <HAL_RCC_OscConfig+0x33c>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	0019      	movs	r1, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	021a      	lsls	r2, r3, #8
 8000d4c:	4b6e      	ldr	r3, [pc, #440]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d112      	bne.n	8000d7e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d58:	4b6b      	ldr	r3, [pc, #428]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a6e      	ldr	r2, [pc, #440]	; (8000f18 <HAL_RCC_OscConfig+0x340>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	0019      	movs	r1, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	4b68      	ldr	r3, [pc, #416]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d6c:	4b66      	ldr	r3, [pc, #408]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	0adb      	lsrs	r3, r3, #11
 8000d72:	2207      	movs	r2, #7
 8000d74:	4013      	ands	r3, r2
 8000d76:	4a69      	ldr	r2, [pc, #420]	; (8000f1c <HAL_RCC_OscConfig+0x344>)
 8000d78:	40da      	lsrs	r2, r3
 8000d7a:	4b69      	ldr	r3, [pc, #420]	; (8000f20 <HAL_RCC_OscConfig+0x348>)
 8000d7c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d7e:	4b69      	ldr	r3, [pc, #420]	; (8000f24 <HAL_RCC_OscConfig+0x34c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff fc00 	bl	8000588 <HAL_InitTick>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d051      	beq.n	8000e30 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e27d      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d030      	beq.n	8000dfa <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a5e      	ldr	r2, [pc, #376]	; (8000f18 <HAL_RCC_OscConfig+0x340>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	0019      	movs	r1, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000da8:	430a      	orrs	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000dac:	4b56      	ldr	r3, [pc, #344]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	0049      	lsls	r1, r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dba:	f7ff fc41 	bl	8000640 <HAL_GetTick>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fc3c 	bl	8000640 <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e25a      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de2:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4a4b      	ldr	r2, [pc, #300]	; (8000f14 <HAL_RCC_OscConfig+0x33c>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	0019      	movs	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	021a      	lsls	r2, r3, #8
 8000df2:	4b45      	ldr	r3, [pc, #276]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000df4:	430a      	orrs	r2, r1
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	e01b      	b.n	8000e32 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e00:	4949      	ldr	r1, [pc, #292]	; (8000f28 <HAL_RCC_OscConfig+0x350>)
 8000e02:	400a      	ands	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e06:	f7ff fc1b 	bl	8000640 <HAL_GetTick>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc16 	bl	8000640 <HAL_GetTick>
 8000e14:	0002      	movs	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e234      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e22:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x238>
 8000e2e:	e000      	b.n	8000e32 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2208      	movs	r2, #8
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d047      	beq.n	8000ecc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2238      	movs	r2, #56	; 0x38
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b18      	cmp	r3, #24
 8000e46:	d10a      	bne.n	8000e5e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d03c      	beq.n	8000ecc <HAL_RCC_OscConfig+0x2f4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d138      	bne.n	8000ecc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e216      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d019      	beq.n	8000e9a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e72:	f7ff fbe5 	bl	8000640 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fbe0 	bl	8000640 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e1fe      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	2202      	movs	r2, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	d0f1      	beq.n	8000e7c <HAL_RCC_OscConfig+0x2a4>
 8000e98:	e018      	b.n	8000ecc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000e9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea6:	f7ff fbcb 	bl	8000640 <HAL_GetTick>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fbc6 	bl	8000640 <HAL_GetTick>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e1e4      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d1f1      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d100      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x300>
 8000ed6:	e0c7      	b.n	8001068 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed8:	231f      	movs	r3, #31
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ee0:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2238      	movs	r2, #56	; 0x38
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b20      	cmp	r3, #32
 8000eea:	d11f      	bne.n	8000f2c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_RCC_OscConfig+0x330>)
 8000eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d100      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x320>
 8000ef6:	e0b7      	b.n	8001068 <HAL_RCC_OscConfig+0x490>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d000      	beq.n	8000f02 <HAL_RCC_OscConfig+0x32a>
 8000f00:	e0b2      	b.n	8001068 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e1c2      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	fffeffff 	.word	0xfffeffff
 8000f10:	fffbffff 	.word	0xfffbffff
 8000f14:	ffff80ff 	.word	0xffff80ff
 8000f18:	ffffc7ff 	.word	0xffffc7ff
 8000f1c:	00f42400 	.word	0x00f42400
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004
 8000f28:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f2c:	4bb5      	ldr	r3, [pc, #724]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	055b      	lsls	r3, r3, #21
 8000f34:	4013      	ands	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_RCC_OscConfig+0x364>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x366>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d011      	beq.n	8000f66 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4bb0      	ldr	r3, [pc, #704]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f46:	4baf      	ldr	r3, [pc, #700]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	0549      	lsls	r1, r1, #21
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f50:	4bac      	ldr	r3, [pc, #688]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	055b      	lsls	r3, r3, #21
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000f5e:	231f      	movs	r3, #31
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f66:	4ba8      	ldr	r3, [pc, #672]	; (8001208 <HAL_RCC_OscConfig+0x630>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d11a      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f72:	4ba5      	ldr	r3, [pc, #660]	; (8001208 <HAL_RCC_OscConfig+0x630>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4ba4      	ldr	r3, [pc, #656]	; (8001208 <HAL_RCC_OscConfig+0x630>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	0049      	lsls	r1, r1, #1
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb5e 	bl	8000640 <HAL_GetTick>
 8000f84:	0003      	movs	r3, r0
 8000f86:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8a:	f7ff fb59 	bl	8000640 <HAL_GetTick>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e177      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f9c:	4b9a      	ldr	r3, [pc, #616]	; (8001208 <HAL_RCC_OscConfig+0x630>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3e6>
 8000fb0:	4b94      	ldr	r3, [pc, #592]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fb4:	4b93      	ldr	r3, [pc, #588]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fbc:	e01c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x420>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x408>
 8000fc6:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fca:	4b8e      	ldr	r3, [pc, #568]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fcc:	2104      	movs	r1, #4
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fd2:	4b8c      	ldr	r3, [pc, #560]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fd6:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fde:	e00b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x420>
 8000fe0:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fe4:	4b87      	ldr	r3, [pc, #540]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	65da      	str	r2, [r3, #92]	; 0x5c
 8000fec:	4b85      	ldr	r3, [pc, #532]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ff0:	4b84      	ldr	r3, [pc, #528]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d014      	beq.n	800102a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb1e 	bl	8000640 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001008:	e009      	b.n	800101e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fb19 	bl	8000640 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	4a7d      	ldr	r2, [pc, #500]	; (800120c <HAL_RCC_OscConfig+0x634>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e136      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800101e:	4b79      	ldr	r3, [pc, #484]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001022:	2202      	movs	r2, #2
 8001024:	4013      	ands	r3, r2
 8001026:	d0f0      	beq.n	800100a <HAL_RCC_OscConfig+0x432>
 8001028:	e013      	b.n	8001052 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fb09 	bl	8000640 <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001032:	e009      	b.n	8001048 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001034:	f7ff fb04 	bl	8000640 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	4a73      	ldr	r2, [pc, #460]	; (800120c <HAL_RCC_OscConfig+0x634>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e121      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001048:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800104a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104c:	2202      	movs	r2, #2
 800104e:	4013      	ands	r3, r2
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001052:	231f      	movs	r3, #31
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800105e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001060:	4b68      	ldr	r3, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001062:	496b      	ldr	r1, [pc, #428]	; (8001210 <HAL_RCC_OscConfig+0x638>)
 8001064:	400a      	ands	r2, r1
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2220      	movs	r2, #32
 800106e:	4013      	ands	r3, r2
 8001070:	d039      	beq.n	80010e6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d01b      	beq.n	80010b2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800107a:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b61      	ldr	r3, [pc, #388]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	03c9      	lsls	r1, r1, #15
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001088:	f7ff fada 	bl	8000640 <HAL_GetTick>
 800108c:	0003      	movs	r3, r0
 800108e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001092:	f7ff fad5 	bl	8000640 <HAL_GetTick>
 8001096:	0002      	movs	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e0f3      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80010a4:	4b57      	ldr	r3, [pc, #348]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	4013      	ands	r3, r2
 80010ae:	d0f0      	beq.n	8001092 <HAL_RCC_OscConfig+0x4ba>
 80010b0:	e019      	b.n	80010e6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010b2:	4b54      	ldr	r3, [pc, #336]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80010b8:	4956      	ldr	r1, [pc, #344]	; (8001214 <HAL_RCC_OscConfig+0x63c>)
 80010ba:	400a      	ands	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010be:	f7ff fabf 	bl	8000640 <HAL_GetTick>
 80010c2:	0003      	movs	r3, r0
 80010c4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010c8:	f7ff faba 	bl	8000640 <HAL_GetTick>
 80010cc:	0002      	movs	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e0d8      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	041b      	lsls	r3, r3, #16
 80010e2:	4013      	ands	r3, r2
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <HAL_RCC_OscConfig+0x518>
 80010ee:	e0cc      	b.n	800128a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2238      	movs	r2, #56	; 0x38
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x526>
 80010fc:	e07b      	b.n	80011f6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d156      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800110c:	4942      	ldr	r1, [pc, #264]	; (8001218 <HAL_RCC_OscConfig+0x640>)
 800110e:	400a      	ands	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001112:	f7ff fa95 	bl	8000640 <HAL_GetTick>
 8001116:	0003      	movs	r3, r0
 8001118:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fa90 	bl	8000640 <HAL_GetTick>
 8001120:	0002      	movs	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e0ae      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800112e:	4b35      	ldr	r3, [pc, #212]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	049b      	lsls	r3, r3, #18
 8001136:	4013      	ands	r3, r2
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113a:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	4a37      	ldr	r2, [pc, #220]	; (800121c <HAL_RCC_OscConfig+0x644>)
 8001140:	4013      	ands	r3, r2
 8001142:	0019      	movs	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	431a      	orrs	r2, r3
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800116a:	430a      	orrs	r2, r1
 800116c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0449      	lsls	r1, r1, #17
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	0549      	lsls	r1, r1, #21
 8001186:	430a      	orrs	r2, r1
 8001188:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fa59 	bl	8000640 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff fa54 	bl	8000640 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e072      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	049b      	lsls	r3, r3, #18
 80011ae:	4013      	ands	r3, r2
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x5bc>
 80011b2:	e06a      	b.n	800128a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80011ba:	4917      	ldr	r1, [pc, #92]	; (8001218 <HAL_RCC_OscConfig+0x640>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fa3e 	bl	8000640 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ca:	f7ff fa39 	bl	8000640 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e057      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	049b      	lsls	r3, r3, #18
 80011e4:	4013      	ands	r3, r2
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_RCC_OscConfig+0x62c>)
 80011ee:	490c      	ldr	r1, [pc, #48]	; (8001220 <HAL_RCC_OscConfig+0x648>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	e049      	b.n	800128a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d112      	bne.n	8001224 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e044      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40021000 	.word	0x40021000
 8001208:	40007000 	.word	0x40007000
 800120c:	00001388 	.word	0x00001388
 8001210:	efffffff 	.word	0xefffffff
 8001214:	ffbfffff 	.word	0xffbfffff
 8001218:	feffffff 	.word	0xfeffffff
 800121c:	11c1808c 	.word	0x11c1808c
 8001220:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_RCC_OscConfig+0x6bc>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2203      	movs	r2, #3
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	429a      	cmp	r2, r3
 8001236:	d126      	bne.n	8001286 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2270      	movs	r2, #112	; 0x70
 800123c:	401a      	ands	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d11f      	bne.n	8001286 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	23fe      	movs	r3, #254	; 0xfe
 800124a:	01db      	lsls	r3, r3, #7
 800124c:	401a      	ands	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d116      	bne.n	8001286 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	23f8      	movs	r3, #248	; 0xf8
 800125c:	039b      	lsls	r3, r3, #14
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001264:	429a      	cmp	r2, r3
 8001266:	d10e      	bne.n	8001286 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	23e0      	movs	r3, #224	; 0xe0
 800126c:	051b      	lsls	r3, r3, #20
 800126e:	401a      	ands	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001274:	429a      	cmp	r2, r3
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	0f5b      	lsrs	r3, r3, #29
 800127c:	075a      	lsls	r2, r3, #29
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b008      	add	sp, #32
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0e9      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2207      	movs	r2, #7
 80012b2:	4013      	ands	r3, r2
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d91e      	bls.n	80012f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b73      	ldr	r3, [pc, #460]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2207      	movs	r2, #7
 80012c0:	4393      	bics	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	4b70      	ldr	r3, [pc, #448]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012cc:	f7ff f9b8 	bl	8000640 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012d4:	e009      	b.n	80012ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d6:	f7ff f9b3 	bl	8000640 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4a6a      	ldr	r2, [pc, #424]	; (800148c <HAL_RCC_ClockConfig+0x1f4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e0ca      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012ea:	4b67      	ldr	r3, [pc, #412]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2207      	movs	r2, #7
 80012f0:	4013      	ands	r3, r2
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1ee      	bne.n	80012d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d015      	beq.n	800132e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2204      	movs	r2, #4
 8001308:	4013      	ands	r3, r2
 800130a:	d006      	beq.n	800131a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800130c:	4b60      	ldr	r3, [pc, #384]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 8001312:	21e0      	movs	r1, #224	; 0xe0
 8001314:	01c9      	lsls	r1, r1, #7
 8001316:	430a      	orrs	r2, r1
 8001318:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800131a:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <HAL_RCC_ClockConfig+0x1fc>)
 8001320:	4013      	ands	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800132a:	430a      	orrs	r2, r1
 800132c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2201      	movs	r2, #1
 8001334:	4013      	ands	r3, r2
 8001336:	d057      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d107      	bne.n	8001350 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	4013      	ands	r3, r2
 800134a:	d12b      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e097      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d107      	bne.n	8001368 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	049b      	lsls	r3, r3, #18
 8001360:	4013      	ands	r3, r2
 8001362:	d11f      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e08b      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d107      	bne.n	8001380 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001370:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4013      	ands	r3, r2
 800137a:	d113      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e07f      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d106      	bne.n	8001396 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d108      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e074      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e06d      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2207      	movs	r2, #7
 80013aa:	4393      	bics	r3, r2
 80013ac:	0019      	movs	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013b8:	f7ff f942 	bl	8000640 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c0:	e009      	b.n	80013d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c2:	f7ff f93d 	bl	8000640 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4a2f      	ldr	r2, [pc, #188]	; (800148c <HAL_RCC_ClockConfig+0x1f4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e054      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2238      	movs	r2, #56	; 0x38
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1ec      	bne.n	80013c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d21e      	bcs.n	8001434 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2207      	movs	r2, #7
 80013fc:	4393      	bics	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001408:	f7ff f91a 	bl	8000640 <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001410:	e009      	b.n	8001426 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001412:	f7ff f915 	bl	8000640 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a1b      	ldr	r2, [pc, #108]	; (800148c <HAL_RCC_ClockConfig+0x1f4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e02c      	b.n	8001480 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_RCC_ClockConfig+0x1f0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2207      	movs	r2, #7
 800142c:	4013      	ands	r3, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d1ee      	bne.n	8001412 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2204      	movs	r2, #4
 800143a:	4013      	ands	r3, r2
 800143c:	d009      	beq.n	8001452 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <HAL_RCC_ClockConfig+0x200>)
 8001444:	4013      	ands	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001452:	f000 f829 	bl	80014a8 <HAL_RCC_GetSysClockFreq>
 8001456:	0001      	movs	r1, r0
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_RCC_ClockConfig+0x1f8>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	220f      	movs	r2, #15
 8001460:	401a      	ands	r2, r3
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_RCC_ClockConfig+0x204>)
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	58d3      	ldr	r3, [r2, r3]
 8001468:	221f      	movs	r2, #31
 800146a:	4013      	ands	r3, r2
 800146c:	000a      	movs	r2, r1
 800146e:	40da      	lsrs	r2, r3
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_ClockConfig+0x208>)
 8001472:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_ClockConfig+0x20c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff f885 	bl	8000588 <HAL_InitTick>
 800147e:	0003      	movs	r3, r0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40022000 	.word	0x40022000
 800148c:	00001388 	.word	0x00001388
 8001490:	40021000 	.word	0x40021000
 8001494:	fffff0ff 	.word	0xfffff0ff
 8001498:	ffff8fff 	.word	0xffff8fff
 800149c:	08001f48 	.word	0x08001f48
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2238      	movs	r2, #56	; 0x38
 80014b4:	4013      	ands	r3, r2
 80014b6:	d10f      	bne.n	80014d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0adb      	lsrs	r3, r3, #11
 80014be:	2207      	movs	r2, #7
 80014c0:	4013      	ands	r3, r2
 80014c2:	2201      	movs	r2, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	4835      	ldr	r0, [pc, #212]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014ce:	f7fe fe19 	bl	8000104 <__udivsi3>
 80014d2:	0003      	movs	r3, r0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	e05d      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2238      	movs	r2, #56	; 0x38
 80014de:	4013      	ands	r3, r2
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d102      	bne.n	80014ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	e054      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2238      	movs	r2, #56	; 0x38
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d138      	bne.n	8001568 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2203      	movs	r2, #3
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	2207      	movs	r2, #7
 8001508:	4013      	ands	r3, r2
 800150a:	3301      	adds	r3, #1
 800150c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	4824      	ldr	r0, [pc, #144]	; (80015a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001518:	f7fe fdf4 	bl	8000104 <__udivsi3>
 800151c:	0003      	movs	r3, r0
 800151e:	0019      	movs	r1, r3
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	227f      	movs	r2, #127	; 0x7f
 8001528:	4013      	ands	r3, r2
 800152a:	434b      	muls	r3, r1
 800152c:	617b      	str	r3, [r7, #20]
        break;
 800152e:	e00d      	b.n	800154c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	481c      	ldr	r0, [pc, #112]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001534:	f7fe fde6 	bl	8000104 <__udivsi3>
 8001538:	0003      	movs	r3, r0
 800153a:	0019      	movs	r1, r3
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	227f      	movs	r2, #127	; 0x7f
 8001544:	4013      	ands	r3, r2
 8001546:	434b      	muls	r3, r1
 8001548:	617b      	str	r3, [r7, #20]
        break;
 800154a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0f5b      	lsrs	r3, r3, #29
 8001552:	2207      	movs	r2, #7
 8001554:	4013      	ands	r3, r2
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7fe fdd1 	bl	8000104 <__udivsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e015      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2238      	movs	r2, #56	; 0x38
 800156e:	4013      	ands	r3, r2
 8001570:	2b20      	cmp	r3, #32
 8001572:	d103      	bne.n	800157c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e00b      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2238      	movs	r2, #56	; 0x38
 8001582:	4013      	ands	r3, r2
 8001584:	2b18      	cmp	r3, #24
 8001586:	d103      	bne.n	8001590 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001588:	23fa      	movs	r3, #250	; 0xfa
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e001      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001594:	693b      	ldr	r3, [r7, #16]
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b006      	add	sp, #24
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40021000 	.word	0x40021000
 80015a4:	00f42400 	.word	0x00f42400
 80015a8:	007a1200 	.word	0x007a1200

080015ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e04a      	b.n	8001654 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	223d      	movs	r2, #61	; 0x3d
 80015c2:	5c9b      	ldrb	r3, [r3, r2]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d107      	bne.n	80015da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	223c      	movs	r2, #60	; 0x3c
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7fe ff3f 	bl	8000458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	223d      	movs	r2, #61	; 0x3d
 80015de:	2102      	movs	r1, #2
 80015e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	0019      	movs	r1, r3
 80015ec:	0010      	movs	r0, r2
 80015ee:	f000 fabf 	bl	8001b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2248      	movs	r2, #72	; 0x48
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	223e      	movs	r2, #62	; 0x3e
 80015fe:	2101      	movs	r1, #1
 8001600:	5499      	strb	r1, [r3, r2]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	223f      	movs	r2, #63	; 0x3f
 8001606:	2101      	movs	r1, #1
 8001608:	5499      	strb	r1, [r3, r2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2241      	movs	r2, #65	; 0x41
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2242      	movs	r2, #66	; 0x42
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2243      	movs	r2, #67	; 0x43
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2244      	movs	r2, #68	; 0x44
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2245      	movs	r2, #69	; 0x45
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2246      	movs	r2, #70	; 0x46
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2247      	movs	r2, #71	; 0x47
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	223d      	movs	r2, #61	; 0x3d
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	223d      	movs	r2, #61	; 0x3d
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d001      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e047      	b.n	8001704 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	223d      	movs	r2, #61	; 0x3d
 8001678:	2102      	movs	r1, #2
 800167a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_TIM_Base_Start_IT+0xb0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d014      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x64>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	05db      	lsls	r3, r3, #23
 800169e:	429a      	cmp	r2, r3
 80016a0:	d00e      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x64>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <HAL_TIM_Base_Start_IT+0xb4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d009      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x64>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_TIM_Base_Start_IT+0xb8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d004      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x64>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_TIM_Base_Start_IT+0xbc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d116      	bne.n	80016ee <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_TIM_Base_Start_IT+0xc0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d016      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0xa4>
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	429a      	cmp	r2, r3
 80016da:	d011      	beq.n	8001700 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2101      	movs	r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ec:	e008      	b.n	8001700 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e000      	b.n	8001702 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001700:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40012c00 	.word	0x40012c00
 8001710:	40000400 	.word	0x40000400
 8001714:	40000800 	.word	0x40000800
 8001718:	40014000 	.word	0x40014000
 800171c:	00010007 	.word	0x00010007

08001720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d124      	bne.n	8001780 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	2b02      	cmp	r3, #2
 8001742:	d11d      	bne.n	8001780 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2203      	movs	r2, #3
 800174a:	4252      	negs	r2, r2
 800174c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	d004      	beq.n	800176a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	0018      	movs	r0, r3
 8001764:	f000 f9ec 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 8001768:	e007      	b.n	800177a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f9df 	bl	8001b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 f9eb 	bl	8001b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2204      	movs	r2, #4
 8001788:	4013      	ands	r3, r2
 800178a:	2b04      	cmp	r3, #4
 800178c:	d125      	bne.n	80017da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2204      	movs	r2, #4
 8001796:	4013      	ands	r3, r2
 8001798:	2b04      	cmp	r3, #4
 800179a:	d11e      	bne.n	80017da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2205      	movs	r2, #5
 80017a2:	4252      	negs	r2, r2
 80017a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	23c0      	movs	r3, #192	; 0xc0
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d004      	beq.n	80017c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 f9bf 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 80017c2:	e007      	b.n	80017d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 f9b2 	bl	8001b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f9be 	bl	8001b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2208      	movs	r2, #8
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d124      	bne.n	8001832 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2208      	movs	r2, #8
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d11d      	bne.n	8001832 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2209      	movs	r2, #9
 80017fc:	4252      	negs	r2, r2
 80017fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2204      	movs	r2, #4
 8001804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2203      	movs	r2, #3
 800180e:	4013      	ands	r3, r2
 8001810:	d004      	beq.n	800181c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f000 f993 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 800181a:	e007      	b.n	800182c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f986 	bl	8001b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f000 f992 	bl	8001b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2210      	movs	r2, #16
 800183a:	4013      	ands	r3, r2
 800183c:	2b10      	cmp	r3, #16
 800183e:	d125      	bne.n	800188c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2210      	movs	r2, #16
 8001848:	4013      	ands	r3, r2
 800184a:	2b10      	cmp	r3, #16
 800184c:	d11e      	bne.n	800188c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2211      	movs	r2, #17
 8001854:	4252      	negs	r2, r2
 8001856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2208      	movs	r2, #8
 800185c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	23c0      	movs	r3, #192	; 0xc0
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d004      	beq.n	8001876 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f966 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 8001874:	e007      	b.n	8001886 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f959 	bl	8001b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f000 f965 	bl	8001b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	2b01      	cmp	r3, #1
 8001898:	d10f      	bne.n	80018ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2202      	movs	r2, #2
 80018ae:	4252      	negs	r2, r2
 80018b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7fe fcc3 	bl	8000240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b80      	cmp	r3, #128	; 0x80
 80018c6:	d10f      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b80      	cmp	r3, #128	; 0x80
 80018d4:	d108      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2281      	movs	r2, #129	; 0x81
 80018dc:	4252      	negs	r2, r2
 80018de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fae8 	bl	8001eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	401a      	ands	r2, r3
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10e      	bne.n	800191a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	4013      	ands	r3, r2
 8001906:	2b80      	cmp	r3, #128	; 0x80
 8001908:	d107      	bne.n	800191a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_TIM_IRQHandler+0x260>)
 8001910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 fad7 	bl	8001ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	4013      	ands	r3, r2
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d10f      	bne.n	8001948 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2240      	movs	r2, #64	; 0x40
 8001930:	4013      	ands	r3, r2
 8001932:	2b40      	cmp	r3, #64	; 0x40
 8001934:	d108      	bne.n	8001948 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2241      	movs	r2, #65	; 0x41
 800193c:	4252      	negs	r2, r2
 800193e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f90c 	bl	8001b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2220      	movs	r2, #32
 8001950:	4013      	ands	r3, r2
 8001952:	2b20      	cmp	r3, #32
 8001954:	d10f      	bne.n	8001976 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2220      	movs	r2, #32
 800195e:	4013      	ands	r3, r2
 8001960:	2b20      	cmp	r3, #32
 8001962:	d108      	bne.n	8001976 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2221      	movs	r2, #33	; 0x21
 800196a:	4252      	negs	r2, r2
 800196c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 fa99 	bl	8001ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	fffffeff 	.word	0xfffffeff

08001984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223c      	movs	r2, #60	; 0x3c
 800199a:	5c9b      	ldrb	r3, [r3, r2]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_TIM_ConfigClockSource+0x20>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e0bc      	b.n	8001b1e <HAL_TIM_ConfigClockSource+0x19a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	223c      	movs	r2, #60	; 0x3c
 80019a8:	2101      	movs	r1, #1
 80019aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	223d      	movs	r2, #61	; 0x3d
 80019b0:	2102      	movs	r1, #2
 80019b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4a5a      	ldr	r2, [pc, #360]	; (8001b28 <HAL_TIM_ConfigClockSource+0x1a4>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4a59      	ldr	r2, [pc, #356]	; (8001b2c <HAL_TIM_ConfigClockSource+0x1a8>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	0192      	lsls	r2, r2, #6
 80019dc:	4293      	cmp	r3, r2
 80019de:	d040      	beq.n	8001a62 <HAL_TIM_ConfigClockSource+0xde>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	0192      	lsls	r2, r2, #6
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d900      	bls.n	80019ea <HAL_TIM_ConfigClockSource+0x66>
 80019e8:	e088      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	0152      	lsls	r2, r2, #5
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d100      	bne.n	80019f4 <HAL_TIM_ConfigClockSource+0x70>
 80019f2:	e088      	b.n	8001b06 <HAL_TIM_ConfigClockSource+0x182>
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	0152      	lsls	r2, r2, #5
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d900      	bls.n	80019fe <HAL_TIM_ConfigClockSource+0x7a>
 80019fc:	e07e      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 80019fe:	2b70      	cmp	r3, #112	; 0x70
 8001a00:	d018      	beq.n	8001a34 <HAL_TIM_ConfigClockSource+0xb0>
 8001a02:	d900      	bls.n	8001a06 <HAL_TIM_ConfigClockSource+0x82>
 8001a04:	e07a      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 8001a06:	2b60      	cmp	r3, #96	; 0x60
 8001a08:	d04f      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x126>
 8001a0a:	d900      	bls.n	8001a0e <HAL_TIM_ConfigClockSource+0x8a>
 8001a0c:	e076      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 8001a0e:	2b50      	cmp	r3, #80	; 0x50
 8001a10:	d03b      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x106>
 8001a12:	d900      	bls.n	8001a16 <HAL_TIM_ConfigClockSource+0x92>
 8001a14:	e072      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 8001a16:	2b40      	cmp	r3, #64	; 0x40
 8001a18:	d057      	beq.n	8001aca <HAL_TIM_ConfigClockSource+0x146>
 8001a1a:	d900      	bls.n	8001a1e <HAL_TIM_ConfigClockSource+0x9a>
 8001a1c:	e06e      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 8001a1e:	2b30      	cmp	r3, #48	; 0x30
 8001a20:	d063      	beq.n	8001aea <HAL_TIM_ConfigClockSource+0x166>
 8001a22:	d86b      	bhi.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d060      	beq.n	8001aea <HAL_TIM_ConfigClockSource+0x166>
 8001a28:	d868      	bhi.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d05d      	beq.n	8001aea <HAL_TIM_ConfigClockSource+0x166>
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d05b      	beq.n	8001aea <HAL_TIM_ConfigClockSource+0x166>
 8001a32:	e063      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f000 f99a 	bl	8001d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2277      	movs	r2, #119	; 0x77
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	609a      	str	r2, [r3, #8]
      break;
 8001a60:	e052      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6899      	ldr	r1, [r3, #8]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f000 f983 	bl	8001d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	01c9      	lsls	r1, r1, #7
 8001a84:	430a      	orrs	r2, r1
 8001a86:	609a      	str	r2, [r3, #8]
      break;
 8001a88:	e03e      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	001a      	movs	r2, r3
 8001a98:	f000 f8f4 	bl	8001c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2150      	movs	r1, #80	; 0x50
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f94e 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001aa8:	e02e      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6859      	ldr	r1, [r3, #4]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	f000 f912 	bl	8001ce0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2160      	movs	r1, #96	; 0x60
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 f93e 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001ac8:	e01e      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	f000 f8d4 	bl	8001c84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 f92e 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001ae8:	e00e      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	0019      	movs	r1, r3
 8001af4:	0010      	movs	r0, r2
 8001af6:	f000 f925 	bl	8001d44 <TIM_ITRx_SetConfig>
      break;
 8001afa:	e005      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001afc:	230f      	movs	r3, #15
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
      break;
 8001b04:	e000      	b.n	8001b08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b06:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	223d      	movs	r2, #61	; 0x3d
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	223c      	movs	r2, #60	; 0x3c
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

  return status;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	ffceff88 	.word	0xffceff88
 8001b2c:	ffff00ff 	.word	0xffff00ff

08001b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <TIM_Base_SetConfig+0xf4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00c      	beq.n	8001ba2 <TIM_Base_SetConfig+0x32>
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d007      	beq.n	8001ba2 <TIM_Base_SetConfig+0x32>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <TIM_Base_SetConfig+0xf8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <TIM_Base_SetConfig+0x32>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <TIM_Base_SetConfig+0xfc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d108      	bne.n	8001bb4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2270      	movs	r2, #112	; 0x70
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <TIM_Base_SetConfig+0xf4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01c      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d017      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <TIM_Base_SetConfig+0xf8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <TIM_Base_SetConfig+0xfc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00f      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <TIM_Base_SetConfig+0x100>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00b      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <TIM_Base_SetConfig+0x104>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <TIM_Base_SetConfig+0x108>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <TIM_Base_SetConfig+0x86>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <TIM_Base_SetConfig+0x10c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d108      	bne.n	8001c08 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <TIM_Base_SetConfig+0x110>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	001a      	movs	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <TIM_Base_SetConfig+0xf4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00b      	beq.n	8001c4e <TIM_Base_SetConfig+0xde>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <TIM_Base_SetConfig+0x104>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <TIM_Base_SetConfig+0xde>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <TIM_Base_SetConfig+0x108>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d003      	beq.n	8001c4e <TIM_Base_SetConfig+0xde>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <TIM_Base_SetConfig+0x10c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d103      	bne.n	8001c56 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	615a      	str	r2, [r3, #20]
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b004      	add	sp, #16
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800
 8001c70:	40002000 	.word	0x40002000
 8001c74:	40014000 	.word	0x40014000
 8001c78:	40014400 	.word	0x40014400
 8001c7c:	40014800 	.word	0x40014800
 8001c80:	fffffcff 	.word	0xfffffcff

08001c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	22f0      	movs	r2, #240	; 0xf0
 8001cae:	4393      	bics	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	621a      	str	r2, [r3, #32]
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b006      	add	sp, #24
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <TIM_TI2_ConfigInputStage+0x60>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	031b      	lsls	r3, r3, #12
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	22a0      	movs	r2, #160	; 0xa0
 8001d1c:	4393      	bics	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	621a      	str	r2, [r3, #32]
}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b006      	add	sp, #24
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	ffff0fff 	.word	0xffff0fff

08001d44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <TIM_ITRx_SetConfig+0x34>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	2207      	movs	r2, #7
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b004      	add	sp, #16
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	ffcfff8f 	.word	0xffcfff8f

08001d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <TIM_ETR_SetConfig+0x3c>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	021a      	lsls	r2, r3, #8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	609a      	str	r2, [r3, #8]
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b006      	add	sp, #24
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	ffff00ff 	.word	0xffff00ff

08001dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	223c      	movs	r2, #60	; 0x3c
 8001dca:	5c9b      	ldrb	r3, [r3, r2]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e05a      	b.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	223c      	movs	r2, #60	; 0x3c
 8001dd8:	2101      	movs	r1, #1
 8001dda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	223d      	movs	r2, #61	; 0x3d
 8001de0:	2102      	movs	r1, #2
 8001de2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a26      	ldr	r2, [pc, #152]	; (8001e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2270      	movs	r2, #112	; 0x70
 8001e14:	4393      	bics	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d014      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	05db      	lsls	r3, r3, #23
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d00e      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d004      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10c      	bne.n	8001e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	4393      	bics	r3, r2
 8001e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223d      	movs	r2, #61	; 0x3d
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	223c      	movs	r2, #60	; 0x3c
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	ff0fffff 	.word	0xff0fffff
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40014000 	.word	0x40014000

08001ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <__libc_init_array>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2600      	movs	r6, #0
 8001edc:	4d0c      	ldr	r5, [pc, #48]	; (8001f10 <__libc_init_array+0x38>)
 8001ede:	4c0d      	ldr	r4, [pc, #52]	; (8001f14 <__libc_init_array+0x3c>)
 8001ee0:	1b64      	subs	r4, r4, r5
 8001ee2:	10a4      	asrs	r4, r4, #2
 8001ee4:	42a6      	cmp	r6, r4
 8001ee6:	d109      	bne.n	8001efc <__libc_init_array+0x24>
 8001ee8:	2600      	movs	r6, #0
 8001eea:	f000 f821 	bl	8001f30 <_init>
 8001eee:	4d0a      	ldr	r5, [pc, #40]	; (8001f18 <__libc_init_array+0x40>)
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	; (8001f1c <__libc_init_array+0x44>)
 8001ef2:	1b64      	subs	r4, r4, r5
 8001ef4:	10a4      	asrs	r4, r4, #2
 8001ef6:	42a6      	cmp	r6, r4
 8001ef8:	d105      	bne.n	8001f06 <__libc_init_array+0x2e>
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	00b3      	lsls	r3, r6, #2
 8001efe:	58eb      	ldr	r3, [r5, r3]
 8001f00:	4798      	blx	r3
 8001f02:	3601      	adds	r6, #1
 8001f04:	e7ee      	b.n	8001ee4 <__libc_init_array+0xc>
 8001f06:	00b3      	lsls	r3, r6, #2
 8001f08:	58eb      	ldr	r3, [r5, r3]
 8001f0a:	4798      	blx	r3
 8001f0c:	3601      	adds	r6, #1
 8001f0e:	e7f2      	b.n	8001ef6 <__libc_init_array+0x1e>
 8001f10:	08001f88 	.word	0x08001f88
 8001f14:	08001f88 	.word	0x08001f88
 8001f18:	08001f88 	.word	0x08001f88
 8001f1c:	08001f8c 	.word	0x08001f8c

08001f20 <memset>:
 8001f20:	0003      	movs	r3, r0
 8001f22:	1882      	adds	r2, r0, r2
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d100      	bne.n	8001f2a <memset+0xa>
 8001f28:	4770      	bx	lr
 8001f2a:	7019      	strb	r1, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	e7f9      	b.n	8001f24 <memset+0x4>

08001f30 <_init>:
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f36:	bc08      	pop	{r3}
 8001f38:	469e      	mov	lr, r3
 8001f3a:	4770      	bx	lr

08001f3c <_fini>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f42:	bc08      	pop	{r3}
 8001f44:	469e      	mov	lr, r3
 8001f46:	4770      	bx	lr
