
s6_ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e04  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f04  08001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001f14  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ab  00000000  00000000  0002982c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a68  00000000  00000000  0002add8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002b840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016c43  00000000  00000000  0002c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086a1  00000000  00000000  00042e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000955c4  00000000  00000000  0004b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0a98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002510  00000000  00000000  000e0b14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001ea8 	.word	0x08001ea8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08001ea8 	.word	0x08001ea8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
TIM_HandleTypeDef htim2;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000220:	f000 f9ae 	bl	8000580 <HAL_Init>
  SystemClock_Config();
 8000224:	f000 f81a 	bl	800025c <SystemClock_Config>
  MX_GPIO_Init();
 8000228:	f000 f8ca 	bl	80003c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800022c:	f000 f874 	bl	8000318 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000230:	4b02      	ldr	r3, [pc, #8]	; (800023c <main+0x20>)
 8000232:	0018      	movs	r0, r3
 8000234:	f001 f9fc 	bl	8001630 <HAL_TIM_Base_Start_IT>
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	20000028 	.word	0x20000028

08000240 <HAL_TIM_PeriodElapsedCallback>:

  }

}
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef* htim)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000248:	23a0      	movs	r3, #160	; 0xa0
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2120      	movs	r1, #32
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fc91 	bl	8000b76 <HAL_GPIO_TogglePin>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b093      	sub	sp, #76	; 0x4c
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	2410      	movs	r4, #16
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2338      	movs	r3, #56	; 0x38
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f001 fe13 	bl	8001e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	003b      	movs	r3, r7
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f001 fe0c 	bl	8001e98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fc91 	bl	8000bac <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2202      	movs	r2, #2
 800028e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	0052      	lsls	r2, r2, #1
 8000296:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000298:	0021      	movs	r1, r4
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2240      	movs	r2, #64	; 0x40
 80002a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2202      	movs	r2, #2
 80002aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2202      	movs	r2, #2
 80002b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2200      	movs	r2, #0
 80002b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2208      	movs	r2, #8
 80002bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0292      	lsls	r2, r2, #10
 80002c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0492      	lsls	r2, r2, #18
 80002cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	0592      	lsls	r2, r2, #22
 80002d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fca7 	bl	8000c2c <HAL_RCC_OscConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002e2:	f000 f8a3 	bl	800042c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	003b      	movs	r3, r7
 80002e8:	2207      	movs	r2, #7
 80002ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	003b      	movs	r3, r7
 80002ee:	2202      	movs	r2, #2
 80002f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	003b      	movs	r3, r7
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fe:	003b      	movs	r3, r7
 8000300:	2102      	movs	r1, #2
 8000302:	0018      	movs	r0, r3
 8000304:	f000 ffb2 	bl	800126c <HAL_RCC_ClockConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800030c:	f000 f88e 	bl	800042c <Error_Handler>
  }
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b013      	add	sp, #76	; 0x4c
 8000316:	bd90      	pop	{r4, r7, pc}

08000318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	2310      	movs	r3, #16
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f001 fdb5 	bl	8001e98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	0018      	movs	r0, r3
 8000332:	230c      	movs	r3, #12
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f001 fdae 	bl	8001e98 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_TIM2_Init+0xa4>)
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	05d2      	lsls	r2, r2, #23
 8000342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_TIM2_Init+0xa4>)
 8000346:	22c8      	movs	r2, #200	; 0xc8
 8000348:	0152      	lsls	r2, r2, #5
 800034a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_TIM2_Init+0xa4>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM2_Init+0xa4>)
 8000354:	22fa      	movs	r2, #250	; 0xfa
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_TIM2_Init+0xa4>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_TIM2_Init+0xa4>)
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_TIM2_Init+0xa4>)
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f909 	bl	8001580 <HAL_TIM_Base_Init>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000372:	f000 f85b 	bl	800042c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000376:	2110      	movs	r1, #16
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	0152      	lsls	r2, r2, #5
 800037e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000380:	187a      	adds	r2, r7, r1
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_TIM2_Init+0xa4>)
 8000384:	0011      	movs	r1, r2
 8000386:	0018      	movs	r0, r3
 8000388:	f001 fae0 	bl	800194c <HAL_TIM_ConfigClockSource>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000390:	f000 f84c 	bl	800042c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a0:	1d3a      	adds	r2, r7, #4
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_TIM2_Init+0xa4>)
 80003a4:	0011      	movs	r1, r2
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 fccc 	bl	8001d44 <HAL_TIMEx_MasterConfigSynchronization>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003b0:	f000 f83c 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b008      	add	sp, #32
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000028 	.word	0x20000028

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	0018      	movs	r0, r3
 80003ca:	2314      	movs	r3, #20
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f001 fd62 	bl	8001e98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_GPIO_Init+0x68>)
 80003d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <MX_GPIO_Init+0x68>)
 80003da:	2101      	movs	r1, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	635a      	str	r2, [r3, #52]	; 0x34
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_GPIO_Init+0x68>)
 80003e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e4:	2201      	movs	r2, #1
 80003e6:	4013      	ands	r3, r2
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fba1 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2201      	movs	r2, #1
 80003fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2201      	movs	r2, #1
 8000404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	1d3a      	adds	r2, r7, #4
 8000414:	23a0      	movs	r3, #160	; 0xa0
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	0011      	movs	r1, r2
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fa2a 	bl	8000874 <HAL_GPIO_Init>

}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b006      	add	sp, #24
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <Error_Handler+0x6>

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_MspInit+0x4c>)
 800043c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <HAL_MspInit+0x4c>)
 8000440:	2101      	movs	r1, #1
 8000442:	430a      	orrs	r2, r1
 8000444:	641a      	str	r2, [r3, #64]	; 0x40
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <HAL_MspInit+0x4c>)
 8000448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044a:	2201      	movs	r2, #1
 800044c:	4013      	ands	r3, r2
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_MspInit+0x4c>)
 8000454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_MspInit+0x4c>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0549      	lsls	r1, r1, #21
 800045c:	430a      	orrs	r2, r1
 800045e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <HAL_MspInit+0x4c>)
 8000462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	055b      	lsls	r3, r3, #21
 8000468:	4013      	ands	r3, r2
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800046e:	23c0      	movs	r3, #192	; 0xc0
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	0018      	movs	r0, r3
 8000474:	f000 f90a 	bl	800068c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b002      	add	sp, #8
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	429a      	cmp	r2, r3
 8000496:	d113      	bne.n	80004c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <HAL_TIM_Base_MspInit+0x44>)
 800049a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_TIM_Base_MspInit+0x44>)
 800049e:	2101      	movs	r1, #1
 80004a0:	430a      	orrs	r2, r1
 80004a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_TIM_Base_MspInit+0x44>)
 80004a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004a8:	2201      	movs	r2, #1
 80004aa:	4013      	ands	r3, r2
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	200f      	movs	r0, #15
 80004b6:	f000 f9ab 	bl	8000810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ba:	200f      	movs	r0, #15
 80004bc:	f000 f9bd 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f0:	f000 f8b0 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <TIM2_IRQHandler+0x14>)
 8000502:	0018      	movs	r0, r3
 8000504:	f001 f8f0 	bl	80016e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000028 	.word	0x20000028

08000514 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <SystemInit+0x14>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0512      	lsls	r2, r2, #20
 800051e:	609a      	str	r2, [r3, #8]
#endif
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000530:	f7ff fff0 	bl	8000514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f001 fc79 	bl	8001e50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800055e:	f7ff fe5d 	bl	800021c <main>

08000562 <LoopForever>:

LoopForever:
  b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000570:	08001f08 	.word	0x08001f08
  ldr r2, =_sbss
 8000574:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000578:	20000078 	.word	0x20000078

0800057c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_COMP_IRQHandler>
	...

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_Init+0x3c>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_Init+0x3c>)
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0049      	lsls	r1, r1, #1
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059a:	2000      	movs	r0, #0
 800059c:	f000 f810 	bl	80005c0 <HAL_InitTick>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d003      	beq.n	80005ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	e001      	b.n	80005b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005ac:	f7ff ff42 	bl	8000434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
}
 80005b4:	0018      	movs	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40022000 	.word	0x40022000

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <HAL_InitTick+0x88>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d02b      	beq.n	8000630 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <HAL_InitTick+0x8c>)
 80005da:	681c      	ldr	r4, [r3, #0]
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_InitTick+0x88>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	0019      	movs	r1, r3
 80005e2:	23fa      	movs	r3, #250	; 0xfa
 80005e4:	0098      	lsls	r0, r3, #2
 80005e6:	f7ff fd8d 	bl	8000104 <__udivsi3>
 80005ea:	0003      	movs	r3, r0
 80005ec:	0019      	movs	r1, r3
 80005ee:	0020      	movs	r0, r4
 80005f0:	f7ff fd88 	bl	8000104 <__udivsi3>
 80005f4:	0003      	movs	r3, r0
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f92f 	bl	800085a <HAL_SYSTICK_Config>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d112      	bne.n	8000626 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b03      	cmp	r3, #3
 8000604:	d80a      	bhi.n	800061c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	2301      	movs	r3, #1
 800060a:	425b      	negs	r3, r3
 800060c:	2200      	movs	r2, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f000 f8fe 	bl	8000810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_InitTick+0x90>)
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e00d      	b.n	8000638 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800061c:	230f      	movs	r3, #15
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e008      	b.n	8000638 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000626:	230f      	movs	r3, #15
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e003      	b.n	8000638 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000630:	230f      	movs	r3, #15
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000638:	230f      	movs	r3, #15
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	781b      	ldrb	r3, [r3, #0]
}
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	b005      	add	sp, #20
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000008 	.word	0x20000008
 800064c:	20000000 	.word	0x20000000
 8000650:	20000004 	.word	0x20000004

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x1c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	001a      	movs	r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_IncTick+0x20>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	18d2      	adds	r2, r2, r3
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_IncTick+0x20>)
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	20000008 	.word	0x20000008
 8000674:	20000074 	.word	0x20000074

08000678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_GetTick+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000074 	.word	0x20000074

0800068c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800069a:	4013      	ands	r3, r2
 800069c:	0019      	movs	r1, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40010000 	.word	0x40010000
 80006b4:	fffff9ff 	.word	0xfffff9ff

080006b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ca:	d809      	bhi.n	80006e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	231f      	movs	r3, #31
 80006d4:	401a      	ands	r2, r3
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_EnableIRQ+0x30>)
 80006d8:	2101      	movs	r1, #1
 80006da:	4091      	lsls	r1, r2
 80006dc:	000a      	movs	r2, r1
 80006de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	e000e100 	.word	0xe000e100

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000700:	d828      	bhi.n	8000754 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000702:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <__NVIC_SetPriority+0xd4>)
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	33c0      	adds	r3, #192	; 0xc0
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	589b      	ldr	r3, [r3, r2]
 8000712:	1dfa      	adds	r2, r7, #7
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	0011      	movs	r1, r2
 8000718:	2203      	movs	r2, #3
 800071a:	400a      	ands	r2, r1
 800071c:	00d2      	lsls	r2, r2, #3
 800071e:	21ff      	movs	r1, #255	; 0xff
 8000720:	4091      	lsls	r1, r2
 8000722:	000a      	movs	r2, r1
 8000724:	43d2      	mvns	r2, r2
 8000726:	401a      	ands	r2, r3
 8000728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	019b      	lsls	r3, r3, #6
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	401a      	ands	r2, r3
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0018      	movs	r0, r3
 8000738:	2303      	movs	r3, #3
 800073a:	4003      	ands	r3, r0
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	481f      	ldr	r0, [pc, #124]	; (80007c0 <__NVIC_SetPriority+0xd4>)
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b25b      	sxtb	r3, r3
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	33c0      	adds	r3, #192	; 0xc0
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000752:	e031      	b.n	80007b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <__NVIC_SetPriority+0xd8>)
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	0019      	movs	r1, r3
 800075c:	230f      	movs	r3, #15
 800075e:	400b      	ands	r3, r1
 8000760:	3b08      	subs	r3, #8
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	3306      	adds	r3, #6
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	18d3      	adds	r3, r2, r3
 800076a:	3304      	adds	r3, #4
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1dfa      	adds	r2, r7, #7
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	0011      	movs	r1, r2
 8000774:	2203      	movs	r2, #3
 8000776:	400a      	ands	r2, r1
 8000778:	00d2      	lsls	r2, r2, #3
 800077a:	21ff      	movs	r1, #255	; 0xff
 800077c:	4091      	lsls	r1, r2
 800077e:	000a      	movs	r2, r1
 8000780:	43d2      	mvns	r2, r2
 8000782:	401a      	ands	r2, r3
 8000784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	22ff      	movs	r2, #255	; 0xff
 800078c:	401a      	ands	r2, r3
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0018      	movs	r0, r3
 8000794:	2303      	movs	r3, #3
 8000796:	4003      	ands	r3, r0
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <__NVIC_SetPriority+0xd8>)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	001c      	movs	r4, r3
 80007a4:	230f      	movs	r3, #15
 80007a6:	4023      	ands	r3, r4
 80007a8:	3b08      	subs	r3, #8
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	430a      	orrs	r2, r1
 80007ae:	3306      	adds	r3, #6
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	18c3      	adds	r3, r0, r3
 80007b4:	3304      	adds	r3, #4
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <SysTick_Config+0x40>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d901      	bls.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e010      	b.n	8000800 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <SysTick_Config+0x44>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	3a01      	subs	r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	2301      	movs	r3, #1
 80007e8:	425b      	negs	r3, r3
 80007ea:	2103      	movs	r1, #3
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff ff7d 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <SysTick_Config+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x44>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fe:	2300      	movs	r3, #0
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	00ffffff 	.word	0x00ffffff
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	210f      	movs	r1, #15
 800081c:	187b      	adds	r3, r7, r1
 800081e:	1c02      	adds	r2, r0, #0
 8000820:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	187b      	adds	r3, r7, r1
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff ff5d 	bl	80006ec <__NVIC_SetPriority>
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b004      	add	sp, #16
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	0002      	movs	r2, r0
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff33 	bl	80006b8 <__NVIC_EnableIRQ>
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ffaf 	bl	80007c8 <SysTick_Config>
 800086a:	0003      	movs	r3, r0
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000882:	e147      	b.n	8000b14 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2101      	movs	r1, #1
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4091      	lsls	r1, r2
 800088e:	000a      	movs	r2, r1
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d100      	bne.n	800089c <HAL_GPIO_Init+0x28>
 800089a:	e138      	b.n	8000b0e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d00b      	beq.n	80008bc <HAL_GPIO_Init+0x48>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d007      	beq.n	80008bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b0:	2b11      	cmp	r3, #17
 80008b2:	d003      	beq.n	80008bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b12      	cmp	r3, #18
 80008ba:	d130      	bne.n	800091e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	409a      	lsls	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	43da      	mvns	r2, r3
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	409a      	lsls	r2, r3
 80008de:	0013      	movs	r3, r2
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	2201      	movs	r2, #1
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	43da      	mvns	r2, r3
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	409a      	lsls	r2, r3
 8000940:	0013      	movs	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d003      	beq.n	800095e <HAL_GPIO_Init+0xea>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d123      	bne.n	80009a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	58d3      	ldr	r3, [r2, r3]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	2207      	movs	r2, #7
 8000970:	4013      	ands	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	220f      	movs	r2, #15
 8000976:	409a      	lsls	r2, r3
 8000978:	0013      	movs	r3, r2
 800097a:	43da      	mvns	r2, r3
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	691a      	ldr	r2, [r3, #16]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	2107      	movs	r1, #7
 800098a:	400b      	ands	r3, r1
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	08da      	lsrs	r2, r3, #3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3208      	adds	r2, #8
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	6939      	ldr	r1, [r7, #16]
 80009a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2203      	movs	r2, #3
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	43da      	mvns	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2203      	movs	r2, #3
 80009c4:	401a      	ands	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	055b      	lsls	r3, r3, #21
 80009e2:	4013      	ands	r3, r2
 80009e4:	d100      	bne.n	80009e8 <HAL_GPIO_Init+0x174>
 80009e6:	e092      	b.n	8000b0e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3318      	adds	r3, #24
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	589b      	ldr	r3, [r3, r2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2203      	movs	r2, #3
 80009fa:	4013      	ands	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	220f      	movs	r2, #15
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0x1ca>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a45      	ldr	r2, [pc, #276]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d00d      	beq.n	8000a3a <HAL_GPIO_Init+0x1c6>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <HAL_GPIO_Init+0x2c0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d007      	beq.n	8000a36 <HAL_GPIO_Init+0x1c2>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <HAL_GPIO_Init+0x2c4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_GPIO_Init+0x1be>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x1cc>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e004      	b.n	8000a40 <HAL_GPIO_Init+0x1cc>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e002      	b.n	8000a40 <HAL_GPIO_Init+0x1cc>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x1cc>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	2103      	movs	r1, #3
 8000a44:	400a      	ands	r2, r1
 8000a46:	00d2      	lsls	r2, r2, #3
 8000a48:	4093      	lsls	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a50:	4936      	ldr	r1, [pc, #216]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	3318      	adds	r3, #24
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a5e:	4a33      	ldr	r2, [pc, #204]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	58d3      	ldr	r3, [r2, r3]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	025b      	lsls	r3, r3, #9
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a84:	4929      	ldr	r1, [pc, #164]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a8e:	2384      	movs	r3, #132	; 0x84
 8000a90:	58d3      	ldr	r3, [r2, r3]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43da      	mvns	r2, r3
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	029b      	lsls	r3, r3, #10
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab2:	491e      	ldr	r1, [pc, #120]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000ab4:	2284      	movs	r2, #132	; 0x84
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	035b      	lsls	r3, r3, #13
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43da      	mvns	r2, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	039b      	lsls	r3, r3, #14
 8000afc:	4013      	ands	r3, r2
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	40da      	lsrs	r2, r3
 8000b1c:	1e13      	subs	r3, r2, #0
 8000b1e:	d000      	beq.n	8000b22 <HAL_GPIO_Init+0x2ae>
 8000b20:	e6b0      	b.n	8000884 <HAL_GPIO_Init+0x10>
  }
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b006      	add	sp, #24
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	50000400 	.word	0x50000400
 8000b34:	50000800 	.word	0x50000800
 8000b38:	50000c00 	.word	0x50000c00

08000b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	0008      	movs	r0, r1
 8000b46:	0011      	movs	r1, r2
 8000b48:	1cbb      	adds	r3, r7, #2
 8000b4a:	1c02      	adds	r2, r0, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
 8000b4e:	1c7b      	adds	r3, r7, #1
 8000b50:	1c0a      	adds	r2, r1, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b54:	1c7b      	adds	r3, r7, #1
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b5c:	1cbb      	adds	r3, r7, #2
 8000b5e:	881a      	ldrh	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b64:	e003      	b.n	8000b6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b66:	1cbb      	adds	r3, r7, #2
 8000b68:	881a      	ldrh	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	000a      	movs	r2, r1
 8000b80:	1cbb      	adds	r3, r7, #2
 8000b82:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b8a:	1cbb      	adds	r3, r7, #2
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4013      	ands	r3, r2
 8000b92:	041a      	lsls	r2, r3, #16
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	1cb9      	adds	r1, r7, #2
 8000b9a:	8809      	ldrh	r1, [r1, #0]
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b004      	add	sp, #16
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d11f      	bne.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4912      	ldr	r1, [pc, #72]	; (8000c28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fa90 	bl	8000104 <__udivsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	3301      	adds	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bea:	e008      	b.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	e001      	b.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e009      	b.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	401a      	ands	r2, r3
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d0ed      	beq.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	fffff9ff 	.word	0xfffff9ff
 8000c24:	20000000 	.word	0x20000000
 8000c28:	000f4240 	.word	0x000f4240

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e304      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2201      	movs	r2, #1
 8000c44:	4013      	ands	r3, r2
 8000c46:	d100      	bne.n	8000c4a <HAL_RCC_OscConfig+0x1e>
 8000c48:	e07c      	b.n	8000d44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c4a:	4bc3      	ldr	r3, [pc, #780]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2238      	movs	r2, #56	; 0x38
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c54:	4bc0      	ldr	r3, [pc, #768]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	2203      	movs	r2, #3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b10      	cmp	r3, #16
 8000c62:	d102      	bne.n	8000c6a <HAL_RCC_OscConfig+0x3e>
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d002      	beq.n	8000c70 <HAL_RCC_OscConfig+0x44>
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d10b      	bne.n	8000c88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c70:	4bb9      	ldr	r3, [pc, #740]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	029b      	lsls	r3, r3, #10
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d062      	beq.n	8000d42 <HAL_RCC_OscConfig+0x116>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d15e      	bne.n	8000d42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e2df      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	025b      	lsls	r3, r3, #9
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d107      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x78>
 8000c94:	4bb0      	ldr	r3, [pc, #704]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4baf      	ldr	r3, [pc, #700]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0249      	lsls	r1, r1, #9
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e020      	b.n	8000ce6 <HAL_RCC_OscConfig+0xba>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	02db      	lsls	r3, r3, #11
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d10e      	bne.n	8000cce <HAL_RCC_OscConfig+0xa2>
 8000cb0:	4ba9      	ldr	r3, [pc, #676]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4ba8      	ldr	r3, [pc, #672]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	02c9      	lsls	r1, r1, #11
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4ba6      	ldr	r3, [pc, #664]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4ba5      	ldr	r3, [pc, #660]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0249      	lsls	r1, r1, #9
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	e00b      	b.n	8000ce6 <HAL_RCC_OscConfig+0xba>
 8000cce:	4ba2      	ldr	r3, [pc, #648]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4ba1      	ldr	r3, [pc, #644]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cd4:	49a1      	ldr	r1, [pc, #644]	; (8000f5c <HAL_RCC_OscConfig+0x330>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	4b9f      	ldr	r3, [pc, #636]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b9e      	ldr	r3, [pc, #632]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000ce0:	499f      	ldr	r1, [pc, #636]	; (8000f60 <HAL_RCC_OscConfig+0x334>)
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d014      	beq.n	8000d18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cee:	f7ff fcc3 	bl	8000678 <HAL_GetTick>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fcbe 	bl	8000678 <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e29e      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d0a:	4b93      	ldr	r3, [pc, #588]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	029b      	lsls	r3, r3, #10
 8000d12:	4013      	ands	r3, r2
 8000d14:	d0f0      	beq.n	8000cf8 <HAL_RCC_OscConfig+0xcc>
 8000d16:	e015      	b.n	8000d44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d18:	f7ff fcae 	bl	8000678 <HAL_GetTick>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fca9 	bl	8000678 <HAL_GetTick>
 8000d26:	0002      	movs	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b64      	cmp	r3, #100	; 0x64
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e289      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d34:	4b88      	ldr	r3, [pc, #544]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	029b      	lsls	r3, r3, #10
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d1f0      	bne.n	8000d22 <HAL_RCC_OscConfig+0xf6>
 8000d40:	e000      	b.n	8000d44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d100      	bne.n	8000d50 <HAL_RCC_OscConfig+0x124>
 8000d4e:	e099      	b.n	8000e84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d50:	4b81      	ldr	r3, [pc, #516]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2238      	movs	r2, #56	; 0x38
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d5a:	4b7f      	ldr	r3, [pc, #508]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2203      	movs	r2, #3
 8000d60:	4013      	ands	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x144>
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d002      	beq.n	8000d76 <HAL_RCC_OscConfig+0x14a>
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d135      	bne.n	8000de2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d76:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d005      	beq.n	8000d8e <HAL_RCC_OscConfig+0x162>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e25c      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8e:	4b72      	ldr	r3, [pc, #456]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	4a74      	ldr	r2, [pc, #464]	; (8000f64 <HAL_RCC_OscConfig+0x338>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	0019      	movs	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	021a      	lsls	r2, r3, #8
 8000d9e:	4b6e      	ldr	r3, [pc, #440]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000da0:	430a      	orrs	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d112      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000daa:	4b6b      	ldr	r3, [pc, #428]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <HAL_RCC_OscConfig+0x33c>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	0019      	movs	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000dbe:	4b66      	ldr	r3, [pc, #408]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0adb      	lsrs	r3, r3, #11
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	4a68      	ldr	r2, [pc, #416]	; (8000f6c <HAL_RCC_OscConfig+0x340>)
 8000dca:	40da      	lsrs	r2, r3
 8000dcc:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <HAL_RCC_OscConfig+0x344>)
 8000dce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000dd0:	4b68      	ldr	r3, [pc, #416]	; (8000f74 <HAL_RCC_OscConfig+0x348>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fbf3 	bl	80005c0 <HAL_InitTick>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d051      	beq.n	8000e82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e232      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d030      	beq.n	8000e4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000dea:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a5e      	ldr	r2, [pc, #376]	; (8000f68 <HAL_RCC_OscConfig+0x33c>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	0019      	movs	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000dfe:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	0049      	lsls	r1, r1, #1
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fc34 	bl	8000678 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e16:	f7ff fc2f 	bl	8000678 <HAL_GetTick>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e20f      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e28:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4013      	ands	r3, r2
 8000e32:	d0f0      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	021a      	lsls	r2, r3, #8
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	430a      	orrs	r2, r1
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	e01b      	b.n	8000e84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000e4c:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	4949      	ldr	r1, [pc, #292]	; (8000f78 <HAL_RCC_OscConfig+0x34c>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e58:	f7ff fc0e 	bl	8000678 <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc09 	bl	8000678 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1e9      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x236>
 8000e80:	e000      	b.n	8000e84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d047      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2238      	movs	r2, #56	; 0x38
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b18      	cmp	r3, #24
 8000e98:	d10a      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d03c      	beq.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d138      	bne.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e1cb      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d019      	beq.n	8000eec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbd8 	bl	8000678 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff fbd3 	bl	8000678 <HAL_GetTick>
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e1b3      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d0f1      	beq.n	8000ece <HAL_RCC_OscConfig+0x2a2>
 8000eea:	e018      	b.n	8000f1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000eee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fbbe 	bl	8000678 <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f02:	f7ff fbb9 	bl	8000678 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e199      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d1f1      	bne.n	8000f02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2204      	movs	r2, #4
 8000f24:	4013      	ands	r3, r2
 8000f26:	d100      	bne.n	8000f2a <HAL_RCC_OscConfig+0x2fe>
 8000f28:	e0c6      	b.n	80010b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f2a:	231f      	movs	r3, #31
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2238      	movs	r2, #56	; 0x38
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d11e      	bne.n	8000f7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f42:	2202      	movs	r2, #2
 8000f44:	4013      	ands	r3, r2
 8000f46:	d100      	bne.n	8000f4a <HAL_RCC_OscConfig+0x31e>
 8000f48:	e0b6      	b.n	80010b8 <HAL_RCC_OscConfig+0x48c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d000      	beq.n	8000f54 <HAL_RCC_OscConfig+0x328>
 8000f52:	e0b1      	b.n	80010b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e177      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	fffeffff 	.word	0xfffeffff
 8000f60:	fffbffff 	.word	0xfffbffff
 8000f64:	ffff80ff 	.word	0xffff80ff
 8000f68:	ffffc7ff 	.word	0xffffc7ff
 8000f6c:	00f42400 	.word	0x00f42400
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000004 	.word	0x20000004
 8000f78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f7c:	4bb4      	ldr	r3, [pc, #720]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8000f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	055b      	lsls	r3, r3, #21
 8000f84:	4013      	ands	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_OscConfig+0x360>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x362>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d011      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4baf      	ldr	r3, [pc, #700]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8000f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f96:	4bae      	ldr	r3, [pc, #696]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	0549      	lsls	r1, r1, #21
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fa0:	4bab      	ldr	r3, [pc, #684]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8000fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	055b      	lsls	r3, r3, #21
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000fae:	231f      	movs	r3, #31
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fb6:	4ba7      	ldr	r3, [pc, #668]	; (8001254 <HAL_RCC_OscConfig+0x628>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d11a      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fc2:	4ba4      	ldr	r3, [pc, #656]	; (8001254 <HAL_RCC_OscConfig+0x628>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4ba3      	ldr	r3, [pc, #652]	; (8001254 <HAL_RCC_OscConfig+0x628>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0049      	lsls	r1, r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fb52 	bl	8000678 <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fda:	f7ff fb4d 	bl	8000678 <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e12d      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fec:	4b99      	ldr	r3, [pc, #612]	; (8001254 <HAL_RCC_OscConfig+0x628>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x3e2>
 8001000:	4b93      	ldr	r3, [pc, #588]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001004:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	65da      	str	r2, [r3, #92]	; 0x5c
 800100c:	e01c      	b.n	8001048 <HAL_RCC_OscConfig+0x41c>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x404>
 8001016:	4b8e      	ldr	r3, [pc, #568]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800101a:	4b8d      	ldr	r3, [pc, #564]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800101c:	2104      	movs	r1, #4
 800101e:	430a      	orrs	r2, r1
 8001020:	65da      	str	r2, [r3, #92]	; 0x5c
 8001022:	4b8b      	ldr	r3, [pc, #556]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001026:	4b8a      	ldr	r3, [pc, #552]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	65da      	str	r2, [r3, #92]	; 0x5c
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0x41c>
 8001030:	4b87      	ldr	r3, [pc, #540]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001032:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001034:	4b86      	ldr	r3, [pc, #536]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001036:	2101      	movs	r1, #1
 8001038:	438a      	bics	r2, r1
 800103a:	65da      	str	r2, [r3, #92]	; 0x5c
 800103c:	4b84      	ldr	r3, [pc, #528]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800103e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001040:	4b83      	ldr	r3, [pc, #524]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001042:	2104      	movs	r1, #4
 8001044:	438a      	bics	r2, r1
 8001046:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d014      	beq.n	800107a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fb12 	bl	8000678 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fb0d 	bl	8000678 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a7c      	ldr	r2, [pc, #496]	; (8001258 <HAL_RCC_OscConfig+0x62c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e0ec      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800106e:	4b78      	ldr	r3, [pc, #480]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x42e>
 8001078:	e013      	b.n	80010a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fafd 	bl	8000678 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001082:	e009      	b.n	8001098 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001084:	f7ff faf8 	bl	8000678 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a72      	ldr	r2, [pc, #456]	; (8001258 <HAL_RCC_OscConfig+0x62c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e0d7      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001098:	4b6d      	ldr	r3, [pc, #436]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109c:	2202      	movs	r2, #2
 800109e:	4013      	ands	r3, r2
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80010a2:	231f      	movs	r3, #31
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80010ac:	4b68      	ldr	r3, [pc, #416]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80010ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80010b2:	496a      	ldr	r1, [pc, #424]	; (800125c <HAL_RCC_OscConfig+0x630>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x496>
 80010c0:	e0c1      	b.n	8001246 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2238      	movs	r2, #56	; 0x38
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d100      	bne.n	80010d0 <HAL_RCC_OscConfig+0x4a4>
 80010ce:	e081      	b.n	80011d4 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d156      	bne.n	8001186 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d8:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b5c      	ldr	r3, [pc, #368]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80010de:	4960      	ldr	r1, [pc, #384]	; (8001260 <HAL_RCC_OscConfig+0x634>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e4:	f7ff fac8 	bl	8000678 <HAL_GetTick>
 80010e8:	0003      	movs	r3, r0
 80010ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fac3 	bl	8000678 <HAL_GetTick>
 80010f2:	0002      	movs	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e0a3      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	049b      	lsls	r3, r3, #18
 8001108:	4013      	ands	r3, r2
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a54      	ldr	r2, [pc, #336]	; (8001264 <HAL_RCC_OscConfig+0x638>)
 8001112:	4013      	ands	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1a      	ldr	r2, [r3, #32]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001138:	431a      	orrs	r2, r3
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800113c:	430a      	orrs	r2, r1
 800113e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0449      	lsls	r1, r1, #17
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	0549      	lsls	r1, r1, #21
 8001158:	430a      	orrs	r2, r1
 800115a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fa8c 	bl	8000678 <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fa87 	bl	8000678 <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e067      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	049b      	lsls	r3, r3, #18
 8001180:	4013      	ands	r3, r2
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x53a>
 8001184:	e05f      	b.n	8001246 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 800118c:	4934      	ldr	r1, [pc, #208]	; (8001260 <HAL_RCC_OscConfig+0x634>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 8001198:	2103      	movs	r1, #3
 800119a:	438a      	bics	r2, r1
 800119c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80011a4:	4930      	ldr	r1, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x63c>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fa65 	bl	8000678 <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff fa60 	bl	8000678 <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e040      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	049b      	lsls	r3, r3, #18
 80011ce:	4013      	ands	r3, r2
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x588>
 80011d2:	e038      	b.n	8001246 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e033      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_RCC_OscConfig+0x624>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2203      	movs	r2, #3
 80011ea:	401a      	ands	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d126      	bne.n	8001242 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2270      	movs	r2, #112	; 0x70
 80011f8:	401a      	ands	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fe:	429a      	cmp	r2, r3
 8001200:	d11f      	bne.n	8001242 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	23fe      	movs	r3, #254	; 0xfe
 8001206:	01db      	lsls	r3, r3, #7
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d116      	bne.n	8001242 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	23f8      	movs	r3, #248	; 0xf8
 8001218:	039b      	lsls	r3, r3, #14
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d10e      	bne.n	8001242 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	23e0      	movs	r3, #224	; 0xe0
 8001228:	051b      	lsls	r3, r3, #20
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001230:	429a      	cmp	r2, r3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	0f5b      	lsrs	r3, r3, #29
 8001238:	075a      	lsls	r2, r3, #29
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b008      	add	sp, #32
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	00001388 	.word	0x00001388
 800125c:	efffffff 	.word	0xefffffff
 8001260:	feffffff 	.word	0xfeffffff
 8001264:	11c1808c 	.word	0x11c1808c
 8001268:	eefeffff 	.word	0xeefeffff

0800126c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0e9      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2207      	movs	r2, #7
 8001286:	4013      	ands	r3, r2
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d91e      	bls.n	80012cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b73      	ldr	r3, [pc, #460]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2207      	movs	r2, #7
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012a0:	f7ff f9ea 	bl	8000678 <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a8:	e009      	b.n	80012be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012aa:	f7ff f9e5 	bl	8000678 <HAL_GetTick>
 80012ae:	0002      	movs	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	4a6a      	ldr	r2, [pc, #424]	; (8001460 <HAL_RCC_ClockConfig+0x1f4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0ca      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2207      	movs	r2, #7
 80012c4:	4013      	ands	r3, r2
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1ee      	bne.n	80012aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d015      	beq.n	8001302 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2204      	movs	r2, #4
 80012dc:	4013      	ands	r3, r2
 80012de:	d006      	beq.n	80012ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	4b5f      	ldr	r3, [pc, #380]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 80012e6:	21e0      	movs	r1, #224	; 0xe0
 80012e8:	01c9      	lsls	r1, r1, #7
 80012ea:	430a      	orrs	r2, r1
 80012ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4a5d      	ldr	r2, [pc, #372]	; (8001468 <HAL_RCC_ClockConfig+0x1fc>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	0019      	movs	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	4b59      	ldr	r3, [pc, #356]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 80012fe:	430a      	orrs	r2, r1
 8001300:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2201      	movs	r2, #1
 8001308:	4013      	ands	r3, r2
 800130a:	d057      	beq.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d107      	bne.n	8001324 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001314:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	d12b      	bne.n	8001378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e097      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d107      	bne.n	800133c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	049b      	lsls	r3, r3, #18
 8001334:	4013      	ands	r3, r2
 8001336:	d11f      	bne.n	8001378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e08b      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4013      	ands	r3, r2
 800134e:	d113      	bne.n	8001378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e07f      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d106      	bne.n	800136a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 800135e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001360:	2202      	movs	r2, #2
 8001362:	4013      	ands	r3, r2
 8001364:	d108      	bne.n	8001378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e074      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 800136c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e06d      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2207      	movs	r2, #7
 800137e:	4393      	bics	r3, r2
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800138c:	f7ff f974 	bl	8000678 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001394:	e009      	b.n	80013aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001396:	f7ff f96f 	bl	8000678 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <HAL_RCC_ClockConfig+0x1f4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e054      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2238      	movs	r2, #56	; 0x38
 80013b0:	401a      	ands	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1ec      	bne.n	8001396 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2207      	movs	r2, #7
 80013c2:	4013      	ands	r3, r2
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d21e      	bcs.n	8001408 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2207      	movs	r2, #7
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013dc:	f7ff f94c 	bl	8000678 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013e4:	e009      	b.n	80013fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e6:	f7ff f947 	bl	8000678 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_RCC_ClockConfig+0x1f4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e02c      	b.n	8001454 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_RCC_ClockConfig+0x1f0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2207      	movs	r2, #7
 8001400:	4013      	ands	r3, r2
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d1ee      	bne.n	80013e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2204      	movs	r2, #4
 800140e:	4013      	ands	r3, r2
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <HAL_RCC_ClockConfig+0x200>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001426:	f000 f829 	bl	800147c <HAL_RCC_GetSysClockFreq>
 800142a:	0001      	movs	r1, r0
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_RCC_ClockConfig+0x1f8>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	220f      	movs	r2, #15
 8001434:	401a      	ands	r2, r3
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_RCC_ClockConfig+0x204>)
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	58d3      	ldr	r3, [r2, r3]
 800143c:	221f      	movs	r2, #31
 800143e:	4013      	ands	r3, r2
 8001440:	000a      	movs	r2, r1
 8001442:	40da      	lsrs	r2, r3
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_ClockConfig+0x208>)
 8001446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_ClockConfig+0x20c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff f8b7 	bl	80005c0 <HAL_InitTick>
 8001452:	0003      	movs	r3, r0
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40022000 	.word	0x40022000
 8001460:	00001388 	.word	0x00001388
 8001464:	40021000 	.word	0x40021000
 8001468:	fffff0ff 	.word	0xfffff0ff
 800146c:	ffff8fff 	.word	0xffff8fff
 8001470:	08001ec0 	.word	0x08001ec0
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2238      	movs	r2, #56	; 0x38
 8001488:	4013      	ands	r3, r2
 800148a:	d10f      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0adb      	lsrs	r3, r3, #11
 8001492:	2207      	movs	r2, #7
 8001494:	4013      	ands	r3, r2
 8001496:	2201      	movs	r2, #1
 8001498:	409a      	lsls	r2, r3
 800149a:	0013      	movs	r3, r2
 800149c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	4835      	ldr	r0, [pc, #212]	; (8001578 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014a2:	f7fe fe2f 	bl	8000104 <__udivsi3>
 80014a6:	0003      	movs	r3, r0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	e05d      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2238      	movs	r2, #56	; 0x38
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d102      	bne.n	80014be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_RCC_GetSysClockFreq+0x100>)
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	e054      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2238      	movs	r2, #56	; 0x38
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b10      	cmp	r3, #16
 80014c8:	d138      	bne.n	800153c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	2207      	movs	r2, #7
 80014dc:	4013      	ands	r3, r2
 80014de:	3301      	adds	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d10d      	bne.n	8001504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	4824      	ldr	r0, [pc, #144]	; (800157c <HAL_RCC_GetSysClockFreq+0x100>)
 80014ec:	f7fe fe0a 	bl	8000104 <__udivsi3>
 80014f0:	0003      	movs	r3, r0
 80014f2:	0019      	movs	r1, r3
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	227f      	movs	r2, #127	; 0x7f
 80014fc:	4013      	ands	r3, r2
 80014fe:	434b      	muls	r3, r1
 8001500:	617b      	str	r3, [r7, #20]
        break;
 8001502:	e00d      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	481c      	ldr	r0, [pc, #112]	; (8001578 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001508:	f7fe fdfc 	bl	8000104 <__udivsi3>
 800150c:	0003      	movs	r3, r0
 800150e:	0019      	movs	r1, r3
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	227f      	movs	r2, #127	; 0x7f
 8001518:	4013      	ands	r3, r2
 800151a:	434b      	muls	r3, r1
 800151c:	617b      	str	r3, [r7, #20]
        break;
 800151e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0f5b      	lsrs	r3, r3, #29
 8001526:	2207      	movs	r2, #7
 8001528:	4013      	ands	r3, r2
 800152a:	3301      	adds	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7fe fde7 	bl	8000104 <__udivsi3>
 8001536:	0003      	movs	r3, r0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	e015      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2238      	movs	r2, #56	; 0x38
 8001542:	4013      	ands	r3, r2
 8001544:	2b20      	cmp	r3, #32
 8001546:	d103      	bne.n	8001550 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2238      	movs	r2, #56	; 0x38
 8001556:	4013      	ands	r3, r2
 8001558:	2b18      	cmp	r3, #24
 800155a:	d103      	bne.n	8001564 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800155c:	23fa      	movs	r3, #250	; 0xfa
 800155e:	01db      	lsls	r3, r3, #7
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	e001      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001568:	693b      	ldr	r3, [r7, #16]
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b006      	add	sp, #24
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40021000 	.word	0x40021000
 8001578:	00f42400 	.word	0x00f42400
 800157c:	007a1200 	.word	0x007a1200

08001580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e04a      	b.n	8001628 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	223d      	movs	r2, #61	; 0x3d
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d107      	bne.n	80015ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	223c      	movs	r2, #60	; 0x3c
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7fe ff6b 	bl	8000484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	223d      	movs	r2, #61	; 0x3d
 80015b2:	2102      	movs	r1, #2
 80015b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3304      	adds	r3, #4
 80015be:	0019      	movs	r1, r3
 80015c0:	0010      	movs	r0, r2
 80015c2:	f000 faa3 	bl	8001b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2248      	movs	r2, #72	; 0x48
 80015ca:	2101      	movs	r1, #1
 80015cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	223e      	movs	r2, #62	; 0x3e
 80015d2:	2101      	movs	r1, #1
 80015d4:	5499      	strb	r1, [r3, r2]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	223f      	movs	r2, #63	; 0x3f
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2240      	movs	r2, #64	; 0x40
 80015e2:	2101      	movs	r1, #1
 80015e4:	5499      	strb	r1, [r3, r2]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2241      	movs	r2, #65	; 0x41
 80015ea:	2101      	movs	r1, #1
 80015ec:	5499      	strb	r1, [r3, r2]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2242      	movs	r2, #66	; 0x42
 80015f2:	2101      	movs	r1, #1
 80015f4:	5499      	strb	r1, [r3, r2]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2243      	movs	r2, #67	; 0x43
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2244      	movs	r2, #68	; 0x44
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2245      	movs	r2, #69	; 0x45
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2246      	movs	r2, #70	; 0x46
 8001612:	2101      	movs	r1, #1
 8001614:	5499      	strb	r1, [r3, r2]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2247      	movs	r2, #71	; 0x47
 800161a:	2101      	movs	r1, #1
 800161c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	223d      	movs	r2, #61	; 0x3d
 8001622:	2101      	movs	r1, #1
 8001624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	223d      	movs	r2, #61	; 0x3d
 800163c:	5c9b      	ldrb	r3, [r3, r2]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d001      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e042      	b.n	80016ce <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	223d      	movs	r2, #61	; 0x3d
 800164c:	2102      	movs	r1, #2
 800164e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_TIM_Base_Start_IT+0xa8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00f      	beq.n	800168a <HAL_TIM_Base_Start_IT+0x5a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	429a      	cmp	r2, r3
 8001674:	d009      	beq.n	800168a <HAL_TIM_Base_Start_IT+0x5a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_TIM_Base_Start_IT+0xac>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d004      	beq.n	800168a <HAL_TIM_Base_Start_IT+0x5a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d116      	bne.n	80016b8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001692:	4013      	ands	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b06      	cmp	r3, #6
 800169a:	d016      	beq.n	80016ca <HAL_TIM_Base_Start_IT+0x9a>
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	025b      	lsls	r3, r3, #9
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d011      	beq.n	80016ca <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b6:	e008      	b.n	80016ca <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e000      	b.n	80016cc <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ca:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b004      	add	sp, #16
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40014000 	.word	0x40014000
 80016e4:	00010007 	.word	0x00010007

080016e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d124      	bne.n	8001748 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	2b02      	cmp	r3, #2
 800170a:	d11d      	bne.n	8001748 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2203      	movs	r2, #3
 8001712:	4252      	negs	r2, r2
 8001714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2203      	movs	r2, #3
 8001724:	4013      	ands	r3, r2
 8001726:	d004      	beq.n	8001732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0018      	movs	r0, r3
 800172c:	f000 f9d6 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 8001730:	e007      	b.n	8001742 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f000 f9c9 	bl	8001acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f9d5 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2204      	movs	r2, #4
 8001750:	4013      	ands	r3, r2
 8001752:	2b04      	cmp	r3, #4
 8001754:	d125      	bne.n	80017a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2204      	movs	r2, #4
 800175e:	4013      	ands	r3, r2
 8001760:	2b04      	cmp	r3, #4
 8001762:	d11e      	bne.n	80017a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2205      	movs	r2, #5
 800176a:	4252      	negs	r2, r2
 800176c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	23c0      	movs	r3, #192	; 0xc0
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f9a9 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 800178a:	e007      	b.n	800179c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0018      	movs	r0, r3
 8001790:	f000 f99c 	bl	8001acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0018      	movs	r0, r3
 8001798:	f000 f9a8 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2208      	movs	r2, #8
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d124      	bne.n	80017fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2208      	movs	r2, #8
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d11d      	bne.n	80017fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2209      	movs	r2, #9
 80017c4:	4252      	negs	r2, r2
 80017c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	d004      	beq.n	80017e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 f97d 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 80017e2:	e007      	b.n	80017f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 f970 	bl	8001acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f97c 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2210      	movs	r2, #16
 8001802:	4013      	ands	r3, r2
 8001804:	2b10      	cmp	r3, #16
 8001806:	d125      	bne.n	8001854 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2210      	movs	r2, #16
 8001810:	4013      	ands	r3, r2
 8001812:	2b10      	cmp	r3, #16
 8001814:	d11e      	bne.n	8001854 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2211      	movs	r2, #17
 800181c:	4252      	negs	r2, r2
 800181e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2208      	movs	r2, #8
 8001824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f950 	bl	8001adc <HAL_TIM_IC_CaptureCallback>
 800183c:	e007      	b.n	800184e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f000 f943 	bl	8001acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f94f 	bl	8001aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2201      	movs	r2, #1
 800185c:	4013      	ands	r3, r2
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10f      	bne.n	8001882 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	2b01      	cmp	r3, #1
 800186e:	d108      	bne.n	8001882 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2202      	movs	r2, #2
 8001876:	4252      	negs	r2, r2
 8001878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	f7fe fcdf 	bl	8000240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	4013      	ands	r3, r2
 800188c:	2b80      	cmp	r3, #128	; 0x80
 800188e:	d10f      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	4013      	ands	r3, r2
 800189a:	2b80      	cmp	r3, #128	; 0x80
 800189c:	d108      	bne.n	80018b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2281      	movs	r2, #129	; 0x81
 80018a4:	4252      	negs	r2, r2
 80018a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 fac0 	bl	8001e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	401a      	ands	r2, r3
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10e      	bne.n	80018e2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b80      	cmp	r3, #128	; 0x80
 80018d0:	d107      	bne.n	80018e2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_TIM_IRQHandler+0x260>)
 80018d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 faaf 	bl	8001e40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b40      	cmp	r3, #64	; 0x40
 80018ee:	d10f      	bne.n	8001910 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b40      	cmp	r3, #64	; 0x40
 80018fc:	d108      	bne.n	8001910 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2241      	movs	r2, #65	; 0x41
 8001904:	4252      	negs	r2, r2
 8001906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	0018      	movs	r0, r3
 800190c:	f000 f8f6 	bl	8001afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2220      	movs	r2, #32
 8001918:	4013      	ands	r3, r2
 800191a:	2b20      	cmp	r3, #32
 800191c:	d10f      	bne.n	800193e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2220      	movs	r2, #32
 8001926:	4013      	ands	r3, r2
 8001928:	2b20      	cmp	r3, #32
 800192a:	d108      	bne.n	800193e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2221      	movs	r2, #33	; 0x21
 8001932:	4252      	negs	r2, r2
 8001934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fa71 	bl	8001e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	fffffeff 	.word	0xfffffeff

0800194c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	223c      	movs	r2, #60	; 0x3c
 800195a:	5c9b      	ldrb	r3, [r3, r2]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_TIM_ConfigClockSource+0x18>
 8001960:	2302      	movs	r3, #2
 8001962:	e0ab      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x170>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	223c      	movs	r2, #60	; 0x3c
 8001968:	2101      	movs	r1, #1
 800196a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	223d      	movs	r2, #61	; 0x3d
 8001970:	2102      	movs	r1, #2
 8001972:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_TIM_ConfigClockSource+0x178>)
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_TIM_ConfigClockSource+0x17c>)
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d100      	bne.n	800199e <HAL_TIM_ConfigClockSource+0x52>
 800199c:	e06b      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x12a>
 800199e:	d80e      	bhi.n	80019be <HAL_TIM_ConfigClockSource+0x72>
 80019a0:	2b10      	cmp	r3, #16
 80019a2:	d100      	bne.n	80019a6 <HAL_TIM_ConfigClockSource+0x5a>
 80019a4:	e077      	b.n	8001a96 <HAL_TIM_ConfigClockSource+0x14a>
 80019a6:	d803      	bhi.n	80019b0 <HAL_TIM_ConfigClockSource+0x64>
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d100      	bne.n	80019ae <HAL_TIM_ConfigClockSource+0x62>
 80019ac:	e073      	b.n	8001a96 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019ae:	e07c      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d100      	bne.n	80019b6 <HAL_TIM_ConfigClockSource+0x6a>
 80019b4:	e06f      	b.n	8001a96 <HAL_TIM_ConfigClockSource+0x14a>
 80019b6:	2b30      	cmp	r3, #48	; 0x30
 80019b8:	d100      	bne.n	80019bc <HAL_TIM_ConfigClockSource+0x70>
 80019ba:	e06c      	b.n	8001a96 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80019bc:	e075      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80019be:	2b70      	cmp	r3, #112	; 0x70
 80019c0:	d00e      	beq.n	80019e0 <HAL_TIM_ConfigClockSource+0x94>
 80019c2:	d804      	bhi.n	80019ce <HAL_TIM_ConfigClockSource+0x82>
 80019c4:	2b50      	cmp	r3, #80	; 0x50
 80019c6:	d036      	beq.n	8001a36 <HAL_TIM_ConfigClockSource+0xea>
 80019c8:	2b60      	cmp	r3, #96	; 0x60
 80019ca:	d044      	beq.n	8001a56 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80019cc:	e06d      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	0152      	lsls	r2, r2, #5
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d068      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0x15c>
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	0192      	lsls	r2, r2, #6
 80019da:	4293      	cmp	r3, r2
 80019dc:	d017      	beq.n	8001a0e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80019de:	e064      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f000 f988 	bl	8001d04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2277      	movs	r2, #119	; 0x77
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	609a      	str	r2, [r3, #8]
      break;
 8001a0c:	e04d      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6899      	ldr	r1, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f000 f971 	bl	8001d04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	01c9      	lsls	r1, r1, #7
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
      break;
 8001a34:	e039      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	001a      	movs	r2, r3
 8001a44:	f000 f8e2 	bl	8001c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2150      	movs	r1, #80	; 0x50
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f93c 	bl	8001ccc <TIM_ITRx_SetConfig>
      break;
 8001a54:	e029      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	001a      	movs	r2, r3
 8001a64:	f000 f900 	bl	8001c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2160      	movs	r1, #96	; 0x60
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 f92c 	bl	8001ccc <TIM_ITRx_SetConfig>
      break;
 8001a74:	e019      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	001a      	movs	r2, r3
 8001a84:	f000 f8c2 	bl	8001c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2140      	movs	r1, #64	; 0x40
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f91c 	bl	8001ccc <TIM_ITRx_SetConfig>
      break;
 8001a94:	e009      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	f000 f913 	bl	8001ccc <TIM_ITRx_SetConfig>
        break;
 8001aa6:	e000      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001aa8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	223d      	movs	r2, #61	; 0x3d
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223c      	movs	r2, #60	; 0x3c
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	ffceff88 	.word	0xffceff88
 8001ac8:	ffff00ff 	.word	0xffff00ff

08001acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <TIM_Base_SetConfig+0xe4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d008      	beq.n	8001b36 <TIM_Base_SetConfig+0x2a>
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	05db      	lsls	r3, r3, #23
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d003      	beq.n	8001b36 <TIM_Base_SetConfig+0x2a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <TIM_Base_SetConfig+0xe8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d108      	bne.n	8001b48 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2270      	movs	r2, #112	; 0x70
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <TIM_Base_SetConfig+0xe4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d018      	beq.n	8001b82 <TIM_Base_SetConfig+0x76>
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	05db      	lsls	r3, r3, #23
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d013      	beq.n	8001b82 <TIM_Base_SetConfig+0x76>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <TIM_Base_SetConfig+0xe8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00f      	beq.n	8001b82 <TIM_Base_SetConfig+0x76>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <TIM_Base_SetConfig+0xec>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00b      	beq.n	8001b82 <TIM_Base_SetConfig+0x76>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <TIM_Base_SetConfig+0xf0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <TIM_Base_SetConfig+0x76>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <TIM_Base_SetConfig+0xf4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d003      	beq.n	8001b82 <TIM_Base_SetConfig+0x76>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <TIM_Base_SetConfig+0xf8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d108      	bne.n	8001b94 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <TIM_Base_SetConfig+0xfc>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	4393      	bics	r3, r2
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <TIM_Base_SetConfig+0xe4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00b      	beq.n	8001bda <TIM_Base_SetConfig+0xce>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <TIM_Base_SetConfig+0xf0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <TIM_Base_SetConfig+0xce>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <TIM_Base_SetConfig+0xf4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d003      	beq.n	8001bda <TIM_Base_SetConfig+0xce>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <TIM_Base_SetConfig+0xf8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d103      	bne.n	8001be2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	615a      	str	r2, [r3, #20]
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40002000 	.word	0x40002000
 8001bfc:	40014000 	.word	0x40014000
 8001c00:	40014400 	.word	0x40014400
 8001c04:	40014800 	.word	0x40014800
 8001c08:	fffffcff 	.word	0xfffffcff

08001c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4393      	bics	r3, r2
 8001c26:	001a      	movs	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	22f0      	movs	r2, #240	; 0xf0
 8001c36:	4393      	bics	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	220a      	movs	r2, #10
 8001c48:	4393      	bics	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	621a      	str	r2, [r3, #32]
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	2210      	movs	r2, #16
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <TIM_TI2_ConfigInputStage+0x60>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	031b      	lsls	r3, r3, #12
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	22a0      	movs	r2, #160	; 0xa0
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	621a      	str	r2, [r3, #32]
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b006      	add	sp, #24
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	ffff0fff 	.word	0xffff0fff

08001ccc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <TIM_ITRx_SetConfig+0x34>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	2207      	movs	r2, #7
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	ffcfff8f 	.word	0xffcfff8f

08001d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <TIM_ETR_SetConfig+0x3c>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	021a      	lsls	r2, r3, #8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	609a      	str	r2, [r3, #8]
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	ffff00ff 	.word	0xffff00ff

08001d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223c      	movs	r2, #60	; 0x3c
 8001d52:	5c9b      	ldrb	r3, [r3, r2]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e055      	b.n	8001e08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	223c      	movs	r2, #60	; 0x3c
 8001d60:	2101      	movs	r1, #1
 8001d62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	223d      	movs	r2, #61	; 0x3d
 8001d68:	2102      	movs	r1, #2
 8001d6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2270      	movs	r2, #112	; 0x70
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00f      	beq.n	8001ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	05db      	lsls	r3, r3, #23
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d009      	beq.n	8001ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d004      	beq.n	8001ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d10c      	bne.n	8001df6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	4393      	bics	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	223d      	movs	r2, #61	; 0x3d
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223c      	movs	r2, #60	; 0x3c
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	ff0fffff 	.word	0xff0fffff
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40014000 	.word	0x40014000

08001e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <__libc_init_array>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	2600      	movs	r6, #0
 8001e54:	4d0c      	ldr	r5, [pc, #48]	; (8001e88 <__libc_init_array+0x38>)
 8001e56:	4c0d      	ldr	r4, [pc, #52]	; (8001e8c <__libc_init_array+0x3c>)
 8001e58:	1b64      	subs	r4, r4, r5
 8001e5a:	10a4      	asrs	r4, r4, #2
 8001e5c:	42a6      	cmp	r6, r4
 8001e5e:	d109      	bne.n	8001e74 <__libc_init_array+0x24>
 8001e60:	2600      	movs	r6, #0
 8001e62:	f000 f821 	bl	8001ea8 <_init>
 8001e66:	4d0a      	ldr	r5, [pc, #40]	; (8001e90 <__libc_init_array+0x40>)
 8001e68:	4c0a      	ldr	r4, [pc, #40]	; (8001e94 <__libc_init_array+0x44>)
 8001e6a:	1b64      	subs	r4, r4, r5
 8001e6c:	10a4      	asrs	r4, r4, #2
 8001e6e:	42a6      	cmp	r6, r4
 8001e70:	d105      	bne.n	8001e7e <__libc_init_array+0x2e>
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	00b3      	lsls	r3, r6, #2
 8001e76:	58eb      	ldr	r3, [r5, r3]
 8001e78:	4798      	blx	r3
 8001e7a:	3601      	adds	r6, #1
 8001e7c:	e7ee      	b.n	8001e5c <__libc_init_array+0xc>
 8001e7e:	00b3      	lsls	r3, r6, #2
 8001e80:	58eb      	ldr	r3, [r5, r3]
 8001e82:	4798      	blx	r3
 8001e84:	3601      	adds	r6, #1
 8001e86:	e7f2      	b.n	8001e6e <__libc_init_array+0x1e>
 8001e88:	08001f00 	.word	0x08001f00
 8001e8c:	08001f00 	.word	0x08001f00
 8001e90:	08001f00 	.word	0x08001f00
 8001e94:	08001f04 	.word	0x08001f04

08001e98 <memset>:
 8001e98:	0003      	movs	r3, r0
 8001e9a:	1812      	adds	r2, r2, r0
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <memset+0xa>
 8001ea0:	4770      	bx	lr
 8001ea2:	7019      	strb	r1, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	e7f9      	b.n	8001e9c <memset+0x4>

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
