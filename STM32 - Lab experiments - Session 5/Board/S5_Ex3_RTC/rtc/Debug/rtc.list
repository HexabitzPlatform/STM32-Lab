
rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003428  08003428  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003428  08003428  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003428  08003428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  080034a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080034a0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088b8  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000196b  00000000  00000000  00028950  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002ab40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aa1d  00000000  00000000  0002b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c27  00000000  00000000  00045cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad317  00000000  00000000  0004d91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fac33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f48  00000000  00000000  000facb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003370 	.word	0x08003370

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003370 	.word	0x08003370

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000220:	201e      	movs	r0, #30
 8000222:	f000 fd2f 	bl	8000c84 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000226:	2380      	movs	r3, #128	; 0x80
 8000228:	019b      	lsls	r3, r3, #6
 800022a:	4821      	ldr	r0, [pc, #132]	; (80002b0 <lcd_init+0x94>)
 800022c:	2200      	movs	r2, #0
 800022e:	0019      	movs	r1, r3
 8000230:	f000 ffaa 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	015b      	lsls	r3, r3, #5
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <lcd_init+0x94>)
 800023a:	2201      	movs	r2, #1
 800023c:	0019      	movs	r1, r3
 800023e:	f000 ffa3 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	011b      	lsls	r3, r3, #4
 8000246:	481a      	ldr	r0, [pc, #104]	; (80002b0 <lcd_init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	0019      	movs	r1, r3
 800024c:	f000 ff9c 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	00db      	lsls	r3, r3, #3
 8000254:	4816      	ldr	r0, [pc, #88]	; (80002b0 <lcd_init+0x94>)
 8000256:	2200      	movs	r2, #0
 8000258:	0019      	movs	r1, r3
 800025a:	f000 ff95 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	021b      	lsls	r3, r3, #8
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <lcd_init+0x94>)
 8000264:	2200      	movs	r2, #0
 8000266:	0019      	movs	r1, r3
 8000268:	f000 ff8e 	bl	8001188 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	01db      	lsls	r3, r3, #7
 8000270:	480f      	ldr	r0, [pc, #60]	; (80002b0 <lcd_init+0x94>)
 8000272:	2201      	movs	r2, #1
 8000274:	0019      	movs	r1, r3
 8000276:	f000 ff87 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	01db      	lsls	r3, r3, #7
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <lcd_init+0x94>)
 8000280:	2200      	movs	r2, #0
 8000282:	0019      	movs	r1, r3
 8000284:	f000 ff80 	bl	8001188 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000288:	2128      	movs	r1, #40	; 0x28
 800028a:	2000      	movs	r0, #0
 800028c:	f000 f812 	bl	80002b4 <lcd_write>
	lcd_write(0,0x0c);
 8000290:	210c      	movs	r1, #12
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f80e 	bl	80002b4 <lcd_write>
	lcd_write(0,0x06);
 8000298:	2106      	movs	r1, #6
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f80a 	bl	80002b4 <lcd_write>
	lcd_write(0,0x01);
 80002a0:	2101      	movs	r1, #1
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 f806 	bl	80002b4 <lcd_write>
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	50000400 	.word	0x50000400

080002b4 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	1dbb      	adds	r3, r7, #6
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80002c6:	2002      	movs	r0, #2
 80002c8:	f000 fcdc 	bl	8000c84 <HAL_Delay>
	if(type)
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d007      	beq.n	80002e4 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	4866      	ldr	r0, [pc, #408]	; (8000474 <lcd_write+0x1c0>)
 80002da:	2201      	movs	r2, #1
 80002dc:	0019      	movs	r1, r3
 80002de:	f000 ff53 	bl	8001188 <HAL_GPIO_WritePin>
 80002e2:	e006      	b.n	80002f2 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	4862      	ldr	r0, [pc, #392]	; (8000474 <lcd_write+0x1c0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	0019      	movs	r1, r3
 80002ee:	f000 ff4b 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 80002f2:	1dbb      	adds	r3, r7, #6
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da07      	bge.n	800030c <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	485c      	ldr	r0, [pc, #368]	; (8000474 <lcd_write+0x1c0>)
 8000302:	2201      	movs	r2, #1
 8000304:	0019      	movs	r1, r3
 8000306:	f000 ff3f 	bl	8001188 <HAL_GPIO_WritePin>
 800030a:	e006      	b.n	800031a <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	4858      	ldr	r0, [pc, #352]	; (8000474 <lcd_write+0x1c0>)
 8000312:	2200      	movs	r2, #0
 8000314:	0019      	movs	r1, r3
 8000316:	f000 ff37 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800031a:	1dbb      	adds	r3, r7, #6
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	4013      	ands	r3, r2
 8000322:	d007      	beq.n	8000334 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	011b      	lsls	r3, r3, #4
 8000328:	4852      	ldr	r0, [pc, #328]	; (8000474 <lcd_write+0x1c0>)
 800032a:	2201      	movs	r2, #1
 800032c:	0019      	movs	r1, r3
 800032e:	f000 ff2b 	bl	8001188 <HAL_GPIO_WritePin>
 8000332:	e006      	b.n	8000342 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000334:	2380      	movs	r3, #128	; 0x80
 8000336:	011b      	lsls	r3, r3, #4
 8000338:	484e      	ldr	r0, [pc, #312]	; (8000474 <lcd_write+0x1c0>)
 800033a:	2200      	movs	r2, #0
 800033c:	0019      	movs	r1, r3
 800033e:	f000 ff23 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2220      	movs	r2, #32
 8000348:	4013      	ands	r3, r2
 800034a:	d007      	beq.n	800035c <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	015b      	lsls	r3, r3, #5
 8000350:	4848      	ldr	r0, [pc, #288]	; (8000474 <lcd_write+0x1c0>)
 8000352:	2201      	movs	r2, #1
 8000354:	0019      	movs	r1, r3
 8000356:	f000 ff17 	bl	8001188 <HAL_GPIO_WritePin>
 800035a:	e006      	b.n	800036a <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	4844      	ldr	r0, [pc, #272]	; (8000474 <lcd_write+0x1c0>)
 8000362:	2200      	movs	r2, #0
 8000364:	0019      	movs	r1, r3
 8000366:	f000 ff0f 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 800036a:	1dbb      	adds	r3, r7, #6
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2210      	movs	r2, #16
 8000370:	4013      	ands	r3, r2
 8000372:	d007      	beq.n	8000384 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	019b      	lsls	r3, r3, #6
 8000378:	483e      	ldr	r0, [pc, #248]	; (8000474 <lcd_write+0x1c0>)
 800037a:	2201      	movs	r2, #1
 800037c:	0019      	movs	r1, r3
 800037e:	f000 ff03 	bl	8001188 <HAL_GPIO_WritePin>
 8000382:	e006      	b.n	8000392 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	019b      	lsls	r3, r3, #6
 8000388:	483a      	ldr	r0, [pc, #232]	; (8000474 <lcd_write+0x1c0>)
 800038a:	2200      	movs	r2, #0
 800038c:	0019      	movs	r1, r3
 800038e:	f000 fefb 	bl	8001188 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	01db      	lsls	r3, r3, #7
 8000396:	4837      	ldr	r0, [pc, #220]	; (8000474 <lcd_write+0x1c0>)
 8000398:	2201      	movs	r2, #1
 800039a:	0019      	movs	r1, r3
 800039c:	f000 fef4 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	01db      	lsls	r3, r3, #7
 80003a4:	4833      	ldr	r0, [pc, #204]	; (8000474 <lcd_write+0x1c0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	0019      	movs	r1, r3
 80003aa:	f000 feed 	bl	8001188 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2208      	movs	r2, #8
 80003b4:	4013      	ands	r3, r2
 80003b6:	d007      	beq.n	80003c8 <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	482d      	ldr	r0, [pc, #180]	; (8000474 <lcd_write+0x1c0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	0019      	movs	r1, r3
 80003c2:	f000 fee1 	bl	8001188 <HAL_GPIO_WritePin>
 80003c6:	e006      	b.n	80003d6 <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	4829      	ldr	r0, [pc, #164]	; (8000474 <lcd_write+0x1c0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	0019      	movs	r1, r3
 80003d2:	f000 fed9 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80003d6:	1dbb      	adds	r3, r7, #6
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2204      	movs	r2, #4
 80003dc:	4013      	ands	r3, r2
 80003de:	d007      	beq.n	80003f0 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	4823      	ldr	r0, [pc, #140]	; (8000474 <lcd_write+0x1c0>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0019      	movs	r1, r3
 80003ea:	f000 fecd 	bl	8001188 <HAL_GPIO_WritePin>
 80003ee:	e006      	b.n	80003fe <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	481f      	ldr	r0, [pc, #124]	; (8000474 <lcd_write+0x1c0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	0019      	movs	r1, r3
 80003fa:	f000 fec5 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2202      	movs	r2, #2
 8000404:	4013      	ands	r3, r2
 8000406:	d007      	beq.n	8000418 <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	015b      	lsls	r3, r3, #5
 800040c:	4819      	ldr	r0, [pc, #100]	; (8000474 <lcd_write+0x1c0>)
 800040e:	2201      	movs	r2, #1
 8000410:	0019      	movs	r1, r3
 8000412:	f000 feb9 	bl	8001188 <HAL_GPIO_WritePin>
 8000416:	e006      	b.n	8000426 <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	015b      	lsls	r3, r3, #5
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <lcd_write+0x1c0>)
 800041e:	2200      	movs	r2, #0
 8000420:	0019      	movs	r1, r3
 8000422:	f000 feb1 	bl	8001188 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	d007      	beq.n	8000440 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	019b      	lsls	r3, r3, #6
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <lcd_write+0x1c0>)
 8000436:	2201      	movs	r2, #1
 8000438:	0019      	movs	r1, r3
 800043a:	f000 fea5 	bl	8001188 <HAL_GPIO_WritePin>
 800043e:	e006      	b.n	800044e <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	019b      	lsls	r3, r3, #6
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <lcd_write+0x1c0>)
 8000446:	2200      	movs	r2, #0
 8000448:	0019      	movs	r1, r3
 800044a:	f000 fe9d 	bl	8001188 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	01db      	lsls	r3, r3, #7
 8000452:	4808      	ldr	r0, [pc, #32]	; (8000474 <lcd_write+0x1c0>)
 8000454:	2201      	movs	r2, #1
 8000456:	0019      	movs	r1, r3
 8000458:	f000 fe96 	bl	8001188 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <lcd_write+0x1c0>)
 8000462:	2200      	movs	r2, #0
 8000464:	0019      	movs	r1, r3
 8000466:	f000 fe8f 	bl	8001188 <HAL_GPIO_WritePin>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	50000400 	.word	0x50000400

08000478 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	603a      	str	r2, [r7, #0]
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	1c02      	adds	r2, r0, #0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	1dbb      	adds	r3, r7, #6
 8000488:	1c0a      	adds	r2, r1, #0
 800048a:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d011      	beq.n	80004b8 <lcd_puts+0x40>
 8000494:	dc02      	bgt.n	800049c <lcd_puts+0x24>
 8000496:	2b00      	cmp	r3, #0
 8000498:	d005      	beq.n	80004a6 <lcd_puts+0x2e>
 800049a:	e028      	b.n	80004ee <lcd_puts+0x76>
 800049c:	2b02      	cmp	r3, #2
 800049e:	d014      	beq.n	80004ca <lcd_puts+0x52>
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d01b      	beq.n	80004dc <lcd_puts+0x64>
 80004a4:	e023      	b.n	80004ee <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	3b80      	subs	r3, #128	; 0x80
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	0019      	movs	r1, r3
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff feff 	bl	80002b4 <lcd_write>
			break;
 80004b6:	e01a      	b.n	80004ee <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	3b40      	subs	r3, #64	; 0x40
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	0019      	movs	r1, r3
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff fef6 	bl	80002b4 <lcd_write>
			break;
 80004c8:	e011      	b.n	80004ee <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	3b70      	subs	r3, #112	; 0x70
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	0019      	movs	r1, r3
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff feed 	bl	80002b4 <lcd_write>
			break;
 80004da:	e008      	b.n	80004ee <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b30      	subs	r3, #48	; 0x30
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	0019      	movs	r1, r3
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fee4 	bl	80002b4 <lcd_write>
			break;
 80004ec:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80004ee:	e00a      	b.n	8000506 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	0019      	movs	r1, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	f7ff feda 	bl	80002b4 <lcd_write>
		string++;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	603b      	str	r3, [r7, #0]
	while(*string)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1ef      	bne.n	80004f0 <lcd_puts+0x78>
	}
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}

08000518 <lcd_clear>:
void lcd_clear(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 800051c:	2101      	movs	r1, #1
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff fec8 	bl	80002b4 <lcd_write>
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <set_time>:
uint8_t alarm =0;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);
void set_time (void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
	 RTC_TimeTypeDef sTime = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f002 fb08 	bl	8002b50 <memset>
	  RTC_DateTypeDef sDate = {0};
 8000540:	003b      	movs	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]

	 sTime.Hours = 0;
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0;
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	709a      	strb	r2, [r3, #2]
	  sTime.SubSeconds = 0;
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800056a:	1d39      	adds	r1, r7, #4
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <set_time+0x94>)
 800056e:	2200      	movs	r2, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fe2b 	bl	80021cc <HAL_RTC_SetTime>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <set_time+0x52>
	  {
	    Error_Handler();
 800057a:	f000 fa05 	bl	8000988 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800057e:	003b      	movs	r3, r7
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8000584:	003b      	movs	r3, r7
 8000586:	2201      	movs	r2, #1
 8000588:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 1;
 800058a:	003b      	movs	r3, r7
 800058c:	2201      	movs	r2, #1
 800058e:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0;
 8000590:	003b      	movs	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000596:	0039      	movs	r1, r7
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <set_time+0x94>)
 800059a:	2200      	movs	r2, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f001 ff19 	bl	80023d4 <HAL_RTC_SetDate>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <set_time+0x7e>
	  {
	    Error_Handler();
 80005a6:	f000 f9ef 	bl	8000988 <Error_Handler>
	  }

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80005aa:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <set_time+0x98>)
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <set_time+0x94>)
 80005ae:	2101      	movs	r1, #1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 fa6b 	bl	8002a8c <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b006      	add	sp, #24
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	2000009c 	.word	0x2000009c
 80005c4:	000032f2 	.word	0x000032f2

080005c8 <set_alarm>:

void set_alarm (void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm;

	  sAlarm.AlarmTime.Hours = 0;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	   sAlarm.AlarmTime.Minutes = 0;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	705a      	strb	r2, [r3, #1]
	   sAlarm.AlarmTime.Seconds = 0;
 80005da:	003b      	movs	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	709a      	strb	r2, [r3, #2]
	   sAlarm.AlarmTime.SubSeconds = 0;
 80005e0:	003b      	movs	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
	   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80005e6:	003b      	movs	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
	   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
	   sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80005f2:	003b      	movs	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
	   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
	   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80005fe:	003b      	movs	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
	   sAlarm.AlarmDateWeekDay = 1;
 8000604:	003b      	movs	r3, r7
 8000606:	2220      	movs	r2, #32
 8000608:	2101      	movs	r1, #1
 800060a:	5499      	strb	r1, [r3, r2]
	   sAlarm.Alarm = RTC_ALARM_A;
 800060c:	003b      	movs	r3, r7
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
	   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000614:	0039      	movs	r1, r7
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <set_alarm+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f001 ffba 	bl	8002594 <HAL_RTC_SetAlarm_IT>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <set_alarm+0x60>
	   {
	     Error_Handler();
 8000624:	f000 f9b0 	bl	8000988 <Error_Handler>
	   }
	   /* USER CODE BEGIN RTC_Init 2 */

	   /* USER CODE END RTC_Init 2 */

	 }
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b00a      	add	sp, #40	; 0x28
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000009c 	.word	0x2000009c

08000634 <get_time>:


void get_time(void)
{
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800063a:	0039      	movs	r1, r7
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <get_time+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fe6b 	bl	800231c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000646:	2514      	movs	r5, #20
 8000648:	1979      	adds	r1, r7, r5
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <get_time+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f001 ff52 	bl	80024f8 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000654:	003b      	movs	r3, r7
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	001a      	movs	r2, r3
 800065a:	003b      	movs	r3, r7
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	001c      	movs	r4, r3
 8000660:	003b      	movs	r3, r7
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	490e      	ldr	r1, [pc, #56]	; (80006a0 <get_time+0x6c>)
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <get_time+0x70>)
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	0023      	movs	r3, r4
 800066c:	f002 fa78 	bl	8002b60 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000670:	197b      	adds	r3, r7, r5
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	001a      	movs	r2, r3
 8000676:	197b      	adds	r3, r7, r5
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	001c      	movs	r4, r3
 800067c:	197b      	adds	r3, r7, r5
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	21fa      	movs	r1, #250	; 0xfa
 8000682:	00c9      	lsls	r1, r1, #3
 8000684:	468c      	mov	ip, r1
 8000686:	4463      	add	r3, ip
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <get_time+0x74>)
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <get_time+0x78>)
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	0023      	movs	r3, r4
 8000690:	f002 fa66 	bl	8002b60 <siprintf>
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b006      	add	sp, #24
 800069a:	bdb0      	pop	{r4, r5, r7, pc}
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	08003388 	.word	0x08003388
 80006a4:	200000c8 	.word	0x200000c8
 80006a8:	08003398 	.word	0x08003398
 80006ac:	200000d4 	.word	0x200000d4

080006b0 <display_time>:

//Let's display the time and date on lcd

void display_time (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	lcd_puts(0,0,time);
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <display_time+0x24>)
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fedc 	bl	8000478 <lcd_puts>
	lcd_puts(1,0,date);
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <display_time+0x28>)
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fed6 	bl	8000478 <lcd_puts>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	200000c8 	.word	0x200000c8
 80006d8:	200000d4 	.word	0x200000d4

080006dc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	alarm = 1;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <HAL_RTC_AlarmAEventCallback+0x18>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <to_do_on_alarm>:

void to_do_on_alarm (void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);  // set led ON
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2201      	movs	r2, #1
 8000702:	2120      	movs	r1, #32
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fd3f 	bl	8001188 <HAL_GPIO_WritePin>
	lcd_clear();
 800070a:	f7ff ff05 	bl	8000518 <lcd_clear>
	lcd_puts(0,0,"Alarm Time");
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <to_do_on_alarm+0x34>)
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff feaf 	bl	8000478 <lcd_puts>
	HAL_Delay (3000);
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <to_do_on_alarm+0x38>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fab1 	bl	8000c84 <HAL_Delay>
	lcd_clear();
 8000722:	f7ff fef9 	bl	8000518 <lcd_clear>
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	080033a8 	.word	0x080033a8
 8000730:	00000bb8 	.word	0x00000bb8

08000734 <main>:

int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   HAL_Init();
 8000738:	f000 fa1e 	bl	8000b78 <HAL_Init>
  SystemClock_Config();
 800073c:	f000 f82e 	bl	800079c <SystemClock_Config>
   MX_GPIO_Init();
 8000740:	f000 f8c0 	bl	80008c4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000744:	f000 f890 	bl	8000868 <MX_RTC_Init>
  lcd_init();
 8000748:	f7ff fd68 	bl	800021c <lcd_init>
  lcd_clear();
 800074c:	f7ff fee4 	bl	8000518 <lcd_clear>

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x5c>)
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f002 f9b6 	bl	8002ac6 <HAL_RTCEx_BKUPRead>
 800075a:	0002      	movs	r2, r0
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <main+0x60>)
 800075e:	429a      	cmp	r2, r3
 8000760:	d001      	beq.n	8000766 <main+0x32>
      {
      //   Set the time
        set_time();
 8000762:	f7ff fee3 	bl	800052c <set_time>
      }

  set_alarm ();
 8000766:	f7ff ff2f 	bl	80005c8 <set_alarm>
   /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time();
 800076a:	f7ff ff63 	bl	8000634 <get_time>
	  display_time();
 800076e:	f7ff ff9f 	bl	80006b0 <display_time>
	  HAL_Delay(500);
 8000772:	23fa      	movs	r3, #250	; 0xfa
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fa84 	bl	8000c84 <HAL_Delay>

	  if (alarm)
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <main+0x64>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0f2      	beq.n	800076a <main+0x36>
	  {
		  to_do_on_alarm();
 8000784:	f7ff ffb8 	bl	80006f8 <to_do_on_alarm>
		  alarm =0;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <main+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
	  get_time();
 800078e:	e7ec      	b.n	800076a <main+0x36>
 8000790:	2000009c 	.word	0x2000009c
 8000794:	000032f2 	.word	0x000032f2
 8000798:	2000008c 	.word	0x2000008c

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b0a7      	sub	sp, #156	; 0x9c
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	245c      	movs	r4, #92	; 0x5c
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	233c      	movs	r3, #60	; 0x3c
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f002 f9cf 	bl	8002b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	234c      	movs	r3, #76	; 0x4c
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	0018      	movs	r0, r3
 80007b8:	2310      	movs	r3, #16
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f002 f9c7 	bl	8002b50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c2:	003b      	movs	r3, r7
 80007c4:	0018      	movs	r0, r3
 80007c6:	234c      	movs	r3, #76	; 0x4c
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f002 f9c0 	bl	8002b50 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fcf5 	bl	80011c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	220a      	movs	r2, #10
 80007de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007e8:	0021      	movs	r1, r4
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2240      	movs	r2, #64	; 0x40
 80007f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	187b      	adds	r3, r7, r1
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fd1d 	bl	8001244 <HAL_RCC_OscConfig>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800080e:	f000 f8bb 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	214c      	movs	r1, #76	; 0x4c
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2207      	movs	r2, #7
 8000818:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2100      	movs	r1, #0
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f86d 	bl	8001910 <HAL_RCC_ClockConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800083a:	f000 f8a5 	bl	8000988 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800083e:	003b      	movs	r3, r7
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0292      	lsls	r2, r2, #10
 8000844:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000846:	003b      	movs	r3, r7
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084e:	003b      	movs	r3, r7
 8000850:	0018      	movs	r0, r3
 8000852:	f001 f9e7 	bl	8001c24 <HAL_RCCEx_PeriphCLKConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800085a:	f000 f895 	bl	8000988 <Error_Handler>
  }
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b027      	add	sp, #156	; 0x9c
 8000864:	bd90      	pop	{r4, r7, pc}
	...

08000868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_RTC_Init+0x54>)
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <MX_RTC_Init+0x58>)
 8000870:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_RTC_Init+0x54>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_RTC_Init+0x54>)
 800087a:	227f      	movs	r2, #127	; 0x7f
 800087c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_RTC_Init+0x54>)
 8000880:	22ff      	movs	r2, #255	; 0xff
 8000882:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_RTC_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_RTC_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_RTC_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_RTC_Init+0x54>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	05d2      	lsls	r2, r2, #23
 800089c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_RTC_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_RTC_Init+0x54>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fbfa 	bl	80020a0 <HAL_RTC_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80008b0:	f000 f86a 	bl	8000988 <Error_Handler>
  }
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	40002800 	.word	0x40002800

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	240c      	movs	r4, #12
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	0018      	movs	r0, r3
 80008d0:	2314      	movs	r3, #20
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f002 f93b 	bl	8002b50 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <MX_GPIO_Init+0xbc>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_GPIO_Init+0xbc>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_GPIO_Init+0xbc>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xbc>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_GPIO_Init+0xbc>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0xbc>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000902:	2202      	movs	r2, #2
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800090a:	23a0      	movs	r3, #160	; 0xa0
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2200      	movs	r2, #0
 8000910:	2120      	movs	r1, #32
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fc38 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000918:	23fc      	movs	r3, #252	; 0xfc
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	4819      	ldr	r0, [pc, #100]	; (8000984 <MX_GPIO_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	0019      	movs	r1, r3
 8000922:	f000 fc31 	bl	8001188 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000926:	0021      	movs	r1, r4
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2220      	movs	r2, #32
 800092c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2201      	movs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	000c      	movs	r4, r1
 8000942:	187a      	adds	r2, r7, r1
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fab0 	bl	8000eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	22fc      	movs	r2, #252	; 0xfc
 8000956:	0212      	lsls	r2, r2, #8
 8000958:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2201      	movs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	187b      	adds	r3, r7, r1
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <MX_GPIO_Init+0xc0>)
 8000970:	0019      	movs	r1, r3
 8000972:	0010      	movs	r0, r2
 8000974:	f000 fa9c 	bl	8000eb0 <HAL_GPIO_Init>

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b009      	add	sp, #36	; 0x24
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40021000 	.word	0x40021000
 8000984:	50000400 	.word	0x50000400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098e:	e7fe      	b.n	800098e <Error_Handler+0x6>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_MspInit+0x5c>)
 8000998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_MspInit+0x5c>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x5c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	2201      	movs	r2, #1
 80009a8:	4013      	ands	r3, r2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x5c>)
 80009b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <HAL_MspInit+0x5c>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0549      	lsls	r1, r1, #21
 80009b8:	430a      	orrs	r2, r1
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x5c>)
 80009be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	055b      	lsls	r3, r3, #21
 80009c4:	4013      	ands	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2004      	movs	r0, #4
 80009d0:	f000 fa3c 	bl	8000e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 80009d4:	2004      	movs	r0, #4
 80009d6:	f000 fa4e 	bl	8000e76 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009da:	23c0      	movs	r3, #192	; 0xc0
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f972 	bl	8000cc8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <HAL_RTC_MspInit+0x54>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d11c      	bne.n	8000a3c <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_RTC_MspInit+0x58>)
 8000a04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_RTC_MspInit+0x58>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0209      	lsls	r1, r1, #8
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_RTC_MspInit+0x58>)
 8000a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_RTC_MspInit+0x58>)
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	00c9      	lsls	r1, r1, #3
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_RTC_MspInit+0x58>)
 8000a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4013      	ands	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2002      	movs	r0, #2
 8000a32:	f000 fa0b 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f000 fa1d 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b004      	add	sp, #16
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40002800 	.word	0x40002800
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f8ec 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <RTC_TAMP_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 fec6 	bl	8002814 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	2000009c 	.word	0x2000009c

08000a94 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global Interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	18d3      	adds	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f002 f814 	bl	8002afc <__errno>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	425b      	negs	r3, r3
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	18d2      	adds	r2, r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b006      	add	sp, #24
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20024000 	.word	0x20024000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	20000090 	.word	0x20000090
 8000b08:	200000e8 	.word	0x200000e8

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <SystemInit+0x14>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	0512      	lsls	r2, r2, #20
 8000b16:	609a      	str	r2, [r3, #8]
#endif
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b28:	f7ff fff0 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b52:	f001 ffd9 	bl	8002b08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b56:	f7ff fded 	bl	8000734 <main>

08000b5a <LoopForever>:

LoopForever:
  b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b68:	08003430 	.word	0x08003430
  ldr r2, =_sbss
 8000b6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b70:	200000e8 	.word	0x200000e8

08000b74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_COMP_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x3c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Init+0x3c>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	0049      	lsls	r1, r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f810 	bl	8000bb8 <HAL_InitTick>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fef4 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_InitTick+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02b      	beq.n	8000c28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_InitTick+0x8c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_InitTick+0x88>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	; 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa91 	bl	8000104 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8c 	bl	8000104 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f951 	bl	8000e96 <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d112      	bne.n	8000c1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80a      	bhi.n	8000c14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f920 	bl	8000e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_InitTick+0x90>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e008      	b.n	8000c30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e003      	b.n	8000c30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	200000e0 	.word	0x200000e0

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	200000e0 	.word	0x200000e0

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_Delay+0x40>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b004      	add	sp, #16
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	0019      	movs	r1, r3
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	fffff9ff 	.word	0xfffff9ff

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b7f      	cmp	r3, #127	; 0x7f
 8000d06:	d809      	bhi.n	8000d1c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	231f      	movs	r3, #31
 8000d10:	401a      	ands	r2, r3
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_EnableIRQ+0x30>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	4091      	lsls	r1, r2
 8000d18:	000a      	movs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d3c:	d828      	bhi.n	8000d90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3e:	4a2f      	ldr	r2, [pc, #188]	; (8000dfc <__NVIC_SetPriority+0xd4>)
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25b      	sxtb	r3, r3
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	33c0      	adds	r3, #192	; 0xc0
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	589b      	ldr	r3, [r3, r2]
 8000d4e:	1dfa      	adds	r2, r7, #7
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	0011      	movs	r1, r2
 8000d54:	2203      	movs	r2, #3
 8000d56:	400a      	ands	r2, r1
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	21ff      	movs	r1, #255	; 0xff
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	000a      	movs	r2, r1
 8000d60:	43d2      	mvns	r2, r2
 8000d62:	401a      	ands	r2, r3
 8000d64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	0018      	movs	r0, r3
 8000d74:	2303      	movs	r3, #3
 8000d76:	4003      	ands	r3, r0
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	481f      	ldr	r0, [pc, #124]	; (8000dfc <__NVIC_SetPriority+0xd4>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b25b      	sxtb	r3, r3
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	430a      	orrs	r2, r1
 8000d88:	33c0      	adds	r3, #192	; 0xc0
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d8e:	e031      	b.n	8000df4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <__NVIC_SetPriority+0xd8>)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0019      	movs	r1, r3
 8000d98:	230f      	movs	r3, #15
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	3b08      	subs	r3, #8
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3306      	adds	r3, #6
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	18d3      	adds	r3, r2, r3
 8000da6:	3304      	adds	r3, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1dfa      	adds	r2, r7, #7
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	0011      	movs	r1, r2
 8000db0:	2203      	movs	r2, #3
 8000db2:	400a      	ands	r2, r1
 8000db4:	00d2      	lsls	r2, r2, #3
 8000db6:	21ff      	movs	r1, #255	; 0xff
 8000db8:	4091      	lsls	r1, r2
 8000dba:	000a      	movs	r2, r1
 8000dbc:	43d2      	mvns	r2, r2
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	401a      	ands	r2, r3
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	4003      	ands	r3, r0
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <__NVIC_SetPriority+0xd8>)
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	001c      	movs	r4, r3
 8000de0:	230f      	movs	r3, #15
 8000de2:	4023      	ands	r3, r4
 8000de4:	3b08      	subs	r3, #8
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	430a      	orrs	r2, r1
 8000dea:	3306      	adds	r3, #6
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	18c3      	adds	r3, r0, r3
 8000df0:	3304      	adds	r3, #4
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b003      	add	sp, #12
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <SysTick_Config+0x40>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d901      	bls.n	8000e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2301      	movs	r3, #1
 8000e18:	e010      	b.n	8000e3c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <SysTick_Config+0x44>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	3a01      	subs	r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	2103      	movs	r1, #3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff7d 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SysTick_Config+0x44>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x44>)
 8000e36:	2207      	movs	r2, #7
 8000e38:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	00ffffff 	.word	0x00ffffff
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	210f      	movs	r1, #15
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	1c02      	adds	r2, r0, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	0002      	movs	r2, r0
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b25b      	sxtb	r3, r3
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ff33 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff ffaf 	bl	8000e04 <SysTick_Config>
 8000ea6:	0003      	movs	r3, r0
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e14d      	b.n	800115c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x28>
 8000ed6:	e13e      	b.n	8001156 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d00b      	beq.n	8000ef8 <HAL_GPIO_Init+0x48>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eec:	2b11      	cmp	r3, #17
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b12      	cmp	r3, #18
 8000ef6:	d130      	bne.n	8000f5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	43da      	mvns	r2, r3
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	0013      	movs	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0xea>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d123      	bne.n	8000fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	58d3      	ldr	r3, [r2, r3]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2207      	movs	r2, #7
 8000fac:	4013      	ands	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	6939      	ldr	r1, [r7, #16]
 8000fe0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	401a      	ands	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	055b      	lsls	r3, r3, #21
 800101e:	4013      	ands	r3, r2
 8001020:	d100      	bne.n	8001024 <HAL_GPIO_Init+0x174>
 8001022:	e098      	b.n	8001156 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001024:	4a53      	ldr	r2, [pc, #332]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3318      	adds	r3, #24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	589b      	ldr	r3, [r3, r2]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	220f      	movs	r2, #15
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	429a      	cmp	r2, r3
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x1d6>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2c8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x1d2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x2cc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x1ce>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a46      	ldr	r2, [pc, #280]	; (8001180 <HAL_GPIO_Init+0x2d0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x1ca>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a45      	ldr	r2, [pc, #276]	; (8001184 <HAL_GPIO_Init+0x2d4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x1c6>
 8001072:	2304      	movs	r3, #4
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x1d8>
 8001076:	2305      	movs	r3, #5
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x1d8>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x1d8>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x1d8>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x1d8>
 8001086:	2300      	movs	r3, #0
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	2103      	movs	r1, #3
 800108c:	400a      	ands	r2, r1
 800108e:	00d2      	lsls	r2, r2, #3
 8001090:	4093      	lsls	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001098:	4936      	ldr	r1, [pc, #216]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3318      	adds	r3, #24
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	58d3      	ldr	r3, [r2, r3]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43da      	mvns	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	025b      	lsls	r3, r3, #9
 80010c0:	4013      	ands	r3, r2
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010cc:	4929      	ldr	r1, [pc, #164]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 80010d6:	2384      	movs	r3, #132	; 0x84
 80010d8:	58d3      	ldr	r3, [r2, r3]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	029b      	lsls	r3, r3, #10
 80010ee:	4013      	ands	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010fa:	491e      	ldr	r1, [pc, #120]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 80010fc:	2284      	movs	r2, #132	; 0x84
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	035b      	lsls	r3, r3, #13
 800111a:	4013      	ands	r3, r2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	039b      	lsls	r3, r3, #14
 8001144:	4013      	ands	r3, r2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	40da      	lsrs	r2, r3
 8001164:	1e13      	subs	r3, r2, #0
 8001166:	d000      	beq.n	800116a <HAL_GPIO_Init+0x2ba>
 8001168:	e6aa      	b.n	8000ec0 <HAL_GPIO_Init+0x10>
  }
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b006      	add	sp, #24
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40021800 	.word	0x40021800
 8001178:	50000400 	.word	0x50000400
 800117c:	50000800 	.word	0x50000800
 8001180:	50000c00 	.word	0x50000c00
 8001184:	50001000 	.word	0x50001000

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	0008      	movs	r0, r1
 8001192:	0011      	movs	r1, r2
 8001194:	1cbb      	adds	r3, r7, #2
 8001196:	1c02      	adds	r2, r0, #0
 8001198:	801a      	strh	r2, [r3, #0]
 800119a:	1c7b      	adds	r3, r7, #1
 800119c:	1c0a      	adds	r2, r1, #0
 800119e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a0:	1c7b      	adds	r3, r7, #1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b0:	e003      	b.n	80011ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b2:	1cbb      	adds	r3, r7, #2
 80011b4:	881a      	ldrh	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	0019      	movs	r1, r3
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d11f      	bne.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	0013      	movs	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	189b      	adds	r3, r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4912      	ldr	r1, [pc, #72]	; (8001240 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7fe ff84 	bl	8000104 <__udivsi3>
 80011fc:	0003      	movs	r3, r0
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001202:	e008      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3b01      	subs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e001      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e009      	b.n	800122a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	401a      	ands	r2, r3
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	429a      	cmp	r2, r3
 8001226:	d0ed      	beq.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40007000 	.word	0x40007000
 8001238:	fffff9ff 	.word	0xfffff9ff
 800123c:	20000000 	.word	0x20000000
 8001240:	000f4240 	.word	0x000f4240

08001244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	f000 fb56 	bl	8001904 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	d100      	bne.n	8001264 <HAL_RCC_OscConfig+0x20>
 8001262:	e07d      	b.n	8001360 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001264:	4bc3      	ldr	r3, [pc, #780]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2238      	movs	r2, #56	; 0x38
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800126e:	4bc1      	ldr	r3, [pc, #772]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2203      	movs	r2, #3
 8001274:	4013      	ands	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b10      	cmp	r3, #16
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0x40>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d002      	beq.n	800128a <HAL_RCC_OscConfig+0x46>
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b08      	cmp	r3, #8
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128a:	4bba      	ldr	r3, [pc, #744]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x11a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d15f      	bne.n	800135e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f000 fb30 	bl	8001904 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_OscConfig+0x7c>
 80012b0:	4bb0      	ldr	r3, [pc, #704]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4baf      	ldr	r3, [pc, #700]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	0249      	lsls	r1, r1, #9
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e020      	b.n	8001302 <HAL_RCC_OscConfig+0xbe>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	23a0      	movs	r3, #160	; 0xa0
 80012c6:	02db      	lsls	r3, r3, #11
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d10e      	bne.n	80012ea <HAL_RCC_OscConfig+0xa6>
 80012cc:	4ba9      	ldr	r3, [pc, #676]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4ba8      	ldr	r3, [pc, #672]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	02c9      	lsls	r1, r1, #11
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	4ba6      	ldr	r3, [pc, #664]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba5      	ldr	r3, [pc, #660]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0249      	lsls	r1, r1, #9
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e00b      	b.n	8001302 <HAL_RCC_OscConfig+0xbe>
 80012ea:	4ba2      	ldr	r3, [pc, #648]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4ba1      	ldr	r3, [pc, #644]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012f0:	49a1      	ldr	r1, [pc, #644]	; (8001578 <HAL_RCC_OscConfig+0x334>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	4b9f      	ldr	r3, [pc, #636]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b9e      	ldr	r3, [pc, #632]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80012fc:	499f      	ldr	r1, [pc, #636]	; (800157c <HAL_RCC_OscConfig+0x338>)
 80012fe:	400a      	ands	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d014      	beq.n	8001334 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fcb1 	bl	8000c70 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcac 	bl	8000c70 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2ee      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	4b93      	ldr	r3, [pc, #588]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	029b      	lsls	r3, r3, #10
 800132e:	4013      	ands	r3, r2
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xd0>
 8001332:	e015      	b.n	8001360 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc9c 	bl	8000c70 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133e:	f7ff fc97 	bl	8000c70 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e2d9      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001350:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0xfa>
 800135c:	e000      	b.n	8001360 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x128>
 800136a:	e099      	b.n	80014a0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136c:	4b81      	ldr	r3, [pc, #516]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2238      	movs	r2, #56	; 0x38
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001376:	4b7f      	ldr	r3, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2203      	movs	r2, #3
 800137c:	4013      	ands	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b10      	cmp	r3, #16
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x148>
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d002      	beq.n	8001392 <HAL_RCC_OscConfig+0x14e>
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d135      	bne.n	80013fe <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4013      	ands	r3, r2
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x166>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e2ac      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a74      	ldr	r2, [pc, #464]	; (8001580 <HAL_RCC_OscConfig+0x33c>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	021a      	lsls	r2, r3, #8
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d112      	bne.n	80013ec <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013c6:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6e      	ldr	r2, [pc, #440]	; (8001584 <HAL_RCC_OscConfig+0x340>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	4b67      	ldr	r3, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013da:	4b66      	ldr	r3, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	0adb      	lsrs	r3, r3, #11
 80013e0:	2207      	movs	r2, #7
 80013e2:	4013      	ands	r3, r2
 80013e4:	4a68      	ldr	r2, [pc, #416]	; (8001588 <HAL_RCC_OscConfig+0x344>)
 80013e6:	40da      	lsrs	r2, r3
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x348>)
 80013ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013ec:	4b68      	ldr	r3, [pc, #416]	; (8001590 <HAL_RCC_OscConfig+0x34c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff fbe1 	bl	8000bb8 <HAL_InitTick>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d051      	beq.n	800149e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e282      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d030      	beq.n	8001468 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a5e      	ldr	r2, [pc, #376]	; (8001584 <HAL_RCC_OscConfig+0x340>)
 800140c:	4013      	ands	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	4b57      	ldr	r3, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800141a:	4b56      	ldr	r3, [pc, #344]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0049      	lsls	r1, r1, #1
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fc22 	bl	8000c70 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fc1d 	bl	8000c70 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e25f      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4013      	ands	r3, r2
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b48      	ldr	r3, [pc, #288]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_RCC_OscConfig+0x33c>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	021a      	lsls	r2, r3, #8
 8001460:	4b44      	ldr	r3, [pc, #272]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	e01b      	b.n	80014a0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b41      	ldr	r3, [pc, #260]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800146e:	4949      	ldr	r1, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x350>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fbfc 	bl	8000c70 <HAL_GetTick>
 8001478:	0003      	movs	r3, r0
 800147a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff fbf7 	bl	8000c70 <HAL_GetTick>
 8001482:	0002      	movs	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e239      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001490:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4013      	ands	r3, r2
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x23a>
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2208      	movs	r2, #8
 80014a6:	4013      	ands	r3, r2
 80014a8:	d047      	beq.n	800153a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2238      	movs	r2, #56	; 0x38
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b18      	cmp	r3, #24
 80014b4:	d10a      	bne.n	80014cc <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	d03c      	beq.n	800153a <HAL_RCC_OscConfig+0x2f6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d138      	bne.n	800153a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e21b      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d019      	beq.n	8001508 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80014d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80014da:	2101      	movs	r1, #1
 80014dc:	430a      	orrs	r2, r1
 80014de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fbc6 	bl	8000c70 <HAL_GetTick>
 80014e4:	0003      	movs	r3, r0
 80014e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fbc1 	bl	8000c70 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e203      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 80014fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001500:	2202      	movs	r2, #2
 8001502:	4013      	ands	r3, r2
 8001504:	d0f1      	beq.n	80014ea <HAL_RCC_OscConfig+0x2a6>
 8001506:	e018      	b.n	800153a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800150a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800150e:	2101      	movs	r1, #1
 8001510:	438a      	bics	r2, r1
 8001512:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fbac 	bl	8000c70 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fba7 	bl	8000c70 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1e9      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d1f1      	bne.n	800151e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2204      	movs	r2, #4
 8001540:	4013      	ands	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x302>
 8001544:	e0c6      	b.n	80016d4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001546:	231f      	movs	r3, #31
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2238      	movs	r2, #56	; 0x38
 8001554:	4013      	ands	r3, r2
 8001556:	2b20      	cmp	r3, #32
 8001558:	d11e      	bne.n	8001598 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x330>)
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d100      	bne.n	8001566 <HAL_RCC_OscConfig+0x322>
 8001564:	e0b6      	b.n	80016d4 <HAL_RCC_OscConfig+0x490>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d000      	beq.n	8001570 <HAL_RCC_OscConfig+0x32c>
 800156e:	e0b1      	b.n	80016d4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e1c7      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
 8001574:	40021000 	.word	0x40021000
 8001578:	fffeffff 	.word	0xfffeffff
 800157c:	fffbffff 	.word	0xfffbffff
 8001580:	ffff80ff 	.word	0xffff80ff
 8001584:	ffffc7ff 	.word	0xffffc7ff
 8001588:	00f42400 	.word	0x00f42400
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004
 8001594:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001598:	4bb8      	ldr	r3, [pc, #736]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800159a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	055b      	lsls	r3, r3, #21
 80015a0:	4013      	ands	r3, r2
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_OscConfig+0x364>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x366>
 80015a8:	2300      	movs	r3, #0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d011      	beq.n	80015d2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4bb3      	ldr	r3, [pc, #716]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80015b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015b2:	4bb2      	ldr	r3, [pc, #712]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0549      	lsls	r1, r1, #21
 80015b8:	430a      	orrs	r2, r1
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80015bc:	4baf      	ldr	r3, [pc, #700]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80015be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015ca:	231f      	movs	r3, #31
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d2:	4bab      	ldr	r3, [pc, #684]	; (8001880 <HAL_RCC_OscConfig+0x63c>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d11a      	bne.n	8001614 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015de:	4ba8      	ldr	r3, [pc, #672]	; (8001880 <HAL_RCC_OscConfig+0x63c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4ba7      	ldr	r3, [pc, #668]	; (8001880 <HAL_RCC_OscConfig+0x63c>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	0049      	lsls	r1, r1, #1
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb40 	bl	8000c70 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fb3b 	bl	8000c70 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e17d      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001608:	4b9d      	ldr	r3, [pc, #628]	; (8001880 <HAL_RCC_OscConfig+0x63c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4013      	ands	r3, r2
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x3e6>
 800161c:	4b97      	ldr	r3, [pc, #604]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800161e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001620:	4b96      	ldr	r3, [pc, #600]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001622:	2101      	movs	r1, #1
 8001624:	430a      	orrs	r2, r1
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x420>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x408>
 8001632:	4b92      	ldr	r3, [pc, #584]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001636:	4b91      	ldr	r3, [pc, #580]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001638:	2104      	movs	r1, #4
 800163a:	430a      	orrs	r2, r1
 800163c:	65da      	str	r2, [r3, #92]	; 0x5c
 800163e:	4b8f      	ldr	r3, [pc, #572]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001642:	4b8e      	ldr	r3, [pc, #568]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x420>
 800164c:	4b8b      	ldr	r3, [pc, #556]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800164e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001652:	2101      	movs	r1, #1
 8001654:	438a      	bics	r2, r1
 8001656:	65da      	str	r2, [r3, #92]	; 0x5c
 8001658:	4b88      	ldr	r3, [pc, #544]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800165a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165c:	4b87      	ldr	r3, [pc, #540]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800165e:	2104      	movs	r1, #4
 8001660:	438a      	bics	r2, r1
 8001662:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d014      	beq.n	8001696 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fb00 	bl	8000c70 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001674:	e009      	b.n	800168a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fafb 	bl	8000c70 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a80      	ldr	r2, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x640>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e13c      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168a:	4b7c      	ldr	r3, [pc, #496]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x432>
 8001694:	e013      	b.n	80016be <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff faeb 	bl	8000c70 <HAL_GetTick>
 800169a:	0003      	movs	r3, r0
 800169c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169e:	e009      	b.n	80016b4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff fae6 	bl	8000c70 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	4a76      	ldr	r2, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x640>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e127      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	4b71      	ldr	r3, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2202      	movs	r2, #2
 80016ba:	4013      	ands	r3, r2
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016be:	231f      	movs	r3, #31
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b6c      	ldr	r3, [pc, #432]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80016ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016cc:	4b6b      	ldr	r3, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80016ce:	496e      	ldr	r1, [pc, #440]	; (8001888 <HAL_RCC_OscConfig+0x644>)
 80016d0:	400a      	ands	r2, r1
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2220      	movs	r2, #32
 80016da:	4013      	ands	r3, r2
 80016dc:	d039      	beq.n	8001752 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01b      	beq.n	800171e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	03c9      	lsls	r1, r1, #15
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fabc 	bl	8000c70 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fe:	f7ff fab7 	bl	8000c70 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0f9      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	4013      	ands	r3, r2
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x4ba>
 800171c:	e019      	b.n	8001752 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b56      	ldr	r3, [pc, #344]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001724:	4959      	ldr	r1, [pc, #356]	; (800188c <HAL_RCC_OscConfig+0x648>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff faa1 	bl	8000c70 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001734:	f7ff fa9c 	bl	8000c70 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0de      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001746:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	4013      	ands	r3, r2
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d100      	bne.n	800175c <HAL_RCC_OscConfig+0x518>
 800175a:	e0d2      	b.n	8001902 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2238      	movs	r2, #56	; 0x38
 8001762:	4013      	ands	r3, r2
 8001764:	2b10      	cmp	r3, #16
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x526>
 8001768:	e081      	b.n	800186e <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d156      	bne.n	8001820 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001778:	4945      	ldr	r1, [pc, #276]	; (8001890 <HAL_RCC_OscConfig+0x64c>)
 800177a:	400a      	ands	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fa77 	bl	8000c70 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fa72 	bl	8000c70 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0b4      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	049b      	lsls	r3, r3, #18
 80017a2:	4013      	ands	r3, r2
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a6:	4b35      	ldr	r3, [pc, #212]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	4a3a      	ldr	r2, [pc, #232]	; (8001894 <HAL_RCC_OscConfig+0x650>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	431a      	orrs	r2, r3
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0449      	lsls	r1, r1, #17
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	4b23      	ldr	r3, [pc, #140]	; (800187c <HAL_RCC_OscConfig+0x638>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0549      	lsls	r1, r1, #21
 80017f2:	430a      	orrs	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fa3b 	bl	8000c70 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa36 	bl	8000c70 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e078      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	049b      	lsls	r3, r3, #18
 800181a:	4013      	ands	r3, r2
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x5bc>
 800181e:	e070      	b.n	8001902 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001826:	491a      	ldr	r1, [pc, #104]	; (8001890 <HAL_RCC_OscConfig+0x64c>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001832:	2103      	movs	r1, #3
 8001834:	438a      	bics	r2, r1
 8001836:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_RCC_OscConfig+0x638>)
 800183e:	4916      	ldr	r1, [pc, #88]	; (8001898 <HAL_RCC_OscConfig+0x654>)
 8001840:	400a      	ands	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fa14 	bl	8000c70 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fa0f 	bl	8000c70 <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e051      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x638>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	049b      	lsls	r3, r3, #18
 8001868:	4013      	ands	r3, r2
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x60a>
 800186c:	e049      	b.n	8001902 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d112      	bne.n	800189c <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e044      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
 8001884:	00001388 	.word	0x00001388
 8001888:	efffffff 	.word	0xefffffff
 800188c:	ffbfffff 	.word	0xffbfffff
 8001890:	feffffff 	.word	0xfeffffff
 8001894:	11c1808c 	.word	0x11c1808c
 8001898:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x6c8>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d126      	bne.n	80018fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2270      	movs	r2, #112	; 0x70
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11f      	bne.n	80018fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	23fe      	movs	r3, #254	; 0xfe
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	23f8      	movs	r3, #248	; 0xf8
 80018d4:	039b      	lsls	r3, r3, #14
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10e      	bne.n	80018fe <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	23e0      	movs	r3, #224	; 0xe0
 80018e4:	051b      	lsls	r3, r3, #20
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	0f5b      	lsrs	r3, r3, #29
 80018f4:	075a      	lsls	r2, r3, #29
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b008      	add	sp, #32
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0e9      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2207      	movs	r2, #7
 800192a:	4013      	ands	r3, r2
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d91e      	bls.n	8001970 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2207      	movs	r2, #7
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001944:	f7ff f994 	bl	8000c70 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800194c:	e009      	b.n	8001962 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7ff f98f 	bl	8000c70 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0ca      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d1ee      	bne.n	800194e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d015      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2204      	movs	r2, #4
 8001980:	4013      	ands	r3, r2
 8001982:	d006      	beq.n	8001992 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001984:	4b60      	ldr	r3, [pc, #384]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 800198a:	21e0      	movs	r1, #224	; 0xe0
 800198c:	01c9      	lsls	r1, r1, #7
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_RCC_ClockConfig+0x1fc>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	d057      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	029b      	lsls	r3, r3, #10
 80019c0:	4013      	ands	r3, r2
 80019c2:	d12b      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e097      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d0:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	049b      	lsls	r3, r3, #18
 80019d8:	4013      	ands	r3, r2
 80019da:	d11f      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e08b      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	d113      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e07f      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a00:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e074      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e06d      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2207      	movs	r2, #7
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a30:	f7ff f91e 	bl	8000c70 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7ff f919 	bl	8000c70 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e054      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2238      	movs	r2, #56	; 0x38
 8001a54:	401a      	ands	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1ec      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2207      	movs	r2, #7
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d21e      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2207      	movs	r2, #7
 8001a74:	4393      	bics	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f8f6 	bl	8000c70 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f8f1 	bl	8000c70 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_RCC_ClockConfig+0x1f4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e02c      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1ee      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_RCC_ClockConfig+0x200>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aca:	f000 f829 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ace:	0001      	movs	r1, r0
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	401a      	ands	r2, r3
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_RCC_ClockConfig+0x204>)
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	58d3      	ldr	r3, [r2, r3]
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	40da      	lsrs	r2, r3
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_RCC_ClockConfig+0x208>)
 8001aea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x20c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff f861 	bl	8000bb8 <HAL_InitTick>
 8001af6:	0003      	movs	r3, r0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000
 8001b04:	00001388 	.word	0x00001388
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	fffff0ff 	.word	0xfffff0ff
 8001b10:	ffff8fff 	.word	0xffff8fff
 8001b14:	080033b4 	.word	0x080033b4
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2238      	movs	r2, #56	; 0x38
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d10f      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0adb      	lsrs	r3, r3, #11
 8001b36:	2207      	movs	r2, #7
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	4835      	ldr	r0, [pc, #212]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b46:	f7fe fadd 	bl	8000104 <__udivsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e05d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2238      	movs	r2, #56	; 0x38
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e054      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2238      	movs	r2, #56	; 0x38
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d138      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2203      	movs	r2, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4824      	ldr	r0, [pc, #144]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b90:	f7fe fab8 	bl	8000104 <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	0019      	movs	r1, r3
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	227f      	movs	r2, #127	; 0x7f
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	434b      	muls	r3, r1
 8001ba4:	617b      	str	r3, [r7, #20]
        break;
 8001ba6:	e00d      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	481c      	ldr	r0, [pc, #112]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bac:	f7fe faaa 	bl	8000104 <__udivsi3>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	227f      	movs	r2, #127	; 0x7f
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	617b      	str	r3, [r7, #20]
        break;
 8001bc2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0f5b      	lsrs	r3, r3, #29
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	3301      	adds	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	6978      	ldr	r0, [r7, #20]
 8001bd6:	f7fe fa95 	bl	8000104 <__udivsi3>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2238      	movs	r2, #56	; 0x38
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d103      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2238      	movs	r2, #56	; 0x38
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b18      	cmp	r3, #24
 8001bfe:	d103      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c00:	23fa      	movs	r3, #250	; 0xfa
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	e001      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c0c:	693b      	ldr	r3, [r7, #16]
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b006      	add	sp, #24
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200

08001c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c2c:	2313      	movs	r3, #19
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c34:	2312      	movs	r3, #18
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c48:	e0af      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2311      	movs	r3, #17
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d111      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c62:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2311      	movs	r3, #17
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	0049      	lsls	r1, r1, #1
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c90:	f7fe ffee 	bl	8000c70 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c98:	e00b      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9a:	f7fe ffe9 	bl	8000c70 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d904      	bls.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001ca8:	2313      	movs	r3, #19
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2203      	movs	r2, #3
 8001cae:	701a      	strb	r2, [r3, #0]
        break;
 8001cb0:	e005      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0ed      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001cbe:	2313      	movs	r3, #19
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d15f      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d014      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0249      	lsls	r1, r1, #9
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001cfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d02:	491f      	ldr	r1, [pc, #124]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d016      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7fe ffab 	bl	8000c70 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1e:	e00c      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7fe ffa6 	bl	8000c70 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d904      	bls.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001d30:	2313      	movs	r3, #19
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2203      	movs	r2, #3
 8001d36:	701a      	strb	r2, [r3, #0]
            break;
 8001d38:	e004      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d0ed      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001d44:	2313      	movs	r3, #19
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d62:	e017      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d64:	2312      	movs	r3, #18
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2213      	movs	r2, #19
 8001d6a:	18ba      	adds	r2, r7, r2
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e010      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	fffffcff 	.word	0xfffffcff
 8001d80:	fffeffff 	.word	0xfffeffff
 8001d84:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d88:	2312      	movs	r3, #18
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2213      	movs	r2, #19
 8001d8e:	18ba      	adds	r2, r7, r2
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d94:	2311      	movs	r3, #17
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9e:	4bb6      	ldr	r3, [pc, #728]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da2:	4bb5      	ldr	r3, [pc, #724]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001da4:	49b5      	ldr	r1, [pc, #724]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db4:	4bb0      	ldr	r3, [pc, #704]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	2203      	movs	r2, #3
 8001dba:	4393      	bics	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4bad      	ldr	r3, [pc, #692]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dd2:	4ba9      	ldr	r3, [pc, #676]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	4393      	bics	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4ba5      	ldr	r3, [pc, #660]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001de2:	430a      	orrs	r2, r1
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4013      	ands	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df0:	4ba1      	ldr	r3, [pc, #644]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	2230      	movs	r2, #48	; 0x30
 8001df6:	4393      	bics	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b9e      	ldr	r3, [pc, #632]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e0e:	4b9a      	ldr	r3, [pc, #616]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	4a9b      	ldr	r2, [pc, #620]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	4b96      	ldr	r3, [pc, #600]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001e2e:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e32:	4a94      	ldr	r2, [pc, #592]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	0019      	movs	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	4b8e      	ldr	r3, [pc, #568]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e4e:	4b8a      	ldr	r3, [pc, #552]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	4a8d      	ldr	r2, [pc, #564]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5c:	4b86      	ldr	r3, [pc, #536]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e6e:	4b82      	ldr	r3, [pc, #520]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	4a86      	ldr	r2, [pc, #536]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	4b7e      	ldr	r3, [pc, #504]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2220      	movs	r2, #32
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e8c:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	4a7f      	ldr	r2, [pc, #508]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	4b77      	ldr	r3, [pc, #476]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eaa:	4b73      	ldr	r3, [pc, #460]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	01db      	lsls	r3, r3, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d015      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eca:	4b6b      	ldr	r3, [pc, #428]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	0899      	lsrs	r1, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed6:	4b68      	ldr	r3, [pc, #416]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ee8:	4b63      	ldr	r3, [pc, #396]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0249      	lsls	r1, r1, #9
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	031b      	lsls	r3, r3, #12
 8001efe:	4013      	ands	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f10:	4b59      	ldr	r3, [pc, #356]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	039b      	lsls	r3, r3, #14
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d016      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f22:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f26:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f30:	4b51      	ldr	r3, [pc, #324]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f32:	430a      	orrs	r2, r1
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	03db      	lsls	r3, r3, #15
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d106      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f42:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0449      	lsls	r1, r1, #17
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	03db      	lsls	r3, r3, #15
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d016      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	4a4e      	ldr	r2, [pc, #312]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f6a:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	045b      	lsls	r3, r3, #17
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	0449      	lsls	r1, r1, #17
 8001f86:	430a      	orrs	r2, r1
 8001f88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	4013      	ands	r3, r2
 8001f94:	d014      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fb2:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0249      	lsls	r1, r1, #9
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	019b      	lsls	r3, r3, #6
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d014      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx) 
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	045b      	lsls	r3, r3, #17
 8001ffe:	4013      	ands	r3, r2
 8002000:	d016      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002012:	430a      	orrs	r2, r1
 8002014:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	019b      	lsls	r3, r3, #6
 800201e:	429a      	cmp	r2, r3
 8002020:	d106      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0449      	lsls	r1, r1, #17
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	049b      	lsls	r3, r3, #18
 8002038:	4013      	ands	r3, r2
 800203a:	d016      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002042:	4013      	ands	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800204c:	430a      	orrs	r2, r1
 800204e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0449      	lsls	r1, r1, #17
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800206a:	2312      	movs	r3, #18
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	781b      	ldrb	r3, [r3, #0]
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b006      	add	sp, #24
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	efffffff 	.word	0xefffffff
 8002080:	fffff3ff 	.word	0xfffff3ff
 8002084:	fffffcff 	.word	0xfffffcff
 8002088:	fff3ffff 	.word	0xfff3ffff
 800208c:	ffcfffff 	.word	0xffcfffff
 8002090:	ffffcfff 	.word	0xffffcfff
 8002094:	ffff3fff 	.word	0xffff3fff
 8002098:	ffbfffff 	.word	0xffbfffff
 800209c:	feffffff 	.word	0xfeffffff

080020a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d100      	bne.n	80020b8 <HAL_RTC_Init+0x18>
 80020b6:	e07f      	b.n	80021b8 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2229      	movs	r2, #41	; 0x29
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10b      	bne.n	80020dc <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2228      	movs	r2, #40	; 0x28
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2288      	movs	r2, #136	; 0x88
 80020d0:	0212      	lsls	r2, r2, #8
 80020d2:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe fc8a 	bl	80009f0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2229      	movs	r2, #41	; 0x29
 80020e0:	2102      	movs	r1, #2
 80020e2:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	22ca      	movs	r2, #202	; 0xca
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2253      	movs	r2, #83	; 0x53
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80020f4:	250f      	movs	r5, #15
 80020f6:	197c      	adds	r4, r7, r5
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 fbef 	bl	80028de <RTC_EnterInitMode>
 8002100:	0003      	movs	r3, r0
 8002102:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002104:	197b      	adds	r3, r7, r5
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d148      	bne.n	800219e <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	492c      	ldr	r1, [pc, #176]	; (80021c8 <HAL_RTC_Init+0x128>)
 8002118:	400a      	ands	r2, r1
 800211a:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6999      	ldr	r1, [r3, #24]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6912      	ldr	r2, [r2, #16]
 8002142:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002158:	250f      	movs	r5, #15
 800215a:	197c      	adds	r4, r7, r5
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 fc00 	bl	8002964 <RTC_ExitInitMode>
 8002164:	0003      	movs	r3, r0
 8002166:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002168:	197b      	adds	r3, r7, r5
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d116      	bne.n	800219e <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	00d2      	lsls	r2, r2, #3
 800217c:	08d2      	lsrs	r2, r2, #3
 800217e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6999      	ldr	r1, [r3, #24]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	22ff      	movs	r2, #255	; 0xff
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80021a6:	230f      	movs	r3, #15
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2229      	movs	r2, #41	; 0x29
 80021b4:	2101      	movs	r1, #1
 80021b6:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80021b8:	230f      	movs	r3, #15
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	fb8fffbf 	.word	0xfb8fffbf

080021cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2228      	movs	r2, #40	; 0x28
 80021dc:	5c9b      	ldrb	r3, [r3, r2]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_RTC_SetTime+0x1a>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e092      	b.n	800230c <HAL_RTC_SetTime+0x140>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2228      	movs	r2, #40	; 0x28
 80021ea:	2101      	movs	r1, #1
 80021ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2229      	movs	r2, #41	; 0x29
 80021f2:	2102      	movs	r1, #2
 80021f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	22ca      	movs	r2, #202	; 0xca
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2253      	movs	r2, #83	; 0x53
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002206:	2513      	movs	r5, #19
 8002208:	197c      	adds	r4, r7, r5
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 fb66 	bl	80028de <RTC_EnterInitMode>
 8002212:	0003      	movs	r3, r0
 8002214:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002216:	197b      	adds	r3, r7, r5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d162      	bne.n	80022e4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d125      	bne.n	8002270 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	4013      	ands	r3, r2
 800222e:	d102      	bne.n	8002236 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fbd8 	bl	80029f0 <RTC_ByteToBcd2>
 8002240:	0003      	movs	r3, r0
 8002242:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 fbd1 	bl	80029f0 <RTC_ByteToBcd2>
 800224e:	0003      	movs	r3, r0
 8002250:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002252:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	789b      	ldrb	r3, [r3, #2]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 fbc9 	bl	80029f0 <RTC_ByteToBcd2>
 800225e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002260:	0022      	movs	r2, r4
 8002262:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e017      	b.n	80022a0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	4013      	ands	r3, r2
 800227a:	d102      	bne.n	8002282 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800228e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002294:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	78db      	ldrb	r3, [r3, #3]
 800229a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	491b      	ldr	r1, [pc, #108]	; (8002314 <HAL_RTC_SetTime+0x148>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4918      	ldr	r1, [pc, #96]	; (8002318 <HAL_RTC_SetTime+0x14c>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6999      	ldr	r1, [r3, #24]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022d4:	2313      	movs	r3, #19
 80022d6:	18fc      	adds	r4, r7, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 fb42 	bl	8002964 <RTC_ExitInitMode>
 80022e0:	0003      	movs	r3, r0
 80022e2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80022ec:	2313      	movs	r3, #19
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2229      	movs	r2, #41	; 0x29
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2228      	movs	r2, #40	; 0x28
 8002302:	2100      	movs	r1, #0
 8002304:	5499      	strb	r1, [r3, r2]

  return status;
 8002306:	2313      	movs	r3, #19
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b006      	add	sp, #24
 8002312:	bdb0      	pop	{r4, r5, r7, pc}
 8002314:	007f7f7f 	.word	0x007f7f7f
 8002318:	fffbffff 	.word	0xfffbffff

0800231c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	045b      	lsls	r3, r3, #17
 800233a:	0c5a      	lsrs	r2, r3, #17
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_RTC_GetTime+0xb4>)
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	b2db      	uxtb	r3, r3
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	4013      	ands	r3, r2
 8002356:	b2da      	uxtb	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	b2db      	uxtb	r3, r3
 8002362:	227f      	movs	r2, #127	; 0x7f
 8002364:	4013      	ands	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	227f      	movs	r2, #127	; 0x7f
 8002372:	4013      	ands	r3, r2
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	0d9b      	lsrs	r3, r3, #22
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11a      	bne.n	80023c6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	0018      	movs	r0, r3
 8002396:	f000 fb54 	bl	8002a42 <RTC_Bcd2ToByte>
 800239a:	0003      	movs	r3, r0
 800239c:	001a      	movs	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 fb4b 	bl	8002a42 <RTC_Bcd2ToByte>
 80023ac:	0003      	movs	r3, r0
 80023ae:	001a      	movs	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	789b      	ldrb	r3, [r3, #2]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fb42 	bl	8002a42 <RTC_Bcd2ToByte>
 80023be:	0003      	movs	r3, r0
 80023c0:	001a      	movs	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b006      	add	sp, #24
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	007f7f7f 	.word	0x007f7f7f

080023d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2228      	movs	r2, #40	; 0x28
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_RTC_SetDate+0x1a>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e07e      	b.n	80024ec <HAL_RTC_SetDate+0x118>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2228      	movs	r2, #40	; 0x28
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2229      	movs	r2, #41	; 0x29
 80023fa:	2102      	movs	r1, #2
 80023fc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10e      	bne.n	8002422 <HAL_RTC_SetDate+0x4e>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	001a      	movs	r2, r3
 800240a:	2310      	movs	r3, #16
 800240c:	4013      	ands	r3, r2
 800240e:	d008      	beq.n	8002422 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	2210      	movs	r2, #16
 8002416:	4393      	bics	r3, r2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	330a      	adds	r3, #10
 800241c:	b2da      	uxtb	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d11c      	bne.n	8002462 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	78db      	ldrb	r3, [r3, #3]
 800242c:	0018      	movs	r0, r3
 800242e:	f000 fadf 	bl	80029f0 <RTC_ByteToBcd2>
 8002432:	0003      	movs	r3, r0
 8002434:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fad8 	bl	80029f0 <RTC_ByteToBcd2>
 8002440:	0003      	movs	r3, r0
 8002442:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002444:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	789b      	ldrb	r3, [r3, #2]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 fad0 	bl	80029f0 <RTC_ByteToBcd2>
 8002450:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002452:	0022      	movs	r2, r4
 8002454:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e00e      	b.n	8002480 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	78db      	ldrb	r3, [r3, #3]
 8002466:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800246e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002474:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	22ca      	movs	r2, #202	; 0xca
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2253      	movs	r2, #83	; 0x53
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002490:	2513      	movs	r5, #19
 8002492:	197c      	adds	r4, r7, r5
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 fa21 	bl	80028de <RTC_EnterInitMode>
 800249c:	0003      	movs	r3, r0
 800249e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80024a0:	197b      	adds	r3, r7, r5
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4911      	ldr	r1, [pc, #68]	; (80024f4 <HAL_RTC_SetDate+0x120>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024b4:	2313      	movs	r3, #19
 80024b6:	18fc      	adds	r4, r7, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 fa52 	bl	8002964 <RTC_ExitInitMode>
 80024c0:	0003      	movs	r3, r0
 80024c2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80024cc:	2313      	movs	r3, #19
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2229      	movs	r2, #41	; 0x29
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2228      	movs	r2, #40	; 0x28
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]

  return status;
 80024e6:	2313      	movs	r3, #19
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b006      	add	sp, #24
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	00ffff3f 	.word	0x00ffff3f

080024f8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a21      	ldr	r2, [pc, #132]	; (8002590 <HAL_RTC_GetDate+0x98>)
 800250c:	4013      	ands	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b2db      	uxtb	r3, r3
 8002520:	221f      	movs	r2, #31
 8002522:	4013      	ands	r3, r2
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	223f      	movs	r2, #63	; 0x3f
 8002530:	4013      	ands	r3, r2
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	0b5b      	lsrs	r3, r3, #13
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2207      	movs	r2, #7
 8002540:	4013      	ands	r3, r2
 8002542:	b2da      	uxtb	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11a      	bne.n	8002584 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	78db      	ldrb	r3, [r3, #3]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fa75 	bl	8002a42 <RTC_Bcd2ToByte>
 8002558:	0003      	movs	r3, r0
 800255a:	001a      	movs	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fa6c 	bl	8002a42 <RTC_Bcd2ToByte>
 800256a:	0003      	movs	r3, r0
 800256c:	001a      	movs	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	789b      	ldrb	r3, [r3, #2]
 8002576:	0018      	movs	r0, r3
 8002578:	f000 fa63 	bl	8002a42 <RTC_Bcd2ToByte>
 800257c:	0003      	movs	r3, r0
 800257e:	001a      	movs	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b006      	add	sp, #24
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	00ffff3f 	.word	0x00ffff3f

08002594 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2228      	movs	r2, #40	; 0x28
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_RTC_SetAlarm_IT+0x1a>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e127      	b.n	80027fe <HAL_RTC_SetAlarm_IT+0x26a>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2228      	movs	r2, #40	; 0x28
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2229      	movs	r2, #41	; 0x29
 80025ba:	2102      	movs	r1, #2
 80025bc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d136      	bne.n	8002632 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	4013      	ands	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2200      	movs	r2, #0
 80025d4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fa08 	bl	80029f0 <RTC_ByteToBcd2>
 80025e0:	0003      	movs	r3, r0
 80025e2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fa01 	bl	80029f0 <RTC_ByteToBcd2>
 80025ee:	0003      	movs	r3, r0
 80025f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025f2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	789b      	ldrb	r3, [r3, #2]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f9f9 	bl	80029f0 <RTC_ByteToBcd2>
 80025fe:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002600:	0022      	movs	r2, r4
 8002602:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800260a:	431a      	orrs	r2, r3
 800260c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2220      	movs	r2, #32
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	0018      	movs	r0, r3
 8002616:	f000 f9eb 	bl	80029f0 <RTC_ByteToBcd2>
 800261a:	0003      	movs	r3, r0
 800261c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800261e:	0022      	movs	r2, r4
 8002620:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002626:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800262c:	4313      	orrs	r3, r2
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	e022      	b.n	8002678 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	4013      	ands	r3, r2
 800263c:	d102      	bne.n	8002644 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002650:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002656:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800265e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2120      	movs	r1, #32
 8002664:	5c5b      	ldrb	r3, [r3, r1]
 8002666:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002668:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800266e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002674:	4313      	orrs	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	22ca      	movs	r2, #202	; 0xca
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2253      	movs	r2, #83	; 0x53
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	429a      	cmp	r2, r3
 800269e:	d14c      	bne.n	800273a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4957      	ldr	r1, [pc, #348]	; (8002808 <HAL_RTC_SetAlarm_IT+0x274>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80026c0:	f7fe fad6 	bl	8000c70 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026c8:	e016      	b.n	80026f8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026ca:	f7fe fad1 	bl	8000c70 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	23fa      	movs	r3, #250	; 0xfa
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d90d      	bls.n	80026f8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	22ff      	movs	r2, #255	; 0xff
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2229      	movs	r2, #41	; 0x29
 80026e8:	2103      	movs	r1, #3
 80026ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2228      	movs	r2, #40	; 0x28
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e082      	b.n	80027fe <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
 8002702:	d0e2      	beq.n	80026ca <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	0049      	lsls	r1, r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699a      	ldr	r2, [r3, #24]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	0149      	lsls	r1, r1, #5
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
 8002738:	e04b      	b.n	80027d2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4931      	ldr	r1, [pc, #196]	; (800280c <HAL_RTC_SetAlarm_IT+0x278>)
 8002746:	400a      	ands	r2, r1
 8002748:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2102      	movs	r1, #2
 8002756:	430a      	orrs	r2, r1
 8002758:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800275a:	f7fe fa89 	bl	8000c70 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002762:	e016      	b.n	8002792 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002764:	f7fe fa84 	bl	8000c70 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad2      	subs	r2, r2, r3
 800276e:	23fa      	movs	r3, #250	; 0xfa
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	429a      	cmp	r2, r3
 8002774:	d90d      	bls.n	8002792 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	22ff      	movs	r2, #255	; 0xff
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2229      	movs	r2, #41	; 0x29
 8002782:	2103      	movs	r1, #3
 8002784:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2228      	movs	r2, #40	; 0x28
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e035      	b.n	80027fe <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2202      	movs	r2, #2
 800279a:	4013      	ands	r3, r2
 800279c:	d0e2      	beq.n	8002764 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	0089      	lsls	r1, r1, #2
 80027bc:	430a      	orrs	r2, r1
 80027be:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	0189      	lsls	r1, r1, #6
 80027ce:	430a      	orrs	r2, r1
 80027d0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_RTC_SetAlarm_IT+0x27c>)
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	58d3      	ldr	r3, [r2, r3]
 80027d8:	490d      	ldr	r1, [pc, #52]	; (8002810 <HAL_RTC_SetAlarm_IT+0x27c>)
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	0312      	lsls	r2, r2, #12
 80027de:	4313      	orrs	r3, r2
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	22ff      	movs	r2, #255	; 0xff
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2229      	movs	r2, #41	; 0x29
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2228      	movs	r2, #40	; 0x28
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b009      	add	sp, #36	; 0x24
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	fffffeff 	.word	0xfffffeff
 800280c:	fffffdff 	.word	0xfffffdff
 8002810:	40021800 	.word	0x40021800

08002814 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	4013      	ands	r3, r2
 8002828:	d011      	beq.n	800284e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d00b      	beq.n	800284e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0018      	movs	r0, r3
 800284a:	f7fd ff47 	bl	80006dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	019b      	lsls	r3, r3, #6
 8002858:	4013      	ands	r3, r2
 800285a:	d011      	beq.n	8002880 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d00b      	beq.n	8002880 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	430a      	orrs	r2, r1
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f8fe 	bl	8002a7c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2229      	movs	r2, #41	; 0x29
 8002884:	2101      	movs	r1, #1
 8002886:	5499      	strb	r1, [r3, r2]
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	21a0      	movs	r1, #160	; 0xa0
 80028a4:	438a      	bics	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80028a8:	f7fe f9e2 	bl	8000c70 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028b0:	e00a      	b.n	80028c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80028b2:	f7fe f9dd 	bl	8000c70 <HAL_GetTick>
 80028b6:	0002      	movs	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	23fa      	movs	r3, #250	; 0xfa
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d901      	bls.n	80028c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e006      	b.n	80028d6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	4013      	ands	r3, r2
 80028d2:	d0ee      	beq.n	80028b2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}

080028de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80028e6:	230f      	movs	r3, #15
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	4013      	ands	r3, r2
 80028f8:	d12d      	bne.n	8002956 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	430a      	orrs	r2, r1
 8002908:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800290a:	f7fe f9b1 	bl	8000c70 <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002912:	e015      	b.n	8002940 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002914:	f7fe f9ac 	bl	8000c70 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	210f      	movs	r1, #15
 8002920:	187b      	adds	r3, r7, r1
 8002922:	1879      	adds	r1, r7, r1
 8002924:	7809      	ldrb	r1, [r1, #0]
 8002926:	7019      	strb	r1, [r3, #0]
 8002928:	23fa      	movs	r3, #250	; 0xfa
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d907      	bls.n	8002940 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8002930:	230f      	movs	r3, #15
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2203      	movs	r2, #3
 8002936:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2229      	movs	r2, #41	; 0x29
 800293c:	2103      	movs	r1, #3
 800293e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	4013      	ands	r3, r2
 800294a:	d104      	bne.n	8002956 <RTC_EnterInitMode+0x78>
 800294c:	230f      	movs	r3, #15
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d1de      	bne.n	8002914 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002956:	230f      	movs	r3, #15
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}

08002964 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	230f      	movs	r3, #15
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <RTC_ExitInitMode+0x88>)
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <RTC_ExitInitMode+0x88>)
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	438a      	bics	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <RTC_ExitInitMode+0x88>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2220      	movs	r2, #32
 8002986:	4013      	ands	r3, r2
 8002988:	d10e      	bne.n	80029a8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ff7f 	bl	8002890 <HAL_RTC_WaitForSynchro>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d022      	beq.n	80029dc <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2229      	movs	r2, #41	; 0x29
 800299a:	2103      	movs	r1, #3
 800299c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e019      	b.n	80029dc <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <RTC_ExitInitMode+0x88>)
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <RTC_ExitInitMode+0x88>)
 80029ae:	2120      	movs	r1, #32
 80029b0:	438a      	bics	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff ff6a 	bl	8002890 <HAL_RTC_WaitForSynchro>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d007      	beq.n	80029d0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2229      	movs	r2, #41	; 0x29
 80029c4:	2103      	movs	r1, #3
 80029c6:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80029c8:	230f      	movs	r3, #15
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2203      	movs	r2, #3
 80029ce:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <RTC_ExitInitMode+0x88>)
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <RTC_ExitInitMode+0x88>)
 80029d6:	2120      	movs	r1, #32
 80029d8:	430a      	orrs	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
  }

  return status;
 80029dc:	230f      	movs	r3, #15
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	781b      	ldrb	r3, [r3, #0]
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	40002800 	.word	0x40002800

080029f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	0002      	movs	r2, r0
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002a00:	230b      	movs	r3, #11
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	1dfa      	adds	r2, r7, #7
 8002a06:	7812      	ldrb	r2, [r2, #0]
 8002a08:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002a0a:	e008      	b.n	8002a1e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002a12:	220b      	movs	r2, #11
 8002a14:	18bb      	adds	r3, r7, r2
 8002a16:	18ba      	adds	r2, r7, r2
 8002a18:	7812      	ldrb	r2, [r2, #0]
 8002a1a:	3a0a      	subs	r2, #10
 8002a1c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002a1e:	230b      	movs	r3, #11
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d8f1      	bhi.n	8002a0c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	230b      	movs	r3, #11
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	0002      	movs	r2, r0
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	001a      	movs	r2, r3
 8002a58:	0013      	movs	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	18d3      	adds	r3, r2, r3
 8002a72:	b2db      	uxtb	r3, r3
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	33ff      	adds	r3, #255	; 0xff
 8002aac:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	18d3      	adds	r3, r2, r3
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	18d3      	adds	r3, r2, r3
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	33ff      	adds	r3, #255	; 0xff
 8002ae4:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	18d3      	adds	r3, r2, r3
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b004      	add	sp, #16
 8002afa:	bd80      	pop	{r7, pc}

08002afc <__errno>:
 8002afc:	4b01      	ldr	r3, [pc, #4]	; (8002b04 <__errno+0x8>)
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	4770      	bx	lr
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <__libc_init_array>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	4d0c      	ldr	r5, [pc, #48]	; (8002b40 <__libc_init_array+0x38>)
 8002b0e:	4c0d      	ldr	r4, [pc, #52]	; (8002b44 <__libc_init_array+0x3c>)
 8002b10:	1b64      	subs	r4, r4, r5
 8002b12:	10a4      	asrs	r4, r4, #2
 8002b14:	42a6      	cmp	r6, r4
 8002b16:	d109      	bne.n	8002b2c <__libc_init_array+0x24>
 8002b18:	2600      	movs	r6, #0
 8002b1a:	f000 fc29 	bl	8003370 <_init>
 8002b1e:	4d0a      	ldr	r5, [pc, #40]	; (8002b48 <__libc_init_array+0x40>)
 8002b20:	4c0a      	ldr	r4, [pc, #40]	; (8002b4c <__libc_init_array+0x44>)
 8002b22:	1b64      	subs	r4, r4, r5
 8002b24:	10a4      	asrs	r4, r4, #2
 8002b26:	42a6      	cmp	r6, r4
 8002b28:	d105      	bne.n	8002b36 <__libc_init_array+0x2e>
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	00b3      	lsls	r3, r6, #2
 8002b2e:	58eb      	ldr	r3, [r5, r3]
 8002b30:	4798      	blx	r3
 8002b32:	3601      	adds	r6, #1
 8002b34:	e7ee      	b.n	8002b14 <__libc_init_array+0xc>
 8002b36:	00b3      	lsls	r3, r6, #2
 8002b38:	58eb      	ldr	r3, [r5, r3]
 8002b3a:	4798      	blx	r3
 8002b3c:	3601      	adds	r6, #1
 8002b3e:	e7f2      	b.n	8002b26 <__libc_init_array+0x1e>
 8002b40:	08003428 	.word	0x08003428
 8002b44:	08003428 	.word	0x08003428
 8002b48:	08003428 	.word	0x08003428
 8002b4c:	0800342c 	.word	0x0800342c

08002b50 <memset>:
 8002b50:	0003      	movs	r3, r0
 8002b52:	1812      	adds	r2, r2, r0
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d100      	bne.n	8002b5a <memset+0xa>
 8002b58:	4770      	bx	lr
 8002b5a:	7019      	strb	r1, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	e7f9      	b.n	8002b54 <memset+0x4>

08002b60 <siprintf>:
 8002b60:	b40e      	push	{r1, r2, r3}
 8002b62:	b500      	push	{lr}
 8002b64:	490b      	ldr	r1, [pc, #44]	; (8002b94 <siprintf+0x34>)
 8002b66:	b09c      	sub	sp, #112	; 0x70
 8002b68:	ab1d      	add	r3, sp, #116	; 0x74
 8002b6a:	9002      	str	r0, [sp, #8]
 8002b6c:	9006      	str	r0, [sp, #24]
 8002b6e:	9107      	str	r1, [sp, #28]
 8002b70:	9104      	str	r1, [sp, #16]
 8002b72:	4809      	ldr	r0, [pc, #36]	; (8002b98 <siprintf+0x38>)
 8002b74:	4909      	ldr	r1, [pc, #36]	; (8002b9c <siprintf+0x3c>)
 8002b76:	cb04      	ldmia	r3!, {r2}
 8002b78:	9105      	str	r1, [sp, #20]
 8002b7a:	6800      	ldr	r0, [r0, #0]
 8002b7c:	a902      	add	r1, sp, #8
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	f000 f870 	bl	8002c64 <_svfiprintf_r>
 8002b84:	2300      	movs	r3, #0
 8002b86:	9a02      	ldr	r2, [sp, #8]
 8002b88:	7013      	strb	r3, [r2, #0]
 8002b8a:	b01c      	add	sp, #112	; 0x70
 8002b8c:	bc08      	pop	{r3}
 8002b8e:	b003      	add	sp, #12
 8002b90:	4718      	bx	r3
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	7fffffff 	.word	0x7fffffff
 8002b98:	2000000c 	.word	0x2000000c
 8002b9c:	ffff0208 	.word	0xffff0208

08002ba0 <__ssputs_r>:
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba2:	688e      	ldr	r6, [r1, #8]
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	0007      	movs	r7, r0
 8002ba8:	000c      	movs	r4, r1
 8002baa:	9203      	str	r2, [sp, #12]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	429e      	cmp	r6, r3
 8002bb0:	d83c      	bhi.n	8002c2c <__ssputs_r+0x8c>
 8002bb2:	2390      	movs	r3, #144	; 0x90
 8002bb4:	898a      	ldrh	r2, [r1, #12]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	421a      	tst	r2, r3
 8002bba:	d034      	beq.n	8002c26 <__ssputs_r+0x86>
 8002bbc:	2503      	movs	r5, #3
 8002bbe:	6909      	ldr	r1, [r1, #16]
 8002bc0:	6823      	ldr	r3, [r4, #0]
 8002bc2:	1a5b      	subs	r3, r3, r1
 8002bc4:	9302      	str	r3, [sp, #8]
 8002bc6:	6963      	ldr	r3, [r4, #20]
 8002bc8:	9802      	ldr	r0, [sp, #8]
 8002bca:	435d      	muls	r5, r3
 8002bcc:	0feb      	lsrs	r3, r5, #31
 8002bce:	195d      	adds	r5, r3, r5
 8002bd0:	9b01      	ldr	r3, [sp, #4]
 8002bd2:	106d      	asrs	r5, r5, #1
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	181b      	adds	r3, r3, r0
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	d900      	bls.n	8002bde <__ssputs_r+0x3e>
 8002bdc:	001d      	movs	r5, r3
 8002bde:	0553      	lsls	r3, r2, #21
 8002be0:	d532      	bpl.n	8002c48 <__ssputs_r+0xa8>
 8002be2:	0029      	movs	r1, r5
 8002be4:	0038      	movs	r0, r7
 8002be6:	f000 fb23 	bl	8003230 <_malloc_r>
 8002bea:	1e06      	subs	r6, r0, #0
 8002bec:	d109      	bne.n	8002c02 <__ssputs_r+0x62>
 8002bee:	230c      	movs	r3, #12
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	89a2      	ldrh	r2, [r4, #12]
 8002bf8:	4240      	negs	r0, r0
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	81a3      	strh	r3, [r4, #12]
 8002bfe:	b005      	add	sp, #20
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c02:	9a02      	ldr	r2, [sp, #8]
 8002c04:	6921      	ldr	r1, [r4, #16]
 8002c06:	f000 faac 	bl	8003162 <memcpy>
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <__ssputs_r+0xc0>)
 8002c0e:	401a      	ands	r2, r3
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	4313      	orrs	r3, r2
 8002c14:	81a3      	strh	r3, [r4, #12]
 8002c16:	9b02      	ldr	r3, [sp, #8]
 8002c18:	6126      	str	r6, [r4, #16]
 8002c1a:	18f6      	adds	r6, r6, r3
 8002c1c:	6026      	str	r6, [r4, #0]
 8002c1e:	6165      	str	r5, [r4, #20]
 8002c20:	9e01      	ldr	r6, [sp, #4]
 8002c22:	1aed      	subs	r5, r5, r3
 8002c24:	60a5      	str	r5, [r4, #8]
 8002c26:	9b01      	ldr	r3, [sp, #4]
 8002c28:	429e      	cmp	r6, r3
 8002c2a:	d900      	bls.n	8002c2e <__ssputs_r+0x8e>
 8002c2c:	9e01      	ldr	r6, [sp, #4]
 8002c2e:	0032      	movs	r2, r6
 8002c30:	9903      	ldr	r1, [sp, #12]
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	f000 fa9e 	bl	8003174 <memmove>
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	1b9b      	subs	r3, r3, r6
 8002c3e:	60a3      	str	r3, [r4, #8]
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	199e      	adds	r6, r3, r6
 8002c44:	6026      	str	r6, [r4, #0]
 8002c46:	e7da      	b.n	8002bfe <__ssputs_r+0x5e>
 8002c48:	002a      	movs	r2, r5
 8002c4a:	0038      	movs	r0, r7
 8002c4c:	f000 fb4e 	bl	80032ec <_realloc_r>
 8002c50:	1e06      	subs	r6, r0, #0
 8002c52:	d1e0      	bne.n	8002c16 <__ssputs_r+0x76>
 8002c54:	6921      	ldr	r1, [r4, #16]
 8002c56:	0038      	movs	r0, r7
 8002c58:	f000 faa0 	bl	800319c <_free_r>
 8002c5c:	e7c7      	b.n	8002bee <__ssputs_r+0x4e>
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	fffffb7f 	.word	0xfffffb7f

08002c64 <_svfiprintf_r>:
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	b0a1      	sub	sp, #132	; 0x84
 8002c68:	9003      	str	r0, [sp, #12]
 8002c6a:	001d      	movs	r5, r3
 8002c6c:	898b      	ldrh	r3, [r1, #12]
 8002c6e:	000f      	movs	r7, r1
 8002c70:	0016      	movs	r6, r2
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	d511      	bpl.n	8002c9a <_svfiprintf_r+0x36>
 8002c76:	690b      	ldr	r3, [r1, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <_svfiprintf_r+0x36>
 8002c7c:	2140      	movs	r1, #64	; 0x40
 8002c7e:	f000 fad7 	bl	8003230 <_malloc_r>
 8002c82:	6038      	str	r0, [r7, #0]
 8002c84:	6138      	str	r0, [r7, #16]
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d105      	bne.n	8002c96 <_svfiprintf_r+0x32>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	3801      	subs	r0, #1
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	b021      	add	sp, #132	; 0x84
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c96:	2340      	movs	r3, #64	; 0x40
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	ac08      	add	r4, sp, #32
 8002c9e:	6163      	str	r3, [r4, #20]
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	7663      	strb	r3, [r4, #25]
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	76a3      	strb	r3, [r4, #26]
 8002ca8:	9507      	str	r5, [sp, #28]
 8002caa:	0035      	movs	r5, r6
 8002cac:	782b      	ldrb	r3, [r5, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <_svfiprintf_r+0x52>
 8002cb2:	2b25      	cmp	r3, #37	; 0x25
 8002cb4:	d146      	bne.n	8002d44 <_svfiprintf_r+0xe0>
 8002cb6:	1bab      	subs	r3, r5, r6
 8002cb8:	9305      	str	r3, [sp, #20]
 8002cba:	d00c      	beq.n	8002cd6 <_svfiprintf_r+0x72>
 8002cbc:	0032      	movs	r2, r6
 8002cbe:	0039      	movs	r1, r7
 8002cc0:	9803      	ldr	r0, [sp, #12]
 8002cc2:	f7ff ff6d 	bl	8002ba0 <__ssputs_r>
 8002cc6:	1c43      	adds	r3, r0, #1
 8002cc8:	d100      	bne.n	8002ccc <_svfiprintf_r+0x68>
 8002cca:	e0ae      	b.n	8002e2a <_svfiprintf_r+0x1c6>
 8002ccc:	6962      	ldr	r2, [r4, #20]
 8002cce:	9b05      	ldr	r3, [sp, #20]
 8002cd0:	4694      	mov	ip, r2
 8002cd2:	4463      	add	r3, ip
 8002cd4:	6163      	str	r3, [r4, #20]
 8002cd6:	782b      	ldrb	r3, [r5, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d100      	bne.n	8002cde <_svfiprintf_r+0x7a>
 8002cdc:	e0a5      	b.n	8002e2a <_svfiprintf_r+0x1c6>
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	4252      	negs	r2, r2
 8002ce4:	6062      	str	r2, [r4, #4]
 8002ce6:	a904      	add	r1, sp, #16
 8002ce8:	3254      	adds	r2, #84	; 0x54
 8002cea:	1852      	adds	r2, r2, r1
 8002cec:	1c6e      	adds	r6, r5, #1
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	60e3      	str	r3, [r4, #12]
 8002cf2:	60a3      	str	r3, [r4, #8]
 8002cf4:	7013      	strb	r3, [r2, #0]
 8002cf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cf8:	7831      	ldrb	r1, [r6, #0]
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	4853      	ldr	r0, [pc, #332]	; (8002e4c <_svfiprintf_r+0x1e8>)
 8002cfe:	f000 fa25 	bl	800314c <memchr>
 8002d02:	1c75      	adds	r5, r6, #1
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d11f      	bne.n	8002d48 <_svfiprintf_r+0xe4>
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	06d3      	lsls	r3, r2, #27
 8002d0c:	d504      	bpl.n	8002d18 <_svfiprintf_r+0xb4>
 8002d0e:	2353      	movs	r3, #83	; 0x53
 8002d10:	a904      	add	r1, sp, #16
 8002d12:	185b      	adds	r3, r3, r1
 8002d14:	2120      	movs	r1, #32
 8002d16:	7019      	strb	r1, [r3, #0]
 8002d18:	0713      	lsls	r3, r2, #28
 8002d1a:	d504      	bpl.n	8002d26 <_svfiprintf_r+0xc2>
 8002d1c:	2353      	movs	r3, #83	; 0x53
 8002d1e:	a904      	add	r1, sp, #16
 8002d20:	185b      	adds	r3, r3, r1
 8002d22:	212b      	movs	r1, #43	; 0x2b
 8002d24:	7019      	strb	r1, [r3, #0]
 8002d26:	7833      	ldrb	r3, [r6, #0]
 8002d28:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2a:	d016      	beq.n	8002d5a <_svfiprintf_r+0xf6>
 8002d2c:	0035      	movs	r5, r6
 8002d2e:	2100      	movs	r1, #0
 8002d30:	200a      	movs	r0, #10
 8002d32:	68e3      	ldr	r3, [r4, #12]
 8002d34:	782a      	ldrb	r2, [r5, #0]
 8002d36:	1c6e      	adds	r6, r5, #1
 8002d38:	3a30      	subs	r2, #48	; 0x30
 8002d3a:	2a09      	cmp	r2, #9
 8002d3c:	d94e      	bls.n	8002ddc <_svfiprintf_r+0x178>
 8002d3e:	2900      	cmp	r1, #0
 8002d40:	d018      	beq.n	8002d74 <_svfiprintf_r+0x110>
 8002d42:	e010      	b.n	8002d66 <_svfiprintf_r+0x102>
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7b1      	b.n	8002cac <_svfiprintf_r+0x48>
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <_svfiprintf_r+0x1e8>)
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	1ac0      	subs	r0, r0, r3
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4083      	lsls	r3, r0
 8002d52:	4313      	orrs	r3, r2
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	002e      	movs	r6, r5
 8002d58:	e7ce      	b.n	8002cf8 <_svfiprintf_r+0x94>
 8002d5a:	9b07      	ldr	r3, [sp, #28]
 8002d5c:	1d19      	adds	r1, r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	9107      	str	r1, [sp, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db01      	blt.n	8002d6a <_svfiprintf_r+0x106>
 8002d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d68:	e004      	b.n	8002d74 <_svfiprintf_r+0x110>
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	60e3      	str	r3, [r4, #12]
 8002d6e:	2302      	movs	r3, #2
 8002d70:	4313      	orrs	r3, r2
 8002d72:	6023      	str	r3, [r4, #0]
 8002d74:	782b      	ldrb	r3, [r5, #0]
 8002d76:	2b2e      	cmp	r3, #46	; 0x2e
 8002d78:	d10a      	bne.n	8002d90 <_svfiprintf_r+0x12c>
 8002d7a:	786b      	ldrb	r3, [r5, #1]
 8002d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d7e:	d135      	bne.n	8002dec <_svfiprintf_r+0x188>
 8002d80:	9b07      	ldr	r3, [sp, #28]
 8002d82:	3502      	adds	r5, #2
 8002d84:	1d1a      	adds	r2, r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	9207      	str	r2, [sp, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db2b      	blt.n	8002de6 <_svfiprintf_r+0x182>
 8002d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d90:	4e2f      	ldr	r6, [pc, #188]	; (8002e50 <_svfiprintf_r+0x1ec>)
 8002d92:	7829      	ldrb	r1, [r5, #0]
 8002d94:	2203      	movs	r2, #3
 8002d96:	0030      	movs	r0, r6
 8002d98:	f000 f9d8 	bl	800314c <memchr>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d006      	beq.n	8002dae <_svfiprintf_r+0x14a>
 8002da0:	2340      	movs	r3, #64	; 0x40
 8002da2:	1b80      	subs	r0, r0, r6
 8002da4:	4083      	lsls	r3, r0
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	3501      	adds	r5, #1
 8002daa:	4313      	orrs	r3, r2
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	7829      	ldrb	r1, [r5, #0]
 8002db0:	2206      	movs	r2, #6
 8002db2:	4828      	ldr	r0, [pc, #160]	; (8002e54 <_svfiprintf_r+0x1f0>)
 8002db4:	1c6e      	adds	r6, r5, #1
 8002db6:	7621      	strb	r1, [r4, #24]
 8002db8:	f000 f9c8 	bl	800314c <memchr>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d03c      	beq.n	8002e3a <_svfiprintf_r+0x1d6>
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <_svfiprintf_r+0x1f4>)
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d125      	bne.n	8002e12 <_svfiprintf_r+0x1ae>
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	9b07      	ldr	r3, [sp, #28]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	4393      	bics	r3, r2
 8002dce:	3308      	adds	r3, #8
 8002dd0:	9307      	str	r3, [sp, #28]
 8002dd2:	6963      	ldr	r3, [r4, #20]
 8002dd4:	9a04      	ldr	r2, [sp, #16]
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	6163      	str	r3, [r4, #20]
 8002dda:	e766      	b.n	8002caa <_svfiprintf_r+0x46>
 8002ddc:	4343      	muls	r3, r0
 8002dde:	2101      	movs	r1, #1
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	0035      	movs	r5, r6
 8002de4:	e7a6      	b.n	8002d34 <_svfiprintf_r+0xd0>
 8002de6:	2301      	movs	r3, #1
 8002de8:	425b      	negs	r3, r3
 8002dea:	e7d0      	b.n	8002d8e <_svfiprintf_r+0x12a>
 8002dec:	2300      	movs	r3, #0
 8002dee:	200a      	movs	r0, #10
 8002df0:	001a      	movs	r2, r3
 8002df2:	3501      	adds	r5, #1
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	7829      	ldrb	r1, [r5, #0]
 8002df8:	1c6e      	adds	r6, r5, #1
 8002dfa:	3930      	subs	r1, #48	; 0x30
 8002dfc:	2909      	cmp	r1, #9
 8002dfe:	d903      	bls.n	8002e08 <_svfiprintf_r+0x1a4>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0c5      	beq.n	8002d90 <_svfiprintf_r+0x12c>
 8002e04:	9209      	str	r2, [sp, #36]	; 0x24
 8002e06:	e7c3      	b.n	8002d90 <_svfiprintf_r+0x12c>
 8002e08:	4342      	muls	r2, r0
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	1852      	adds	r2, r2, r1
 8002e0e:	0035      	movs	r5, r6
 8002e10:	e7f1      	b.n	8002df6 <_svfiprintf_r+0x192>
 8002e12:	ab07      	add	r3, sp, #28
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	003a      	movs	r2, r7
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <_svfiprintf_r+0x1f8>)
 8002e1a:	0021      	movs	r1, r4
 8002e1c:	9803      	ldr	r0, [sp, #12]
 8002e1e:	e000      	b.n	8002e22 <_svfiprintf_r+0x1be>
 8002e20:	bf00      	nop
 8002e22:	9004      	str	r0, [sp, #16]
 8002e24:	9b04      	ldr	r3, [sp, #16]
 8002e26:	3301      	adds	r3, #1
 8002e28:	d1d3      	bne.n	8002dd2 <_svfiprintf_r+0x16e>
 8002e2a:	89bb      	ldrh	r3, [r7, #12]
 8002e2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	d400      	bmi.n	8002e34 <_svfiprintf_r+0x1d0>
 8002e32:	e72e      	b.n	8002c92 <_svfiprintf_r+0x2e>
 8002e34:	2001      	movs	r0, #1
 8002e36:	4240      	negs	r0, r0
 8002e38:	e72b      	b.n	8002c92 <_svfiprintf_r+0x2e>
 8002e3a:	ab07      	add	r3, sp, #28
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	003a      	movs	r2, r7
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <_svfiprintf_r+0x1f8>)
 8002e42:	0021      	movs	r1, r4
 8002e44:	9803      	ldr	r0, [sp, #12]
 8002e46:	f000 f879 	bl	8002f3c <_printf_i>
 8002e4a:	e7ea      	b.n	8002e22 <_svfiprintf_r+0x1be>
 8002e4c:	080033f4 	.word	0x080033f4
 8002e50:	080033fa 	.word	0x080033fa
 8002e54:	080033fe 	.word	0x080033fe
 8002e58:	00000000 	.word	0x00000000
 8002e5c:	08002ba1 	.word	0x08002ba1

08002e60 <_printf_common>:
 8002e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e62:	0015      	movs	r5, r2
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	688a      	ldr	r2, [r1, #8]
 8002e68:	690b      	ldr	r3, [r1, #16]
 8002e6a:	9000      	str	r0, [sp, #0]
 8002e6c:	000c      	movs	r4, r1
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	da00      	bge.n	8002e74 <_printf_common+0x14>
 8002e72:	0013      	movs	r3, r2
 8002e74:	0022      	movs	r2, r4
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	3243      	adds	r2, #67	; 0x43
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	2a00      	cmp	r2, #0
 8002e7e:	d001      	beq.n	8002e84 <_printf_common+0x24>
 8002e80:	3301      	adds	r3, #1
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	d502      	bpl.n	8002e90 <_printf_common+0x30>
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	602b      	str	r3, [r5, #0]
 8002e90:	2706      	movs	r7, #6
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	401f      	ands	r7, r3
 8002e96:	d027      	beq.n	8002ee8 <_printf_common+0x88>
 8002e98:	0023      	movs	r3, r4
 8002e9a:	3343      	adds	r3, #67	; 0x43
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	1e5a      	subs	r2, r3, #1
 8002ea0:	4193      	sbcs	r3, r2
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	0692      	lsls	r2, r2, #26
 8002ea6:	d430      	bmi.n	8002f0a <_printf_common+0xaa>
 8002ea8:	0022      	movs	r2, r4
 8002eaa:	9901      	ldr	r1, [sp, #4]
 8002eac:	3243      	adds	r2, #67	; 0x43
 8002eae:	9800      	ldr	r0, [sp, #0]
 8002eb0:	9e08      	ldr	r6, [sp, #32]
 8002eb2:	47b0      	blx	r6
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d025      	beq.n	8002f04 <_printf_common+0xa4>
 8002eb8:	2306      	movs	r3, #6
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	682a      	ldr	r2, [r5, #0]
 8002ebe:	68e1      	ldr	r1, [r4, #12]
 8002ec0:	4003      	ands	r3, r0
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d103      	bne.n	8002ed0 <_printf_common+0x70>
 8002ec8:	1a8d      	subs	r5, r1, r2
 8002eca:	43eb      	mvns	r3, r5
 8002ecc:	17db      	asrs	r3, r3, #31
 8002ece:	401d      	ands	r5, r3
 8002ed0:	68a3      	ldr	r3, [r4, #8]
 8002ed2:	6922      	ldr	r2, [r4, #16]
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	dd01      	ble.n	8002edc <_printf_common+0x7c>
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	18ed      	adds	r5, r5, r3
 8002edc:	2700      	movs	r7, #0
 8002ede:	42bd      	cmp	r5, r7
 8002ee0:	d120      	bne.n	8002f24 <_printf_common+0xc4>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e010      	b.n	8002f08 <_printf_common+0xa8>
 8002ee6:	3701      	adds	r7, #1
 8002ee8:	68e3      	ldr	r3, [r4, #12]
 8002eea:	682a      	ldr	r2, [r5, #0]
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	42bb      	cmp	r3, r7
 8002ef0:	ddd2      	ble.n	8002e98 <_printf_common+0x38>
 8002ef2:	0022      	movs	r2, r4
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	3219      	adds	r2, #25
 8002ef8:	9901      	ldr	r1, [sp, #4]
 8002efa:	9800      	ldr	r0, [sp, #0]
 8002efc:	9e08      	ldr	r6, [sp, #32]
 8002efe:	47b0      	blx	r6
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d1f0      	bne.n	8002ee6 <_printf_common+0x86>
 8002f04:	2001      	movs	r0, #1
 8002f06:	4240      	negs	r0, r0
 8002f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f0a:	2030      	movs	r0, #48	; 0x30
 8002f0c:	18e1      	adds	r1, r4, r3
 8002f0e:	3143      	adds	r1, #67	; 0x43
 8002f10:	7008      	strb	r0, [r1, #0]
 8002f12:	0021      	movs	r1, r4
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	3145      	adds	r1, #69	; 0x45
 8002f18:	7809      	ldrb	r1, [r1, #0]
 8002f1a:	18a2      	adds	r2, r4, r2
 8002f1c:	3243      	adds	r2, #67	; 0x43
 8002f1e:	3302      	adds	r3, #2
 8002f20:	7011      	strb	r1, [r2, #0]
 8002f22:	e7c1      	b.n	8002ea8 <_printf_common+0x48>
 8002f24:	0022      	movs	r2, r4
 8002f26:	2301      	movs	r3, #1
 8002f28:	321a      	adds	r2, #26
 8002f2a:	9901      	ldr	r1, [sp, #4]
 8002f2c:	9800      	ldr	r0, [sp, #0]
 8002f2e:	9e08      	ldr	r6, [sp, #32]
 8002f30:	47b0      	blx	r6
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	d0e6      	beq.n	8002f04 <_printf_common+0xa4>
 8002f36:	3701      	adds	r7, #1
 8002f38:	e7d1      	b.n	8002ede <_printf_common+0x7e>
	...

08002f3c <_printf_i>:
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	9204      	str	r2, [sp, #16]
 8002f42:	000a      	movs	r2, r1
 8002f44:	3243      	adds	r2, #67	; 0x43
 8002f46:	9305      	str	r3, [sp, #20]
 8002f48:	9003      	str	r0, [sp, #12]
 8002f4a:	9202      	str	r2, [sp, #8]
 8002f4c:	7e0a      	ldrb	r2, [r1, #24]
 8002f4e:	000c      	movs	r4, r1
 8002f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f52:	2a6e      	cmp	r2, #110	; 0x6e
 8002f54:	d100      	bne.n	8002f58 <_printf_i+0x1c>
 8002f56:	e086      	b.n	8003066 <_printf_i+0x12a>
 8002f58:	d81f      	bhi.n	8002f9a <_printf_i+0x5e>
 8002f5a:	2a63      	cmp	r2, #99	; 0x63
 8002f5c:	d033      	beq.n	8002fc6 <_printf_i+0x8a>
 8002f5e:	d808      	bhi.n	8002f72 <_printf_i+0x36>
 8002f60:	2a00      	cmp	r2, #0
 8002f62:	d100      	bne.n	8002f66 <_printf_i+0x2a>
 8002f64:	e08c      	b.n	8003080 <_printf_i+0x144>
 8002f66:	2a58      	cmp	r2, #88	; 0x58
 8002f68:	d04d      	beq.n	8003006 <_printf_i+0xca>
 8002f6a:	0025      	movs	r5, r4
 8002f6c:	3542      	adds	r5, #66	; 0x42
 8002f6e:	702a      	strb	r2, [r5, #0]
 8002f70:	e030      	b.n	8002fd4 <_printf_i+0x98>
 8002f72:	2a64      	cmp	r2, #100	; 0x64
 8002f74:	d001      	beq.n	8002f7a <_printf_i+0x3e>
 8002f76:	2a69      	cmp	r2, #105	; 0x69
 8002f78:	d1f7      	bne.n	8002f6a <_printf_i+0x2e>
 8002f7a:	6819      	ldr	r1, [r3, #0]
 8002f7c:	6825      	ldr	r5, [r4, #0]
 8002f7e:	1d0a      	adds	r2, r1, #4
 8002f80:	0628      	lsls	r0, r5, #24
 8002f82:	d529      	bpl.n	8002fd8 <_printf_i+0x9c>
 8002f84:	6808      	ldr	r0, [r1, #0]
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	da03      	bge.n	8002f94 <_printf_i+0x58>
 8002f8c:	232d      	movs	r3, #45	; 0x2d
 8002f8e:	9a02      	ldr	r2, [sp, #8]
 8002f90:	4240      	negs	r0, r0
 8002f92:	7013      	strb	r3, [r2, #0]
 8002f94:	4e6b      	ldr	r6, [pc, #428]	; (8003144 <_printf_i+0x208>)
 8002f96:	270a      	movs	r7, #10
 8002f98:	e04f      	b.n	800303a <_printf_i+0xfe>
 8002f9a:	2a73      	cmp	r2, #115	; 0x73
 8002f9c:	d074      	beq.n	8003088 <_printf_i+0x14c>
 8002f9e:	d808      	bhi.n	8002fb2 <_printf_i+0x76>
 8002fa0:	2a6f      	cmp	r2, #111	; 0x6f
 8002fa2:	d01f      	beq.n	8002fe4 <_printf_i+0xa8>
 8002fa4:	2a70      	cmp	r2, #112	; 0x70
 8002fa6:	d1e0      	bne.n	8002f6a <_printf_i+0x2e>
 8002fa8:	2220      	movs	r2, #32
 8002faa:	6809      	ldr	r1, [r1, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	6022      	str	r2, [r4, #0]
 8002fb0:	e003      	b.n	8002fba <_printf_i+0x7e>
 8002fb2:	2a75      	cmp	r2, #117	; 0x75
 8002fb4:	d016      	beq.n	8002fe4 <_printf_i+0xa8>
 8002fb6:	2a78      	cmp	r2, #120	; 0x78
 8002fb8:	d1d7      	bne.n	8002f6a <_printf_i+0x2e>
 8002fba:	0022      	movs	r2, r4
 8002fbc:	2178      	movs	r1, #120	; 0x78
 8002fbe:	3245      	adds	r2, #69	; 0x45
 8002fc0:	7011      	strb	r1, [r2, #0]
 8002fc2:	4e61      	ldr	r6, [pc, #388]	; (8003148 <_printf_i+0x20c>)
 8002fc4:	e022      	b.n	800300c <_printf_i+0xd0>
 8002fc6:	0025      	movs	r5, r4
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	3542      	adds	r5, #66	; 0x42
 8002fcc:	1d11      	adds	r1, r2, #4
 8002fce:	6019      	str	r1, [r3, #0]
 8002fd0:	6813      	ldr	r3, [r2, #0]
 8002fd2:	702b      	strb	r3, [r5, #0]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e065      	b.n	80030a4 <_printf_i+0x168>
 8002fd8:	6808      	ldr	r0, [r1, #0]
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	0669      	lsls	r1, r5, #25
 8002fde:	d5d3      	bpl.n	8002f88 <_printf_i+0x4c>
 8002fe0:	b200      	sxth	r0, r0
 8002fe2:	e7d1      	b.n	8002f88 <_printf_i+0x4c>
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	6825      	ldr	r5, [r4, #0]
 8002fe8:	1d08      	adds	r0, r1, #4
 8002fea:	6018      	str	r0, [r3, #0]
 8002fec:	6808      	ldr	r0, [r1, #0]
 8002fee:	062e      	lsls	r6, r5, #24
 8002ff0:	d505      	bpl.n	8002ffe <_printf_i+0xc2>
 8002ff2:	4e54      	ldr	r6, [pc, #336]	; (8003144 <_printf_i+0x208>)
 8002ff4:	2708      	movs	r7, #8
 8002ff6:	2a6f      	cmp	r2, #111	; 0x6f
 8002ff8:	d01b      	beq.n	8003032 <_printf_i+0xf6>
 8002ffa:	270a      	movs	r7, #10
 8002ffc:	e019      	b.n	8003032 <_printf_i+0xf6>
 8002ffe:	066d      	lsls	r5, r5, #25
 8003000:	d5f7      	bpl.n	8002ff2 <_printf_i+0xb6>
 8003002:	b280      	uxth	r0, r0
 8003004:	e7f5      	b.n	8002ff2 <_printf_i+0xb6>
 8003006:	3145      	adds	r1, #69	; 0x45
 8003008:	4e4e      	ldr	r6, [pc, #312]	; (8003144 <_printf_i+0x208>)
 800300a:	700a      	strb	r2, [r1, #0]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	6822      	ldr	r2, [r4, #0]
 8003010:	1d01      	adds	r1, r0, #4
 8003012:	6800      	ldr	r0, [r0, #0]
 8003014:	6019      	str	r1, [r3, #0]
 8003016:	0615      	lsls	r5, r2, #24
 8003018:	d521      	bpl.n	800305e <_printf_i+0x122>
 800301a:	07d3      	lsls	r3, r2, #31
 800301c:	d502      	bpl.n	8003024 <_printf_i+0xe8>
 800301e:	2320      	movs	r3, #32
 8003020:	431a      	orrs	r2, r3
 8003022:	6022      	str	r2, [r4, #0]
 8003024:	2710      	movs	r7, #16
 8003026:	2800      	cmp	r0, #0
 8003028:	d103      	bne.n	8003032 <_printf_i+0xf6>
 800302a:	2320      	movs	r3, #32
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	439a      	bics	r2, r3
 8003030:	6022      	str	r2, [r4, #0]
 8003032:	0023      	movs	r3, r4
 8003034:	2200      	movs	r2, #0
 8003036:	3343      	adds	r3, #67	; 0x43
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	6863      	ldr	r3, [r4, #4]
 800303c:	60a3      	str	r3, [r4, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db58      	blt.n	80030f4 <_printf_i+0x1b8>
 8003042:	2204      	movs	r2, #4
 8003044:	6821      	ldr	r1, [r4, #0]
 8003046:	4391      	bics	r1, r2
 8003048:	6021      	str	r1, [r4, #0]
 800304a:	2800      	cmp	r0, #0
 800304c:	d154      	bne.n	80030f8 <_printf_i+0x1bc>
 800304e:	9d02      	ldr	r5, [sp, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d05a      	beq.n	800310a <_printf_i+0x1ce>
 8003054:	0025      	movs	r5, r4
 8003056:	7833      	ldrb	r3, [r6, #0]
 8003058:	3542      	adds	r5, #66	; 0x42
 800305a:	702b      	strb	r3, [r5, #0]
 800305c:	e055      	b.n	800310a <_printf_i+0x1ce>
 800305e:	0655      	lsls	r5, r2, #25
 8003060:	d5db      	bpl.n	800301a <_printf_i+0xde>
 8003062:	b280      	uxth	r0, r0
 8003064:	e7d9      	b.n	800301a <_printf_i+0xde>
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	680d      	ldr	r5, [r1, #0]
 800306a:	1d10      	adds	r0, r2, #4
 800306c:	6949      	ldr	r1, [r1, #20]
 800306e:	6018      	str	r0, [r3, #0]
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	062e      	lsls	r6, r5, #24
 8003074:	d501      	bpl.n	800307a <_printf_i+0x13e>
 8003076:	6019      	str	r1, [r3, #0]
 8003078:	e002      	b.n	8003080 <_printf_i+0x144>
 800307a:	066d      	lsls	r5, r5, #25
 800307c:	d5fb      	bpl.n	8003076 <_printf_i+0x13a>
 800307e:	8019      	strh	r1, [r3, #0]
 8003080:	2300      	movs	r3, #0
 8003082:	9d02      	ldr	r5, [sp, #8]
 8003084:	6123      	str	r3, [r4, #16]
 8003086:	e04f      	b.n	8003128 <_printf_i+0x1ec>
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	1d11      	adds	r1, r2, #4
 800308c:	6019      	str	r1, [r3, #0]
 800308e:	6815      	ldr	r5, [r2, #0]
 8003090:	2100      	movs	r1, #0
 8003092:	6862      	ldr	r2, [r4, #4]
 8003094:	0028      	movs	r0, r5
 8003096:	f000 f859 	bl	800314c <memchr>
 800309a:	2800      	cmp	r0, #0
 800309c:	d001      	beq.n	80030a2 <_printf_i+0x166>
 800309e:	1b40      	subs	r0, r0, r5
 80030a0:	6060      	str	r0, [r4, #4]
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	6123      	str	r3, [r4, #16]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9a02      	ldr	r2, [sp, #8]
 80030aa:	7013      	strb	r3, [r2, #0]
 80030ac:	e03c      	b.n	8003128 <_printf_i+0x1ec>
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	002a      	movs	r2, r5
 80030b2:	9904      	ldr	r1, [sp, #16]
 80030b4:	9803      	ldr	r0, [sp, #12]
 80030b6:	9d05      	ldr	r5, [sp, #20]
 80030b8:	47a8      	blx	r5
 80030ba:	1c43      	adds	r3, r0, #1
 80030bc:	d03e      	beq.n	800313c <_printf_i+0x200>
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	079b      	lsls	r3, r3, #30
 80030c2:	d415      	bmi.n	80030f0 <_printf_i+0x1b4>
 80030c4:	9b07      	ldr	r3, [sp, #28]
 80030c6:	68e0      	ldr	r0, [r4, #12]
 80030c8:	4298      	cmp	r0, r3
 80030ca:	da39      	bge.n	8003140 <_printf_i+0x204>
 80030cc:	0018      	movs	r0, r3
 80030ce:	e037      	b.n	8003140 <_printf_i+0x204>
 80030d0:	0022      	movs	r2, r4
 80030d2:	2301      	movs	r3, #1
 80030d4:	3219      	adds	r2, #25
 80030d6:	9904      	ldr	r1, [sp, #16]
 80030d8:	9803      	ldr	r0, [sp, #12]
 80030da:	9e05      	ldr	r6, [sp, #20]
 80030dc:	47b0      	blx	r6
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	d02c      	beq.n	800313c <_printf_i+0x200>
 80030e2:	3501      	adds	r5, #1
 80030e4:	68e3      	ldr	r3, [r4, #12]
 80030e6:	9a07      	ldr	r2, [sp, #28]
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	42ab      	cmp	r3, r5
 80030ec:	dcf0      	bgt.n	80030d0 <_printf_i+0x194>
 80030ee:	e7e9      	b.n	80030c4 <_printf_i+0x188>
 80030f0:	2500      	movs	r5, #0
 80030f2:	e7f7      	b.n	80030e4 <_printf_i+0x1a8>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d0ad      	beq.n	8003054 <_printf_i+0x118>
 80030f8:	9d02      	ldr	r5, [sp, #8]
 80030fa:	0039      	movs	r1, r7
 80030fc:	f7fd f888 	bl	8000210 <__aeabi_uidivmod>
 8003100:	5c73      	ldrb	r3, [r6, r1]
 8003102:	3d01      	subs	r5, #1
 8003104:	702b      	strb	r3, [r5, #0]
 8003106:	2800      	cmp	r0, #0
 8003108:	d1f7      	bne.n	80030fa <_printf_i+0x1be>
 800310a:	2f08      	cmp	r7, #8
 800310c:	d109      	bne.n	8003122 <_printf_i+0x1e6>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	07db      	lsls	r3, r3, #31
 8003112:	d506      	bpl.n	8003122 <_printf_i+0x1e6>
 8003114:	6863      	ldr	r3, [r4, #4]
 8003116:	6922      	ldr	r2, [r4, #16]
 8003118:	4293      	cmp	r3, r2
 800311a:	dc02      	bgt.n	8003122 <_printf_i+0x1e6>
 800311c:	2330      	movs	r3, #48	; 0x30
 800311e:	3d01      	subs	r5, #1
 8003120:	702b      	strb	r3, [r5, #0]
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	1b5b      	subs	r3, r3, r5
 8003126:	6123      	str	r3, [r4, #16]
 8003128:	9b05      	ldr	r3, [sp, #20]
 800312a:	aa07      	add	r2, sp, #28
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	0021      	movs	r1, r4
 8003130:	9b04      	ldr	r3, [sp, #16]
 8003132:	9803      	ldr	r0, [sp, #12]
 8003134:	f7ff fe94 	bl	8002e60 <_printf_common>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d1b8      	bne.n	80030ae <_printf_i+0x172>
 800313c:	2001      	movs	r0, #1
 800313e:	4240      	negs	r0, r0
 8003140:	b009      	add	sp, #36	; 0x24
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003144:	08003405 	.word	0x08003405
 8003148:	08003416 	.word	0x08003416

0800314c <memchr>:
 800314c:	b2c9      	uxtb	r1, r1
 800314e:	1882      	adds	r2, r0, r2
 8003150:	4290      	cmp	r0, r2
 8003152:	d101      	bne.n	8003158 <memchr+0xc>
 8003154:	2000      	movs	r0, #0
 8003156:	4770      	bx	lr
 8003158:	7803      	ldrb	r3, [r0, #0]
 800315a:	428b      	cmp	r3, r1
 800315c:	d0fb      	beq.n	8003156 <memchr+0xa>
 800315e:	3001      	adds	r0, #1
 8003160:	e7f6      	b.n	8003150 <memchr+0x4>

08003162 <memcpy>:
 8003162:	2300      	movs	r3, #0
 8003164:	b510      	push	{r4, lr}
 8003166:	429a      	cmp	r2, r3
 8003168:	d100      	bne.n	800316c <memcpy+0xa>
 800316a:	bd10      	pop	{r4, pc}
 800316c:	5ccc      	ldrb	r4, [r1, r3]
 800316e:	54c4      	strb	r4, [r0, r3]
 8003170:	3301      	adds	r3, #1
 8003172:	e7f8      	b.n	8003166 <memcpy+0x4>

08003174 <memmove>:
 8003174:	b510      	push	{r4, lr}
 8003176:	4288      	cmp	r0, r1
 8003178:	d902      	bls.n	8003180 <memmove+0xc>
 800317a:	188b      	adds	r3, r1, r2
 800317c:	4298      	cmp	r0, r3
 800317e:	d303      	bcc.n	8003188 <memmove+0x14>
 8003180:	2300      	movs	r3, #0
 8003182:	e007      	b.n	8003194 <memmove+0x20>
 8003184:	5c8b      	ldrb	r3, [r1, r2]
 8003186:	5483      	strb	r3, [r0, r2]
 8003188:	3a01      	subs	r2, #1
 800318a:	d2fb      	bcs.n	8003184 <memmove+0x10>
 800318c:	bd10      	pop	{r4, pc}
 800318e:	5ccc      	ldrb	r4, [r1, r3]
 8003190:	54c4      	strb	r4, [r0, r3]
 8003192:	3301      	adds	r3, #1
 8003194:	429a      	cmp	r2, r3
 8003196:	d1fa      	bne.n	800318e <memmove+0x1a>
 8003198:	e7f8      	b.n	800318c <memmove+0x18>
	...

0800319c <_free_r>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	0005      	movs	r5, r0
 80031a0:	2900      	cmp	r1, #0
 80031a2:	d010      	beq.n	80031c6 <_free_r+0x2a>
 80031a4:	1f0c      	subs	r4, r1, #4
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <_free_r+0x12>
 80031ac:	18e4      	adds	r4, r4, r3
 80031ae:	0028      	movs	r0, r5
 80031b0:	f000 f8d4 	bl	800335c <__malloc_lock>
 80031b4:	4a1d      	ldr	r2, [pc, #116]	; (800322c <_free_r+0x90>)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <_free_r+0x2c>
 80031bc:	6063      	str	r3, [r4, #4]
 80031be:	6014      	str	r4, [r2, #0]
 80031c0:	0028      	movs	r0, r5
 80031c2:	f000 f8cc 	bl	800335e <__malloc_unlock>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	d909      	bls.n	80031e0 <_free_r+0x44>
 80031cc:	6821      	ldr	r1, [r4, #0]
 80031ce:	1860      	adds	r0, r4, r1
 80031d0:	4283      	cmp	r3, r0
 80031d2:	d1f3      	bne.n	80031bc <_free_r+0x20>
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	1841      	adds	r1, r0, r1
 80031da:	6021      	str	r1, [r4, #0]
 80031dc:	e7ee      	b.n	80031bc <_free_r+0x20>
 80031de:	0013      	movs	r3, r2
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	d001      	beq.n	80031ea <_free_r+0x4e>
 80031e6:	42a2      	cmp	r2, r4
 80031e8:	d9f9      	bls.n	80031de <_free_r+0x42>
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	1858      	adds	r0, r3, r1
 80031ee:	42a0      	cmp	r0, r4
 80031f0:	d10b      	bne.n	800320a <_free_r+0x6e>
 80031f2:	6820      	ldr	r0, [r4, #0]
 80031f4:	1809      	adds	r1, r1, r0
 80031f6:	1858      	adds	r0, r3, r1
 80031f8:	6019      	str	r1, [r3, #0]
 80031fa:	4282      	cmp	r2, r0
 80031fc:	d1e0      	bne.n	80031c0 <_free_r+0x24>
 80031fe:	6810      	ldr	r0, [r2, #0]
 8003200:	6852      	ldr	r2, [r2, #4]
 8003202:	1841      	adds	r1, r0, r1
 8003204:	6019      	str	r1, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	e7da      	b.n	80031c0 <_free_r+0x24>
 800320a:	42a0      	cmp	r0, r4
 800320c:	d902      	bls.n	8003214 <_free_r+0x78>
 800320e:	230c      	movs	r3, #12
 8003210:	602b      	str	r3, [r5, #0]
 8003212:	e7d5      	b.n	80031c0 <_free_r+0x24>
 8003214:	6821      	ldr	r1, [r4, #0]
 8003216:	1860      	adds	r0, r4, r1
 8003218:	4282      	cmp	r2, r0
 800321a:	d103      	bne.n	8003224 <_free_r+0x88>
 800321c:	6810      	ldr	r0, [r2, #0]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	1841      	adds	r1, r0, r1
 8003222:	6021      	str	r1, [r4, #0]
 8003224:	6062      	str	r2, [r4, #4]
 8003226:	605c      	str	r4, [r3, #4]
 8003228:	e7ca      	b.n	80031c0 <_free_r+0x24>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	20000094 	.word	0x20000094

08003230 <_malloc_r>:
 8003230:	2303      	movs	r3, #3
 8003232:	b570      	push	{r4, r5, r6, lr}
 8003234:	1ccd      	adds	r5, r1, #3
 8003236:	439d      	bics	r5, r3
 8003238:	3508      	adds	r5, #8
 800323a:	0006      	movs	r6, r0
 800323c:	2d0c      	cmp	r5, #12
 800323e:	d21e      	bcs.n	800327e <_malloc_r+0x4e>
 8003240:	250c      	movs	r5, #12
 8003242:	42a9      	cmp	r1, r5
 8003244:	d81d      	bhi.n	8003282 <_malloc_r+0x52>
 8003246:	0030      	movs	r0, r6
 8003248:	f000 f888 	bl	800335c <__malloc_lock>
 800324c:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <_malloc_r+0xb4>)
 800324e:	6814      	ldr	r4, [r2, #0]
 8003250:	0021      	movs	r1, r4
 8003252:	2900      	cmp	r1, #0
 8003254:	d119      	bne.n	800328a <_malloc_r+0x5a>
 8003256:	4c24      	ldr	r4, [pc, #144]	; (80032e8 <_malloc_r+0xb8>)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <_malloc_r+0x36>
 800325e:	0030      	movs	r0, r6
 8003260:	f000 f86a 	bl	8003338 <_sbrk_r>
 8003264:	6020      	str	r0, [r4, #0]
 8003266:	0029      	movs	r1, r5
 8003268:	0030      	movs	r0, r6
 800326a:	f000 f865 	bl	8003338 <_sbrk_r>
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	d12b      	bne.n	80032ca <_malloc_r+0x9a>
 8003272:	230c      	movs	r3, #12
 8003274:	0030      	movs	r0, r6
 8003276:	6033      	str	r3, [r6, #0]
 8003278:	f000 f871 	bl	800335e <__malloc_unlock>
 800327c:	e003      	b.n	8003286 <_malloc_r+0x56>
 800327e:	2d00      	cmp	r5, #0
 8003280:	dadf      	bge.n	8003242 <_malloc_r+0x12>
 8003282:	230c      	movs	r3, #12
 8003284:	6033      	str	r3, [r6, #0]
 8003286:	2000      	movs	r0, #0
 8003288:	bd70      	pop	{r4, r5, r6, pc}
 800328a:	680b      	ldr	r3, [r1, #0]
 800328c:	1b5b      	subs	r3, r3, r5
 800328e:	d419      	bmi.n	80032c4 <_malloc_r+0x94>
 8003290:	2b0b      	cmp	r3, #11
 8003292:	d903      	bls.n	800329c <_malloc_r+0x6c>
 8003294:	600b      	str	r3, [r1, #0]
 8003296:	18cc      	adds	r4, r1, r3
 8003298:	6025      	str	r5, [r4, #0]
 800329a:	e003      	b.n	80032a4 <_malloc_r+0x74>
 800329c:	684b      	ldr	r3, [r1, #4]
 800329e:	428c      	cmp	r4, r1
 80032a0:	d10d      	bne.n	80032be <_malloc_r+0x8e>
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	0030      	movs	r0, r6
 80032a6:	f000 f85a 	bl	800335e <__malloc_unlock>
 80032aa:	0020      	movs	r0, r4
 80032ac:	2207      	movs	r2, #7
 80032ae:	300b      	adds	r0, #11
 80032b0:	1d23      	adds	r3, r4, #4
 80032b2:	4390      	bics	r0, r2
 80032b4:	1ac3      	subs	r3, r0, r3
 80032b6:	d0e7      	beq.n	8003288 <_malloc_r+0x58>
 80032b8:	425a      	negs	r2, r3
 80032ba:	50e2      	str	r2, [r4, r3]
 80032bc:	e7e4      	b.n	8003288 <_malloc_r+0x58>
 80032be:	6063      	str	r3, [r4, #4]
 80032c0:	000c      	movs	r4, r1
 80032c2:	e7ef      	b.n	80032a4 <_malloc_r+0x74>
 80032c4:	000c      	movs	r4, r1
 80032c6:	6849      	ldr	r1, [r1, #4]
 80032c8:	e7c3      	b.n	8003252 <_malloc_r+0x22>
 80032ca:	2303      	movs	r3, #3
 80032cc:	1cc4      	adds	r4, r0, #3
 80032ce:	439c      	bics	r4, r3
 80032d0:	42a0      	cmp	r0, r4
 80032d2:	d0e1      	beq.n	8003298 <_malloc_r+0x68>
 80032d4:	1a21      	subs	r1, r4, r0
 80032d6:	0030      	movs	r0, r6
 80032d8:	f000 f82e 	bl	8003338 <_sbrk_r>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d1db      	bne.n	8003298 <_malloc_r+0x68>
 80032e0:	e7c7      	b.n	8003272 <_malloc_r+0x42>
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000094 	.word	0x20000094
 80032e8:	20000098 	.word	0x20000098

080032ec <_realloc_r>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	0007      	movs	r7, r0
 80032f0:	000d      	movs	r5, r1
 80032f2:	0016      	movs	r6, r2
 80032f4:	2900      	cmp	r1, #0
 80032f6:	d105      	bne.n	8003304 <_realloc_r+0x18>
 80032f8:	0011      	movs	r1, r2
 80032fa:	f7ff ff99 	bl	8003230 <_malloc_r>
 80032fe:	0004      	movs	r4, r0
 8003300:	0020      	movs	r0, r4
 8003302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003304:	2a00      	cmp	r2, #0
 8003306:	d103      	bne.n	8003310 <_realloc_r+0x24>
 8003308:	f7ff ff48 	bl	800319c <_free_r>
 800330c:	0034      	movs	r4, r6
 800330e:	e7f7      	b.n	8003300 <_realloc_r+0x14>
 8003310:	f000 f826 	bl	8003360 <_malloc_usable_size_r>
 8003314:	002c      	movs	r4, r5
 8003316:	42b0      	cmp	r0, r6
 8003318:	d2f2      	bcs.n	8003300 <_realloc_r+0x14>
 800331a:	0031      	movs	r1, r6
 800331c:	0038      	movs	r0, r7
 800331e:	f7ff ff87 	bl	8003230 <_malloc_r>
 8003322:	1e04      	subs	r4, r0, #0
 8003324:	d0ec      	beq.n	8003300 <_realloc_r+0x14>
 8003326:	0029      	movs	r1, r5
 8003328:	0032      	movs	r2, r6
 800332a:	f7ff ff1a 	bl	8003162 <memcpy>
 800332e:	0029      	movs	r1, r5
 8003330:	0038      	movs	r0, r7
 8003332:	f7ff ff33 	bl	800319c <_free_r>
 8003336:	e7e3      	b.n	8003300 <_realloc_r+0x14>

08003338 <_sbrk_r>:
 8003338:	2300      	movs	r3, #0
 800333a:	b570      	push	{r4, r5, r6, lr}
 800333c:	4c06      	ldr	r4, [pc, #24]	; (8003358 <_sbrk_r+0x20>)
 800333e:	0005      	movs	r5, r0
 8003340:	0008      	movs	r0, r1
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	f7fd fbac 	bl	8000aa0 <_sbrk>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d103      	bne.n	8003354 <_sbrk_r+0x1c>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d000      	beq.n	8003354 <_sbrk_r+0x1c>
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	200000e4 	.word	0x200000e4

0800335c <__malloc_lock>:
 800335c:	4770      	bx	lr

0800335e <__malloc_unlock>:
 800335e:	4770      	bx	lr

08003360 <_malloc_usable_size_r>:
 8003360:	1f0b      	subs	r3, r1, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1f18      	subs	r0, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	da01      	bge.n	800336e <_malloc_usable_size_r+0xe>
 800336a:	580b      	ldr	r3, [r1, r0]
 800336c:	18c0      	adds	r0, r0, r3
 800336e:	4770      	bx	lr

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
