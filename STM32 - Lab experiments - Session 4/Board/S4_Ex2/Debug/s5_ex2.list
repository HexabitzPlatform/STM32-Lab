
s5_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ec  080021ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080021ec  080021ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ec  080021ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ec  080021ec  000121ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021f0  080021f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080021f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002264  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002264  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fd1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012f0  00000000  00000000  00025069  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000530  00000000  00000000  00026360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000478  00000000  00000000  00026890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165e9  00000000  00000000  00026d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054d4  00000000  00000000  0003d2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cb3b  00000000  00000000  000427c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf300  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001320  00000000  00000000  000cf37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002154 	.word	0x08002154

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08002154 	.word	0x08002154

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000220:	201e      	movs	r0, #30
 8000222:	f000 fb8b 	bl	800093c <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000226:	2380      	movs	r3, #128	; 0x80
 8000228:	019b      	lsls	r3, r3, #6
 800022a:	4821      	ldr	r0, [pc, #132]	; (80002b0 <lcd_init+0x94>)
 800022c:	2200      	movs	r2, #0
 800022e:	0019      	movs	r1, r3
 8000230:	f000 fdfe 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000234:	2380      	movs	r3, #128	; 0x80
 8000236:	015b      	lsls	r3, r3, #5
 8000238:	481d      	ldr	r0, [pc, #116]	; (80002b0 <lcd_init+0x94>)
 800023a:	2201      	movs	r2, #1
 800023c:	0019      	movs	r1, r3
 800023e:	f000 fdf7 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	011b      	lsls	r3, r3, #4
 8000246:	481a      	ldr	r0, [pc, #104]	; (80002b0 <lcd_init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	0019      	movs	r1, r3
 800024c:	f000 fdf0 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	00db      	lsls	r3, r3, #3
 8000254:	4816      	ldr	r0, [pc, #88]	; (80002b0 <lcd_init+0x94>)
 8000256:	2200      	movs	r2, #0
 8000258:	0019      	movs	r1, r3
 800025a:	f000 fde9 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	021b      	lsls	r3, r3, #8
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <lcd_init+0x94>)
 8000264:	2200      	movs	r2, #0
 8000266:	0019      	movs	r1, r3
 8000268:	f000 fde2 	bl	8000e30 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	01db      	lsls	r3, r3, #7
 8000270:	480f      	ldr	r0, [pc, #60]	; (80002b0 <lcd_init+0x94>)
 8000272:	2201      	movs	r2, #1
 8000274:	0019      	movs	r1, r3
 8000276:	f000 fddb 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	01db      	lsls	r3, r3, #7
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <lcd_init+0x94>)
 8000280:	2200      	movs	r2, #0
 8000282:	0019      	movs	r1, r3
 8000284:	f000 fdd4 	bl	8000e30 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000288:	2128      	movs	r1, #40	; 0x28
 800028a:	2000      	movs	r0, #0
 800028c:	f000 f812 	bl	80002b4 <lcd_write>
	lcd_write(0,0x0c);
 8000290:	210c      	movs	r1, #12
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f80e 	bl	80002b4 <lcd_write>
	lcd_write(0,0x06);
 8000298:	2106      	movs	r1, #6
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f80a 	bl	80002b4 <lcd_write>
	lcd_write(0,0x01);
 80002a0:	2101      	movs	r1, #1
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 f806 	bl	80002b4 <lcd_write>
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	50000400 	.word	0x50000400

080002b4 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	0002      	movs	r2, r0
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	1dbb      	adds	r3, r7, #6
 80002c2:	1c0a      	adds	r2, r1, #0
 80002c4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 80002c6:	2002      	movs	r0, #2
 80002c8:	f000 fb38 	bl	800093c <HAL_Delay>
	if(type)
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d007      	beq.n	80002e4 <lcd_write+0x30>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	4866      	ldr	r0, [pc, #408]	; (8000474 <lcd_write+0x1c0>)
 80002da:	2201      	movs	r2, #1
 80002dc:	0019      	movs	r1, r3
 80002de:	f000 fda7 	bl	8000e30 <HAL_GPIO_WritePin>
 80002e2:	e006      	b.n	80002f2 <lcd_write+0x3e>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	4862      	ldr	r0, [pc, #392]	; (8000474 <lcd_write+0x1c0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	0019      	movs	r1, r3
 80002ee:	f000 fd9f 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 80002f2:	1dbb      	adds	r3, r7, #6
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da07      	bge.n	800030c <lcd_write+0x58>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	485c      	ldr	r0, [pc, #368]	; (8000474 <lcd_write+0x1c0>)
 8000302:	2201      	movs	r2, #1
 8000304:	0019      	movs	r1, r3
 8000306:	f000 fd93 	bl	8000e30 <HAL_GPIO_WritePin>
 800030a:	e006      	b.n	800031a <lcd_write+0x66>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	4858      	ldr	r0, [pc, #352]	; (8000474 <lcd_write+0x1c0>)
 8000312:	2200      	movs	r2, #0
 8000314:	0019      	movs	r1, r3
 8000316:	f000 fd8b 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800031a:	1dbb      	adds	r3, r7, #6
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	4013      	ands	r3, r2
 8000322:	d007      	beq.n	8000334 <lcd_write+0x80>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	011b      	lsls	r3, r3, #4
 8000328:	4852      	ldr	r0, [pc, #328]	; (8000474 <lcd_write+0x1c0>)
 800032a:	2201      	movs	r2, #1
 800032c:	0019      	movs	r1, r3
 800032e:	f000 fd7f 	bl	8000e30 <HAL_GPIO_WritePin>
 8000332:	e006      	b.n	8000342 <lcd_write+0x8e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000334:	2380      	movs	r3, #128	; 0x80
 8000336:	011b      	lsls	r3, r3, #4
 8000338:	484e      	ldr	r0, [pc, #312]	; (8000474 <lcd_write+0x1c0>)
 800033a:	2200      	movs	r2, #0
 800033c:	0019      	movs	r1, r3
 800033e:	f000 fd77 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8000342:	1dbb      	adds	r3, r7, #6
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2220      	movs	r2, #32
 8000348:	4013      	ands	r3, r2
 800034a:	d007      	beq.n	800035c <lcd_write+0xa8>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	015b      	lsls	r3, r3, #5
 8000350:	4848      	ldr	r0, [pc, #288]	; (8000474 <lcd_write+0x1c0>)
 8000352:	2201      	movs	r2, #1
 8000354:	0019      	movs	r1, r3
 8000356:	f000 fd6b 	bl	8000e30 <HAL_GPIO_WritePin>
 800035a:	e006      	b.n	800036a <lcd_write+0xb6>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	4844      	ldr	r0, [pc, #272]	; (8000474 <lcd_write+0x1c0>)
 8000362:	2200      	movs	r2, #0
 8000364:	0019      	movs	r1, r3
 8000366:	f000 fd63 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 800036a:	1dbb      	adds	r3, r7, #6
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2210      	movs	r2, #16
 8000370:	4013      	ands	r3, r2
 8000372:	d007      	beq.n	8000384 <lcd_write+0xd0>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	019b      	lsls	r3, r3, #6
 8000378:	483e      	ldr	r0, [pc, #248]	; (8000474 <lcd_write+0x1c0>)
 800037a:	2201      	movs	r2, #1
 800037c:	0019      	movs	r1, r3
 800037e:	f000 fd57 	bl	8000e30 <HAL_GPIO_WritePin>
 8000382:	e006      	b.n	8000392 <lcd_write+0xde>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	019b      	lsls	r3, r3, #6
 8000388:	483a      	ldr	r0, [pc, #232]	; (8000474 <lcd_write+0x1c0>)
 800038a:	2200      	movs	r2, #0
 800038c:	0019      	movs	r1, r3
 800038e:	f000 fd4f 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	01db      	lsls	r3, r3, #7
 8000396:	4837      	ldr	r0, [pc, #220]	; (8000474 <lcd_write+0x1c0>)
 8000398:	2201      	movs	r2, #1
 800039a:	0019      	movs	r1, r3
 800039c:	f000 fd48 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	01db      	lsls	r3, r3, #7
 80003a4:	4833      	ldr	r0, [pc, #204]	; (8000474 <lcd_write+0x1c0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	0019      	movs	r1, r3
 80003aa:	f000 fd41 	bl	8000e30 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2208      	movs	r2, #8
 80003b4:	4013      	ands	r3, r2
 80003b6:	d007      	beq.n	80003c8 <lcd_write+0x114>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80003b8:	2380      	movs	r3, #128	; 0x80
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	482d      	ldr	r0, [pc, #180]	; (8000474 <lcd_write+0x1c0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	0019      	movs	r1, r3
 80003c2:	f000 fd35 	bl	8000e30 <HAL_GPIO_WritePin>
 80003c6:	e006      	b.n	80003d6 <lcd_write+0x122>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	4829      	ldr	r0, [pc, #164]	; (8000474 <lcd_write+0x1c0>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	0019      	movs	r1, r3
 80003d2:	f000 fd2d 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80003d6:	1dbb      	adds	r3, r7, #6
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2204      	movs	r2, #4
 80003dc:	4013      	ands	r3, r2
 80003de:	d007      	beq.n	80003f0 <lcd_write+0x13c>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	4823      	ldr	r0, [pc, #140]	; (8000474 <lcd_write+0x1c0>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0019      	movs	r1, r3
 80003ea:	f000 fd21 	bl	8000e30 <HAL_GPIO_WritePin>
 80003ee:	e006      	b.n	80003fe <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	481f      	ldr	r0, [pc, #124]	; (8000474 <lcd_write+0x1c0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	0019      	movs	r1, r3
 80003fa:	f000 fd19 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2202      	movs	r2, #2
 8000404:	4013      	ands	r3, r2
 8000406:	d007      	beq.n	8000418 <lcd_write+0x164>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	015b      	lsls	r3, r3, #5
 800040c:	4819      	ldr	r0, [pc, #100]	; (8000474 <lcd_write+0x1c0>)
 800040e:	2201      	movs	r2, #1
 8000410:	0019      	movs	r1, r3
 8000412:	f000 fd0d 	bl	8000e30 <HAL_GPIO_WritePin>
 8000416:	e006      	b.n	8000426 <lcd_write+0x172>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	015b      	lsls	r3, r3, #5
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <lcd_write+0x1c0>)
 800041e:	2200      	movs	r2, #0
 8000420:	0019      	movs	r1, r3
 8000422:	f000 fd05 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	d007      	beq.n	8000440 <lcd_write+0x18c>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	019b      	lsls	r3, r3, #6
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <lcd_write+0x1c0>)
 8000436:	2201      	movs	r2, #1
 8000438:	0019      	movs	r1, r3
 800043a:	f000 fcf9 	bl	8000e30 <HAL_GPIO_WritePin>
 800043e:	e006      	b.n	800044e <lcd_write+0x19a>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	019b      	lsls	r3, r3, #6
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <lcd_write+0x1c0>)
 8000446:	2200      	movs	r2, #0
 8000448:	0019      	movs	r1, r3
 800044a:	f000 fcf1 	bl	8000e30 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	01db      	lsls	r3, r3, #7
 8000452:	4808      	ldr	r0, [pc, #32]	; (8000474 <lcd_write+0x1c0>)
 8000454:	2201      	movs	r2, #1
 8000456:	0019      	movs	r1, r3
 8000458:	f000 fcea 	bl	8000e30 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	01db      	lsls	r3, r3, #7
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <lcd_write+0x1c0>)
 8000462:	2200      	movs	r2, #0
 8000464:	0019      	movs	r1, r3
 8000466:	f000 fce3 	bl	8000e30 <HAL_GPIO_WritePin>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	50000400 	.word	0x50000400

08000478 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	603a      	str	r2, [r7, #0]
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	1c02      	adds	r2, r0, #0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	1dbb      	adds	r3, r7, #6
 8000488:	1c0a      	adds	r2, r1, #0
 800048a:	701a      	strb	r2, [r3, #0]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d011      	beq.n	80004b8 <lcd_puts+0x40>
 8000494:	dc02      	bgt.n	800049c <lcd_puts+0x24>
 8000496:	2b00      	cmp	r3, #0
 8000498:	d005      	beq.n	80004a6 <lcd_puts+0x2e>
 800049a:	e028      	b.n	80004ee <lcd_puts+0x76>
 800049c:	2b02      	cmp	r3, #2
 800049e:	d014      	beq.n	80004ca <lcd_puts+0x52>
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d01b      	beq.n	80004dc <lcd_puts+0x64>
 80004a4:	e023      	b.n	80004ee <lcd_puts+0x76>
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	3b80      	subs	r3, #128	; 0x80
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	0019      	movs	r1, r3
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff feff 	bl	80002b4 <lcd_write>
			break;
 80004b6:	e01a      	b.n	80004ee <lcd_puts+0x76>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	3b40      	subs	r3, #64	; 0x40
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	0019      	movs	r1, r3
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff fef6 	bl	80002b4 <lcd_write>
			break;
 80004c8:	e011      	b.n	80004ee <lcd_puts+0x76>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	3b70      	subs	r3, #112	; 0x70
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	0019      	movs	r1, r3
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff feed 	bl	80002b4 <lcd_write>
			break;
 80004da:	e008      	b.n	80004ee <lcd_puts+0x76>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3b30      	subs	r3, #48	; 0x30
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	0019      	movs	r1, r3
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fee4 	bl	80002b4 <lcd_write>
			break;
 80004ec:	46c0      	nop			; (mov r8, r8)
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80004ee:	e00a      	b.n	8000506 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	0019      	movs	r1, r3
 80004fa:	2001      	movs	r0, #1
 80004fc:	f7ff feda 	bl	80002b4 <lcd_write>
		string++;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	603b      	str	r3, [r7, #0]
	while(*string)
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1ef      	bne.n	80004f0 <lcd_puts+0x78>
	}
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}

08000518 <lcd_clear>:
void lcd_clear(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 800051c:	2101      	movs	r1, #1
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff fec8 	bl	80002b4 <lcd_write>
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <main>:
    	  i--;
       }
 }

int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	unsigned char buffer ;
    HAL_Init();
 8000532:	f000 f97d 	bl	8000830 <HAL_Init>
    SystemClock_Config();
 8000536:	f000 f827 	bl	8000588 <SystemClock_Config>
    MX_GPIO_Init();
 800053a:	f000 f86d 	bl	8000618 <MX_GPIO_Init>
    /* USER CODE BEGIN 2 */
    lcd_init();
 800053e:	f7ff fe6d 	bl	800021c <lcd_init>
    lcd_clear();
 8000542:	f7ff ffe9 	bl	8000518 <lcd_clear>

  while (1)
  {
	  snprintf(buffer, 10, "%d", i);
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	0018      	movs	r0, r3
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <main+0x50>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b25b      	sxtb	r3, r3
 8000552:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <main+0x54>)
 8000554:	210a      	movs	r1, #10
 8000556:	f001 f9e3 	bl	8001920 <sniprintf>
	  lcd_puts(0,0,"people=");
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <main+0x58>)
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff ff89 	bl	8000478 <lcd_puts>
	  lcd_puts(0,10,buffer);
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	001a      	movs	r2, r3
 800056c:	210a      	movs	r1, #10
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff ff82 	bl	8000478 <lcd_puts>
	  HAL_Delay(50);
 8000574:	2032      	movs	r0, #50	; 0x32
 8000576:	f000 f9e1 	bl	800093c <HAL_Delay>
  {
 800057a:	e7e4      	b.n	8000546 <main+0x1a>
 800057c:	2000008c 	.word	0x2000008c
 8000580:	0800216c 	.word	0x0800216c
 8000584:	08002170 	.word	0x08002170

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b093      	sub	sp, #76	; 0x4c
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	2410      	movs	r4, #16
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2338      	movs	r3, #56	; 0x38
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f001 f9b9 	bl	8001910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	2310      	movs	r3, #16
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f001 f9b2 	bl	8001910 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fc99 	bl	8000ee8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2240      	movs	r2, #64	; 0x40
 80005ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fcc5 	bl	8000f68 <HAL_RCC_OscConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005e2:	f000 f86b 	bl	80006bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	003b      	movs	r3, r7
 80005e8:	2207      	movs	r2, #7
 80005ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	003b      	movs	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fe:	003b      	movs	r3, r7
 8000600:	2100      	movs	r1, #0
 8000602:	0018      	movs	r0, r3
 8000604:	f000 ffd0 	bl	80015a8 <HAL_RCC_ClockConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800060c:	f000 f856 	bl	80006bc <Error_Handler>
  }
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b013      	add	sp, #76	; 0x4c
 8000616:	bd90      	pop	{r4, r7, pc}

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	0018      	movs	r0, r3
 8000622:	2314      	movs	r3, #20
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f001 f972 	bl	8001910 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_GPIO_Init+0x98>)
 800062e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_GPIO_Init+0x98>)
 8000632:	2102      	movs	r1, #2
 8000634:	430a      	orrs	r2, r1
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0x98>)
 800063a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800063c:	2202      	movs	r2, #2
 800063e:	4013      	ands	r3, r2
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000644:	23fc      	movs	r3, #252	; 0xfc
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <MX_GPIO_Init+0x9c>)
 800064a:	2200      	movs	r2, #0
 800064c:	0019      	movs	r1, r3
 800064e:	f000 fbef 	bl	8000e30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2203      	movs	r2, #3
 8000656:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_GPIO_Init+0xa0>)
 800065c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2201      	movs	r2, #1
 8000662:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <MX_GPIO_Init+0x9c>)
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f000 fa7c 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	22fc      	movs	r2, #252	; 0xfc
 8000674:	0212      	lsls	r2, r2, #8
 8000676:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2201      	movs	r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <MX_GPIO_Init+0x9c>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f000 fa69 	bl	8000b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2005      	movs	r0, #5
 800069c:	f000 fa32 	bl	8000b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006a0:	2005      	movs	r0, #5
 80006a2:	f000 fa44 	bl	8000b2e <HAL_NVIC_EnableIRQ>

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b006      	add	sp, #24
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40021000 	.word	0x40021000
 80006b4:	50000400 	.word	0x50000400
 80006b8:	10210000 	.word	0x10210000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <Error_Handler+0x6>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_MspInit+0x4c>)
 80006cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HAL_MspInit+0x4c>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	641a      	str	r2, [r3, #64]	; 0x40
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_MspInit+0x4c>)
 80006e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_MspInit+0x4c>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0549      	lsls	r1, r1, #21
 80006ec:	430a      	orrs	r2, r1
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <HAL_MspInit+0x4c>)
 80006f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	055b      	lsls	r3, r3, #21
 80006f8:	4013      	ands	r3, r2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006fe:	23c0      	movs	r3, #192	; 0xc0
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f93c 	bl	8000980 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b002      	add	sp, #8
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f8e4 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000746:	2001      	movs	r0, #1
 8000748:	f000 fb90 	bl	8000e6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800074c:	2002      	movs	r0, #2
 800074e:	f000 fb8d 	bl	8000e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <_sbrk+0x5c>)
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <_sbrk+0x60>)
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <_sbrk+0x64>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <_sbrk+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	18d3      	adds	r3, r2, r3
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d207      	bcs.n	8000798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000788:	f001 f898 	bl	80018bc <__errno>
 800078c:	0003      	movs	r3, r0
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000792:	2301      	movs	r3, #1
 8000794:	425b      	negs	r3, r3
 8000796:	e009      	b.n	80007ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	18d2      	adds	r2, r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <_sbrk+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b006      	add	sp, #24
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20009000 	.word	0x20009000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	20000090 	.word	0x20000090
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <SystemInit+0x14>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0512      	lsls	r2, r2, #20
 80007ce:	609a      	str	r2, [r3, #8]
#endif
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e0:	f7ff fff0 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	; (800081c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	; (8000828 <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080a:	f001 f85d 	bl	80018c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800080e:	f7ff fe8d 	bl	800052c <main>

08000812 <LoopForever>:

LoopForever:
  b LoopForever
 8000812:	e7fe      	b.n	8000812 <LoopForever>
  ldr   r0, =_estack
 8000814:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000820:	080021f4 	.word	0x080021f4
  ldr r2, =_sbss
 8000824:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000828:	200000a4 	.word	0x200000a4

0800082c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_COMP_IRQHandler>
	...

08000830 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_Init+0x3c>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_Init+0x3c>)
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	0049      	lsls	r1, r1, #1
 8000846:	430a      	orrs	r2, r1
 8000848:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800084a:	2000      	movs	r0, #0
 800084c:	f000 f810 	bl	8000870 <HAL_InitTick>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d003      	beq.n	800085c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e001      	b.n	8000860 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800085c:	f7ff ff32 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	230f      	movs	r3, #15
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_InitTick+0x88>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d02b      	beq.n	80008e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_InitTick+0x8c>)
 800088a:	681c      	ldr	r4, [r3, #0]
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <HAL_InitTick+0x88>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	0019      	movs	r1, r3
 8000892:	23fa      	movs	r3, #250	; 0xfa
 8000894:	0098      	lsls	r0, r3, #2
 8000896:	f7ff fc35 	bl	8000104 <__udivsi3>
 800089a:	0003      	movs	r3, r0
 800089c:	0019      	movs	r1, r3
 800089e:	0020      	movs	r0, r4
 80008a0:	f7ff fc30 	bl	8000104 <__udivsi3>
 80008a4:	0003      	movs	r3, r0
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f951 	bl	8000b4e <HAL_SYSTICK_Config>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d112      	bne.n	80008d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d80a      	bhi.n	80008cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	2301      	movs	r3, #1
 80008ba:	425b      	negs	r3, r3
 80008bc:	2200      	movs	r2, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f920 	bl	8000b04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_InitTick+0x90>)
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e00d      	b.n	80008e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008cc:	230f      	movs	r3, #15
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e008      	b.n	80008e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008d6:	230f      	movs	r3, #15
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e003      	b.n	80008e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008e8:	230f      	movs	r3, #15
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	781b      	ldrb	r3, [r3, #0]
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b005      	add	sp, #20
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	18d2      	adds	r2, r2, r3
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000008 	.word	0x20000008
 8000924:	2000009c 	.word	0x2000009c

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	2000009c 	.word	0x2000009c

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff fff0 	bl	8000928 <HAL_GetTick>
 8000948:	0003      	movs	r3, r0
 800094a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_Delay+0x40>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001a      	movs	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	189b      	adds	r3, r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	f7ff ffe0 	bl	8000928 <HAL_GetTick>
 8000968:	0002      	movs	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000008 	.word	0x20000008

08000980 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800098e:	4013      	ands	r3, r2
 8000990:	0019      	movs	r1, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	430a      	orrs	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40010000 	.word	0x40010000
 80009a8:	fffff9ff 	.word	0xfffff9ff

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b7f      	cmp	r3, #127	; 0x7f
 80009be:	d809      	bhi.n	80009d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	001a      	movs	r2, r3
 80009c6:	231f      	movs	r3, #31
 80009c8:	401a      	ands	r2, r3
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_EnableIRQ+0x30>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	4091      	lsls	r1, r2
 80009d0:	000a      	movs	r2, r1
 80009d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	0002      	movs	r2, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b7f      	cmp	r3, #127	; 0x7f
 80009f4:	d828      	bhi.n	8000a48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <__NVIC_SetPriority+0xd4>)
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	33c0      	adds	r3, #192	; 0xc0
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	589b      	ldr	r3, [r3, r2]
 8000a06:	1dfa      	adds	r2, r7, #7
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	400a      	ands	r2, r1
 8000a10:	00d2      	lsls	r2, r2, #3
 8000a12:	21ff      	movs	r1, #255	; 0xff
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	401a      	ands	r2, r3
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	4003      	ands	r3, r0
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	481f      	ldr	r0, [pc, #124]	; (8000ab4 <__NVIC_SetPriority+0xd4>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	33c0      	adds	r3, #192	; 0xc0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a46:	e031      	b.n	8000aac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <__NVIC_SetPriority+0xd8>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0019      	movs	r1, r3
 8000a50:	230f      	movs	r3, #15
 8000a52:	400b      	ands	r3, r1
 8000a54:	3b08      	subs	r3, #8
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3306      	adds	r3, #6
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	3304      	adds	r3, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1dfa      	adds	r2, r7, #7
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	0011      	movs	r1, r2
 8000a68:	2203      	movs	r2, #3
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	00d2      	lsls	r2, r2, #3
 8000a6e:	21ff      	movs	r1, #255	; 0xff
 8000a70:	4091      	lsls	r1, r2
 8000a72:	000a      	movs	r2, r1
 8000a74:	43d2      	mvns	r2, r2
 8000a76:	401a      	ands	r2, r3
 8000a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	22ff      	movs	r2, #255	; 0xff
 8000a80:	401a      	ands	r2, r3
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0018      	movs	r0, r3
 8000a88:	2303      	movs	r3, #3
 8000a8a:	4003      	ands	r3, r0
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <__NVIC_SetPriority+0xd8>)
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	001c      	movs	r4, r3
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	3b08      	subs	r3, #8
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	3306      	adds	r3, #6
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	18c3      	adds	r3, r0, r3
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <SysTick_Config+0x40>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d901      	bls.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e010      	b.n	8000af4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <SysTick_Config+0x44>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	3a01      	subs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	2301      	movs	r3, #1
 8000adc:	425b      	negs	r3, r3
 8000ade:	2103      	movs	r1, #3
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ff7d 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SysTick_Config+0x44>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x44>)
 8000aee:	2207      	movs	r2, #7
 8000af0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b002      	add	sp, #8
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	00ffffff 	.word	0x00ffffff
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	210f      	movs	r1, #15
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ff5d 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	0002      	movs	r2, r0
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ff33 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ffaf 	bl	8000abc <SysTick_Config>
 8000b5e:	0003      	movs	r3, r0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e147      	b.n	8000e08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x28>
 8000b8e:	e138      	b.n	8000e02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d00b      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	2b11      	cmp	r3, #17
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b12      	cmp	r3, #18
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0xea>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2207      	movs	r2, #7
 8000c64:	4013      	ands	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	400b      	ands	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	055b      	lsls	r3, r3, #21
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x174>
 8000cda:	e092      	b.n	8000e02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000cdc:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3318      	adds	r3, #24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	589b      	ldr	r3, [r3, r2]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	2203      	movs	r2, #3
 8000cee:	4013      	ands	r3, r2
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x1ca>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a45      	ldr	r2, [pc, #276]	; (8000e24 <HAL_GPIO_Init+0x2bc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x1c6>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a44      	ldr	r2, [pc, #272]	; (8000e28 <HAL_GPIO_Init+0x2c0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x1c2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a43      	ldr	r2, [pc, #268]	; (8000e2c <HAL_GPIO_Init+0x2c4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x1be>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1cc>
 8000d32:	2300      	movs	r3, #0
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2103      	movs	r1, #3
 8000d38:	400a      	ands	r2, r1
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d44:	4936      	ldr	r1, [pc, #216]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d52:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	58d3      	ldr	r3, [r2, r3]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43da      	mvns	r2, r3
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	025b      	lsls	r3, r3, #9
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d78:	4929      	ldr	r1, [pc, #164]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000d82:	2384      	movs	r3, #132	; 0x84
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	029b      	lsls	r3, r3, #10
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000da6:	491e      	ldr	r1, [pc, #120]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000da8:	2284      	movs	r2, #132	; 0x84
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	035b      	lsls	r3, r3, #13
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	039b      	lsls	r3, r3, #14
 8000df0:	4013      	ands	r3, r2
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	40da      	lsrs	r2, r3
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	d000      	beq.n	8000e16 <HAL_GPIO_Init+0x2ae>
 8000e14:	e6b0      	b.n	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b006      	add	sp, #24
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40021800 	.word	0x40021800
 8000e24:	50000400 	.word	0x50000400
 8000e28:	50000800 	.word	0x50000800
 8000e2c:	50000c00 	.word	0x50000c00

08000e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	0008      	movs	r0, r1
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	1cbb      	adds	r3, r7, #2
 8000e3e:	1c02      	adds	r2, r0, #0
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	1c7b      	adds	r3, r7, #1
 8000e44:	1c0a      	adds	r2, r1, #0
 8000e46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e48:	1c7b      	adds	r3, r7, #1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e50:	1cbb      	adds	r3, r7, #2
 8000e52:	881a      	ldrh	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e58:	e003      	b.n	8000e62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e5a:	1cbb      	adds	r3, r7, #2
 8000e5c:	881a      	ldrh	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	1dba      	adds	r2, r7, #6
 8000e7e:	8812      	ldrh	r2, [r2, #0]
 8000e80:	4013      	ands	r3, r2
 8000e82:	d008      	beq.n	8000e96 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000e86:	1dba      	adds	r2, r7, #6
 8000e88:	8812      	ldrh	r2, [r2, #0]
 8000e8a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f815 	bl	8000ec0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	1dba      	adds	r2, r7, #6
 8000e9c:	8812      	ldrh	r2, [r2, #0]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d008      	beq.n	8000eb4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ea4:	1dba      	adds	r2, r7, #6
 8000ea6:	8812      	ldrh	r2, [r2, #0]
 8000ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 f810 	bl	8000ed4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021800 	.word	0x40021800

08000ec0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	0002      	movs	r2, r0
 8000edc:	1dbb      	adds	r3, r7, #6
 8000ede:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	0019      	movs	r1, r3
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d11f      	bne.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	0013      	movs	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	189b      	adds	r3, r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4912      	ldr	r1, [pc, #72]	; (8000f64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff f8f2 	bl	8000104 <__udivsi3>
 8000f20:	0003      	movs	r3, r0
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f26:	e008      	b.n	8000f3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e001      	b.n	8000f3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e009      	b.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	401a      	ands	r2, r3
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d0ed      	beq.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40007000 	.word	0x40007000
 8000f5c:	fffff9ff 	.word	0xfffff9ff
 8000f60:	20000000 	.word	0x20000000
 8000f64:	000f4240 	.word	0x000f4240

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e304      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	d100      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1e>
 8000f84:	e07c      	b.n	8001080 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f86:	4bc3      	ldr	r3, [pc, #780]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2238      	movs	r2, #56	; 0x38
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f90:	4bc0      	ldr	r3, [pc, #768]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	d102      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x3e>
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d002      	beq.n	8000fac <HAL_RCC_OscConfig+0x44>
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d10b      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	4bb9      	ldr	r3, [pc, #740]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	029b      	lsls	r3, r3, #10
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d062      	beq.n	800107e <HAL_RCC_OscConfig+0x116>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d15e      	bne.n	800107e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e2df      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	025b      	lsls	r3, r3, #9
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d107      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x78>
 8000fd0:	4bb0      	ldr	r3, [pc, #704]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4baf      	ldr	r3, [pc, #700]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0249      	lsls	r1, r1, #9
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e020      	b.n	8001022 <HAL_RCC_OscConfig+0xba>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	02db      	lsls	r3, r3, #11
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10e      	bne.n	800100a <HAL_RCC_OscConfig+0xa2>
 8000fec:	4ba9      	ldr	r3, [pc, #676]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4ba8      	ldr	r3, [pc, #672]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	02c9      	lsls	r1, r1, #11
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	4ba6      	ldr	r3, [pc, #664]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4ba5      	ldr	r3, [pc, #660]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0249      	lsls	r1, r1, #9
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e00b      	b.n	8001022 <HAL_RCC_OscConfig+0xba>
 800100a:	4ba2      	ldr	r3, [pc, #648]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4ba1      	ldr	r3, [pc, #644]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001010:	49a1      	ldr	r1, [pc, #644]	; (8001298 <HAL_RCC_OscConfig+0x330>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	4b9f      	ldr	r3, [pc, #636]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b9e      	ldr	r3, [pc, #632]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800101c:	499f      	ldr	r1, [pc, #636]	; (800129c <HAL_RCC_OscConfig+0x334>)
 800101e:	400a      	ands	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d014      	beq.n	8001054 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fc7d 	bl	8000928 <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fc78 	bl	8000928 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e29e      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001046:	4b93      	ldr	r3, [pc, #588]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	029b      	lsls	r3, r3, #10
 800104e:	4013      	ands	r3, r2
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xcc>
 8001052:	e015      	b.n	8001080 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001054:	f7ff fc68 	bl	8000928 <HAL_GetTick>
 8001058:	0003      	movs	r3, r0
 800105a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105e:	f7ff fc63 	bl	8000928 <HAL_GetTick>
 8001062:	0002      	movs	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e289      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001070:	4b88      	ldr	r3, [pc, #544]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0xf6>
 800107c:	e000      	b.n	8001080 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2202      	movs	r2, #2
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_RCC_OscConfig+0x124>
 800108a:	e099      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108c:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2238      	movs	r2, #56	; 0x38
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001096:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2203      	movs	r2, #3
 800109c:	4013      	ands	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d102      	bne.n	80010ac <HAL_RCC_OscConfig+0x144>
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d002      	beq.n	80010b2 <HAL_RCC_OscConfig+0x14a>
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d135      	bne.n	800111e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	d005      	beq.n	80010ca <HAL_RCC_OscConfig+0x162>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e25c      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b72      	ldr	r3, [pc, #456]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a74      	ldr	r2, [pc, #464]	; (80012a0 <HAL_RCC_OscConfig+0x338>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	021a      	lsls	r2, r3, #8
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	430a      	orrs	r2, r1
 80010de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010e6:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6e      	ldr	r2, [pc, #440]	; (80012a4 <HAL_RCC_OscConfig+0x33c>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	0019      	movs	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0adb      	lsrs	r3, r3, #11
 8001100:	2207      	movs	r2, #7
 8001102:	4013      	ands	r3, r2
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_RCC_OscConfig+0x340>)
 8001106:	40da      	lsrs	r2, r3
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_OscConfig+0x344>)
 800110a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x348>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fbad 	bl	8000870 <HAL_InitTick>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d051      	beq.n	80011be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e232      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d030      	beq.n	8001188 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a5e      	ldr	r2, [pc, #376]	; (80012a4 <HAL_RCC_OscConfig+0x33c>)
 800112c:	4013      	ands	r3, r2
 800112e:	0019      	movs	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0049      	lsls	r1, r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fbee 	bl	8000928 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fbe9 	bl	8000928 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e20f      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4013      	ands	r3, r2
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b48      	ldr	r3, [pc, #288]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_RCC_OscConfig+0x338>)
 8001176:	4013      	ands	r3, r2
 8001178:	0019      	movs	r1, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	021a      	lsls	r2, r3, #8
 8001180:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001182:	430a      	orrs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	e01b      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001188:	4b42      	ldr	r3, [pc, #264]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800118e:	4949      	ldr	r1, [pc, #292]	; (80012b4 <HAL_RCC_OscConfig+0x34c>)
 8001190:	400a      	ands	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fbc8 	bl	8000928 <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fbc3 	bl	8000928 <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1e9      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4013      	ands	r3, r2
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x236>
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4013      	ands	r3, r2
 80011c8:	d047      	beq.n	800125a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b18      	cmp	r3, #24
 80011d4:	d10a      	bne.n	80011ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	2202      	movs	r2, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d03c      	beq.n	800125a <HAL_RCC_OscConfig+0x2f2>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d138      	bne.n	800125a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e1cb      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d019      	beq.n	8001228 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	430a      	orrs	r2, r1
 80011fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fb92 	bl	8000928 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120a:	f7ff fb8d 	bl	8000928 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e1b3      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	2202      	movs	r2, #2
 8001222:	4013      	ands	r3, r2
 8001224:	d0f1      	beq.n	800120a <HAL_RCC_OscConfig+0x2a2>
 8001226:	e018      	b.n	800125a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800122a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800122e:	2101      	movs	r1, #1
 8001230:	438a      	bics	r2, r1
 8001232:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fb78 	bl	8000928 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fb73 	bl	8000928 <HAL_GetTick>
 8001242:	0002      	movs	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e199      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001254:	2202      	movs	r2, #2
 8001256:	4013      	ands	r3, r2
 8001258:	d1f1      	bne.n	800123e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x2fe>
 8001264:	e0c6      	b.n	80013f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001266:	231f      	movs	r3, #31
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2238      	movs	r2, #56	; 0x38
 8001274:	4013      	ands	r3, r2
 8001276:	2b20      	cmp	r3, #32
 8001278:	d11e      	bne.n	80012b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_RCC_OscConfig+0x32c>)
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2202      	movs	r2, #2
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x31e>
 8001284:	e0b6      	b.n	80013f4 <HAL_RCC_OscConfig+0x48c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d000      	beq.n	8001290 <HAL_RCC_OscConfig+0x328>
 800128e:	e0b1      	b.n	80013f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e177      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
 8001294:	40021000 	.word	0x40021000
 8001298:	fffeffff 	.word	0xfffeffff
 800129c:	fffbffff 	.word	0xfffbffff
 80012a0:	ffff80ff 	.word	0xffff80ff
 80012a4:	ffffc7ff 	.word	0xffffc7ff
 80012a8:	00f42400 	.word	0x00f42400
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004
 80012b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012b8:	4bb4      	ldr	r3, [pc, #720]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80012ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	055b      	lsls	r3, r3, #21
 80012c0:	4013      	ands	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x360>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <HAL_RCC_OscConfig+0x362>
 80012c8:	2300      	movs	r3, #0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4baf      	ldr	r3, [pc, #700]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80012d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012d2:	4bae      	ldr	r3, [pc, #696]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0549      	lsls	r1, r1, #21
 80012d8:	430a      	orrs	r2, r1
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
 80012dc:	4bab      	ldr	r3, [pc, #684]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80012de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	055b      	lsls	r3, r3, #21
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012ea:	231f      	movs	r3, #31
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f2:	4ba7      	ldr	r3, [pc, #668]	; (8001590 <HAL_RCC_OscConfig+0x628>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4013      	ands	r3, r2
 80012fc:	d11a      	bne.n	8001334 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012fe:	4ba4      	ldr	r3, [pc, #656]	; (8001590 <HAL_RCC_OscConfig+0x628>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4ba3      	ldr	r3, [pc, #652]	; (8001590 <HAL_RCC_OscConfig+0x628>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0049      	lsls	r1, r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800130c:	f7ff fb0c 	bl	8000928 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fb07 	bl	8000928 <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e12d      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001328:	4b99      	ldr	r3, [pc, #612]	; (8001590 <HAL_RCC_OscConfig+0x628>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4013      	ands	r3, r2
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x3e2>
 800133c:	4b93      	ldr	r3, [pc, #588]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800133e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001340:	4b92      	ldr	r3, [pc, #584]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	65da      	str	r2, [r3, #92]	; 0x5c
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x41c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x404>
 8001352:	4b8e      	ldr	r3, [pc, #568]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001356:	4b8d      	ldr	r3, [pc, #564]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001358:	2104      	movs	r1, #4
 800135a:	430a      	orrs	r2, r1
 800135c:	65da      	str	r2, [r3, #92]	; 0x5c
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001360:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001362:	4b8a      	ldr	r3, [pc, #552]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001364:	2101      	movs	r1, #1
 8001366:	430a      	orrs	r2, r1
 8001368:	65da      	str	r2, [r3, #92]	; 0x5c
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x41c>
 800136c:	4b87      	ldr	r3, [pc, #540]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800136e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001370:	4b86      	ldr	r3, [pc, #536]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001372:	2101      	movs	r1, #1
 8001374:	438a      	bics	r2, r1
 8001376:	65da      	str	r2, [r3, #92]	; 0x5c
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800137a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800137c:	4b83      	ldr	r3, [pc, #524]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800137e:	2104      	movs	r1, #4
 8001380:	438a      	bics	r2, r1
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d014      	beq.n	80013b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff facc 	bl	8000928 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001394:	e009      	b.n	80013aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fac7 	bl	8000928 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x62c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0ec      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x42e>
 80013b4:	e013      	b.n	80013de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fab7 	bl	8000928 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013be:	e009      	b.n	80013d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fab2 	bl	8000928 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a72      	ldr	r2, [pc, #456]	; (8001594 <HAL_RCC_OscConfig+0x62c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0d7      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d4:	4b6d      	ldr	r3, [pc, #436]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013de:	231f      	movs	r3, #31
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80013ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ec:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80013ee:	496a      	ldr	r1, [pc, #424]	; (8001598 <HAL_RCC_OscConfig+0x630>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d100      	bne.n	80013fe <HAL_RCC_OscConfig+0x496>
 80013fc:	e0c1      	b.n	8001582 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2238      	movs	r2, #56	; 0x38
 8001404:	4013      	ands	r3, r2
 8001406:	2b10      	cmp	r3, #16
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x4a4>
 800140a:	e081      	b.n	8001510 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d156      	bne.n	80014c2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b5d      	ldr	r3, [pc, #372]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800141a:	4960      	ldr	r1, [pc, #384]	; (800159c <HAL_RCC_OscConfig+0x634>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fa82 	bl	8000928 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fa7d 	bl	8000928 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0a3      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	049b      	lsls	r3, r3, #18
 8001444:	4013      	ands	r3, r2
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <HAL_RCC_OscConfig+0x638>)
 800144e:	4013      	ands	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1a      	ldr	r2, [r3, #32]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	431a      	orrs	r2, r3
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001478:	430a      	orrs	r2, r1
 800147a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	0449      	lsls	r1, r1, #17
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0549      	lsls	r1, r1, #21
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fa46 	bl	8000928 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fa41 	bl	8000928 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e067      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	049b      	lsls	r3, r3, #18
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x53a>
 80014c0:	e05f      	b.n	8001582 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014c8:	4934      	ldr	r1, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x634>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014d4:	2103      	movs	r1, #3
 80014d6:	438a      	bics	r2, r1
 80014d8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x624>)
 80014e0:	4930      	ldr	r1, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x63c>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fa1f 	bl	8000928 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fa1a 	bl	8000928 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e040      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_OscConfig+0x624>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	049b      	lsls	r3, r3, #18
 800150a:	4013      	ands	r3, r2
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x588>
 800150e:	e038      	b.n	8001582 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e033      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x624>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2203      	movs	r2, #3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d126      	bne.n	800157e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2270      	movs	r2, #112	; 0x70
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d11f      	bne.n	800157e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	23fe      	movs	r3, #254	; 0xfe
 8001542:	01db      	lsls	r3, r3, #7
 8001544:	401a      	ands	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d116      	bne.n	800157e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	23f8      	movs	r3, #248	; 0xf8
 8001554:	039b      	lsls	r3, r3, #14
 8001556:	401a      	ands	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d10e      	bne.n	800157e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	23e0      	movs	r3, #224	; 0xe0
 8001564:	051b      	lsls	r3, r3, #20
 8001566:	401a      	ands	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	0f5b      	lsrs	r3, r3, #29
 8001574:	075a      	lsls	r2, r3, #29
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b008      	add	sp, #32
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	40007000 	.word	0x40007000
 8001594:	00001388 	.word	0x00001388
 8001598:	efffffff 	.word	0xefffffff
 800159c:	feffffff 	.word	0xfeffffff
 80015a0:	11c1808c 	.word	0x11c1808c
 80015a4:	eefeffff 	.word	0xeefeffff

080015a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0e9      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2207      	movs	r2, #7
 80015c2:	4013      	ands	r3, r2
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d91e      	bls.n	8001608 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2207      	movs	r2, #7
 80015d0:	4393      	bics	r3, r2
 80015d2:	0019      	movs	r1, r3
 80015d4:	4b70      	ldr	r3, [pc, #448]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015dc:	f7ff f9a4 	bl	8000928 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015e4:	e009      	b.n	80015fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e6:	f7ff f99f 	bl	8000928 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_RCC_ClockConfig+0x1f4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0ca      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2207      	movs	r2, #7
 8001600:	4013      	ands	r3, r2
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d015      	beq.n	800163e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2204      	movs	r2, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d006      	beq.n	800162a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800161c:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001622:	21e0      	movs	r1, #224	; 0xe0
 8001624:	01c9      	lsls	r1, r1, #7
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <HAL_RCC_ClockConfig+0x1fc>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4013      	ands	r3, r2
 8001646:	d057      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d12b      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e097      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d107      	bne.n	8001678 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001668:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	049b      	lsls	r3, r3, #18
 8001670:	4013      	ands	r3, r2
 8001672:	d11f      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e08b      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4013      	ands	r3, r2
 800168a:	d113      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e07f      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800169a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169c:	2202      	movs	r2, #2
 800169e:	4013      	ands	r3, r2
 80016a0:	d108      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e074      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e06d      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2207      	movs	r2, #7
 80016ba:	4393      	bics	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c8:	f7ff f92e 	bl	8000928 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7ff f929 	bl	8000928 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_RCC_ClockConfig+0x1f4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e054      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2238      	movs	r2, #56	; 0x38
 80016ec:	401a      	ands	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1ec      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2207      	movs	r2, #7
 80016fe:	4013      	ands	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d21e      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2207      	movs	r2, #7
 800170c:	4393      	bics	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001718:	f7ff f906 	bl	8000928 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f901 	bl	8000928 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_RCC_ClockConfig+0x1f4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e02c      	b.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2207      	movs	r2, #7
 800173c:	4013      	ands	r3, r2
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2204      	movs	r2, #4
 800174a:	4013      	ands	r3, r2
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_RCC_ClockConfig+0x200>)
 8001754:	4013      	ands	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001762:	f000 f829 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001766:	0001      	movs	r1, r0
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_RCC_ClockConfig+0x1f8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	220f      	movs	r2, #15
 8001770:	401a      	ands	r2, r3
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x204>)
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	58d3      	ldr	r3, [r2, r3]
 8001778:	221f      	movs	r2, #31
 800177a:	4013      	ands	r3, r2
 800177c:	000a      	movs	r2, r1
 800177e:	40da      	lsrs	r2, r3
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_ClockConfig+0x208>)
 8001782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_ClockConfig+0x20c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0018      	movs	r0, r3
 800178a:	f7ff f871 	bl	8000870 <HAL_InitTick>
 800178e:	0003      	movs	r3, r0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40022000 	.word	0x40022000
 800179c:	00001388 	.word	0x00001388
 80017a0:	40021000 	.word	0x40021000
 80017a4:	fffff0ff 	.word	0xfffff0ff
 80017a8:	ffff8fff 	.word	0xffff8fff
 80017ac:	08002178 	.word	0x08002178
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000004 	.word	0x20000004

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2238      	movs	r2, #56	; 0x38
 80017c4:	4013      	ands	r3, r2
 80017c6:	d10f      	bne.n	80017e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017c8:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0adb      	lsrs	r3, r3, #11
 80017ce:	2207      	movs	r2, #7
 80017d0:	4013      	ands	r3, r2
 80017d2:	2201      	movs	r2, #1
 80017d4:	409a      	lsls	r2, r3
 80017d6:	0013      	movs	r3, r2
 80017d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	4835      	ldr	r0, [pc, #212]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017de:	f7fe fc91 	bl	8000104 <__udivsi3>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e05d      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2238      	movs	r2, #56	; 0x38
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	e054      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2238      	movs	r2, #56	; 0x38
 8001800:	4013      	ands	r3, r2
 8001802:	2b10      	cmp	r3, #16
 8001804:	d138      	bne.n	8001878 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2203      	movs	r2, #3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	2207      	movs	r2, #7
 8001818:	4013      	ands	r3, r2
 800181a:	3301      	adds	r3, #1
 800181c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	4824      	ldr	r0, [pc, #144]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001828:	f7fe fc6c 	bl	8000104 <__udivsi3>
 800182c:	0003      	movs	r3, r0
 800182e:	0019      	movs	r1, r3
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	227f      	movs	r2, #127	; 0x7f
 8001838:	4013      	ands	r3, r2
 800183a:	434b      	muls	r3, r1
 800183c:	617b      	str	r3, [r7, #20]
        break;
 800183e:	e00d      	b.n	800185c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	481c      	ldr	r0, [pc, #112]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001844:	f7fe fc5e 	bl	8000104 <__udivsi3>
 8001848:	0003      	movs	r3, r0
 800184a:	0019      	movs	r1, r3
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	227f      	movs	r2, #127	; 0x7f
 8001854:	4013      	ands	r3, r2
 8001856:	434b      	muls	r3, r1
 8001858:	617b      	str	r3, [r7, #20]
        break;
 800185a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0f5b      	lsrs	r3, r3, #29
 8001862:	2207      	movs	r2, #7
 8001864:	4013      	ands	r3, r2
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	6978      	ldr	r0, [r7, #20]
 800186e:	f7fe fc49 	bl	8000104 <__udivsi3>
 8001872:	0003      	movs	r3, r0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	e015      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2238      	movs	r2, #56	; 0x38
 800187e:	4013      	ands	r3, r2
 8001880:	2b20      	cmp	r3, #32
 8001882:	d103      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2238      	movs	r2, #56	; 0x38
 8001892:	4013      	ands	r3, r2
 8001894:	2b18      	cmp	r3, #24
 8001896:	d103      	bne.n	80018a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001898:	23fa      	movs	r3, #250	; 0xfa
 800189a:	01db      	lsls	r3, r3, #7
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e001      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018a4:	693b      	ldr	r3, [r7, #16]
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b006      	add	sp, #24
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021000 	.word	0x40021000
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200

080018bc <__errno>:
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <__errno+0x8>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	4770      	bx	lr
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	2000000c 	.word	0x2000000c

080018c8 <__libc_init_array>:
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	2600      	movs	r6, #0
 80018cc:	4d0c      	ldr	r5, [pc, #48]	; (8001900 <__libc_init_array+0x38>)
 80018ce:	4c0d      	ldr	r4, [pc, #52]	; (8001904 <__libc_init_array+0x3c>)
 80018d0:	1b64      	subs	r4, r4, r5
 80018d2:	10a4      	asrs	r4, r4, #2
 80018d4:	42a6      	cmp	r6, r4
 80018d6:	d109      	bne.n	80018ec <__libc_init_array+0x24>
 80018d8:	2600      	movs	r6, #0
 80018da:	f000 fc3b 	bl	8002154 <_init>
 80018de:	4d0a      	ldr	r5, [pc, #40]	; (8001908 <__libc_init_array+0x40>)
 80018e0:	4c0a      	ldr	r4, [pc, #40]	; (800190c <__libc_init_array+0x44>)
 80018e2:	1b64      	subs	r4, r4, r5
 80018e4:	10a4      	asrs	r4, r4, #2
 80018e6:	42a6      	cmp	r6, r4
 80018e8:	d105      	bne.n	80018f6 <__libc_init_array+0x2e>
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	00b3      	lsls	r3, r6, #2
 80018ee:	58eb      	ldr	r3, [r5, r3]
 80018f0:	4798      	blx	r3
 80018f2:	3601      	adds	r6, #1
 80018f4:	e7ee      	b.n	80018d4 <__libc_init_array+0xc>
 80018f6:	00b3      	lsls	r3, r6, #2
 80018f8:	58eb      	ldr	r3, [r5, r3]
 80018fa:	4798      	blx	r3
 80018fc:	3601      	adds	r6, #1
 80018fe:	e7f2      	b.n	80018e6 <__libc_init_array+0x1e>
 8001900:	080021ec 	.word	0x080021ec
 8001904:	080021ec 	.word	0x080021ec
 8001908:	080021ec 	.word	0x080021ec
 800190c:	080021f0 	.word	0x080021f0

08001910 <memset>:
 8001910:	0003      	movs	r3, r0
 8001912:	1812      	adds	r2, r2, r0
 8001914:	4293      	cmp	r3, r2
 8001916:	d100      	bne.n	800191a <memset+0xa>
 8001918:	4770      	bx	lr
 800191a:	7019      	strb	r1, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	e7f9      	b.n	8001914 <memset+0x4>

08001920 <sniprintf>:
 8001920:	b40c      	push	{r2, r3}
 8001922:	b530      	push	{r4, r5, lr}
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <sniprintf+0x60>)
 8001926:	b09d      	sub	sp, #116	; 0x74
 8001928:	1e0c      	subs	r4, r1, #0
 800192a:	681d      	ldr	r5, [r3, #0]
 800192c:	da08      	bge.n	8001940 <sniprintf+0x20>
 800192e:	238b      	movs	r3, #139	; 0x8b
 8001930:	2001      	movs	r0, #1
 8001932:	602b      	str	r3, [r5, #0]
 8001934:	4240      	negs	r0, r0
 8001936:	b01d      	add	sp, #116	; 0x74
 8001938:	bc30      	pop	{r4, r5}
 800193a:	bc08      	pop	{r3}
 800193c:	b002      	add	sp, #8
 800193e:	4718      	bx	r3
 8001940:	2382      	movs	r3, #130	; 0x82
 8001942:	a902      	add	r1, sp, #8
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	818b      	strh	r3, [r1, #12]
 8001948:	2300      	movs	r3, #0
 800194a:	9002      	str	r0, [sp, #8]
 800194c:	6108      	str	r0, [r1, #16]
 800194e:	429c      	cmp	r4, r3
 8001950:	d000      	beq.n	8001954 <sniprintf+0x34>
 8001952:	1e63      	subs	r3, r4, #1
 8001954:	608b      	str	r3, [r1, #8]
 8001956:	614b      	str	r3, [r1, #20]
 8001958:	2301      	movs	r3, #1
 800195a:	425b      	negs	r3, r3
 800195c:	81cb      	strh	r3, [r1, #14]
 800195e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001960:	ab21      	add	r3, sp, #132	; 0x84
 8001962:	0028      	movs	r0, r5
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f000 f86f 	bl	8001a48 <_svfiprintf_r>
 800196a:	1c43      	adds	r3, r0, #1
 800196c:	da01      	bge.n	8001972 <sniprintf+0x52>
 800196e:	238b      	movs	r3, #139	; 0x8b
 8001970:	602b      	str	r3, [r5, #0]
 8001972:	2c00      	cmp	r4, #0
 8001974:	d0df      	beq.n	8001936 <sniprintf+0x16>
 8001976:	2300      	movs	r3, #0
 8001978:	9a02      	ldr	r2, [sp, #8]
 800197a:	7013      	strb	r3, [r2, #0]
 800197c:	e7db      	b.n	8001936 <sniprintf+0x16>
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	2000000c 	.word	0x2000000c

08001984 <__ssputs_r>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	688e      	ldr	r6, [r1, #8]
 8001988:	b085      	sub	sp, #20
 800198a:	0007      	movs	r7, r0
 800198c:	000c      	movs	r4, r1
 800198e:	9203      	str	r2, [sp, #12]
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	429e      	cmp	r6, r3
 8001994:	d83c      	bhi.n	8001a10 <__ssputs_r+0x8c>
 8001996:	2390      	movs	r3, #144	; 0x90
 8001998:	898a      	ldrh	r2, [r1, #12]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	421a      	tst	r2, r3
 800199e:	d034      	beq.n	8001a0a <__ssputs_r+0x86>
 80019a0:	2503      	movs	r5, #3
 80019a2:	6909      	ldr	r1, [r1, #16]
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	1a5b      	subs	r3, r3, r1
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	6963      	ldr	r3, [r4, #20]
 80019ac:	9802      	ldr	r0, [sp, #8]
 80019ae:	435d      	muls	r5, r3
 80019b0:	0feb      	lsrs	r3, r5, #31
 80019b2:	195d      	adds	r5, r3, r5
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	106d      	asrs	r5, r5, #1
 80019b8:	3301      	adds	r3, #1
 80019ba:	181b      	adds	r3, r3, r0
 80019bc:	42ab      	cmp	r3, r5
 80019be:	d900      	bls.n	80019c2 <__ssputs_r+0x3e>
 80019c0:	001d      	movs	r5, r3
 80019c2:	0553      	lsls	r3, r2, #21
 80019c4:	d532      	bpl.n	8001a2c <__ssputs_r+0xa8>
 80019c6:	0029      	movs	r1, r5
 80019c8:	0038      	movs	r0, r7
 80019ca:	f000 fb23 	bl	8002014 <_malloc_r>
 80019ce:	1e06      	subs	r6, r0, #0
 80019d0:	d109      	bne.n	80019e6 <__ssputs_r+0x62>
 80019d2:	230c      	movs	r3, #12
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	2340      	movs	r3, #64	; 0x40
 80019d8:	2001      	movs	r0, #1
 80019da:	89a2      	ldrh	r2, [r4, #12]
 80019dc:	4240      	negs	r0, r0
 80019de:	4313      	orrs	r3, r2
 80019e0:	81a3      	strh	r3, [r4, #12]
 80019e2:	b005      	add	sp, #20
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e6:	9a02      	ldr	r2, [sp, #8]
 80019e8:	6921      	ldr	r1, [r4, #16]
 80019ea:	f000 faac 	bl	8001f46 <memcpy>
 80019ee:	89a3      	ldrh	r3, [r4, #12]
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <__ssputs_r+0xc0>)
 80019f2:	401a      	ands	r2, r3
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	4313      	orrs	r3, r2
 80019f8:	81a3      	strh	r3, [r4, #12]
 80019fa:	9b02      	ldr	r3, [sp, #8]
 80019fc:	6126      	str	r6, [r4, #16]
 80019fe:	18f6      	adds	r6, r6, r3
 8001a00:	6026      	str	r6, [r4, #0]
 8001a02:	6165      	str	r5, [r4, #20]
 8001a04:	9e01      	ldr	r6, [sp, #4]
 8001a06:	1aed      	subs	r5, r5, r3
 8001a08:	60a5      	str	r5, [r4, #8]
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	429e      	cmp	r6, r3
 8001a0e:	d900      	bls.n	8001a12 <__ssputs_r+0x8e>
 8001a10:	9e01      	ldr	r6, [sp, #4]
 8001a12:	0032      	movs	r2, r6
 8001a14:	9903      	ldr	r1, [sp, #12]
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	f000 fa9e 	bl	8001f58 <memmove>
 8001a1c:	68a3      	ldr	r3, [r4, #8]
 8001a1e:	2000      	movs	r0, #0
 8001a20:	1b9b      	subs	r3, r3, r6
 8001a22:	60a3      	str	r3, [r4, #8]
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	199e      	adds	r6, r3, r6
 8001a28:	6026      	str	r6, [r4, #0]
 8001a2a:	e7da      	b.n	80019e2 <__ssputs_r+0x5e>
 8001a2c:	002a      	movs	r2, r5
 8001a2e:	0038      	movs	r0, r7
 8001a30:	f000 fb4e 	bl	80020d0 <_realloc_r>
 8001a34:	1e06      	subs	r6, r0, #0
 8001a36:	d1e0      	bne.n	80019fa <__ssputs_r+0x76>
 8001a38:	6921      	ldr	r1, [r4, #16]
 8001a3a:	0038      	movs	r0, r7
 8001a3c:	f000 faa0 	bl	8001f80 <_free_r>
 8001a40:	e7c7      	b.n	80019d2 <__ssputs_r+0x4e>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	fffffb7f 	.word	0xfffffb7f

08001a48 <_svfiprintf_r>:
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b0a1      	sub	sp, #132	; 0x84
 8001a4c:	9003      	str	r0, [sp, #12]
 8001a4e:	001d      	movs	r5, r3
 8001a50:	898b      	ldrh	r3, [r1, #12]
 8001a52:	000f      	movs	r7, r1
 8001a54:	0016      	movs	r6, r2
 8001a56:	061b      	lsls	r3, r3, #24
 8001a58:	d511      	bpl.n	8001a7e <_svfiprintf_r+0x36>
 8001a5a:	690b      	ldr	r3, [r1, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10e      	bne.n	8001a7e <_svfiprintf_r+0x36>
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	f000 fad7 	bl	8002014 <_malloc_r>
 8001a66:	6038      	str	r0, [r7, #0]
 8001a68:	6138      	str	r0, [r7, #16]
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d105      	bne.n	8001a7a <_svfiprintf_r+0x32>
 8001a6e:	230c      	movs	r3, #12
 8001a70:	9a03      	ldr	r2, [sp, #12]
 8001a72:	3801      	subs	r0, #1
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	b021      	add	sp, #132	; 0x84
 8001a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7a:	2340      	movs	r3, #64	; 0x40
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	ac08      	add	r4, sp, #32
 8001a82:	6163      	str	r3, [r4, #20]
 8001a84:	3320      	adds	r3, #32
 8001a86:	7663      	strb	r3, [r4, #25]
 8001a88:	3310      	adds	r3, #16
 8001a8a:	76a3      	strb	r3, [r4, #26]
 8001a8c:	9507      	str	r5, [sp, #28]
 8001a8e:	0035      	movs	r5, r6
 8001a90:	782b      	ldrb	r3, [r5, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_svfiprintf_r+0x52>
 8001a96:	2b25      	cmp	r3, #37	; 0x25
 8001a98:	d146      	bne.n	8001b28 <_svfiprintf_r+0xe0>
 8001a9a:	1bab      	subs	r3, r5, r6
 8001a9c:	9305      	str	r3, [sp, #20]
 8001a9e:	d00c      	beq.n	8001aba <_svfiprintf_r+0x72>
 8001aa0:	0032      	movs	r2, r6
 8001aa2:	0039      	movs	r1, r7
 8001aa4:	9803      	ldr	r0, [sp, #12]
 8001aa6:	f7ff ff6d 	bl	8001984 <__ssputs_r>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d100      	bne.n	8001ab0 <_svfiprintf_r+0x68>
 8001aae:	e0ae      	b.n	8001c0e <_svfiprintf_r+0x1c6>
 8001ab0:	6962      	ldr	r2, [r4, #20]
 8001ab2:	9b05      	ldr	r3, [sp, #20]
 8001ab4:	4694      	mov	ip, r2
 8001ab6:	4463      	add	r3, ip
 8001ab8:	6163      	str	r3, [r4, #20]
 8001aba:	782b      	ldrb	r3, [r5, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d100      	bne.n	8001ac2 <_svfiprintf_r+0x7a>
 8001ac0:	e0a5      	b.n	8001c0e <_svfiprintf_r+0x1c6>
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4252      	negs	r2, r2
 8001ac8:	6062      	str	r2, [r4, #4]
 8001aca:	a904      	add	r1, sp, #16
 8001acc:	3254      	adds	r2, #84	; 0x54
 8001ace:	1852      	adds	r2, r2, r1
 8001ad0:	1c6e      	adds	r6, r5, #1
 8001ad2:	6023      	str	r3, [r4, #0]
 8001ad4:	60e3      	str	r3, [r4, #12]
 8001ad6:	60a3      	str	r3, [r4, #8]
 8001ad8:	7013      	strb	r3, [r2, #0]
 8001ada:	65a3      	str	r3, [r4, #88]	; 0x58
 8001adc:	7831      	ldrb	r1, [r6, #0]
 8001ade:	2205      	movs	r2, #5
 8001ae0:	4853      	ldr	r0, [pc, #332]	; (8001c30 <_svfiprintf_r+0x1e8>)
 8001ae2:	f000 fa25 	bl	8001f30 <memchr>
 8001ae6:	1c75      	adds	r5, r6, #1
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d11f      	bne.n	8001b2c <_svfiprintf_r+0xe4>
 8001aec:	6822      	ldr	r2, [r4, #0]
 8001aee:	06d3      	lsls	r3, r2, #27
 8001af0:	d504      	bpl.n	8001afc <_svfiprintf_r+0xb4>
 8001af2:	2353      	movs	r3, #83	; 0x53
 8001af4:	a904      	add	r1, sp, #16
 8001af6:	185b      	adds	r3, r3, r1
 8001af8:	2120      	movs	r1, #32
 8001afa:	7019      	strb	r1, [r3, #0]
 8001afc:	0713      	lsls	r3, r2, #28
 8001afe:	d504      	bpl.n	8001b0a <_svfiprintf_r+0xc2>
 8001b00:	2353      	movs	r3, #83	; 0x53
 8001b02:	a904      	add	r1, sp, #16
 8001b04:	185b      	adds	r3, r3, r1
 8001b06:	212b      	movs	r1, #43	; 0x2b
 8001b08:	7019      	strb	r1, [r3, #0]
 8001b0a:	7833      	ldrb	r3, [r6, #0]
 8001b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001b0e:	d016      	beq.n	8001b3e <_svfiprintf_r+0xf6>
 8001b10:	0035      	movs	r5, r6
 8001b12:	2100      	movs	r1, #0
 8001b14:	200a      	movs	r0, #10
 8001b16:	68e3      	ldr	r3, [r4, #12]
 8001b18:	782a      	ldrb	r2, [r5, #0]
 8001b1a:	1c6e      	adds	r6, r5, #1
 8001b1c:	3a30      	subs	r2, #48	; 0x30
 8001b1e:	2a09      	cmp	r2, #9
 8001b20:	d94e      	bls.n	8001bc0 <_svfiprintf_r+0x178>
 8001b22:	2900      	cmp	r1, #0
 8001b24:	d018      	beq.n	8001b58 <_svfiprintf_r+0x110>
 8001b26:	e010      	b.n	8001b4a <_svfiprintf_r+0x102>
 8001b28:	3501      	adds	r5, #1
 8001b2a:	e7b1      	b.n	8001a90 <_svfiprintf_r+0x48>
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <_svfiprintf_r+0x1e8>)
 8001b2e:	6822      	ldr	r2, [r4, #0]
 8001b30:	1ac0      	subs	r0, r0, r3
 8001b32:	2301      	movs	r3, #1
 8001b34:	4083      	lsls	r3, r0
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	002e      	movs	r6, r5
 8001b3c:	e7ce      	b.n	8001adc <_svfiprintf_r+0x94>
 8001b3e:	9b07      	ldr	r3, [sp, #28]
 8001b40:	1d19      	adds	r1, r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	9107      	str	r1, [sp, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db01      	blt.n	8001b4e <_svfiprintf_r+0x106>
 8001b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b4c:	e004      	b.n	8001b58 <_svfiprintf_r+0x110>
 8001b4e:	425b      	negs	r3, r3
 8001b50:	60e3      	str	r3, [r4, #12]
 8001b52:	2302      	movs	r3, #2
 8001b54:	4313      	orrs	r3, r2
 8001b56:	6023      	str	r3, [r4, #0]
 8001b58:	782b      	ldrb	r3, [r5, #0]
 8001b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b5c:	d10a      	bne.n	8001b74 <_svfiprintf_r+0x12c>
 8001b5e:	786b      	ldrb	r3, [r5, #1]
 8001b60:	2b2a      	cmp	r3, #42	; 0x2a
 8001b62:	d135      	bne.n	8001bd0 <_svfiprintf_r+0x188>
 8001b64:	9b07      	ldr	r3, [sp, #28]
 8001b66:	3502      	adds	r5, #2
 8001b68:	1d1a      	adds	r2, r3, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	9207      	str	r2, [sp, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db2b      	blt.n	8001bca <_svfiprintf_r+0x182>
 8001b72:	9309      	str	r3, [sp, #36]	; 0x24
 8001b74:	4e2f      	ldr	r6, [pc, #188]	; (8001c34 <_svfiprintf_r+0x1ec>)
 8001b76:	7829      	ldrb	r1, [r5, #0]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	0030      	movs	r0, r6
 8001b7c:	f000 f9d8 	bl	8001f30 <memchr>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d006      	beq.n	8001b92 <_svfiprintf_r+0x14a>
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	1b80      	subs	r0, r0, r6
 8001b88:	4083      	lsls	r3, r0
 8001b8a:	6822      	ldr	r2, [r4, #0]
 8001b8c:	3501      	adds	r5, #1
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	6023      	str	r3, [r4, #0]
 8001b92:	7829      	ldrb	r1, [r5, #0]
 8001b94:	2206      	movs	r2, #6
 8001b96:	4828      	ldr	r0, [pc, #160]	; (8001c38 <_svfiprintf_r+0x1f0>)
 8001b98:	1c6e      	adds	r6, r5, #1
 8001b9a:	7621      	strb	r1, [r4, #24]
 8001b9c:	f000 f9c8 	bl	8001f30 <memchr>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d03c      	beq.n	8001c1e <_svfiprintf_r+0x1d6>
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <_svfiprintf_r+0x1f4>)
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d125      	bne.n	8001bf6 <_svfiprintf_r+0x1ae>
 8001baa:	2207      	movs	r2, #7
 8001bac:	9b07      	ldr	r3, [sp, #28]
 8001bae:	3307      	adds	r3, #7
 8001bb0:	4393      	bics	r3, r2
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	9307      	str	r3, [sp, #28]
 8001bb6:	6963      	ldr	r3, [r4, #20]
 8001bb8:	9a04      	ldr	r2, [sp, #16]
 8001bba:	189b      	adds	r3, r3, r2
 8001bbc:	6163      	str	r3, [r4, #20]
 8001bbe:	e766      	b.n	8001a8e <_svfiprintf_r+0x46>
 8001bc0:	4343      	muls	r3, r0
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	189b      	adds	r3, r3, r2
 8001bc6:	0035      	movs	r5, r6
 8001bc8:	e7a6      	b.n	8001b18 <_svfiprintf_r+0xd0>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	425b      	negs	r3, r3
 8001bce:	e7d0      	b.n	8001b72 <_svfiprintf_r+0x12a>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	3501      	adds	r5, #1
 8001bd8:	6063      	str	r3, [r4, #4]
 8001bda:	7829      	ldrb	r1, [r5, #0]
 8001bdc:	1c6e      	adds	r6, r5, #1
 8001bde:	3930      	subs	r1, #48	; 0x30
 8001be0:	2909      	cmp	r1, #9
 8001be2:	d903      	bls.n	8001bec <_svfiprintf_r+0x1a4>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0c5      	beq.n	8001b74 <_svfiprintf_r+0x12c>
 8001be8:	9209      	str	r2, [sp, #36]	; 0x24
 8001bea:	e7c3      	b.n	8001b74 <_svfiprintf_r+0x12c>
 8001bec:	4342      	muls	r2, r0
 8001bee:	2301      	movs	r3, #1
 8001bf0:	1852      	adds	r2, r2, r1
 8001bf2:	0035      	movs	r5, r6
 8001bf4:	e7f1      	b.n	8001bda <_svfiprintf_r+0x192>
 8001bf6:	ab07      	add	r3, sp, #28
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	003a      	movs	r2, r7
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_svfiprintf_r+0x1f8>)
 8001bfe:	0021      	movs	r1, r4
 8001c00:	9803      	ldr	r0, [sp, #12]
 8001c02:	e000      	b.n	8001c06 <_svfiprintf_r+0x1be>
 8001c04:	bf00      	nop
 8001c06:	9004      	str	r0, [sp, #16]
 8001c08:	9b04      	ldr	r3, [sp, #16]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	d1d3      	bne.n	8001bb6 <_svfiprintf_r+0x16e>
 8001c0e:	89bb      	ldrh	r3, [r7, #12]
 8001c10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001c12:	065b      	lsls	r3, r3, #25
 8001c14:	d400      	bmi.n	8001c18 <_svfiprintf_r+0x1d0>
 8001c16:	e72e      	b.n	8001a76 <_svfiprintf_r+0x2e>
 8001c18:	2001      	movs	r0, #1
 8001c1a:	4240      	negs	r0, r0
 8001c1c:	e72b      	b.n	8001a76 <_svfiprintf_r+0x2e>
 8001c1e:	ab07      	add	r3, sp, #28
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	003a      	movs	r2, r7
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <_svfiprintf_r+0x1f8>)
 8001c26:	0021      	movs	r1, r4
 8001c28:	9803      	ldr	r0, [sp, #12]
 8001c2a:	f000 f879 	bl	8001d20 <_printf_i>
 8001c2e:	e7ea      	b.n	8001c06 <_svfiprintf_r+0x1be>
 8001c30:	080021b8 	.word	0x080021b8
 8001c34:	080021be 	.word	0x080021be
 8001c38:	080021c2 	.word	0x080021c2
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	08001985 	.word	0x08001985

08001c44 <_printf_common>:
 8001c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c46:	0015      	movs	r5, r2
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	688a      	ldr	r2, [r1, #8]
 8001c4c:	690b      	ldr	r3, [r1, #16]
 8001c4e:	9000      	str	r0, [sp, #0]
 8001c50:	000c      	movs	r4, r1
 8001c52:	4293      	cmp	r3, r2
 8001c54:	da00      	bge.n	8001c58 <_printf_common+0x14>
 8001c56:	0013      	movs	r3, r2
 8001c58:	0022      	movs	r2, r4
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	3243      	adds	r2, #67	; 0x43
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d001      	beq.n	8001c68 <_printf_common+0x24>
 8001c64:	3301      	adds	r3, #1
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	069b      	lsls	r3, r3, #26
 8001c6c:	d502      	bpl.n	8001c74 <_printf_common+0x30>
 8001c6e:	682b      	ldr	r3, [r5, #0]
 8001c70:	3302      	adds	r3, #2
 8001c72:	602b      	str	r3, [r5, #0]
 8001c74:	2706      	movs	r7, #6
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	401f      	ands	r7, r3
 8001c7a:	d027      	beq.n	8001ccc <_printf_common+0x88>
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	3343      	adds	r3, #67	; 0x43
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	4193      	sbcs	r3, r2
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	0692      	lsls	r2, r2, #26
 8001c8a:	d430      	bmi.n	8001cee <_printf_common+0xaa>
 8001c8c:	0022      	movs	r2, r4
 8001c8e:	9901      	ldr	r1, [sp, #4]
 8001c90:	3243      	adds	r2, #67	; 0x43
 8001c92:	9800      	ldr	r0, [sp, #0]
 8001c94:	9e08      	ldr	r6, [sp, #32]
 8001c96:	47b0      	blx	r6
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	d025      	beq.n	8001ce8 <_printf_common+0xa4>
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	682a      	ldr	r2, [r5, #0]
 8001ca2:	68e1      	ldr	r1, [r4, #12]
 8001ca4:	4003      	ands	r3, r0
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d103      	bne.n	8001cb4 <_printf_common+0x70>
 8001cac:	1a8d      	subs	r5, r1, r2
 8001cae:	43eb      	mvns	r3, r5
 8001cb0:	17db      	asrs	r3, r3, #31
 8001cb2:	401d      	ands	r5, r3
 8001cb4:	68a3      	ldr	r3, [r4, #8]
 8001cb6:	6922      	ldr	r2, [r4, #16]
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	dd01      	ble.n	8001cc0 <_printf_common+0x7c>
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	18ed      	adds	r5, r5, r3
 8001cc0:	2700      	movs	r7, #0
 8001cc2:	42bd      	cmp	r5, r7
 8001cc4:	d120      	bne.n	8001d08 <_printf_common+0xc4>
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	e010      	b.n	8001cec <_printf_common+0xa8>
 8001cca:	3701      	adds	r7, #1
 8001ccc:	68e3      	ldr	r3, [r4, #12]
 8001cce:	682a      	ldr	r2, [r5, #0]
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	42bb      	cmp	r3, r7
 8001cd4:	ddd2      	ble.n	8001c7c <_printf_common+0x38>
 8001cd6:	0022      	movs	r2, r4
 8001cd8:	2301      	movs	r3, #1
 8001cda:	3219      	adds	r2, #25
 8001cdc:	9901      	ldr	r1, [sp, #4]
 8001cde:	9800      	ldr	r0, [sp, #0]
 8001ce0:	9e08      	ldr	r6, [sp, #32]
 8001ce2:	47b0      	blx	r6
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d1f0      	bne.n	8001cca <_printf_common+0x86>
 8001ce8:	2001      	movs	r0, #1
 8001cea:	4240      	negs	r0, r0
 8001cec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001cee:	2030      	movs	r0, #48	; 0x30
 8001cf0:	18e1      	adds	r1, r4, r3
 8001cf2:	3143      	adds	r1, #67	; 0x43
 8001cf4:	7008      	strb	r0, [r1, #0]
 8001cf6:	0021      	movs	r1, r4
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	3145      	adds	r1, #69	; 0x45
 8001cfc:	7809      	ldrb	r1, [r1, #0]
 8001cfe:	18a2      	adds	r2, r4, r2
 8001d00:	3243      	adds	r2, #67	; 0x43
 8001d02:	3302      	adds	r3, #2
 8001d04:	7011      	strb	r1, [r2, #0]
 8001d06:	e7c1      	b.n	8001c8c <_printf_common+0x48>
 8001d08:	0022      	movs	r2, r4
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	321a      	adds	r2, #26
 8001d0e:	9901      	ldr	r1, [sp, #4]
 8001d10:	9800      	ldr	r0, [sp, #0]
 8001d12:	9e08      	ldr	r6, [sp, #32]
 8001d14:	47b0      	blx	r6
 8001d16:	1c43      	adds	r3, r0, #1
 8001d18:	d0e6      	beq.n	8001ce8 <_printf_common+0xa4>
 8001d1a:	3701      	adds	r7, #1
 8001d1c:	e7d1      	b.n	8001cc2 <_printf_common+0x7e>
	...

08001d20 <_printf_i>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	9204      	str	r2, [sp, #16]
 8001d26:	000a      	movs	r2, r1
 8001d28:	3243      	adds	r2, #67	; 0x43
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	9003      	str	r0, [sp, #12]
 8001d2e:	9202      	str	r2, [sp, #8]
 8001d30:	7e0a      	ldrb	r2, [r1, #24]
 8001d32:	000c      	movs	r4, r1
 8001d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d36:	2a6e      	cmp	r2, #110	; 0x6e
 8001d38:	d100      	bne.n	8001d3c <_printf_i+0x1c>
 8001d3a:	e086      	b.n	8001e4a <_printf_i+0x12a>
 8001d3c:	d81f      	bhi.n	8001d7e <_printf_i+0x5e>
 8001d3e:	2a63      	cmp	r2, #99	; 0x63
 8001d40:	d033      	beq.n	8001daa <_printf_i+0x8a>
 8001d42:	d808      	bhi.n	8001d56 <_printf_i+0x36>
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d100      	bne.n	8001d4a <_printf_i+0x2a>
 8001d48:	e08c      	b.n	8001e64 <_printf_i+0x144>
 8001d4a:	2a58      	cmp	r2, #88	; 0x58
 8001d4c:	d04d      	beq.n	8001dea <_printf_i+0xca>
 8001d4e:	0025      	movs	r5, r4
 8001d50:	3542      	adds	r5, #66	; 0x42
 8001d52:	702a      	strb	r2, [r5, #0]
 8001d54:	e030      	b.n	8001db8 <_printf_i+0x98>
 8001d56:	2a64      	cmp	r2, #100	; 0x64
 8001d58:	d001      	beq.n	8001d5e <_printf_i+0x3e>
 8001d5a:	2a69      	cmp	r2, #105	; 0x69
 8001d5c:	d1f7      	bne.n	8001d4e <_printf_i+0x2e>
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	6825      	ldr	r5, [r4, #0]
 8001d62:	1d0a      	adds	r2, r1, #4
 8001d64:	0628      	lsls	r0, r5, #24
 8001d66:	d529      	bpl.n	8001dbc <_printf_i+0x9c>
 8001d68:	6808      	ldr	r0, [r1, #0]
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	da03      	bge.n	8001d78 <_printf_i+0x58>
 8001d70:	232d      	movs	r3, #45	; 0x2d
 8001d72:	9a02      	ldr	r2, [sp, #8]
 8001d74:	4240      	negs	r0, r0
 8001d76:	7013      	strb	r3, [r2, #0]
 8001d78:	4e6b      	ldr	r6, [pc, #428]	; (8001f28 <_printf_i+0x208>)
 8001d7a:	270a      	movs	r7, #10
 8001d7c:	e04f      	b.n	8001e1e <_printf_i+0xfe>
 8001d7e:	2a73      	cmp	r2, #115	; 0x73
 8001d80:	d074      	beq.n	8001e6c <_printf_i+0x14c>
 8001d82:	d808      	bhi.n	8001d96 <_printf_i+0x76>
 8001d84:	2a6f      	cmp	r2, #111	; 0x6f
 8001d86:	d01f      	beq.n	8001dc8 <_printf_i+0xa8>
 8001d88:	2a70      	cmp	r2, #112	; 0x70
 8001d8a:	d1e0      	bne.n	8001d4e <_printf_i+0x2e>
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	6809      	ldr	r1, [r1, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	6022      	str	r2, [r4, #0]
 8001d94:	e003      	b.n	8001d9e <_printf_i+0x7e>
 8001d96:	2a75      	cmp	r2, #117	; 0x75
 8001d98:	d016      	beq.n	8001dc8 <_printf_i+0xa8>
 8001d9a:	2a78      	cmp	r2, #120	; 0x78
 8001d9c:	d1d7      	bne.n	8001d4e <_printf_i+0x2e>
 8001d9e:	0022      	movs	r2, r4
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	3245      	adds	r2, #69	; 0x45
 8001da4:	7011      	strb	r1, [r2, #0]
 8001da6:	4e61      	ldr	r6, [pc, #388]	; (8001f2c <_printf_i+0x20c>)
 8001da8:	e022      	b.n	8001df0 <_printf_i+0xd0>
 8001daa:	0025      	movs	r5, r4
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	3542      	adds	r5, #66	; 0x42
 8001db0:	1d11      	adds	r1, r2, #4
 8001db2:	6019      	str	r1, [r3, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	702b      	strb	r3, [r5, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	e065      	b.n	8001e88 <_printf_i+0x168>
 8001dbc:	6808      	ldr	r0, [r1, #0]
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	0669      	lsls	r1, r5, #25
 8001dc2:	d5d3      	bpl.n	8001d6c <_printf_i+0x4c>
 8001dc4:	b200      	sxth	r0, r0
 8001dc6:	e7d1      	b.n	8001d6c <_printf_i+0x4c>
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	6825      	ldr	r5, [r4, #0]
 8001dcc:	1d08      	adds	r0, r1, #4
 8001dce:	6018      	str	r0, [r3, #0]
 8001dd0:	6808      	ldr	r0, [r1, #0]
 8001dd2:	062e      	lsls	r6, r5, #24
 8001dd4:	d505      	bpl.n	8001de2 <_printf_i+0xc2>
 8001dd6:	4e54      	ldr	r6, [pc, #336]	; (8001f28 <_printf_i+0x208>)
 8001dd8:	2708      	movs	r7, #8
 8001dda:	2a6f      	cmp	r2, #111	; 0x6f
 8001ddc:	d01b      	beq.n	8001e16 <_printf_i+0xf6>
 8001dde:	270a      	movs	r7, #10
 8001de0:	e019      	b.n	8001e16 <_printf_i+0xf6>
 8001de2:	066d      	lsls	r5, r5, #25
 8001de4:	d5f7      	bpl.n	8001dd6 <_printf_i+0xb6>
 8001de6:	b280      	uxth	r0, r0
 8001de8:	e7f5      	b.n	8001dd6 <_printf_i+0xb6>
 8001dea:	3145      	adds	r1, #69	; 0x45
 8001dec:	4e4e      	ldr	r6, [pc, #312]	; (8001f28 <_printf_i+0x208>)
 8001dee:	700a      	strb	r2, [r1, #0]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	1d01      	adds	r1, r0, #4
 8001df6:	6800      	ldr	r0, [r0, #0]
 8001df8:	6019      	str	r1, [r3, #0]
 8001dfa:	0615      	lsls	r5, r2, #24
 8001dfc:	d521      	bpl.n	8001e42 <_printf_i+0x122>
 8001dfe:	07d3      	lsls	r3, r2, #31
 8001e00:	d502      	bpl.n	8001e08 <_printf_i+0xe8>
 8001e02:	2320      	movs	r3, #32
 8001e04:	431a      	orrs	r2, r3
 8001e06:	6022      	str	r2, [r4, #0]
 8001e08:	2710      	movs	r7, #16
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d103      	bne.n	8001e16 <_printf_i+0xf6>
 8001e0e:	2320      	movs	r3, #32
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	439a      	bics	r2, r3
 8001e14:	6022      	str	r2, [r4, #0]
 8001e16:	0023      	movs	r3, r4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	3343      	adds	r3, #67	; 0x43
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	60a3      	str	r3, [r4, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db58      	blt.n	8001ed8 <_printf_i+0x1b8>
 8001e26:	2204      	movs	r2, #4
 8001e28:	6821      	ldr	r1, [r4, #0]
 8001e2a:	4391      	bics	r1, r2
 8001e2c:	6021      	str	r1, [r4, #0]
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d154      	bne.n	8001edc <_printf_i+0x1bc>
 8001e32:	9d02      	ldr	r5, [sp, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d05a      	beq.n	8001eee <_printf_i+0x1ce>
 8001e38:	0025      	movs	r5, r4
 8001e3a:	7833      	ldrb	r3, [r6, #0]
 8001e3c:	3542      	adds	r5, #66	; 0x42
 8001e3e:	702b      	strb	r3, [r5, #0]
 8001e40:	e055      	b.n	8001eee <_printf_i+0x1ce>
 8001e42:	0655      	lsls	r5, r2, #25
 8001e44:	d5db      	bpl.n	8001dfe <_printf_i+0xde>
 8001e46:	b280      	uxth	r0, r0
 8001e48:	e7d9      	b.n	8001dfe <_printf_i+0xde>
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	680d      	ldr	r5, [r1, #0]
 8001e4e:	1d10      	adds	r0, r2, #4
 8001e50:	6949      	ldr	r1, [r1, #20]
 8001e52:	6018      	str	r0, [r3, #0]
 8001e54:	6813      	ldr	r3, [r2, #0]
 8001e56:	062e      	lsls	r6, r5, #24
 8001e58:	d501      	bpl.n	8001e5e <_printf_i+0x13e>
 8001e5a:	6019      	str	r1, [r3, #0]
 8001e5c:	e002      	b.n	8001e64 <_printf_i+0x144>
 8001e5e:	066d      	lsls	r5, r5, #25
 8001e60:	d5fb      	bpl.n	8001e5a <_printf_i+0x13a>
 8001e62:	8019      	strh	r1, [r3, #0]
 8001e64:	2300      	movs	r3, #0
 8001e66:	9d02      	ldr	r5, [sp, #8]
 8001e68:	6123      	str	r3, [r4, #16]
 8001e6a:	e04f      	b.n	8001f0c <_printf_i+0x1ec>
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	1d11      	adds	r1, r2, #4
 8001e70:	6019      	str	r1, [r3, #0]
 8001e72:	6815      	ldr	r5, [r2, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	6862      	ldr	r2, [r4, #4]
 8001e78:	0028      	movs	r0, r5
 8001e7a:	f000 f859 	bl	8001f30 <memchr>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d001      	beq.n	8001e86 <_printf_i+0x166>
 8001e82:	1b40      	subs	r0, r0, r5
 8001e84:	6060      	str	r0, [r4, #4]
 8001e86:	6863      	ldr	r3, [r4, #4]
 8001e88:	6123      	str	r3, [r4, #16]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	9a02      	ldr	r2, [sp, #8]
 8001e8e:	7013      	strb	r3, [r2, #0]
 8001e90:	e03c      	b.n	8001f0c <_printf_i+0x1ec>
 8001e92:	6923      	ldr	r3, [r4, #16]
 8001e94:	002a      	movs	r2, r5
 8001e96:	9904      	ldr	r1, [sp, #16]
 8001e98:	9803      	ldr	r0, [sp, #12]
 8001e9a:	9d05      	ldr	r5, [sp, #20]
 8001e9c:	47a8      	blx	r5
 8001e9e:	1c43      	adds	r3, r0, #1
 8001ea0:	d03e      	beq.n	8001f20 <_printf_i+0x200>
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	079b      	lsls	r3, r3, #30
 8001ea6:	d415      	bmi.n	8001ed4 <_printf_i+0x1b4>
 8001ea8:	9b07      	ldr	r3, [sp, #28]
 8001eaa:	68e0      	ldr	r0, [r4, #12]
 8001eac:	4298      	cmp	r0, r3
 8001eae:	da39      	bge.n	8001f24 <_printf_i+0x204>
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	e037      	b.n	8001f24 <_printf_i+0x204>
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	3219      	adds	r2, #25
 8001eba:	9904      	ldr	r1, [sp, #16]
 8001ebc:	9803      	ldr	r0, [sp, #12]
 8001ebe:	9e05      	ldr	r6, [sp, #20]
 8001ec0:	47b0      	blx	r6
 8001ec2:	1c43      	adds	r3, r0, #1
 8001ec4:	d02c      	beq.n	8001f20 <_printf_i+0x200>
 8001ec6:	3501      	adds	r5, #1
 8001ec8:	68e3      	ldr	r3, [r4, #12]
 8001eca:	9a07      	ldr	r2, [sp, #28]
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	42ab      	cmp	r3, r5
 8001ed0:	dcf0      	bgt.n	8001eb4 <_printf_i+0x194>
 8001ed2:	e7e9      	b.n	8001ea8 <_printf_i+0x188>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	e7f7      	b.n	8001ec8 <_printf_i+0x1a8>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d0ad      	beq.n	8001e38 <_printf_i+0x118>
 8001edc:	9d02      	ldr	r5, [sp, #8]
 8001ede:	0039      	movs	r1, r7
 8001ee0:	f7fe f996 	bl	8000210 <__aeabi_uidivmod>
 8001ee4:	5c73      	ldrb	r3, [r6, r1]
 8001ee6:	3d01      	subs	r5, #1
 8001ee8:	702b      	strb	r3, [r5, #0]
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1f7      	bne.n	8001ede <_printf_i+0x1be>
 8001eee:	2f08      	cmp	r7, #8
 8001ef0:	d109      	bne.n	8001f06 <_printf_i+0x1e6>
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	07db      	lsls	r3, r3, #31
 8001ef6:	d506      	bpl.n	8001f06 <_printf_i+0x1e6>
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	6922      	ldr	r2, [r4, #16]
 8001efc:	4293      	cmp	r3, r2
 8001efe:	dc02      	bgt.n	8001f06 <_printf_i+0x1e6>
 8001f00:	2330      	movs	r3, #48	; 0x30
 8001f02:	3d01      	subs	r5, #1
 8001f04:	702b      	strb	r3, [r5, #0]
 8001f06:	9b02      	ldr	r3, [sp, #8]
 8001f08:	1b5b      	subs	r3, r3, r5
 8001f0a:	6123      	str	r3, [r4, #16]
 8001f0c:	9b05      	ldr	r3, [sp, #20]
 8001f0e:	aa07      	add	r2, sp, #28
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	0021      	movs	r1, r4
 8001f14:	9b04      	ldr	r3, [sp, #16]
 8001f16:	9803      	ldr	r0, [sp, #12]
 8001f18:	f7ff fe94 	bl	8001c44 <_printf_common>
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	d1b8      	bne.n	8001e92 <_printf_i+0x172>
 8001f20:	2001      	movs	r0, #1
 8001f22:	4240      	negs	r0, r0
 8001f24:	b009      	add	sp, #36	; 0x24
 8001f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f28:	080021c9 	.word	0x080021c9
 8001f2c:	080021da 	.word	0x080021da

08001f30 <memchr>:
 8001f30:	b2c9      	uxtb	r1, r1
 8001f32:	1882      	adds	r2, r0, r2
 8001f34:	4290      	cmp	r0, r2
 8001f36:	d101      	bne.n	8001f3c <memchr+0xc>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	4770      	bx	lr
 8001f3c:	7803      	ldrb	r3, [r0, #0]
 8001f3e:	428b      	cmp	r3, r1
 8001f40:	d0fb      	beq.n	8001f3a <memchr+0xa>
 8001f42:	3001      	adds	r0, #1
 8001f44:	e7f6      	b.n	8001f34 <memchr+0x4>

08001f46 <memcpy>:
 8001f46:	2300      	movs	r3, #0
 8001f48:	b510      	push	{r4, lr}
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d100      	bne.n	8001f50 <memcpy+0xa>
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	5ccc      	ldrb	r4, [r1, r3]
 8001f52:	54c4      	strb	r4, [r0, r3]
 8001f54:	3301      	adds	r3, #1
 8001f56:	e7f8      	b.n	8001f4a <memcpy+0x4>

08001f58 <memmove>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4288      	cmp	r0, r1
 8001f5c:	d902      	bls.n	8001f64 <memmove+0xc>
 8001f5e:	188b      	adds	r3, r1, r2
 8001f60:	4298      	cmp	r0, r3
 8001f62:	d303      	bcc.n	8001f6c <memmove+0x14>
 8001f64:	2300      	movs	r3, #0
 8001f66:	e007      	b.n	8001f78 <memmove+0x20>
 8001f68:	5c8b      	ldrb	r3, [r1, r2]
 8001f6a:	5483      	strb	r3, [r0, r2]
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	d2fb      	bcs.n	8001f68 <memmove+0x10>
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	5ccc      	ldrb	r4, [r1, r3]
 8001f74:	54c4      	strb	r4, [r0, r3]
 8001f76:	3301      	adds	r3, #1
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1fa      	bne.n	8001f72 <memmove+0x1a>
 8001f7c:	e7f8      	b.n	8001f70 <memmove+0x18>
	...

08001f80 <_free_r>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	0005      	movs	r5, r0
 8001f84:	2900      	cmp	r1, #0
 8001f86:	d010      	beq.n	8001faa <_free_r+0x2a>
 8001f88:	1f0c      	subs	r4, r1, #4
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da00      	bge.n	8001f92 <_free_r+0x12>
 8001f90:	18e4      	adds	r4, r4, r3
 8001f92:	0028      	movs	r0, r5
 8001f94:	f000 f8d4 	bl	8002140 <__malloc_lock>
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <_free_r+0x90>)
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <_free_r+0x2c>
 8001fa0:	6063      	str	r3, [r4, #4]
 8001fa2:	6014      	str	r4, [r2, #0]
 8001fa4:	0028      	movs	r0, r5
 8001fa6:	f000 f8cc 	bl	8002142 <__malloc_unlock>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	42a3      	cmp	r3, r4
 8001fae:	d909      	bls.n	8001fc4 <_free_r+0x44>
 8001fb0:	6821      	ldr	r1, [r4, #0]
 8001fb2:	1860      	adds	r0, r4, r1
 8001fb4:	4283      	cmp	r3, r0
 8001fb6:	d1f3      	bne.n	8001fa0 <_free_r+0x20>
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	1841      	adds	r1, r0, r1
 8001fbe:	6021      	str	r1, [r4, #0]
 8001fc0:	e7ee      	b.n	8001fa0 <_free_r+0x20>
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d001      	beq.n	8001fce <_free_r+0x4e>
 8001fca:	42a2      	cmp	r2, r4
 8001fcc:	d9f9      	bls.n	8001fc2 <_free_r+0x42>
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	1858      	adds	r0, r3, r1
 8001fd2:	42a0      	cmp	r0, r4
 8001fd4:	d10b      	bne.n	8001fee <_free_r+0x6e>
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	1809      	adds	r1, r1, r0
 8001fda:	1858      	adds	r0, r3, r1
 8001fdc:	6019      	str	r1, [r3, #0]
 8001fde:	4282      	cmp	r2, r0
 8001fe0:	d1e0      	bne.n	8001fa4 <_free_r+0x24>
 8001fe2:	6810      	ldr	r0, [r2, #0]
 8001fe4:	6852      	ldr	r2, [r2, #4]
 8001fe6:	1841      	adds	r1, r0, r1
 8001fe8:	6019      	str	r1, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	e7da      	b.n	8001fa4 <_free_r+0x24>
 8001fee:	42a0      	cmp	r0, r4
 8001ff0:	d902      	bls.n	8001ff8 <_free_r+0x78>
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	e7d5      	b.n	8001fa4 <_free_r+0x24>
 8001ff8:	6821      	ldr	r1, [r4, #0]
 8001ffa:	1860      	adds	r0, r4, r1
 8001ffc:	4282      	cmp	r2, r0
 8001ffe:	d103      	bne.n	8002008 <_free_r+0x88>
 8002000:	6810      	ldr	r0, [r2, #0]
 8002002:	6852      	ldr	r2, [r2, #4]
 8002004:	1841      	adds	r1, r0, r1
 8002006:	6021      	str	r1, [r4, #0]
 8002008:	6062      	str	r2, [r4, #4]
 800200a:	605c      	str	r4, [r3, #4]
 800200c:	e7ca      	b.n	8001fa4 <_free_r+0x24>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	20000094 	.word	0x20000094

08002014 <_malloc_r>:
 8002014:	2303      	movs	r3, #3
 8002016:	b570      	push	{r4, r5, r6, lr}
 8002018:	1ccd      	adds	r5, r1, #3
 800201a:	439d      	bics	r5, r3
 800201c:	3508      	adds	r5, #8
 800201e:	0006      	movs	r6, r0
 8002020:	2d0c      	cmp	r5, #12
 8002022:	d21e      	bcs.n	8002062 <_malloc_r+0x4e>
 8002024:	250c      	movs	r5, #12
 8002026:	42a9      	cmp	r1, r5
 8002028:	d81d      	bhi.n	8002066 <_malloc_r+0x52>
 800202a:	0030      	movs	r0, r6
 800202c:	f000 f888 	bl	8002140 <__malloc_lock>
 8002030:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <_malloc_r+0xb4>)
 8002032:	6814      	ldr	r4, [r2, #0]
 8002034:	0021      	movs	r1, r4
 8002036:	2900      	cmp	r1, #0
 8002038:	d119      	bne.n	800206e <_malloc_r+0x5a>
 800203a:	4c24      	ldr	r4, [pc, #144]	; (80020cc <_malloc_r+0xb8>)
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <_malloc_r+0x36>
 8002042:	0030      	movs	r0, r6
 8002044:	f000 f86a 	bl	800211c <_sbrk_r>
 8002048:	6020      	str	r0, [r4, #0]
 800204a:	0029      	movs	r1, r5
 800204c:	0030      	movs	r0, r6
 800204e:	f000 f865 	bl	800211c <_sbrk_r>
 8002052:	1c43      	adds	r3, r0, #1
 8002054:	d12b      	bne.n	80020ae <_malloc_r+0x9a>
 8002056:	230c      	movs	r3, #12
 8002058:	0030      	movs	r0, r6
 800205a:	6033      	str	r3, [r6, #0]
 800205c:	f000 f871 	bl	8002142 <__malloc_unlock>
 8002060:	e003      	b.n	800206a <_malloc_r+0x56>
 8002062:	2d00      	cmp	r5, #0
 8002064:	dadf      	bge.n	8002026 <_malloc_r+0x12>
 8002066:	230c      	movs	r3, #12
 8002068:	6033      	str	r3, [r6, #0]
 800206a:	2000      	movs	r0, #0
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	680b      	ldr	r3, [r1, #0]
 8002070:	1b5b      	subs	r3, r3, r5
 8002072:	d419      	bmi.n	80020a8 <_malloc_r+0x94>
 8002074:	2b0b      	cmp	r3, #11
 8002076:	d903      	bls.n	8002080 <_malloc_r+0x6c>
 8002078:	600b      	str	r3, [r1, #0]
 800207a:	18cc      	adds	r4, r1, r3
 800207c:	6025      	str	r5, [r4, #0]
 800207e:	e003      	b.n	8002088 <_malloc_r+0x74>
 8002080:	684b      	ldr	r3, [r1, #4]
 8002082:	428c      	cmp	r4, r1
 8002084:	d10d      	bne.n	80020a2 <_malloc_r+0x8e>
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	0030      	movs	r0, r6
 800208a:	f000 f85a 	bl	8002142 <__malloc_unlock>
 800208e:	0020      	movs	r0, r4
 8002090:	2207      	movs	r2, #7
 8002092:	300b      	adds	r0, #11
 8002094:	1d23      	adds	r3, r4, #4
 8002096:	4390      	bics	r0, r2
 8002098:	1ac3      	subs	r3, r0, r3
 800209a:	d0e7      	beq.n	800206c <_malloc_r+0x58>
 800209c:	425a      	negs	r2, r3
 800209e:	50e2      	str	r2, [r4, r3]
 80020a0:	e7e4      	b.n	800206c <_malloc_r+0x58>
 80020a2:	6063      	str	r3, [r4, #4]
 80020a4:	000c      	movs	r4, r1
 80020a6:	e7ef      	b.n	8002088 <_malloc_r+0x74>
 80020a8:	000c      	movs	r4, r1
 80020aa:	6849      	ldr	r1, [r1, #4]
 80020ac:	e7c3      	b.n	8002036 <_malloc_r+0x22>
 80020ae:	2303      	movs	r3, #3
 80020b0:	1cc4      	adds	r4, r0, #3
 80020b2:	439c      	bics	r4, r3
 80020b4:	42a0      	cmp	r0, r4
 80020b6:	d0e1      	beq.n	800207c <_malloc_r+0x68>
 80020b8:	1a21      	subs	r1, r4, r0
 80020ba:	0030      	movs	r0, r6
 80020bc:	f000 f82e 	bl	800211c <_sbrk_r>
 80020c0:	1c43      	adds	r3, r0, #1
 80020c2:	d1db      	bne.n	800207c <_malloc_r+0x68>
 80020c4:	e7c7      	b.n	8002056 <_malloc_r+0x42>
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000094 	.word	0x20000094
 80020cc:	20000098 	.word	0x20000098

080020d0 <_realloc_r>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	0007      	movs	r7, r0
 80020d4:	000d      	movs	r5, r1
 80020d6:	0016      	movs	r6, r2
 80020d8:	2900      	cmp	r1, #0
 80020da:	d105      	bne.n	80020e8 <_realloc_r+0x18>
 80020dc:	0011      	movs	r1, r2
 80020de:	f7ff ff99 	bl	8002014 <_malloc_r>
 80020e2:	0004      	movs	r4, r0
 80020e4:	0020      	movs	r0, r4
 80020e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d103      	bne.n	80020f4 <_realloc_r+0x24>
 80020ec:	f7ff ff48 	bl	8001f80 <_free_r>
 80020f0:	0034      	movs	r4, r6
 80020f2:	e7f7      	b.n	80020e4 <_realloc_r+0x14>
 80020f4:	f000 f826 	bl	8002144 <_malloc_usable_size_r>
 80020f8:	002c      	movs	r4, r5
 80020fa:	42b0      	cmp	r0, r6
 80020fc:	d2f2      	bcs.n	80020e4 <_realloc_r+0x14>
 80020fe:	0031      	movs	r1, r6
 8002100:	0038      	movs	r0, r7
 8002102:	f7ff ff87 	bl	8002014 <_malloc_r>
 8002106:	1e04      	subs	r4, r0, #0
 8002108:	d0ec      	beq.n	80020e4 <_realloc_r+0x14>
 800210a:	0029      	movs	r1, r5
 800210c:	0032      	movs	r2, r6
 800210e:	f7ff ff1a 	bl	8001f46 <memcpy>
 8002112:	0029      	movs	r1, r5
 8002114:	0038      	movs	r0, r7
 8002116:	f7ff ff33 	bl	8001f80 <_free_r>
 800211a:	e7e3      	b.n	80020e4 <_realloc_r+0x14>

0800211c <_sbrk_r>:
 800211c:	2300      	movs	r3, #0
 800211e:	b570      	push	{r4, r5, r6, lr}
 8002120:	4c06      	ldr	r4, [pc, #24]	; (800213c <_sbrk_r+0x20>)
 8002122:	0005      	movs	r5, r0
 8002124:	0008      	movs	r0, r1
 8002126:	6023      	str	r3, [r4, #0]
 8002128:	f7fe fb16 	bl	8000758 <_sbrk>
 800212c:	1c43      	adds	r3, r0, #1
 800212e:	d103      	bne.n	8002138 <_sbrk_r+0x1c>
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d000      	beq.n	8002138 <_sbrk_r+0x1c>
 8002136:	602b      	str	r3, [r5, #0]
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	200000a0 	.word	0x200000a0

08002140 <__malloc_lock>:
 8002140:	4770      	bx	lr

08002142 <__malloc_unlock>:
 8002142:	4770      	bx	lr

08002144 <_malloc_usable_size_r>:
 8002144:	1f0b      	subs	r3, r1, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	1f18      	subs	r0, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	da01      	bge.n	8002152 <_malloc_usable_size_r+0xe>
 800214e:	580b      	ldr	r3, [r1, r0]
 8002150:	18c0      	adds	r0, r0, r3
 8002152:	4770      	bx	lr

08002154 <_init>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr

08002160 <_fini>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr
