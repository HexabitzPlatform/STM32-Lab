
s5_ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001e44  08001e44  00011e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea8  08001ea8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ea8  08001ea8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ea8  08001ea8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ea8  08001ea8  00011ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eac  08001eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08001f20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001f20  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b6e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000105e  00000000  00000000  00023c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000440  00000000  00000000  00024c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  000250a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a2b  00000000  00000000  00025440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000047cd  00000000  00000000  0003ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b74d  00000000  00000000  0003f638  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bad85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011d4  00000000  00000000  000bae00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e2c 	.word	0x08001e2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001e2c 	.word	0x08001e2c

0800014c <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000150:	201e      	movs	r0, #30
 8000152:	f000 fb77 	bl	8000844 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000156:	2200      	movs	r2, #0
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	481c      	ldr	r0, [pc, #112]	; (80001d0 <lcd_init+0x84>)
 800015e:	f000 fdf3 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000162:	2201      	movs	r2, #1
 8000164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000168:	4819      	ldr	r0, [pc, #100]	; (80001d0 <lcd_init+0x84>)
 800016a:	f000 fded 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000174:	4816      	ldr	r0, [pc, #88]	; (80001d0 <lcd_init+0x84>)
 8000176:	f000 fde7 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 800017a:	2200      	movs	r2, #0
 800017c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000180:	4813      	ldr	r0, [pc, #76]	; (80001d0 <lcd_init+0x84>)
 8000182:	f000 fde1 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800018c:	4810      	ldr	r0, [pc, #64]	; (80001d0 <lcd_init+0x84>)
 800018e:	f000 fddb 	bl	8000d48 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000192:	2201      	movs	r2, #1
 8000194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <lcd_init+0x84>)
 800019a:	f000 fdd5 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800019e:	2200      	movs	r2, #0
 80001a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a4:	480a      	ldr	r0, [pc, #40]	; (80001d0 <lcd_init+0x84>)
 80001a6:	f000 fdcf 	bl	8000d48 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 80001aa:	2128      	movs	r1, #40	; 0x28
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 f811 	bl	80001d4 <lcd_write>
	lcd_write(0,0x0c);
 80001b2:	210c      	movs	r1, #12
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 f80d 	bl	80001d4 <lcd_write>
	lcd_write(0,0x06);
 80001ba:	2106      	movs	r1, #6
 80001bc:	2000      	movs	r0, #0
 80001be:	f000 f809 	bl	80001d4 <lcd_write>
	lcd_write(0,0x01);
 80001c2:	2101      	movs	r1, #1
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 f805 	bl	80001d4 <lcd_write>
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(uint8_t type,uint8_t data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 80001e4:	2002      	movs	r0, #2
 80001e6:	f000 fb2d 	bl	8000844 <HAL_Delay>
	if(type)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d006      	beq.n	80001fe <lcd_write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f6:	485a      	ldr	r0, [pc, #360]	; (8000360 <lcd_write+0x18c>)
 80001f8:	f000 fda6 	bl	8000d48 <HAL_GPIO_WritePin>
 80001fc:	e005      	b.n	800020a <lcd_write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 80001fe:	2200      	movs	r2, #0
 8000200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000204:	4856      	ldr	r0, [pc, #344]	; (8000360 <lcd_write+0x18c>)
 8000206:	f000 fd9f 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 800020a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800020e:	2b00      	cmp	r3, #0
 8000210:	da06      	bge.n	8000220 <lcd_write+0x4c>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000218:	4851      	ldr	r0, [pc, #324]	; (8000360 <lcd_write+0x18c>)
 800021a:	f000 fd95 	bl	8000d48 <HAL_GPIO_WritePin>
 800021e:	e005      	b.n	800022c <lcd_write+0x58>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000226:	484e      	ldr	r0, [pc, #312]	; (8000360 <lcd_write+0x18c>)
 8000228:	f000 fd8e 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800022c:	79bb      	ldrb	r3, [r7, #6]
 800022e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000232:	2b00      	cmp	r3, #0
 8000234:	d006      	beq.n	8000244 <lcd_write+0x70>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023c:	4848      	ldr	r0, [pc, #288]	; (8000360 <lcd_write+0x18c>)
 800023e:	f000 fd83 	bl	8000d48 <HAL_GPIO_WritePin>
 8000242:	e005      	b.n	8000250 <lcd_write+0x7c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024a:	4845      	ldr	r0, [pc, #276]	; (8000360 <lcd_write+0x18c>)
 800024c:	f000 fd7c 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8000250:	79bb      	ldrb	r3, [r7, #6]
 8000252:	f003 0320 	and.w	r3, r3, #32
 8000256:	2b00      	cmp	r3, #0
 8000258:	d006      	beq.n	8000268 <lcd_write+0x94>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800025a:	2201      	movs	r2, #1
 800025c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000260:	483f      	ldr	r0, [pc, #252]	; (8000360 <lcd_write+0x18c>)
 8000262:	f000 fd71 	bl	8000d48 <HAL_GPIO_WritePin>
 8000266:	e005      	b.n	8000274 <lcd_write+0xa0>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	483c      	ldr	r0, [pc, #240]	; (8000360 <lcd_write+0x18c>)
 8000270:	f000 fd6a 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	f003 0310 	and.w	r3, r3, #16
 800027a:	2b00      	cmp	r3, #0
 800027c:	d006      	beq.n	800028c <lcd_write+0xb8>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000284:	4836      	ldr	r0, [pc, #216]	; (8000360 <lcd_write+0x18c>)
 8000286:	f000 fd5f 	bl	8000d48 <HAL_GPIO_WritePin>
 800028a:	e005      	b.n	8000298 <lcd_write+0xc4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4833      	ldr	r0, [pc, #204]	; (8000360 <lcd_write+0x18c>)
 8000294:	f000 fd58 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800029e:	4830      	ldr	r0, [pc, #192]	; (8000360 <lcd_write+0x18c>)
 80002a0:	f000 fd52 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002aa:	482d      	ldr	r0, [pc, #180]	; (8000360 <lcd_write+0x18c>)
 80002ac:	f000 fd4c 	bl	8000d48 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	f003 0308 	and.w	r3, r3, #8
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d006      	beq.n	80002c8 <lcd_write+0xf4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c0:	4827      	ldr	r0, [pc, #156]	; (8000360 <lcd_write+0x18c>)
 80002c2:	f000 fd41 	bl	8000d48 <HAL_GPIO_WritePin>
 80002c6:	e005      	b.n	80002d4 <lcd_write+0x100>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4824      	ldr	r0, [pc, #144]	; (8000360 <lcd_write+0x18c>)
 80002d0:	f000 fd3a 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	f003 0304 	and.w	r3, r3, #4
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d006      	beq.n	80002ec <lcd_write+0x118>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80002de:	2201      	movs	r2, #1
 80002e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e4:	481e      	ldr	r0, [pc, #120]	; (8000360 <lcd_write+0x18c>)
 80002e6:	f000 fd2f 	bl	8000d48 <HAL_GPIO_WritePin>
 80002ea:	e005      	b.n	80002f8 <lcd_write+0x124>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f2:	481b      	ldr	r0, [pc, #108]	; (8000360 <lcd_write+0x18c>)
 80002f4:	f000 fd28 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	f003 0302 	and.w	r3, r3, #2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d006      	beq.n	8000310 <lcd_write+0x13c>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000302:	2201      	movs	r2, #1
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	4815      	ldr	r0, [pc, #84]	; (8000360 <lcd_write+0x18c>)
 800030a:	f000 fd1d 	bl	8000d48 <HAL_GPIO_WritePin>
 800030e:	e005      	b.n	800031c <lcd_write+0x148>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000316:	4812      	ldr	r0, [pc, #72]	; (8000360 <lcd_write+0x18c>)
 8000318:	f000 fd16 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 800031c:	79bb      	ldrb	r3, [r7, #6]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d006      	beq.n	8000334 <lcd_write+0x160>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000326:	2201      	movs	r2, #1
 8000328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <lcd_write+0x18c>)
 800032e:	f000 fd0b 	bl	8000d48 <HAL_GPIO_WritePin>
 8000332:	e005      	b.n	8000340 <lcd_write+0x16c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <lcd_write+0x18c>)
 800033c:	f000 fd04 	bl	8000d48 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <lcd_write+0x18c>)
 8000348:	f000 fcfe 	bl	8000d48 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000352:	4803      	ldr	r0, [pc, #12]	; (8000360 <lcd_write+0x18c>)
 8000354:	f000 fcf8 	bl	8000d48 <HAL_GPIO_WritePin>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40010c00 	.word	0x40010c00

08000364 <lcd_puts>:

void lcd_puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	603a      	str	r2, [r7, #0]
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	460b      	mov	r3, r1
 8000372:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	2b03      	cmp	r3, #3
 8000378:	d836      	bhi.n	80003e8 <lcd_puts+0x84>
 800037a:	a201      	add	r2, pc, #4	; (adr r2, 8000380 <lcd_puts+0x1c>)
 800037c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000380:	08000391 	.word	0x08000391
 8000384:	080003a1 	.word	0x080003a1
 8000388:	080003b1 	.word	0x080003b1
 800038c:	080003c1 	.word	0x080003c1
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	3b80      	subs	r3, #128	; 0x80
 8000394:	b2db      	uxtb	r3, r3
 8000396:	4619      	mov	r1, r3
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ff1b 	bl	80001d4 <lcd_write>
			break;
 800039e:	e017      	b.n	80003d0 <lcd_puts+0x6c>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80003a0:	79bb      	ldrb	r3, [r7, #6]
 80003a2:	3b40      	subs	r3, #64	; 0x40
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4619      	mov	r1, r3
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff ff13 	bl	80001d4 <lcd_write>
			break;
 80003ae:	e00f      	b.n	80003d0 <lcd_puts+0x6c>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	3b70      	subs	r3, #112	; 0x70
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	4619      	mov	r1, r3
 80003b8:	2000      	movs	r0, #0
 80003ba:	f7ff ff0b 	bl	80001d4 <lcd_write>
			break;
 80003be:	e007      	b.n	80003d0 <lcd_puts+0x6c>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	3b30      	subs	r3, #48	; 0x30
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	2000      	movs	r0, #0
 80003ca:	f7ff ff03 	bl	80001d4 <lcd_write>
			break;
 80003ce:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 80003d0:	e00a      	b.n	80003e8 <lcd_puts+0x84>
	{
		lcd_write(1,*string);
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	f993 3000 	ldrsb.w	r3, [r3]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	4619      	mov	r1, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	f7ff fef9 	bl	80001d4 <lcd_write>
		string++;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	603b      	str	r3, [r7, #0]
	while(*string)
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	f993 3000 	ldrsb.w	r3, [r3]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1ef      	bne.n	80003d2 <lcd_puts+0x6e>
	}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop

080003fc <lcd_clear>:
void lcd_clear(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8000400:	2101      	movs	r1, #1
 8000402:	2000      	movs	r0, #0
 8000404:	f7ff fee6 	bl	80001d4 <lcd_write>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <HAL_GPIO_EXTI_Callback>:
#include "lcd_txt.h"
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
int8_t i=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin ==GPIO_PIN_0)
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d111      	bne.n	8000440 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	  i++;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 800041e:	f993 3000 	ldrsb.w	r3, [r3]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	3301      	adds	r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	b25a      	sxtb	r2, r3
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 800042c:	701a      	strb	r2, [r3, #0]
    	  if(i==10)
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 8000430:	f993 3000 	ldrsb.w	r3, [r3]
 8000434:	2b0a      	cmp	r3, #10
 8000436:	d114      	bne.n	8000462 <HAL_GPIO_EXTI_Callback+0x56>
    	  i=9;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 800043a:	2209      	movs	r2, #9
 800043c:	701a      	strb	r2, [r3, #0]
    else  if(GPIO_Pin ==GPIO_PIN_1)
       {
    	if(i>0)
    	  i--;
       }
 }
 800043e:	e010      	b.n	8000462 <HAL_GPIO_EXTI_Callback+0x56>
    else  if(GPIO_Pin ==GPIO_PIN_1)
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d10d      	bne.n	8000462 <HAL_GPIO_EXTI_Callback+0x56>
    	if(i>0)
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 8000448:	f993 3000 	ldrsb.w	r3, [r3]
 800044c:	2b00      	cmp	r3, #0
 800044e:	dd08      	ble.n	8000462 <HAL_GPIO_EXTI_Callback+0x56>
    	  i--;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 8000452:	f993 3000 	ldrsb.w	r3, [r3]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	3b01      	subs	r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	b25a      	sxtb	r2, r3
 800045e:	4b03      	ldr	r3, [pc, #12]	; (800046c <HAL_GPIO_EXTI_Callback+0x60>)
 8000460:	701a      	strb	r2, [r3, #0]
 }
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	2000008c 	.word	0x2000008c

08000470 <main>:


int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
	unsigned char buffer ;
    HAL_Init();
 8000476:	f000 f983 	bl	8000780 <HAL_Init>
    SystemClock_Config();
 800047a:	f000 f825 	bl	80004c8 <SystemClock_Config>
    MX_GPIO_Init();
 800047e:	f000 f85f 	bl	8000540 <MX_GPIO_Init>
    /* USER CODE BEGIN 2 */
    lcd_init();
 8000482:	f7ff fe63 	bl	800014c <lcd_init>
    lcd_clear();
 8000486:	f7ff ffb9 	bl	80003fc <lcd_clear>

  while (1)
  {
	  snprintf(buffer, 10, "%d", i);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4618      	mov	r0, r3
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <main+0x4c>)
 8000490:	f993 3000 	ldrsb.w	r3, [r3]
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <main+0x50>)
 8000496:	210a      	movs	r1, #10
 8000498:	f001 f8a2 	bl	80015e0 <sniprintf>
	  lcd_puts(0,0,"people=");
 800049c:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <main+0x54>)
 800049e:	2100      	movs	r1, #0
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ff5f 	bl	8000364 <lcd_puts>
	  lcd_puts(0,10,buffer);
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	461a      	mov	r2, r3
 80004aa:	210a      	movs	r1, #10
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff ff59 	bl	8000364 <lcd_puts>
	  HAL_Delay(50);
 80004b2:	2032      	movs	r0, #50	; 0x32
 80004b4:	f000 f9c6 	bl	8000844 <HAL_Delay>
  {
 80004b8:	e7e7      	b.n	800048a <main+0x1a>
 80004ba:	bf00      	nop
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	08001e44 	.word	0x08001e44
 80004c4:	08001e48 	.word	0x08001e48

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	; 0x40
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 f87a 	bl	80015d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	2301      	movs	r3, #1
 80004f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f2:	2310      	movs	r3, #16
 80004f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fc52 	bl	8000da8 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800050a:	f000 f86b 	bl	80005e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050e:	230f      	movs	r3, #15
 8000510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f000 febe 	bl	80012a8 <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000532:	f000 f857 	bl	80005e4 <Error_Handler>
  }
}
 8000536:	bf00      	nop
 8000538:	3740      	adds	r7, #64	; 0x40
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_GPIO_Init+0x98>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <MX_GPIO_Init+0x98>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_GPIO_Init+0x98>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <MX_GPIO_Init+0x9c>)
 8000574:	f000 fbe8 	bl	8000d48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000578:	2303      	movs	r3, #3
 800057a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_GPIO_Init+0xa0>)
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4619      	mov	r1, r3
 800058a:	4814      	ldr	r0, [pc, #80]	; (80005dc <MX_GPIO_Init+0x9c>)
 800058c:	f000 fa8a 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000590:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000594:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2302      	movs	r3, #2
 80005a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_GPIO_Init+0x9c>)
 80005aa:	f000 fa7b 	bl	8000aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2006      	movs	r0, #6
 80005b4:	f000 fa3f 	bl	8000a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005b8:	2006      	movs	r0, #6
 80005ba:	f000 fa58 	bl	8000a6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 fa37 	bl	8000a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005c8:	2007      	movs	r0, #7
 80005ca:	f000 fa50 	bl	8000a6e <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010c00 	.word	0x40010c00
 80005e0:	10210000 	.word	0x10210000

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ea:	e7fe      	b.n	80005ea <Error_Handler+0x6>

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x5c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_MspInit+0x60>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_MspInit+0x60>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000696:	f000 f8b9 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fb68 	bl	8000d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 fb61 	bl	8000d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <_sbrk+0x5c>)
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <_sbrk+0x60>)
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <_sbrk+0x64>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <_sbrk+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <_sbrk+0x64>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d207      	bcs.n	80006fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006ec:	f000 ff46 	bl	800157c <__errno>
 80006f0:	4602      	mov	r2, r0
 80006f2:	230c      	movs	r3, #12
 80006f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	e009      	b.n	8000710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <_sbrk+0x64>)
 800070c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20001800 	.word	0x20001800
 800071c:	00000400 	.word	0x00000400
 8000720:	20000090 	.word	0x20000090
 8000724:	200000a8 	.word	0x200000a8

08000728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075a:	f7ff ffe5 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075e:	f000 ff13 	bl	8001588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff fe85 	bl	8000470 <main>
  bx lr
 8000766:	4770      	bx	lr
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000770:	08001eb0 	.word	0x08001eb0
  ldr r2, =_sbss
 8000774:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000778:	200000a4 	.word	0x200000a4

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f945 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff ff26 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f95d 	bl	8000a8a <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f925 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000008 	.word	0x20000008
 800082c:	2000009c 	.word	0x2000009c

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	2000009c 	.word	0x2000009c

08000844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800084c:	f7ff fff0 	bl	8000830 <HAL_GetTick>
 8000850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085c:	d005      	beq.n	800086a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_Delay+0x40>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086a:	bf00      	nop
 800086c:	f7ff ffe0 	bl	8000830 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d8f7      	bhi.n	800086c <HAL_Delay+0x28>
  {
  }
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000008 	.word	0x20000008

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <__NVIC_EnableIRQ+0x34>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff ff90 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff2d 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff42 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff90 	bl	8000978 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5f 	bl	8000924 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff35 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffa2 	bl	80009dc <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b08b      	sub	sp, #44	; 0x2c
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e121      	b.n	8000cfc <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f040 8110 	bne.w	8000cf6 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d034      	beq.n	8000b48 <HAL_GPIO_Init+0xa4>
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d80d      	bhi.n	8000afe <HAL_GPIO_Init+0x5a>
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d02b      	beq.n	8000b3e <HAL_GPIO_Init+0x9a>
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d804      	bhi.n	8000af4 <HAL_GPIO_Init+0x50>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d031      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d01c      	beq.n	8000b2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af2:	e048      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d043      	beq.n	8000b80 <HAL_GPIO_Init+0xdc>
 8000af8:	2b11      	cmp	r3, #17
 8000afa:	d01b      	beq.n	8000b34 <HAL_GPIO_Init+0x90>
          break;
 8000afc:	e043      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000afe:	4a86      	ldr	r2, [pc, #536]	; (8000d18 <HAL_GPIO_Init+0x274>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d026      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
 8000b04:	4a84      	ldr	r2, [pc, #528]	; (8000d18 <HAL_GPIO_Init+0x274>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d806      	bhi.n	8000b18 <HAL_GPIO_Init+0x74>
 8000b0a:	4a84      	ldr	r2, [pc, #528]	; (8000d1c <HAL_GPIO_Init+0x278>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d020      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
 8000b10:	4a83      	ldr	r2, [pc, #524]	; (8000d20 <HAL_GPIO_Init+0x27c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01d      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
          break;
 8000b16:	e036      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b18:	4a82      	ldr	r2, [pc, #520]	; (8000d24 <HAL_GPIO_Init+0x280>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d019      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
 8000b1e:	4a82      	ldr	r2, [pc, #520]	; (8000d28 <HAL_GPIO_Init+0x284>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d016      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
 8000b24:	4a81      	ldr	r2, [pc, #516]	; (8000d2c <HAL_GPIO_Init+0x288>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0xae>
          break;
 8000b2a:	e02c      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	623b      	str	r3, [r7, #32]
          break;
 8000b32:	e028      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	e023      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	3308      	adds	r3, #8
 8000b44:	623b      	str	r3, [r7, #32]
          break;
 8000b46:	e01e      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	330c      	adds	r3, #12
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e019      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	623b      	str	r3, [r7, #32]
          break;
 8000b5e:	e012      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d105      	bne.n	8000b74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	611a      	str	r2, [r3, #16]
          break;
 8000b72:	e008      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b74:	2308      	movs	r3, #8
 8000b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	615a      	str	r2, [r3, #20]
          break;
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	2bff      	cmp	r3, #255	; 0xff
 8000b8a:	d801      	bhi.n	8000b90 <HAL_GPIO_Init+0xec>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e001      	b.n	8000b94 <HAL_GPIO_Init+0xf0>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3304      	adds	r3, #4
 8000b94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	2bff      	cmp	r3, #255	; 0xff
 8000b9a:	d802      	bhi.n	8000ba2 <HAL_GPIO_Init+0xfe>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	e002      	b.n	8000ba8 <HAL_GPIO_Init+0x104>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	3b08      	subs	r3, #8
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	401a      	ands	r2, r3
 8000bba:	6a39      	ldr	r1, [r7, #32]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 8090 	beq.w	8000cf6 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd6:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <HAL_GPIO_Init+0x28c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a55      	ldr	r2, [pc, #340]	; (8000d30 <HAL_GPIO_Init+0x28c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <HAL_GPIO_Init+0x28c>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bee:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <HAL_GPIO_Init+0x290>)
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <HAL_GPIO_Init+0x294>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d00d      	beq.n	8000c36 <HAL_GPIO_Init+0x192>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a47      	ldr	r2, [pc, #284]	; (8000d3c <HAL_GPIO_Init+0x298>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d007      	beq.n	8000c32 <HAL_GPIO_Init+0x18e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <HAL_GPIO_Init+0x29c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_GPIO_Init+0x18a>
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e004      	b.n	8000c38 <HAL_GPIO_Init+0x194>
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e002      	b.n	8000c38 <HAL_GPIO_Init+0x194>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_GPIO_Init+0x194>
 8000c36:	2300      	movs	r3, #0
 8000c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3a:	f002 0203 	and.w	r2, r2, #3
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	4093      	lsls	r3, r2
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c48:	493a      	ldr	r1, [pc, #232]	; (8000d34 <HAL_GPIO_Init+0x290>)
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4937      	ldr	r1, [pc, #220]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
 8000c6e:	e006      	b.n	8000c7e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4932      	ldr	r1, [pc, #200]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	492d      	ldr	r1, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4928      	ldr	r1, [pc, #160]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	4923      	ldr	r1, [pc, #140]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	491e      	ldr	r1, [pc, #120]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	4919      	ldr	r1, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4914      	ldr	r1, [pc, #80]	; (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	fa22 f303 	lsr.w	r3, r2, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f47f aed6 	bne.w	8000ab8 <HAL_GPIO_Init+0x14>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	372c      	adds	r7, #44	; 0x2c
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	10210000 	.word	0x10210000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	10120000 	.word	0x10120000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	4613      	mov	r3, r2
 8000d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d58:	787b      	ldrb	r3, [r7, #1]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d64:	e003      	b.n	8000d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	041a      	lsls	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	611a      	str	r2, [r3, #16]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d84:	695a      	ldr	r2, [r3, #20]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fb38 	bl	800040c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e26c      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8087 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc8:	4b92      	ldr	r3, [pc, #584]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d00c      	beq.n	8000dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd4:	4b8f      	ldr	r3, [pc, #572]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d112      	bne.n	8000e06 <HAL_RCC_OscConfig+0x5e>
 8000de0:	4b8c      	ldr	r3, [pc, #560]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dec:	d10b      	bne.n	8000e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dee:	4b89      	ldr	r3, [pc, #548]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d06c      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x12c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d168      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e246      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0e:	d106      	bne.n	8000e1e <HAL_RCC_OscConfig+0x76>
 8000e10:	4b80      	ldr	r3, [pc, #512]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a7f      	ldr	r2, [pc, #508]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e02e      	b.n	8000e7c <HAL_RCC_OscConfig+0xd4>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x98>
 8000e26:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a7a      	ldr	r2, [pc, #488]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b78      	ldr	r3, [pc, #480]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a77      	ldr	r2, [pc, #476]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e01d      	b.n	8000e7c <HAL_RCC_OscConfig+0xd4>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0xbc>
 8000e4a:	4b72      	ldr	r3, [pc, #456]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a71      	ldr	r2, [pc, #452]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b6f      	ldr	r3, [pc, #444]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6e      	ldr	r2, [pc, #440]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0xd4>
 8000e64:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a6a      	ldr	r2, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b68      	ldr	r3, [pc, #416]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a67      	ldr	r2, [pc, #412]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d013      	beq.n	8000eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fcd4 	bl	8000830 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fcd0 	bl	8000830 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e1fa      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0xe4>
 8000eaa:	e014      	b.n	8000ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fcc0 	bl	8000830 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fcbc 	bl	8000830 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e1e6      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	4b53      	ldr	r3, [pc, #332]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x10c>
 8000ed2:	e000      	b.n	8000ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d063      	beq.n	8000faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eee:	4b49      	ldr	r3, [pc, #292]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d11c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x18c>
 8000efa:	4b46      	ldr	r3, [pc, #280]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d116      	bne.n	8000f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <HAL_RCC_OscConfig+0x176>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d001      	beq.n	8000f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e1ba      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4939      	ldr	r1, [pc, #228]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	e03a      	b.n	8000faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d020      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f42:	f7ff fc75 	bl	8000830 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fc71 	bl	8000830 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e19b      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4927      	ldr	r1, [pc, #156]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	e015      	b.n	8000faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <HAL_RCC_OscConfig+0x270>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fc54 	bl	8000830 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8c:	f7ff fc50 	bl	8000830 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e17a      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d03a      	beq.n	800102c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_RCC_OscConfig+0x274>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fc34 	bl	8000830 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fc30 	bl	8000830 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e15a      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 faa8 	bl	8001540 <RCC_Delay>
 8000ff0:	e01c      	b.n	800102c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_RCC_OscConfig+0x274>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc1a 	bl	8000830 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffe:	e00f      	b.n	8001020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc16 	bl	8000830 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d908      	bls.n	8001020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e140      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	42420000 	.word	0x42420000
 800101c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001020:	4b9e      	ldr	r3, [pc, #632]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e9      	bne.n	8001000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a6 	beq.w	8001186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800103e:	4b97      	ldr	r3, [pc, #604]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10d      	bne.n	8001066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b94      	ldr	r3, [pc, #592]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a93      	ldr	r2, [pc, #588]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b91      	ldr	r3, [pc, #580]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001062:	2301      	movs	r3, #1
 8001064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <HAL_RCC_OscConfig+0x4f8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	2b00      	cmp	r3, #0
 8001070:	d118      	bne.n	80010a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001072:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x4f8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a8a      	ldr	r2, [pc, #552]	; (80012a0 <HAL_RCC_OscConfig+0x4f8>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800107e:	f7ff fbd7 	bl	8000830 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001086:	f7ff fbd3 	bl	8000830 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b64      	cmp	r3, #100	; 0x64
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e0fd      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001098:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x4f8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x312>
 80010ac:	4b7b      	ldr	r3, [pc, #492]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4a7a      	ldr	r2, [pc, #488]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6213      	str	r3, [r2, #32]
 80010b8:	e02d      	b.n	8001116 <HAL_RCC_OscConfig+0x36e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x334>
 80010c2:	4b76      	ldr	r3, [pc, #472]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a75      	ldr	r2, [pc, #468]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	4b73      	ldr	r3, [pc, #460]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a72      	ldr	r2, [pc, #456]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	6213      	str	r3, [r2, #32]
 80010da:	e01c      	b.n	8001116 <HAL_RCC_OscConfig+0x36e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d10c      	bne.n	80010fe <HAL_RCC_OscConfig+0x356>
 80010e4:	4b6d      	ldr	r3, [pc, #436]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4a6c      	ldr	r2, [pc, #432]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6213      	str	r3, [r2, #32]
 80010f0:	4b6a      	ldr	r3, [pc, #424]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4a69      	ldr	r2, [pc, #420]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6213      	str	r3, [r2, #32]
 80010fc:	e00b      	b.n	8001116 <HAL_RCC_OscConfig+0x36e>
 80010fe:	4b67      	ldr	r3, [pc, #412]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a66      	ldr	r2, [pc, #408]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	6213      	str	r3, [r2, #32]
 800110a:	4b64      	ldr	r3, [pc, #400]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4a63      	ldr	r2, [pc, #396]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001110:	f023 0304 	bic.w	r3, r3, #4
 8001114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d015      	beq.n	800114a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111e:	f7ff fb87 	bl	8000830 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	e00a      	b.n	800113c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fb83 	bl	8000830 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f241 3288 	movw	r2, #5000	; 0x1388
 8001134:	4293      	cmp	r3, r2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e0ab      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113c:	4b57      	ldr	r3, [pc, #348]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0ee      	beq.n	8001126 <HAL_RCC_OscConfig+0x37e>
 8001148:	e014      	b.n	8001174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fb71 	bl	8000830 <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff fb6d 	bl	8000830 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001160:	4293      	cmp	r3, r2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e095      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001168:	4b4c      	ldr	r3, [pc, #304]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1ee      	bne.n	8001152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d105      	bne.n	8001186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117a:	4b48      	ldr	r3, [pc, #288]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a47      	ldr	r2, [pc, #284]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8081 	beq.w	8001292 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b08      	cmp	r3, #8
 800119a:	d061      	beq.n	8001260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d146      	bne.n	8001232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <HAL_RCC_OscConfig+0x4fc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb41 	bl	8000830 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff fb3d 	bl	8000830 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e067      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d108      	bne.n	80011ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	492d      	ldr	r1, [pc, #180]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a19      	ldr	r1, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	430b      	orrs	r3, r1
 80011fe:	4927      	ldr	r1, [pc, #156]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_RCC_OscConfig+0x4fc>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fb11 	bl	8000830 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001212:	f7ff fb0d 	bl	8000830 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e037      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x46a>
 8001230:	e02f      	b.n	8001292 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_RCC_OscConfig+0x4fc>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fafa 	bl	8000830 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff faf6 	bl	8000830 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e020      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x498>
 800125e:	e018      	b.n	8001292 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e013      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_OscConfig+0x4f4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	429a      	cmp	r2, r3
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	429a      	cmp	r2, r3
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	40007000 	.word	0x40007000
 80012a4:	42420060 	.word	0x42420060

080012a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e0d0      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012bc:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d910      	bls.n	80012ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 0207 	bic.w	r2, r3, #7
 80012d2:	4965      	ldr	r1, [pc, #404]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0b8      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4a58      	ldr	r2, [pc, #352]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800130e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	494d      	ldr	r1, [pc, #308]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d040      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d115      	bne.n	8001386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e07f      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e073      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e06b      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001386:	4b39      	ldr	r3, [pc, #228]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f023 0203 	bic.w	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4936      	ldr	r1, [pc, #216]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001398:	f7ff fa4a 	bl	8000830 <HAL_GetTick>
 800139c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a0:	f7ff fa46 	bl	8000830 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e053      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 020c 	and.w	r2, r3, #12
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d1eb      	bne.n	80013a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c8:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d210      	bcs.n	80013f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 0207 	bic.w	r2, r3, #7
 80013de:	4922      	ldr	r1, [pc, #136]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_ClockConfig+0x1c0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e032      	b.n	800145e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4916      	ldr	r1, [pc, #88]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001436:	f000 f821 	bl	800147c <HAL_RCC_GetSysClockFreq>
 800143a:	4601      	mov	r1, r0
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_RCC_ClockConfig+0x1c8>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	fa21 f303 	lsr.w	r3, r1, r3
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_RCC_ClockConfig+0x1cc>)
 8001450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_ClockConfig+0x1d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f9a8 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000
 800146c:	40021000 	.word	0x40021000
 8001470:	08001e64 	.word	0x08001e64
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	b490      	push	{r4, r7}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001484:	1d3c      	adds	r4, r7, #4
 8001486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_RCC_GetSysClockFreq+0xb4>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d002      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x40>
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d003      	beq.n	80014c2 <HAL_RCC_GetSysClockFreq+0x46>
 80014ba:	e02d      	b.n	8001518 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014be:	623b      	str	r3, [r7, #32]
      break;
 80014c0:	e02d      	b.n	800151e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	0c5b      	lsrs	r3, r3, #17
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014ee:	4413      	add	r3, r2
 80014f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014fa:	fb02 f203 	mul.w	r2, r2, r3
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	fbb2 f3f3 	udiv	r3, r2, r3
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	e004      	b.n	8001512 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_RCC_GetSysClockFreq+0xc0>)
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	623b      	str	r3, [r7, #32]
      break;
 8001516:	e002      	b.n	800151e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_RCC_GetSysClockFreq+0xbc>)
 800151a:	623b      	str	r3, [r7, #32]
      break;
 800151c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800151e:	6a3b      	ldr	r3, [r7, #32]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bc90      	pop	{r4, r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	08001e50 	.word	0x08001e50
 8001530:	08001e60 	.word	0x08001e60
 8001534:	40021000 	.word	0x40021000
 8001538:	007a1200 	.word	0x007a1200
 800153c:	003d0900 	.word	0x003d0900

08001540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <RCC_Delay+0x34>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <RCC_Delay+0x38>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0a5b      	lsrs	r3, r3, #9
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800155c:	bf00      	nop
  }
  while (Delay --);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	60fa      	str	r2, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <RCC_Delay+0x1c>
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000
 8001578:	10624dd3 	.word	0x10624dd3

0800157c <__errno>:
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <__errno+0x8>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2000000c 	.word	0x2000000c

08001588 <__libc_init_array>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	2500      	movs	r5, #0
 800158c:	4e0c      	ldr	r6, [pc, #48]	; (80015c0 <__libc_init_array+0x38>)
 800158e:	4c0d      	ldr	r4, [pc, #52]	; (80015c4 <__libc_init_array+0x3c>)
 8001590:	1ba4      	subs	r4, r4, r6
 8001592:	10a4      	asrs	r4, r4, #2
 8001594:	42a5      	cmp	r5, r4
 8001596:	d109      	bne.n	80015ac <__libc_init_array+0x24>
 8001598:	f000 fc48 	bl	8001e2c <_init>
 800159c:	2500      	movs	r5, #0
 800159e:	4e0a      	ldr	r6, [pc, #40]	; (80015c8 <__libc_init_array+0x40>)
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <__libc_init_array+0x44>)
 80015a2:	1ba4      	subs	r4, r4, r6
 80015a4:	10a4      	asrs	r4, r4, #2
 80015a6:	42a5      	cmp	r5, r4
 80015a8:	d105      	bne.n	80015b6 <__libc_init_array+0x2e>
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
 80015ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015b0:	4798      	blx	r3
 80015b2:	3501      	adds	r5, #1
 80015b4:	e7ee      	b.n	8001594 <__libc_init_array+0xc>
 80015b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ba:	4798      	blx	r3
 80015bc:	3501      	adds	r5, #1
 80015be:	e7f2      	b.n	80015a6 <__libc_init_array+0x1e>
 80015c0:	08001ea8 	.word	0x08001ea8
 80015c4:	08001ea8 	.word	0x08001ea8
 80015c8:	08001ea8 	.word	0x08001ea8
 80015cc:	08001eac 	.word	0x08001eac

080015d0 <memset>:
 80015d0:	4603      	mov	r3, r0
 80015d2:	4402      	add	r2, r0
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <memset+0xa>
 80015d8:	4770      	bx	lr
 80015da:	f803 1b01 	strb.w	r1, [r3], #1
 80015de:	e7f9      	b.n	80015d4 <memset+0x4>

080015e0 <sniprintf>:
 80015e0:	b40c      	push	{r2, r3}
 80015e2:	b530      	push	{r4, r5, lr}
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <sniprintf+0x64>)
 80015e6:	1e0c      	subs	r4, r1, #0
 80015e8:	b09d      	sub	sp, #116	; 0x74
 80015ea:	681d      	ldr	r5, [r3, #0]
 80015ec:	da08      	bge.n	8001600 <sniprintf+0x20>
 80015ee:	238b      	movs	r3, #139	; 0x8b
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	602b      	str	r3, [r5, #0]
 80015f6:	b01d      	add	sp, #116	; 0x74
 80015f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015fc:	b002      	add	sp, #8
 80015fe:	4770      	bx	lr
 8001600:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001604:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001608:	bf0c      	ite	eq
 800160a:	4623      	moveq	r3, r4
 800160c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	9307      	str	r3, [sp, #28]
 8001614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001618:	9002      	str	r0, [sp, #8]
 800161a:	9006      	str	r0, [sp, #24]
 800161c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001620:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001622:	ab21      	add	r3, sp, #132	; 0x84
 8001624:	a902      	add	r1, sp, #8
 8001626:	4628      	mov	r0, r5
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f000 f867 	bl	80016fc <_svfiprintf_r>
 800162e:	1c43      	adds	r3, r0, #1
 8001630:	bfbc      	itt	lt
 8001632:	238b      	movlt	r3, #139	; 0x8b
 8001634:	602b      	strlt	r3, [r5, #0]
 8001636:	2c00      	cmp	r4, #0
 8001638:	d0dd      	beq.n	80015f6 <sniprintf+0x16>
 800163a:	2200      	movs	r2, #0
 800163c:	9b02      	ldr	r3, [sp, #8]
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e7d9      	b.n	80015f6 <sniprintf+0x16>
 8001642:	bf00      	nop
 8001644:	2000000c 	.word	0x2000000c

08001648 <__ssputs_r>:
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800164c:	688e      	ldr	r6, [r1, #8]
 800164e:	4682      	mov	sl, r0
 8001650:	429e      	cmp	r6, r3
 8001652:	460c      	mov	r4, r1
 8001654:	4690      	mov	r8, r2
 8001656:	4699      	mov	r9, r3
 8001658:	d837      	bhi.n	80016ca <__ssputs_r+0x82>
 800165a:	898a      	ldrh	r2, [r1, #12]
 800165c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001660:	d031      	beq.n	80016c6 <__ssputs_r+0x7e>
 8001662:	2302      	movs	r3, #2
 8001664:	6825      	ldr	r5, [r4, #0]
 8001666:	6909      	ldr	r1, [r1, #16]
 8001668:	1a6f      	subs	r7, r5, r1
 800166a:	6965      	ldr	r5, [r4, #20]
 800166c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001670:	fb95 f5f3 	sdiv	r5, r5, r3
 8001674:	f109 0301 	add.w	r3, r9, #1
 8001678:	443b      	add	r3, r7
 800167a:	429d      	cmp	r5, r3
 800167c:	bf38      	it	cc
 800167e:	461d      	movcc	r5, r3
 8001680:	0553      	lsls	r3, r2, #21
 8001682:	d530      	bpl.n	80016e6 <__ssputs_r+0x9e>
 8001684:	4629      	mov	r1, r5
 8001686:	f000 fb37 	bl	8001cf8 <_malloc_r>
 800168a:	4606      	mov	r6, r0
 800168c:	b950      	cbnz	r0, 80016a4 <__ssputs_r+0x5c>
 800168e:	230c      	movs	r3, #12
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f8ca 3000 	str.w	r3, [sl]
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800169e:	81a3      	strh	r3, [r4, #12]
 80016a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016a4:	463a      	mov	r2, r7
 80016a6:	6921      	ldr	r1, [r4, #16]
 80016a8:	f000 fab6 	bl	8001c18 <memcpy>
 80016ac:	89a3      	ldrh	r3, [r4, #12]
 80016ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b6:	81a3      	strh	r3, [r4, #12]
 80016b8:	6126      	str	r6, [r4, #16]
 80016ba:	443e      	add	r6, r7
 80016bc:	6026      	str	r6, [r4, #0]
 80016be:	464e      	mov	r6, r9
 80016c0:	6165      	str	r5, [r4, #20]
 80016c2:	1bed      	subs	r5, r5, r7
 80016c4:	60a5      	str	r5, [r4, #8]
 80016c6:	454e      	cmp	r6, r9
 80016c8:	d900      	bls.n	80016cc <__ssputs_r+0x84>
 80016ca:	464e      	mov	r6, r9
 80016cc:	4632      	mov	r2, r6
 80016ce:	4641      	mov	r1, r8
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f000 faac 	bl	8001c2e <memmove>
 80016d6:	68a3      	ldr	r3, [r4, #8]
 80016d8:	2000      	movs	r0, #0
 80016da:	1b9b      	subs	r3, r3, r6
 80016dc:	60a3      	str	r3, [r4, #8]
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	441e      	add	r6, r3
 80016e2:	6026      	str	r6, [r4, #0]
 80016e4:	e7dc      	b.n	80016a0 <__ssputs_r+0x58>
 80016e6:	462a      	mov	r2, r5
 80016e8:	f000 fb60 	bl	8001dac <_realloc_r>
 80016ec:	4606      	mov	r6, r0
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d1e2      	bne.n	80016b8 <__ssputs_r+0x70>
 80016f2:	6921      	ldr	r1, [r4, #16]
 80016f4:	4650      	mov	r0, sl
 80016f6:	f000 fab3 	bl	8001c60 <_free_r>
 80016fa:	e7c8      	b.n	800168e <__ssputs_r+0x46>

080016fc <_svfiprintf_r>:
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	461d      	mov	r5, r3
 8001702:	898b      	ldrh	r3, [r1, #12]
 8001704:	b09d      	sub	sp, #116	; 0x74
 8001706:	061f      	lsls	r7, r3, #24
 8001708:	4680      	mov	r8, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4616      	mov	r6, r2
 800170e:	d50f      	bpl.n	8001730 <_svfiprintf_r+0x34>
 8001710:	690b      	ldr	r3, [r1, #16]
 8001712:	b96b      	cbnz	r3, 8001730 <_svfiprintf_r+0x34>
 8001714:	2140      	movs	r1, #64	; 0x40
 8001716:	f000 faef 	bl	8001cf8 <_malloc_r>
 800171a:	6020      	str	r0, [r4, #0]
 800171c:	6120      	str	r0, [r4, #16]
 800171e:	b928      	cbnz	r0, 800172c <_svfiprintf_r+0x30>
 8001720:	230c      	movs	r3, #12
 8001722:	f8c8 3000 	str.w	r3, [r8]
 8001726:	f04f 30ff 	mov.w	r0, #4294967295
 800172a:	e0c8      	b.n	80018be <_svfiprintf_r+0x1c2>
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	6163      	str	r3, [r4, #20]
 8001730:	2300      	movs	r3, #0
 8001732:	9309      	str	r3, [sp, #36]	; 0x24
 8001734:	2320      	movs	r3, #32
 8001736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800173a:	2330      	movs	r3, #48	; 0x30
 800173c:	f04f 0b01 	mov.w	fp, #1
 8001740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001744:	9503      	str	r5, [sp, #12]
 8001746:	4637      	mov	r7, r6
 8001748:	463d      	mov	r5, r7
 800174a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800174e:	b10b      	cbz	r3, 8001754 <_svfiprintf_r+0x58>
 8001750:	2b25      	cmp	r3, #37	; 0x25
 8001752:	d13e      	bne.n	80017d2 <_svfiprintf_r+0xd6>
 8001754:	ebb7 0a06 	subs.w	sl, r7, r6
 8001758:	d00b      	beq.n	8001772 <_svfiprintf_r+0x76>
 800175a:	4653      	mov	r3, sl
 800175c:	4632      	mov	r2, r6
 800175e:	4621      	mov	r1, r4
 8001760:	4640      	mov	r0, r8
 8001762:	f7ff ff71 	bl	8001648 <__ssputs_r>
 8001766:	3001      	adds	r0, #1
 8001768:	f000 80a4 	beq.w	80018b4 <_svfiprintf_r+0x1b8>
 800176c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800176e:	4453      	add	r3, sl
 8001770:	9309      	str	r3, [sp, #36]	; 0x24
 8001772:	783b      	ldrb	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 809d 	beq.w	80018b4 <_svfiprintf_r+0x1b8>
 800177a:	2300      	movs	r3, #0
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001784:	9304      	str	r3, [sp, #16]
 8001786:	9307      	str	r3, [sp, #28]
 8001788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800178c:	931a      	str	r3, [sp, #104]	; 0x68
 800178e:	462f      	mov	r7, r5
 8001790:	2205      	movs	r2, #5
 8001792:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001796:	4850      	ldr	r0, [pc, #320]	; (80018d8 <_svfiprintf_r+0x1dc>)
 8001798:	f000 fa30 	bl	8001bfc <memchr>
 800179c:	9b04      	ldr	r3, [sp, #16]
 800179e:	b9d0      	cbnz	r0, 80017d6 <_svfiprintf_r+0xda>
 80017a0:	06d9      	lsls	r1, r3, #27
 80017a2:	bf44      	itt	mi
 80017a4:	2220      	movmi	r2, #32
 80017a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017aa:	071a      	lsls	r2, r3, #28
 80017ac:	bf44      	itt	mi
 80017ae:	222b      	movmi	r2, #43	; 0x2b
 80017b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017b4:	782a      	ldrb	r2, [r5, #0]
 80017b6:	2a2a      	cmp	r2, #42	; 0x2a
 80017b8:	d015      	beq.n	80017e6 <_svfiprintf_r+0xea>
 80017ba:	462f      	mov	r7, r5
 80017bc:	2000      	movs	r0, #0
 80017be:	250a      	movs	r5, #10
 80017c0:	9a07      	ldr	r2, [sp, #28]
 80017c2:	4639      	mov	r1, r7
 80017c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017c8:	3b30      	subs	r3, #48	; 0x30
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	d94d      	bls.n	800186a <_svfiprintf_r+0x16e>
 80017ce:	b1b8      	cbz	r0, 8001800 <_svfiprintf_r+0x104>
 80017d0:	e00f      	b.n	80017f2 <_svfiprintf_r+0xf6>
 80017d2:	462f      	mov	r7, r5
 80017d4:	e7b8      	b.n	8001748 <_svfiprintf_r+0x4c>
 80017d6:	4a40      	ldr	r2, [pc, #256]	; (80018d8 <_svfiprintf_r+0x1dc>)
 80017d8:	463d      	mov	r5, r7
 80017da:	1a80      	subs	r0, r0, r2
 80017dc:	fa0b f000 	lsl.w	r0, fp, r0
 80017e0:	4318      	orrs	r0, r3
 80017e2:	9004      	str	r0, [sp, #16]
 80017e4:	e7d3      	b.n	800178e <_svfiprintf_r+0x92>
 80017e6:	9a03      	ldr	r2, [sp, #12]
 80017e8:	1d11      	adds	r1, r2, #4
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	9103      	str	r1, [sp, #12]
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	db01      	blt.n	80017f6 <_svfiprintf_r+0xfa>
 80017f2:	9207      	str	r2, [sp, #28]
 80017f4:	e004      	b.n	8001800 <_svfiprintf_r+0x104>
 80017f6:	4252      	negs	r2, r2
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	9207      	str	r2, [sp, #28]
 80017fe:	9304      	str	r3, [sp, #16]
 8001800:	783b      	ldrb	r3, [r7, #0]
 8001802:	2b2e      	cmp	r3, #46	; 0x2e
 8001804:	d10c      	bne.n	8001820 <_svfiprintf_r+0x124>
 8001806:	787b      	ldrb	r3, [r7, #1]
 8001808:	2b2a      	cmp	r3, #42	; 0x2a
 800180a:	d133      	bne.n	8001874 <_svfiprintf_r+0x178>
 800180c:	9b03      	ldr	r3, [sp, #12]
 800180e:	3702      	adds	r7, #2
 8001810:	1d1a      	adds	r2, r3, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	9203      	str	r2, [sp, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	f04f 33ff 	movlt.w	r3, #4294967295
 800181e:	9305      	str	r3, [sp, #20]
 8001820:	4d2e      	ldr	r5, [pc, #184]	; (80018dc <_svfiprintf_r+0x1e0>)
 8001822:	2203      	movs	r2, #3
 8001824:	7839      	ldrb	r1, [r7, #0]
 8001826:	4628      	mov	r0, r5
 8001828:	f000 f9e8 	bl	8001bfc <memchr>
 800182c:	b138      	cbz	r0, 800183e <_svfiprintf_r+0x142>
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	1b40      	subs	r0, r0, r5
 8001832:	fa03 f000 	lsl.w	r0, r3, r0
 8001836:	9b04      	ldr	r3, [sp, #16]
 8001838:	3701      	adds	r7, #1
 800183a:	4303      	orrs	r3, r0
 800183c:	9304      	str	r3, [sp, #16]
 800183e:	7839      	ldrb	r1, [r7, #0]
 8001840:	2206      	movs	r2, #6
 8001842:	4827      	ldr	r0, [pc, #156]	; (80018e0 <_svfiprintf_r+0x1e4>)
 8001844:	1c7e      	adds	r6, r7, #1
 8001846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800184a:	f000 f9d7 	bl	8001bfc <memchr>
 800184e:	2800      	cmp	r0, #0
 8001850:	d038      	beq.n	80018c4 <_svfiprintf_r+0x1c8>
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <_svfiprintf_r+0x1e8>)
 8001854:	bb13      	cbnz	r3, 800189c <_svfiprintf_r+0x1a0>
 8001856:	9b03      	ldr	r3, [sp, #12]
 8001858:	3307      	adds	r3, #7
 800185a:	f023 0307 	bic.w	r3, r3, #7
 800185e:	3308      	adds	r3, #8
 8001860:	9303      	str	r3, [sp, #12]
 8001862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001864:	444b      	add	r3, r9
 8001866:	9309      	str	r3, [sp, #36]	; 0x24
 8001868:	e76d      	b.n	8001746 <_svfiprintf_r+0x4a>
 800186a:	fb05 3202 	mla	r2, r5, r2, r3
 800186e:	2001      	movs	r0, #1
 8001870:	460f      	mov	r7, r1
 8001872:	e7a6      	b.n	80017c2 <_svfiprintf_r+0xc6>
 8001874:	2300      	movs	r3, #0
 8001876:	250a      	movs	r5, #10
 8001878:	4619      	mov	r1, r3
 800187a:	3701      	adds	r7, #1
 800187c:	9305      	str	r3, [sp, #20]
 800187e:	4638      	mov	r0, r7
 8001880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001884:	3a30      	subs	r2, #48	; 0x30
 8001886:	2a09      	cmp	r2, #9
 8001888:	d903      	bls.n	8001892 <_svfiprintf_r+0x196>
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0c8      	beq.n	8001820 <_svfiprintf_r+0x124>
 800188e:	9105      	str	r1, [sp, #20]
 8001890:	e7c6      	b.n	8001820 <_svfiprintf_r+0x124>
 8001892:	fb05 2101 	mla	r1, r5, r1, r2
 8001896:	2301      	movs	r3, #1
 8001898:	4607      	mov	r7, r0
 800189a:	e7f0      	b.n	800187e <_svfiprintf_r+0x182>
 800189c:	ab03      	add	r3, sp, #12
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	4622      	mov	r2, r4
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_svfiprintf_r+0x1ec>)
 80018a4:	a904      	add	r1, sp, #16
 80018a6:	4640      	mov	r0, r8
 80018a8:	f3af 8000 	nop.w
 80018ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018b0:	4681      	mov	r9, r0
 80018b2:	d1d6      	bne.n	8001862 <_svfiprintf_r+0x166>
 80018b4:	89a3      	ldrh	r3, [r4, #12]
 80018b6:	065b      	lsls	r3, r3, #25
 80018b8:	f53f af35 	bmi.w	8001726 <_svfiprintf_r+0x2a>
 80018bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018be:	b01d      	add	sp, #116	; 0x74
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018c4:	ab03      	add	r3, sp, #12
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4622      	mov	r2, r4
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_svfiprintf_r+0x1ec>)
 80018cc:	a904      	add	r1, sp, #16
 80018ce:	4640      	mov	r0, r8
 80018d0:	f000 f882 	bl	80019d8 <_printf_i>
 80018d4:	e7ea      	b.n	80018ac <_svfiprintf_r+0x1b0>
 80018d6:	bf00      	nop
 80018d8:	08001e74 	.word	0x08001e74
 80018dc:	08001e7a 	.word	0x08001e7a
 80018e0:	08001e7e 	.word	0x08001e7e
 80018e4:	00000000 	.word	0x00000000
 80018e8:	08001649 	.word	0x08001649

080018ec <_printf_common>:
 80018ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f0:	4691      	mov	r9, r2
 80018f2:	461f      	mov	r7, r3
 80018f4:	688a      	ldr	r2, [r1, #8]
 80018f6:	690b      	ldr	r3, [r1, #16]
 80018f8:	4606      	mov	r6, r0
 80018fa:	4293      	cmp	r3, r2
 80018fc:	bfb8      	it	lt
 80018fe:	4613      	movlt	r3, r2
 8001900:	f8c9 3000 	str.w	r3, [r9]
 8001904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001908:	460c      	mov	r4, r1
 800190a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800190e:	b112      	cbz	r2, 8001916 <_printf_common+0x2a>
 8001910:	3301      	adds	r3, #1
 8001912:	f8c9 3000 	str.w	r3, [r9]
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	0699      	lsls	r1, r3, #26
 800191a:	bf42      	ittt	mi
 800191c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001920:	3302      	addmi	r3, #2
 8001922:	f8c9 3000 	strmi.w	r3, [r9]
 8001926:	6825      	ldr	r5, [r4, #0]
 8001928:	f015 0506 	ands.w	r5, r5, #6
 800192c:	d107      	bne.n	800193e <_printf_common+0x52>
 800192e:	f104 0a19 	add.w	sl, r4, #25
 8001932:	68e3      	ldr	r3, [r4, #12]
 8001934:	f8d9 2000 	ldr.w	r2, [r9]
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	42ab      	cmp	r3, r5
 800193c:	dc29      	bgt.n	8001992 <_printf_common+0xa6>
 800193e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	3300      	adds	r3, #0
 8001946:	bf18      	it	ne
 8001948:	2301      	movne	r3, #1
 800194a:	0692      	lsls	r2, r2, #26
 800194c:	d42e      	bmi.n	80019ac <_printf_common+0xc0>
 800194e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001952:	4639      	mov	r1, r7
 8001954:	4630      	mov	r0, r6
 8001956:	47c0      	blx	r8
 8001958:	3001      	adds	r0, #1
 800195a:	d021      	beq.n	80019a0 <_printf_common+0xb4>
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	68e5      	ldr	r5, [r4, #12]
 8001960:	f003 0306 	and.w	r3, r3, #6
 8001964:	2b04      	cmp	r3, #4
 8001966:	bf18      	it	ne
 8001968:	2500      	movne	r5, #0
 800196a:	f8d9 2000 	ldr.w	r2, [r9]
 800196e:	f04f 0900 	mov.w	r9, #0
 8001972:	bf08      	it	eq
 8001974:	1aad      	subeq	r5, r5, r2
 8001976:	68a3      	ldr	r3, [r4, #8]
 8001978:	6922      	ldr	r2, [r4, #16]
 800197a:	bf08      	it	eq
 800197c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001980:	4293      	cmp	r3, r2
 8001982:	bfc4      	itt	gt
 8001984:	1a9b      	subgt	r3, r3, r2
 8001986:	18ed      	addgt	r5, r5, r3
 8001988:	341a      	adds	r4, #26
 800198a:	454d      	cmp	r5, r9
 800198c:	d11a      	bne.n	80019c4 <_printf_common+0xd8>
 800198e:	2000      	movs	r0, #0
 8001990:	e008      	b.n	80019a4 <_printf_common+0xb8>
 8001992:	2301      	movs	r3, #1
 8001994:	4652      	mov	r2, sl
 8001996:	4639      	mov	r1, r7
 8001998:	4630      	mov	r0, r6
 800199a:	47c0      	blx	r8
 800199c:	3001      	adds	r0, #1
 800199e:	d103      	bne.n	80019a8 <_printf_common+0xbc>
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a8:	3501      	adds	r5, #1
 80019aa:	e7c2      	b.n	8001932 <_printf_common+0x46>
 80019ac:	2030      	movs	r0, #48	; 0x30
 80019ae:	18e1      	adds	r1, r4, r3
 80019b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019ba:	4422      	add	r2, r4
 80019bc:	3302      	adds	r3, #2
 80019be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019c2:	e7c4      	b.n	800194e <_printf_common+0x62>
 80019c4:	2301      	movs	r3, #1
 80019c6:	4622      	mov	r2, r4
 80019c8:	4639      	mov	r1, r7
 80019ca:	4630      	mov	r0, r6
 80019cc:	47c0      	blx	r8
 80019ce:	3001      	adds	r0, #1
 80019d0:	d0e6      	beq.n	80019a0 <_printf_common+0xb4>
 80019d2:	f109 0901 	add.w	r9, r9, #1
 80019d6:	e7d8      	b.n	800198a <_printf_common+0x9e>

080019d8 <_printf_i>:
 80019d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80019e0:	460c      	mov	r4, r1
 80019e2:	7e09      	ldrb	r1, [r1, #24]
 80019e4:	b085      	sub	sp, #20
 80019e6:	296e      	cmp	r1, #110	; 0x6e
 80019e8:	4617      	mov	r7, r2
 80019ea:	4606      	mov	r6, r0
 80019ec:	4698      	mov	r8, r3
 80019ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019f0:	f000 80b3 	beq.w	8001b5a <_printf_i+0x182>
 80019f4:	d822      	bhi.n	8001a3c <_printf_i+0x64>
 80019f6:	2963      	cmp	r1, #99	; 0x63
 80019f8:	d036      	beq.n	8001a68 <_printf_i+0x90>
 80019fa:	d80a      	bhi.n	8001a12 <_printf_i+0x3a>
 80019fc:	2900      	cmp	r1, #0
 80019fe:	f000 80b9 	beq.w	8001b74 <_printf_i+0x19c>
 8001a02:	2958      	cmp	r1, #88	; 0x58
 8001a04:	f000 8083 	beq.w	8001b0e <_printf_i+0x136>
 8001a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001a10:	e032      	b.n	8001a78 <_printf_i+0xa0>
 8001a12:	2964      	cmp	r1, #100	; 0x64
 8001a14:	d001      	beq.n	8001a1a <_printf_i+0x42>
 8001a16:	2969      	cmp	r1, #105	; 0x69
 8001a18:	d1f6      	bne.n	8001a08 <_printf_i+0x30>
 8001a1a:	6820      	ldr	r0, [r4, #0]
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	0605      	lsls	r5, r0, #24
 8001a20:	f103 0104 	add.w	r1, r3, #4
 8001a24:	d52a      	bpl.n	8001a7c <_printf_i+0xa4>
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da03      	bge.n	8001a36 <_printf_i+0x5e>
 8001a2e:	222d      	movs	r2, #45	; 0x2d
 8001a30:	425b      	negs	r3, r3
 8001a32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <_printf_i+0x21c>)
 8001a38:	220a      	movs	r2, #10
 8001a3a:	e039      	b.n	8001ab0 <_printf_i+0xd8>
 8001a3c:	2973      	cmp	r1, #115	; 0x73
 8001a3e:	f000 809d 	beq.w	8001b7c <_printf_i+0x1a4>
 8001a42:	d808      	bhi.n	8001a56 <_printf_i+0x7e>
 8001a44:	296f      	cmp	r1, #111	; 0x6f
 8001a46:	d020      	beq.n	8001a8a <_printf_i+0xb2>
 8001a48:	2970      	cmp	r1, #112	; 0x70
 8001a4a:	d1dd      	bne.n	8001a08 <_printf_i+0x30>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	f043 0320 	orr.w	r3, r3, #32
 8001a52:	6023      	str	r3, [r4, #0]
 8001a54:	e003      	b.n	8001a5e <_printf_i+0x86>
 8001a56:	2975      	cmp	r1, #117	; 0x75
 8001a58:	d017      	beq.n	8001a8a <_printf_i+0xb2>
 8001a5a:	2978      	cmp	r1, #120	; 0x78
 8001a5c:	d1d4      	bne.n	8001a08 <_printf_i+0x30>
 8001a5e:	2378      	movs	r3, #120	; 0x78
 8001a60:	4865      	ldr	r0, [pc, #404]	; (8001bf8 <_printf_i+0x220>)
 8001a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a66:	e055      	b.n	8001b14 <_printf_i+0x13c>
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a6e:	1d19      	adds	r1, r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6011      	str	r1, [r2, #0]
 8001a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e08c      	b.n	8001b96 <_printf_i+0x1be>
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a82:	6011      	str	r1, [r2, #0]
 8001a84:	bf18      	it	ne
 8001a86:	b21b      	sxthne	r3, r3
 8001a88:	e7cf      	b.n	8001a2a <_printf_i+0x52>
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	6825      	ldr	r5, [r4, #0]
 8001a8e:	1d18      	adds	r0, r3, #4
 8001a90:	6010      	str	r0, [r2, #0]
 8001a92:	0628      	lsls	r0, r5, #24
 8001a94:	d501      	bpl.n	8001a9a <_printf_i+0xc2>
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e002      	b.n	8001aa0 <_printf_i+0xc8>
 8001a9a:	0668      	lsls	r0, r5, #25
 8001a9c:	d5fb      	bpl.n	8001a96 <_printf_i+0xbe>
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	296f      	cmp	r1, #111	; 0x6f
 8001aa2:	bf14      	ite	ne
 8001aa4:	220a      	movne	r2, #10
 8001aa6:	2208      	moveq	r2, #8
 8001aa8:	4852      	ldr	r0, [pc, #328]	; (8001bf4 <_printf_i+0x21c>)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ab0:	6865      	ldr	r5, [r4, #4]
 8001ab2:	2d00      	cmp	r5, #0
 8001ab4:	60a5      	str	r5, [r4, #8]
 8001ab6:	f2c0 8095 	blt.w	8001be4 <_printf_i+0x20c>
 8001aba:	6821      	ldr	r1, [r4, #0]
 8001abc:	f021 0104 	bic.w	r1, r1, #4
 8001ac0:	6021      	str	r1, [r4, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d13d      	bne.n	8001b42 <_printf_i+0x16a>
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	f040 808e 	bne.w	8001be8 <_printf_i+0x210>
 8001acc:	4665      	mov	r5, ip
 8001ace:	2a08      	cmp	r2, #8
 8001ad0:	d10b      	bne.n	8001aea <_printf_i+0x112>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	07db      	lsls	r3, r3, #31
 8001ad6:	d508      	bpl.n	8001aea <_printf_i+0x112>
 8001ad8:	6923      	ldr	r3, [r4, #16]
 8001ada:	6862      	ldr	r2, [r4, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	bfde      	ittt	le
 8001ae0:	2330      	movle	r3, #48	; 0x30
 8001ae2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ae6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001aea:	ebac 0305 	sub.w	r3, ip, r5
 8001aee:	6123      	str	r3, [r4, #16]
 8001af0:	f8cd 8000 	str.w	r8, [sp]
 8001af4:	463b      	mov	r3, r7
 8001af6:	aa03      	add	r2, sp, #12
 8001af8:	4621      	mov	r1, r4
 8001afa:	4630      	mov	r0, r6
 8001afc:	f7ff fef6 	bl	80018ec <_printf_common>
 8001b00:	3001      	adds	r0, #1
 8001b02:	d14d      	bne.n	8001ba0 <_printf_i+0x1c8>
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	b005      	add	sp, #20
 8001b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b0e:	4839      	ldr	r0, [pc, #228]	; (8001bf4 <_printf_i+0x21c>)
 8001b10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001b14:	6813      	ldr	r3, [r2, #0]
 8001b16:	6821      	ldr	r1, [r4, #0]
 8001b18:	1d1d      	adds	r5, r3, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6015      	str	r5, [r2, #0]
 8001b1e:	060a      	lsls	r2, r1, #24
 8001b20:	d50b      	bpl.n	8001b3a <_printf_i+0x162>
 8001b22:	07ca      	lsls	r2, r1, #31
 8001b24:	bf44      	itt	mi
 8001b26:	f041 0120 	orrmi.w	r1, r1, #32
 8001b2a:	6021      	strmi	r1, [r4, #0]
 8001b2c:	b91b      	cbnz	r3, 8001b36 <_printf_i+0x15e>
 8001b2e:	6822      	ldr	r2, [r4, #0]
 8001b30:	f022 0220 	bic.w	r2, r2, #32
 8001b34:	6022      	str	r2, [r4, #0]
 8001b36:	2210      	movs	r2, #16
 8001b38:	e7b7      	b.n	8001aaa <_printf_i+0xd2>
 8001b3a:	064d      	lsls	r5, r1, #25
 8001b3c:	bf48      	it	mi
 8001b3e:	b29b      	uxthmi	r3, r3
 8001b40:	e7ef      	b.n	8001b22 <_printf_i+0x14a>
 8001b42:	4665      	mov	r5, ip
 8001b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b48:	fb02 3311 	mls	r3, r2, r1, r3
 8001b4c:	5cc3      	ldrb	r3, [r0, r3]
 8001b4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b52:	460b      	mov	r3, r1
 8001b54:	2900      	cmp	r1, #0
 8001b56:	d1f5      	bne.n	8001b44 <_printf_i+0x16c>
 8001b58:	e7b9      	b.n	8001ace <_printf_i+0xf6>
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	6825      	ldr	r5, [r4, #0]
 8001b5e:	1d18      	adds	r0, r3, #4
 8001b60:	6961      	ldr	r1, [r4, #20]
 8001b62:	6010      	str	r0, [r2, #0]
 8001b64:	0628      	lsls	r0, r5, #24
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	d501      	bpl.n	8001b6e <_printf_i+0x196>
 8001b6a:	6019      	str	r1, [r3, #0]
 8001b6c:	e002      	b.n	8001b74 <_printf_i+0x19c>
 8001b6e:	066a      	lsls	r2, r5, #25
 8001b70:	d5fb      	bpl.n	8001b6a <_printf_i+0x192>
 8001b72:	8019      	strh	r1, [r3, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	4665      	mov	r5, ip
 8001b78:	6123      	str	r3, [r4, #16]
 8001b7a:	e7b9      	b.n	8001af0 <_printf_i+0x118>
 8001b7c:	6813      	ldr	r3, [r2, #0]
 8001b7e:	1d19      	adds	r1, r3, #4
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	681d      	ldr	r5, [r3, #0]
 8001b84:	6862      	ldr	r2, [r4, #4]
 8001b86:	2100      	movs	r1, #0
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f000 f837 	bl	8001bfc <memchr>
 8001b8e:	b108      	cbz	r0, 8001b94 <_printf_i+0x1bc>
 8001b90:	1b40      	subs	r0, r0, r5
 8001b92:	6060      	str	r0, [r4, #4]
 8001b94:	6863      	ldr	r3, [r4, #4]
 8001b96:	6123      	str	r3, [r4, #16]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b9e:	e7a7      	b.n	8001af0 <_printf_i+0x118>
 8001ba0:	6923      	ldr	r3, [r4, #16]
 8001ba2:	462a      	mov	r2, r5
 8001ba4:	4639      	mov	r1, r7
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	47c0      	blx	r8
 8001baa:	3001      	adds	r0, #1
 8001bac:	d0aa      	beq.n	8001b04 <_printf_i+0x12c>
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	079b      	lsls	r3, r3, #30
 8001bb2:	d413      	bmi.n	8001bdc <_printf_i+0x204>
 8001bb4:	68e0      	ldr	r0, [r4, #12]
 8001bb6:	9b03      	ldr	r3, [sp, #12]
 8001bb8:	4298      	cmp	r0, r3
 8001bba:	bfb8      	it	lt
 8001bbc:	4618      	movlt	r0, r3
 8001bbe:	e7a3      	b.n	8001b08 <_printf_i+0x130>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	4639      	mov	r1, r7
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	47c0      	blx	r8
 8001bca:	3001      	adds	r0, #1
 8001bcc:	d09a      	beq.n	8001b04 <_printf_i+0x12c>
 8001bce:	3501      	adds	r5, #1
 8001bd0:	68e3      	ldr	r3, [r4, #12]
 8001bd2:	9a03      	ldr	r2, [sp, #12]
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	42ab      	cmp	r3, r5
 8001bd8:	dcf2      	bgt.n	8001bc0 <_printf_i+0x1e8>
 8001bda:	e7eb      	b.n	8001bb4 <_printf_i+0x1dc>
 8001bdc:	2500      	movs	r5, #0
 8001bde:	f104 0919 	add.w	r9, r4, #25
 8001be2:	e7f5      	b.n	8001bd0 <_printf_i+0x1f8>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ac      	bne.n	8001b42 <_printf_i+0x16a>
 8001be8:	7803      	ldrb	r3, [r0, #0]
 8001bea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf2:	e76c      	b.n	8001ace <_printf_i+0xf6>
 8001bf4:	08001e85 	.word	0x08001e85
 8001bf8:	08001e96 	.word	0x08001e96

08001bfc <memchr>:
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	4402      	add	r2, r0
 8001c02:	4290      	cmp	r0, r2
 8001c04:	4603      	mov	r3, r0
 8001c06:	d101      	bne.n	8001c0c <memchr+0x10>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e003      	b.n	8001c14 <memchr+0x18>
 8001c0c:	781c      	ldrb	r4, [r3, #0]
 8001c0e:	3001      	adds	r0, #1
 8001c10:	428c      	cmp	r4, r1
 8001c12:	d1f6      	bne.n	8001c02 <memchr+0x6>
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd10      	pop	{r4, pc}

08001c18 <memcpy>:
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	1e43      	subs	r3, r0, #1
 8001c1c:	440a      	add	r2, r1
 8001c1e:	4291      	cmp	r1, r2
 8001c20:	d100      	bne.n	8001c24 <memcpy+0xc>
 8001c22:	bd10      	pop	{r4, pc}
 8001c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c2c:	e7f7      	b.n	8001c1e <memcpy+0x6>

08001c2e <memmove>:
 8001c2e:	4288      	cmp	r0, r1
 8001c30:	b510      	push	{r4, lr}
 8001c32:	eb01 0302 	add.w	r3, r1, r2
 8001c36:	d807      	bhi.n	8001c48 <memmove+0x1a>
 8001c38:	1e42      	subs	r2, r0, #1
 8001c3a:	4299      	cmp	r1, r3
 8001c3c:	d00a      	beq.n	8001c54 <memmove+0x26>
 8001c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001c46:	e7f8      	b.n	8001c3a <memmove+0xc>
 8001c48:	4283      	cmp	r3, r0
 8001c4a:	d9f5      	bls.n	8001c38 <memmove+0xa>
 8001c4c:	1881      	adds	r1, r0, r2
 8001c4e:	1ad2      	subs	r2, r2, r3
 8001c50:	42d3      	cmn	r3, r2
 8001c52:	d100      	bne.n	8001c56 <memmove+0x28>
 8001c54:	bd10      	pop	{r4, pc}
 8001c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001c5e:	e7f7      	b.n	8001c50 <memmove+0x22>

08001c60 <_free_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4605      	mov	r5, r0
 8001c64:	2900      	cmp	r1, #0
 8001c66:	d043      	beq.n	8001cf0 <_free_r+0x90>
 8001c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c6c:	1f0c      	subs	r4, r1, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bfb8      	it	lt
 8001c72:	18e4      	addlt	r4, r4, r3
 8001c74:	f000 f8d0 	bl	8001e18 <__malloc_lock>
 8001c78:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <_free_r+0x94>)
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	b933      	cbnz	r3, 8001c8e <_free_r+0x2e>
 8001c80:	6063      	str	r3, [r4, #4]
 8001c82:	6014      	str	r4, [r2, #0]
 8001c84:	4628      	mov	r0, r5
 8001c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c8a:	f000 b8c6 	b.w	8001e1a <__malloc_unlock>
 8001c8e:	42a3      	cmp	r3, r4
 8001c90:	d90b      	bls.n	8001caa <_free_r+0x4a>
 8001c92:	6821      	ldr	r1, [r4, #0]
 8001c94:	1862      	adds	r2, r4, r1
 8001c96:	4293      	cmp	r3, r2
 8001c98:	bf01      	itttt	eq
 8001c9a:	681a      	ldreq	r2, [r3, #0]
 8001c9c:	685b      	ldreq	r3, [r3, #4]
 8001c9e:	1852      	addeq	r2, r2, r1
 8001ca0:	6022      	streq	r2, [r4, #0]
 8001ca2:	6063      	str	r3, [r4, #4]
 8001ca4:	6004      	str	r4, [r0, #0]
 8001ca6:	e7ed      	b.n	8001c84 <_free_r+0x24>
 8001ca8:	4613      	mov	r3, r2
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	b10a      	cbz	r2, 8001cb2 <_free_r+0x52>
 8001cae:	42a2      	cmp	r2, r4
 8001cb0:	d9fa      	bls.n	8001ca8 <_free_r+0x48>
 8001cb2:	6819      	ldr	r1, [r3, #0]
 8001cb4:	1858      	adds	r0, r3, r1
 8001cb6:	42a0      	cmp	r0, r4
 8001cb8:	d10b      	bne.n	8001cd2 <_free_r+0x72>
 8001cba:	6820      	ldr	r0, [r4, #0]
 8001cbc:	4401      	add	r1, r0
 8001cbe:	1858      	adds	r0, r3, r1
 8001cc0:	4282      	cmp	r2, r0
 8001cc2:	6019      	str	r1, [r3, #0]
 8001cc4:	d1de      	bne.n	8001c84 <_free_r+0x24>
 8001cc6:	6810      	ldr	r0, [r2, #0]
 8001cc8:	6852      	ldr	r2, [r2, #4]
 8001cca:	4401      	add	r1, r0
 8001ccc:	6019      	str	r1, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	e7d8      	b.n	8001c84 <_free_r+0x24>
 8001cd2:	d902      	bls.n	8001cda <_free_r+0x7a>
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	602b      	str	r3, [r5, #0]
 8001cd8:	e7d4      	b.n	8001c84 <_free_r+0x24>
 8001cda:	6820      	ldr	r0, [r4, #0]
 8001cdc:	1821      	adds	r1, r4, r0
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	bf01      	itttt	eq
 8001ce2:	6811      	ldreq	r1, [r2, #0]
 8001ce4:	6852      	ldreq	r2, [r2, #4]
 8001ce6:	1809      	addeq	r1, r1, r0
 8001ce8:	6021      	streq	r1, [r4, #0]
 8001cea:	6062      	str	r2, [r4, #4]
 8001cec:	605c      	str	r4, [r3, #4]
 8001cee:	e7c9      	b.n	8001c84 <_free_r+0x24>
 8001cf0:	bd38      	pop	{r3, r4, r5, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000094 	.word	0x20000094

08001cf8 <_malloc_r>:
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	1ccd      	adds	r5, r1, #3
 8001cfc:	f025 0503 	bic.w	r5, r5, #3
 8001d00:	3508      	adds	r5, #8
 8001d02:	2d0c      	cmp	r5, #12
 8001d04:	bf38      	it	cc
 8001d06:	250c      	movcc	r5, #12
 8001d08:	2d00      	cmp	r5, #0
 8001d0a:	4606      	mov	r6, r0
 8001d0c:	db01      	blt.n	8001d12 <_malloc_r+0x1a>
 8001d0e:	42a9      	cmp	r1, r5
 8001d10:	d903      	bls.n	8001d1a <_malloc_r+0x22>
 8001d12:	230c      	movs	r3, #12
 8001d14:	6033      	str	r3, [r6, #0]
 8001d16:	2000      	movs	r0, #0
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
 8001d1a:	f000 f87d 	bl	8001e18 <__malloc_lock>
 8001d1e:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <_malloc_r+0xac>)
 8001d20:	6814      	ldr	r4, [r2, #0]
 8001d22:	4621      	mov	r1, r4
 8001d24:	b991      	cbnz	r1, 8001d4c <_malloc_r+0x54>
 8001d26:	4c20      	ldr	r4, [pc, #128]	; (8001da8 <_malloc_r+0xb0>)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	b91b      	cbnz	r3, 8001d34 <_malloc_r+0x3c>
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	f000 f863 	bl	8001df8 <_sbrk_r>
 8001d32:	6020      	str	r0, [r4, #0]
 8001d34:	4629      	mov	r1, r5
 8001d36:	4630      	mov	r0, r6
 8001d38:	f000 f85e 	bl	8001df8 <_sbrk_r>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d124      	bne.n	8001d8a <_malloc_r+0x92>
 8001d40:	230c      	movs	r3, #12
 8001d42:	4630      	mov	r0, r6
 8001d44:	6033      	str	r3, [r6, #0]
 8001d46:	f000 f868 	bl	8001e1a <__malloc_unlock>
 8001d4a:	e7e4      	b.n	8001d16 <_malloc_r+0x1e>
 8001d4c:	680b      	ldr	r3, [r1, #0]
 8001d4e:	1b5b      	subs	r3, r3, r5
 8001d50:	d418      	bmi.n	8001d84 <_malloc_r+0x8c>
 8001d52:	2b0b      	cmp	r3, #11
 8001d54:	d90f      	bls.n	8001d76 <_malloc_r+0x7e>
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	18cc      	adds	r4, r1, r3
 8001d5a:	50cd      	str	r5, [r1, r3]
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f000 f85c 	bl	8001e1a <__malloc_unlock>
 8001d62:	f104 000b 	add.w	r0, r4, #11
 8001d66:	1d23      	adds	r3, r4, #4
 8001d68:	f020 0007 	bic.w	r0, r0, #7
 8001d6c:	1ac3      	subs	r3, r0, r3
 8001d6e:	d0d3      	beq.n	8001d18 <_malloc_r+0x20>
 8001d70:	425a      	negs	r2, r3
 8001d72:	50e2      	str	r2, [r4, r3]
 8001d74:	e7d0      	b.n	8001d18 <_malloc_r+0x20>
 8001d76:	684b      	ldr	r3, [r1, #4]
 8001d78:	428c      	cmp	r4, r1
 8001d7a:	bf16      	itet	ne
 8001d7c:	6063      	strne	r3, [r4, #4]
 8001d7e:	6013      	streq	r3, [r2, #0]
 8001d80:	460c      	movne	r4, r1
 8001d82:	e7eb      	b.n	8001d5c <_malloc_r+0x64>
 8001d84:	460c      	mov	r4, r1
 8001d86:	6849      	ldr	r1, [r1, #4]
 8001d88:	e7cc      	b.n	8001d24 <_malloc_r+0x2c>
 8001d8a:	1cc4      	adds	r4, r0, #3
 8001d8c:	f024 0403 	bic.w	r4, r4, #3
 8001d90:	42a0      	cmp	r0, r4
 8001d92:	d005      	beq.n	8001da0 <_malloc_r+0xa8>
 8001d94:	1a21      	subs	r1, r4, r0
 8001d96:	4630      	mov	r0, r6
 8001d98:	f000 f82e 	bl	8001df8 <_sbrk_r>
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	d0cf      	beq.n	8001d40 <_malloc_r+0x48>
 8001da0:	6025      	str	r5, [r4, #0]
 8001da2:	e7db      	b.n	8001d5c <_malloc_r+0x64>
 8001da4:	20000094 	.word	0x20000094
 8001da8:	20000098 	.word	0x20000098

08001dac <_realloc_r>:
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	4607      	mov	r7, r0
 8001db0:	4614      	mov	r4, r2
 8001db2:	460e      	mov	r6, r1
 8001db4:	b921      	cbnz	r1, 8001dc0 <_realloc_r+0x14>
 8001db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001dba:	4611      	mov	r1, r2
 8001dbc:	f7ff bf9c 	b.w	8001cf8 <_malloc_r>
 8001dc0:	b922      	cbnz	r2, 8001dcc <_realloc_r+0x20>
 8001dc2:	f7ff ff4d 	bl	8001c60 <_free_r>
 8001dc6:	4625      	mov	r5, r4
 8001dc8:	4628      	mov	r0, r5
 8001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dcc:	f000 f826 	bl	8001e1c <_malloc_usable_size_r>
 8001dd0:	42a0      	cmp	r0, r4
 8001dd2:	d20f      	bcs.n	8001df4 <_realloc_r+0x48>
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	f7ff ff8e 	bl	8001cf8 <_malloc_r>
 8001ddc:	4605      	mov	r5, r0
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d0f2      	beq.n	8001dc8 <_realloc_r+0x1c>
 8001de2:	4631      	mov	r1, r6
 8001de4:	4622      	mov	r2, r4
 8001de6:	f7ff ff17 	bl	8001c18 <memcpy>
 8001dea:	4631      	mov	r1, r6
 8001dec:	4638      	mov	r0, r7
 8001dee:	f7ff ff37 	bl	8001c60 <_free_r>
 8001df2:	e7e9      	b.n	8001dc8 <_realloc_r+0x1c>
 8001df4:	4635      	mov	r5, r6
 8001df6:	e7e7      	b.n	8001dc8 <_realloc_r+0x1c>

08001df8 <_sbrk_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	4c05      	ldr	r4, [pc, #20]	; (8001e14 <_sbrk_r+0x1c>)
 8001dfe:	4605      	mov	r5, r0
 8001e00:	4608      	mov	r0, r1
 8001e02:	6023      	str	r3, [r4, #0]
 8001e04:	f7fe fc5a 	bl	80006bc <_sbrk>
 8001e08:	1c43      	adds	r3, r0, #1
 8001e0a:	d102      	bne.n	8001e12 <_sbrk_r+0x1a>
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	b103      	cbz	r3, 8001e12 <_sbrk_r+0x1a>
 8001e10:	602b      	str	r3, [r5, #0]
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
 8001e14:	200000a0 	.word	0x200000a0

08001e18 <__malloc_lock>:
 8001e18:	4770      	bx	lr

08001e1a <__malloc_unlock>:
 8001e1a:	4770      	bx	lr

08001e1c <_malloc_usable_size_r>:
 8001e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e20:	1f18      	subs	r0, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bfbc      	itt	lt
 8001e26:	580b      	ldrlt	r3, [r1, r0]
 8001e28:	18c0      	addlt	r0, r0, r3
 8001e2a:	4770      	bx	lr

08001e2c <_init>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	bf00      	nop
 8001e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e32:	bc08      	pop	{r3}
 8001e34:	469e      	mov	lr, r3
 8001e36:	4770      	bx	lr

08001e38 <_fini>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr
